; Listing generated by Microsoft (R) Optimizing Compiler Version 19.11.25547.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?Ruletka_plansza_kolor_col@@3PAHA		; Ruletka_plansza_kolor_col
PUBLIC	?iloœæ_minimalna_obrotów_ruletki@@3HA		; iloœæ_minimalna_obrotów_ruletki
PUBLIC	?iloœæ_max_dodatkowych_obrotów_ruletki@@3HA	; iloœæ_max_dodatkowych_obrotów_ruletki
PUBLIC	?czas_przeskoku_kulki_szybki@@3HA		; czas_przeskoku_kulki_szybki
PUBLIC	?czas_przeskoku_kulki_wolny@@3HA		; czas_przeskoku_kulki_wolny
PUBLIC	?czas_przerwy_dzwiêku@@3HA			; czas_przerwy_dzwiêku
PUBLIC	?styl_liczenia_wygranej@@3HA			; styl_liczenia_wygranej
PUBLIC	?kwota_pocz¹tkowa@@3HA				; kwota_pocz¹tkowa
PUBLIC	?stan_dŸwiêków@@3HA				; stan_dŸwiêków
PUBLIC	?czy_kontynuowaæ_grê@@3HA			; czy_kontynuowaæ_grê
PUBLIC	?g³os_odczytu_numeru@@3HA			; g³os_odczytu_numeru
PUBLIC	?g³os_szybkoœæ_odczytu_numeru@@3HA		; g³os_szybkoœæ_odczytu_numeru
PUBLIC	?Czas@@3U_SYSTEMTIME@@A				; Czas
PUBLIC	?G³osyKompletne@@3_NA				; G³osyKompletne
PUBLIC	?EfektyKompletne@@3_NA				; EfektyKompletne
_BSS	SEGMENT
?Czas@@3U_SYSTEMTIME@@A DB 010H DUP (?)			; Czas
_BSS	ENDS
_DATA	SEGMENT
?Ruletka_plansza_kolor_col@@3PAHA DD 02H		; Ruletka_plansza_kolor_col
	DD	04H
	DD	08H
	DD	04H
	DD	08H
	DD	04H
	DD	08H
	DD	04H
	DD	08H
	DD	04H
	DD	08H
	DD	08H
	DD	04H
	DD	08H
	DD	04H
	DD	08H
	DD	04H
	DD	08H
	DD	04H
	DD	04H
	DD	08H
	DD	04H
	DD	08H
	DD	04H
	DD	08H
	DD	04H
	DD	08H
	DD	04H
	DD	08H
	DD	08H
	DD	04H
	DD	08H
	DD	04H
	DD	08H
	DD	04H
	DD	08H
	DD	04H
?iloœæ_minimalna_obrotów_ruletki@@3HA DD 02H		; iloœæ_minimalna_obrotów_ruletki
?iloœæ_max_dodatkowych_obrotów_ruletki@@3HA DD 03H	; iloœæ_max_dodatkowych_obrotów_ruletki
?czas_przeskoku_kulki_szybki@@3HA DD 032H		; czas_przeskoku_kulki_szybki
?czas_przeskoku_kulki_wolny@@3HA DD 04bH		; czas_przeskoku_kulki_wolny
?czas_przerwy_dzwiêku@@3HA DD 01f4H			; czas_przerwy_dzwiêku
?styl_liczenia_wygranej@@3HA DD 01H			; styl_liczenia_wygranej
?kwota_pocz¹tkowa@@3HA DD 03e8H				; kwota_pocz¹tkowa
?stan_dŸwiêków@@3HA DD 01H				; stan_dŸwiêków
?czy_kontynuowaæ_grê@@3HA DD 01H			; czy_kontynuowaæ_grê
?g³os_odczytu_numeru@@3HA DD 01H			; g³os_odczytu_numeru
?g³os_szybkoœæ_odczytu_numeru@@3HA DD 04H		; g³os_szybkoœæ_odczytu_numeru
?G³osyKompletne@@3_NA DB 01H				; G³osyKompletne
?EfektyKompletne@@3_NA DB 01H				; EfektyKompletne
_DATA	ENDS
CONST	SEGMENT
?Ruletka_ko³o@@3QBHB DD 00H				; Ruletka_ko³o
	DD	020H
	DD	0fH
	DD	013H
	DD	04H
	DD	015H
	DD	02H
	DD	019H
	DD	011H
	DD	022H
	DD	06H
	DD	01bH
	DD	0dH
	DD	024H
	DD	0bH
	DD	01eH
	DD	08H
	DD	017H
	DD	0aH
	DD	05H
	DD	018H
	DD	010H
	DD	021H
	DD	01H
	DD	014H
	DD	0eH
	DD	01fH
	DD	09H
	DD	016H
	DD	012H
	DD	01dH
	DD	07H
	DD	01cH
	DD	0cH
	DD	023H
	DD	03H
	DD	01aH
	ORG $+4
?Ruletka_plansza_kolor@@3QBDB DB 067H			; Ruletka_plansza_kolor
	DB	072H
	DB	062H
	DB	072H
	DB	062H
	DB	072H
	DB	062H
	DB	072H
	DB	062H
	DB	072H
	DB	062H
	DB	062H
	DB	072H
	DB	062H
	DB	072H
	DB	062H
	DB	072H
	DB	062H
	DB	072H
	DB	072H
	DB	062H
	DB	072H
	DB	062H
	DB	072H
	DB	062H
	DB	072H
	DB	062H
	DB	072H
	DB	062H
	DB	062H
	DB	072H
	DB	062H
	DB	072H
	DB	062H
	DB	072H
	DB	062H
	DB	072H
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	??0exception@std@@QEAA@QEBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QEAA@AEBV01@@Z		; std::exception::exception
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	?max@?$numeric_limits@_J@std@@SA_JXZ		; std::numeric_limits<__int64>::max
PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
PUBLIC	?compare@?$char_traits@D@std@@SAHQEBD0_K@Z	; std::char_traits<char>::compare
PUBLIC	?length@?$char_traits@D@std@@SA_KQEBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z	; std::char_traits<char>::copy
PUBLIC	?find@?$char_traits@D@std@@SAPEBDQEBD_KAEBD@Z	; std::char_traits<char>::find
PUBLIC	?move@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAPEADQEAD_KD@Z	; std::char_traits<char>::assign
PUBLIC	?assign@?$char_traits@D@std@@SAXAEADAEBD@Z	; std::char_traits<char>::assign
PUBLIC	?eq@?$char_traits@D@std@@SA_NAEBD0@Z		; std::char_traits<char>::eq
PUBLIC	?to_char_type@?$char_traits@D@std@@SADAEBH@Z	; std::char_traits<char>::to_char_type
PUBLIC	?to_int_type@?$char_traits@D@std@@SAHAEBD@Z	; std::char_traits<char>::to_int_type
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z	; std::char_traits<char>::eq_int_type
PUBLIC	?not_eof@?$char_traits@D@std@@SAHAEBH@Z		; std::char_traits<char>::not_eof
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
PUBLIC	??0_Container_proxy@std@@QEAA@XZ		; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QEAA@XZ		; std::_Container_base12::_Container_base12
PUBLIC	??1_Container_base12@std@@QEAA@XZ		; std::_Container_base12::~_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QEAAXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Swap_all@_Container_base12@std@@QEAAXAEAU12@@Z ; std::_Container_base12::_Swap_all
PUBLIC	??0_Iterator_base12@std@@QEAA@XZ		; std::_Iterator_base12::_Iterator_base12
PUBLIC	??1_Iterator_base12@std@@QEAA@XZ		; std::_Iterator_base12::~_Iterator_base12
PUBLIC	?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	?_Orphan_me@_Iterator_base12@std@@QEAAXXZ	; std::_Iterator_base12::_Orphan_me
PUBLIC	?_Allocate@std@@YAPEAX_K0_N@Z			; std::_Allocate
PUBLIC	?_Deallocate@std@@YAXPEAX_K1@Z			; std::_Deallocate
PUBLIC	??$_Convert_size@_K@std@@YA_K_K@Z		; std::_Convert_size<unsigned __int64>
PUBLIC	??0?$allocator@D@std@@QEAA@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QEAAPEAD_K@Z	; std::allocator<char>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
PUBLIC	?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
PUBLIC	?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
PUBLIC	??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Copy_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEBV?$allocator@D@2@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Copy_alloc
PUBLIC	?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEAV?$allocator@D@2@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Move_alloc
PUBLIC	?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
PUBLIC	?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
PUBLIC	?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all
PUBLIC	?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEAV12@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Swap_all
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	?_Assign_rv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents
PUBLIC	?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal
PUBLIC	?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEBV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KAEBV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KQEBD0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear
PUBLIC	?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
PUBLIC	?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
PUBLIC	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
PUBLIC	?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NQEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Become_small@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Become_small
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	??0bad_cast@std@@QEAA@XZ			; std::bad_cast::bad_cast
PUBLIC	??1bad_cast@std@@UEAA@XZ			; std::bad_cast::~bad_cast
PUBLIC	??0bad_cast@std@@QEAA@AEBV01@@Z			; std::bad_cast::bad_cast
PUBLIC	??_Gbad_cast@std@@UEAAPEAXI@Z			; std::bad_cast::`scalar deleting destructor'
PUBLIC	??1locale@std@@QEAA@XZ				; std::locale::~locale
PUBLIC	?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z	; std::locale::_Getfacet
PUBLIC	??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z ; std::use_facet<std::ctype<char> >
PUBLIC	??$_Fgetc@D@std@@YA_NAEADPEAU_iobuf@@@Z		; std::_Fgetc<char>
PUBLIC	??$_Fputc@D@std@@YA_NDPEAU_iobuf@@@Z		; std::_Fputc<char>
PUBLIC	??$_Ungetc@D@std@@YA_NAEBDPEAU_iobuf@@@Z	; std::_Ungetc<char>
PUBLIC	??0random_device@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::random_device::random_device
PUBLIC	?min@random_device@std@@SAIXZ			; std::random_device::min
PUBLIC	?max@random_device@std@@SAIXZ			; std::random_device::max
PUBLIC	?entropy@random_device@std@@QEAANXZ		; std::random_device::entropy
PUBLIC	??Rrandom_device@std@@QEAAIXZ			; std::random_device::operator()
PUBLIC	?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; Obstaw
PUBLIC	?Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z		; Wczytaj_Kwotê_Zak³adu
PUBLIC	?Zakrêæ_Ruletk¹@@YAHXZ				; Zakrêæ_Ruletk¹
PUBLIC	?SprawdŸ_Zak³ad@@YAHAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBH@Z ; SprawdŸ_Zak³ad
PUBLIC	?Czy_Kontynuowaæ@@YA_NAEAH@Z			; Czy_Kontynuowaæ
PUBLIC	?Wylosuj@@YAHAEBH0@Z				; Wylosuj
PUBLIC	?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Odczytaj_liczbê
PUBLIC	?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; Wczytaj_z_pliku
PUBLIC	?SprawdŸ_Pliki@@YAXXZ				; SprawdŸ_Pliki
PUBLIC	?SprawdŸ_ustawienia@@YAXXZ			; SprawdŸ_ustawienia
PUBLIC	?Change_Col@@YAXAEBH@Z				; Change_Col
PUBLIC	?Hide_Cursor@@YAXXZ				; Hide_Cursor
PUBLIC	?Show_Cursor@@YAXXZ				; Show_Cursor
PUBLIC	main
PUBLIC	??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
PUBLIC	??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >
PUBLIC	?open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXPEBDHH@Z ; std::basic_ofstream<char,std::char_traits<char> >::open
PUBLIC	??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
PUBLIC	??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
PUBLIC	?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
PUBLIC	?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
PUBLIC	?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Lock
PUBLIC	?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock
PUBLIC	?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::overflow
PUBLIC	?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail
PUBLIC	?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ ; std::basic_filebuf<char,std::char_traits<char> >::underflow
PUBLIC	?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ ; std::basic_filebuf<char,std::char_traits<char> >::uflow
PUBLIC	?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
PUBLIC	?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
PUBLIC	?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PEAD_J@Z ; std::basic_filebuf<char,std::char_traits<char> >::setbuf
PUBLIC	?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ ; std::basic_filebuf<char,std::char_traits<char> >::sync
PUBLIC	?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::imbue
PUBLIC	?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init
PUBLIC	?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
PUBLIC	?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEBV?$codecvt@DDU_Mbstatet@@@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
PUBLIC	?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
PUBLIC	?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back
PUBLIC	??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	?__autoclassinit2@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z ; std::basic_ofstream<char,std::char_traits<char> >::__autoclassinit2
PUBLIC	??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z ; std::basic_ofstream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ ; std::basic_ofstream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_fstream<char,std::char_traits<char> >::basic_fstream<char,std::char_traits<char> >
PUBLIC	??1?$basic_fstream@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_fstream<char,std::char_traits<char> >::~basic_fstream<char,std::char_traits<char> >
PUBLIC	?open@?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAXPEBDHH@Z ; std::basic_fstream<char,std::char_traits<char> >::open
PUBLIC	?close@?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAXXZ ; std::basic_fstream<char,std::char_traits<char> >::close
PUBLIC	?__autoclassinit2@?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z ; std::basic_fstream<char,std::char_traits<char> >::__autoclassinit2
PUBLIC	??_G?$basic_fstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z ; std::basic_fstream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAXXZ ; std::basic_fstream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QEAV10@QEBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEBDPEBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEBDXZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
PUBLIC	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::~_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??0?$mersenne_twister@_K$0EA@$0BDI@$0JM@$0BP@$0?EKPNJAKFFGJJOGBH@$0BN@$0BB@$0HBNGHPPPONKGAAAA@$0CF@$0?IBBCAAAAAAAAA@$0CL@@std@@QEAA@_K00@Z ; std::mersenne_twister<unsigned __int64,64,312,156,31,-5403634167711393303,29,17,8202884508482404352,37,-2270628950310912,43>::mersenne_twister<unsigned __int64,64,312,156,31,-5403634167711393303,29,17,8202884508482404352,37,-2270628950310912,43>
PUBLIC	?seed@?$mersenne_twister@_K$0EA@$0BDI@$0JM@$0BP@$0?EKPNJAKFFGJJOGBH@$0BN@$0BB@$0HBNGHPPPONKGAAAA@$0CF@$0?IBBCAAAAAAAAA@$0CL@@std@@QEAAX_K0@Z ; std::mersenne_twister<unsigned __int64,64,312,156,31,-5403634167711393303,29,17,8202884508482404352,37,-2270628950310912,43>::seed
PUBLIC	??0?$mersenne_twister_engine@_K$0EA@$0BDI@$0JM@$0BP@$0?EKPNJAKFFGJJOGBH@$0BN@$0FFFFFFFFFFFFFFFF@$0BB@$0HBNGHPPPONKGAAAA@$0CF@$0?IBBCAAAAAAAAA@$0CL@$0FIFBPECNEMJFHPCN@@std@@QEAA@_K@Z ; std::mersenne_twister_engine<unsigned __int64,64,312,156,31,-5403634167711393303,29,6148914691236517205,17,8202884508482404352,37,-2270628950310912,43,6364136223846793005>::mersenne_twister_engine<unsigned __int64,64,312,156,31,-5403634167711393303,29,6148914691236517205,17,8202884508482404352,37,-2270628950310912,43,6364136223846793005>
PUBLIC	??0?$uniform_int@H@std@@QEAA@HH@Z		; std::uniform_int<int>::uniform_int<int>
PUBLIC	?_Adjust@?$uniform_int@H@std@@CAII@Z		; std::uniform_int<int>::_Adjust
PUBLIC	?_Adjust@?$uniform_int@H@std@@CAIIU?$integral_constant@_N$00@2@@Z ; std::uniform_int<int>::_Adjust
PUBLIC	??0param_type@?$uniform_int@H@std@@QEAA@HH@Z	; std::uniform_int<int>::param_type::param_type
PUBLIC	?_Init@param_type@?$uniform_int@H@std@@QEAAXHH@Z ; std::uniform_int<int>::param_type::_Init
PUBLIC	??0?$uniform_int_distribution@H@std@@QEAA@HH@Z	; std::uniform_int_distribution<int>::uniform_int_distribution<int>
PUBLIC	??$?RVrandom_device@std@@@?$uniform_int@H@std@@QEBAHAEAVrandom_device@1@@Z ; std::uniform_int<int>::operator()<std::random_device>
PUBLIC	??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
PUBLIC	??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
PUBLIC	?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
PUBLIC	?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
PUBLIC	?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
PUBLIC	?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
PUBLIC	?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
PUBLIC	?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXPEBD_KH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init
PUBLIC	?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
PUBLIC	??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	?__autoclassinit2@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::__autoclassinit2
PUBLIC	??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@$$QEAV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Traits_find@U?$char_traits@D@std@@@std@@YA_KQEBD_K101@Z ; std::_Traits_find<std::char_traits<char> >
PUBLIC	??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z		; std::_Min_value<unsigned __int64>
PUBLIC	??$_Unfancy@D@std@@YAPEADPEAD@Z			; std::_Unfancy<char>
PUBLIC	??$addressof@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@@Z ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const >
PUBLIC	??$?9DD@std@@YA_NAEBV?$allocator@D@0@0@Z	; std::operator!=<char,char>
PUBLIC	??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$move@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > & __ptr64>
PUBLIC	??$move@AEAV?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z ; std::move<std::allocator<char> & __ptr64>
PUBLIC	??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>
PUBLIC	??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z		; std::fpos<_Mbstatet>::fpos<_Mbstatet>
PUBLIC	??0?$fpos@U_Mbstatet@@@std@@QEAA@U_Mbstatet@@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
PUBLIC	?state@?$fpos@U_Mbstatet@@@std@@QEBA?AU_Mbstatet@@XZ ; std::fpos<_Mbstatet>::state
PUBLIC	?seekpos@?$fpos@U_Mbstatet@@@std@@QEBA_JXZ	; std::fpos<_Mbstatet>::seekpos
PUBLIC	??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ		; std::fpos<_Mbstatet>::operator __int64
PUBLIC	??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
PUBLIC	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEADPEBU_Container_base12@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
PUBLIC	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::~_String_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z ; std::pointer_traits<char * __ptr64>::pointer_to
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??$addressof@D@std@@YAPEADAEAD@Z		; std::addressof<char>
PUBLIC	??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0@Z ; std::_Pocma<std::allocator<char> >
PUBLIC	??$_Pocca@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@AEBV10@@Z ; std::_Pocca<std::allocator<char> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
PUBLIC	??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z	; std::addressof<char * __ptr64>
PUBLIC	??$destroy@PEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char * __ptr64>
PUBLIC	??$_Max_value@_K@std@@YAAEB_KAEB_K0@Z		; std::_Max_value<unsigned __int64>
PUBLIC	??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??$_Refancy@PEAD$0A@@std@@YAPEADPEAD@Z		; std::_Refancy<char * __ptr64,0>
PUBLIC	??$construct@PEADAEBQEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEADAEBQEAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char * __ptr64,char * __ptr64 const & __ptr64>
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@$$QEAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$_Unfancy@$$CBD@std@@YAPEBDPEBD@Z		; std::_Unfancy<char const >
PUBLIC	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
PUBLIC	??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>
PUBLIC	??$move@AEAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::move<std::basic_istream<char,std::char_traits<char> > & __ptr64>
PUBLIC	??$_Eval@Vrandom_device@std@@@?$uniform_int@H@std@@AEBAHAEAVrandom_device@1@HH@Z ; std::uniform_int<int>::_Eval<std::random_device>
PUBLIC	??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z ; std::forward<std::allocator<char> >
PUBLIC	??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
PUBLIC	??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0U?$integral_constant@_N$00@0@@Z ; std::_Pocma<std::allocator<char> >
PUBLIC	??$_Pocca@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@AEBV10@U?$integral_constant@_N$0A@@0@@Z ; std::_Pocca<std::allocator<char> >
PUBLIC	??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z	; std::forward<char * __ptr64 const & __ptr64>
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z ; std::forward<std::_Container_proxy>
PUBLIC	??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQEBD_K01@Z ; std::_Traits_equal<std::char_traits<char> >
PUBLIC	??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??0?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAA@AEAVrandom_device@1@@Z ; std::_Rng_from_urng<unsigned int,std::random_device>::_Rng_from_urng<unsigned int,std::random_device>
PUBLIC	??R?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAII@Z ; std::_Rng_from_urng<unsigned int,std::random_device>::operator()
PUBLIC	?_Get_all_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAIXZ ; std::_Rng_from_urng<unsigned int,std::random_device>::_Get_all_bits
PUBLIC	?_Get_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@AEAAIXZ ; std::_Rng_from_urng<unsigned int,std::random_device>::_Get_bits
PUBLIC	??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@EAAPEAXI@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
PUBLIC	??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	??_E?$basic_fstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z ; std::basic_fstream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception?$AA@	; `string'
PUBLIC	??_C@_1NE@JCGKDBDB@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_?$AAb?$AAa?$AAs?$AAe?$AA1?$AA2?$AA?3?$AA?3?$AA_?$AAO?$AAr?$AAp?$AAh?$AAa?$AAn?$AA_?$AAm@ ; `string'
PUBLIC	??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??_Allocate@std@@YAPEAX_K0_N@Z@4JA ; `std::_Allocate'::`1'::__LINE__Var
PUBLIC	??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@ ; `string'
PUBLIC	??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@	; `string'
PUBLIC	??_C@_1NE@GPIBOEJC@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_09GLJCAGLP@_Ptr?5?$CB?$DN?50?$AA@		; `string'
PUBLIC	??_C@_1CC@GKJLLHIM@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??_Deallocate@std@@YAXPEAX_K1@Z@4JA ; `std::_Deallocate'::`1'::__LINE__Var
PUBLIC	??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ ; `string'
PUBLIC	?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2_KB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
PUBLIC	??_7bad_cast@std@@6B@				; std::bad_cast::`vftable'
PUBLIC	??_C@_08EPJLHIJG@bad?5cast?$AA@			; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_1NA@LJCFENMG@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
PUBLIC	??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`vftable'
PUBLIC	??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ofstream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ofstream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_7?$basic_fstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_fstream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_fstream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ ; std::basic_fstream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_8?$basic_fstream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ ; std::basic_fstream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_C@_06JGCGFIEG@polish?$AA@			; `string'
PUBLIC	??_C@_02PKFBJPLJ@10?$AA@			; `string'
PUBLIC	??_C@_01JBBJJEPG@p?$AA@				; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_01JEJKBAGA@g?$AA@				; `string'
PUBLIC	??_C@_02ICGBAFJO@k1?$AA@			; `string'
PUBLIC	??_C@_02JHFNFPIK@w1?$AA@			; `string'
PUBLIC	??_C@_0P@GMFAENOC@log_og?slny?4txt?$AA@		; `string'
PUBLIC	??_C@_0BB@KLDNCCFE@log_aktualny?4txt?$AA@	; `string'
PUBLIC	??_C@_0DJ@EFIKGJBI@Uruchomiono?5ponownie?5gr?j?5z?5wy?$LD?$LJc@ ; `string'
PUBLIC	??_C@_01EPMOAMKG@$?$AA@				; `string'
PUBLIC	??_C@_0P@LMKDJHDC@Obstawiono?5za?5?$AA@		; `string'
PUBLIC	??_C@_0BD@IOLLNBIB@Obstawiono?5zak?$LDad?5?$AA@	; `string'
PUBLIC	??_C@_0BE@EKDPDLOA@?5Obstawiono?5zaklad?5?$AA@	; `string'
PUBLIC	??_C@_0DA@EJNBAHOM@Kulka?5w?5grze?0?5zaczekaj?5na?5wyloso@ ; `string'
PUBLIC	??_C@_0BC@IEHJKDDM@Wylosowano?5numer?5?$AA@	; `string'
PUBLIC	??_C@_02KHOJGJKF@?4?5?$AA@			; `string'
PUBLIC	??_C@_0N@CGNKGGIC@?5Wylosowano?5?$AA@		; `string'
PUBLIC	??_C@_0M@GPFIMODH@?5Wygrywasz?5?$AA@		; `string'
PUBLIC	??_C@_0M@GNFNLGIH@?5Posiadasz?5?$AA@		; `string'
PUBLIC	??_C@_07KIPBKJCE@win?4wav?$AA@			; `string'
PUBLIC	??_C@_01PBGHHLMH@?$AH?$AA@			; `string'
PUBLIC	??_C@_0BL@LJEGNEAJ@?5Dostajesz?5polowe?5zak?$LDadu?5?$AA@ ; `string'
PUBLIC	??_C@_0N@NPCHEJIF@?5Przegrales?5?$AA@		; `string'
PUBLIC	??_C@_0BJ@GCHIFPGC@Ko?qczysz?5gr?j?5z?5wynikiem?5?$AA@ ; `string'
PUBLIC	??_C@_0BN@DACGNLHK@Efekty?5dzwi?jkowe?1bankrut?4wav?$AA@ ; `string'
PUBLIC	??_C@_0CL@DCKMMPCF@Gratuluje?5zwi?jkszy?$LDe?$JM?5sw?sj?5zas?sb@ ; `string'
PUBLIC	??_C@_0BO@OAKNDKAH@Efekty?5dzwi?jkowe?1wygrana1?4wav?$AA@ ; `string'
PUBLIC	??_C@_0BO@GGDJEIKJ@Efekty?5dzwi?jkowe?1wygrana2?4wav?$AA@ ; `string'
PUBLIC	??_C@_0BO@CAHFKDBP@?5krotnie?5sw?sj?5zas?sb?5finansowy?$AA@ ; `string'
PUBLIC	??_C@_0BH@GDCLDFHN@Gratuluje?5zwi?jkszy?$LDe?$JM?5?$AA@ ; `string'
PUBLIC	??_C@_0CF@DNPALCEH@Efekty?5dzwi?jkowe?1zwielokrotnenie@ ; `string'
PUBLIC	??_C@_05PDJBBECF@pause?$AA@			; `string'
PUBLIC	??_C@_0DM@FGCBIOFJ@Jak?$LJ?5opcje?5chcesz?5obstawic?5?$DP?5?$CIzg@ ; `string'
PUBLIC	??_C@_0N@KLINIBPG@p?5?9?5parzyste?$AA@		; `string'
PUBLIC	??_C@_0BA@GNAADEAG@n?5?9?5nieparzyste?$AA@	; `string'
PUBLIC	??_C@_0BC@GOMOHEMO@r?5?9?5czerwone?$CIred?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BC@LKBFHLDI@b?5?9?5czarne?$CIblack?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BB@FMNKHOJE@g?5?9?5g?srna?5po?$LDowa?$AA@ ; `string'
PUBLIC	??_C@_0BB@CHNPGJIO@d?5?9?5dolna?5po?$LDowa?$AA@	; `string'
PUBLIC	??_C@_0CN@EJBDEIIK@k1?0?5k2?0?5k3?5?9?5kolumna?51?0?5kolumna?5@ ; `string'
PUBLIC	??_C@_0CJ@KMEGGBFA@w1?0?5w2?0?5?4?4?4?0?5w12?5?9?5wiersz?5trzech@ ; `string'
PUBLIC	??_C@_0CP@FOKBNGLG@0?5?9?536?5?9?5pojedyncze?5pole?5o?5odpow@ ; `string'
PUBLIC	??_C@_01EFFIKLCJ@n?$AA@				; `string'
PUBLIC	??_C@_01OJONOECF@b?$AA@				; `string'
PUBLIC	??_C@_01LPLHEDKD@d?$AA@				; `string'
PUBLIC	??_C@_02KJEMFGFN@k2?$AA@			; `string'
PUBLIC	??_C@_02LAFHGHBM@k3?$AA@			; `string'
PUBLIC	??_C@_02LMHAAMEJ@w2?$AA@			; `string'
PUBLIC	??_C@_02KFGLDNAI@w3?$AA@			; `string'
PUBLIC	??_C@_02OKCKKLMP@w4?$AA@			; `string'
PUBLIC	??_C@_02PDDBJKIO@w5?$AA@			; `string'
PUBLIC	??_C@_02NIBMMJEN@w6?$AA@			; `string'
PUBLIC	??_C@_02MBAHPIAM@w7?$AA@			; `string'
PUBLIC	??_C@_02EGJPOEMD@w8?$AA@			; `string'
PUBLIC	??_C@_02FPIENFIC@w9?$AA@			; `string'
PUBLIC	??_C@_03NCLMABJC@w10?$AA@			; `string'
PUBLIC	??_C@_03MLKHDAND@w11?$AA@			; `string'
PUBLIC	??_C@_03OAIKGDBA@w12?$AA@			; `string'
PUBLIC	??_C@_01GBGANLPD@0?$AA@				; `string'
PUBLIC	??_C@_01HIHLOKLC@1?$AA@				; `string'
PUBLIC	??_C@_01FDFGLJHB@2?$AA@				; `string'
PUBLIC	??_C@_01EKENIIDA@3?$AA@				; `string'
PUBLIC	??_C@_01FAMBOPH@4?$AA@				; `string'
PUBLIC	??_C@_01BMBHCPLG@5?$AA@				; `string'
PUBLIC	??_C@_01DHDKHMHF@6?$AA@				; `string'
PUBLIC	??_C@_01COCBENDE@7?$AA@				; `string'
PUBLIC	??_C@_01KJLJFBPL@8?$AA@				; `string'
PUBLIC	??_C@_01LAKCGALK@9?$AA@				; `string'
PUBLIC	??_C@_02ODEKKOPI@11?$AA@			; `string'
PUBLIC	??_C@_02MIGHPNDL@12?$AA@			; `string'
PUBLIC	??_C@_02NBHMMMHK@13?$AA@			; `string'
PUBLIC	??_C@_02JODNFKLN@14?$AA@			; `string'
PUBLIC	??_C@_02IHCGGLPM@15?$AA@			; `string'
PUBLIC	??_C@_02KMALDIDP@16?$AA@			; `string'
PUBLIC	??_C@_02LFBAAJHO@17?$AA@			; `string'
PUBLIC	??_C@_02DCIIBFLB@18?$AA@			; `string'
PUBLIC	??_C@_02CLJDCEPA@19?$AA@			; `string'
PUBLIC	??_C@_02PIBHCBOA@20?$AA@			; `string'
PUBLIC	??_C@_02OBAMBAKB@21?$AA@			; `string'
PUBLIC	??_C@_02MKCBEDGC@22?$AA@			; `string'
PUBLIC	??_C@_02NDDKHCCD@23?$AA@			; `string'
PUBLIC	??_C@_02JMHLOEOE@24?$AA@			; `string'
PUBLIC	??_C@_02IFGANFKF@25?$AA@			; `string'
PUBLIC	??_C@_02KOENIGGG@26?$AA@			; `string'
PUBLIC	??_C@_02LHFGLHCH@27?$AA@			; `string'
PUBLIC	??_C@_02DAMOKLOI@28?$AA@			; `string'
PUBLIC	??_C@_02CJNFJKKJ@29?$AA@			; `string'
PUBLIC	??_C@_02PJNFELNH@30?$AA@			; `string'
PUBLIC	??_C@_02OAMOHKJG@31?$AA@			; `string'
PUBLIC	??_C@_02MLODCJFF@32?$AA@			; `string'
PUBLIC	??_C@_02NCPIBIBE@33?$AA@			; `string'
PUBLIC	??_C@_02JNLJIOND@34?$AA@			; `string'
PUBLIC	??_C@_02IEKCLPJC@35?$AA@			; `string'
PUBLIC	??_C@_02KPIPOMFB@36?$AA@			; `string'
PUBLIC	??_C@_0CF@BGACGNBA@$?0?5jak?$LJ?5kwot?j?5chcesz?5obstawi?f?5wy@ ; `string'
PUBLIC	??_C@_05OMMBNPEF@Masz?5?$AA@			; `string'
PUBLIC	??_C@_0CD@OGNPPNBN@Wprowadzi?$LDe?f?5nieprawid?$LDow?$LJ?5warto@ ; `string'
PUBLIC	??_C@_0CF@LJDHNEHM@Nie?5mo?$LPesz?5obstawi?f?5zerowego?5zak@ ; `string'
PUBLIC	??_C@_0BI@CMKDFAEK@Nie?5masz?5tyle?5pieni?jdzy?$AA@ ; `string'
PUBLIC	??_C@_0CJ@PMIHJCIC@Nie?5mo?$LPesz?5obstawi?f?5ujemn?$LJ?5kwot?$LJ@ ; `string'
PUBLIC	??_C@_02MGHEPNFN@?$AI?$AI?$AA@			; `string'
PUBLIC	??_C@_02KNHHEEKP@?5?5?$AA@			; `string'
PUBLIC	??_C@_02DEPNMBPN@$?4?$AA@			; `string'
PUBLIC	??_C@_0CB@MBIMKPJH@Obstawiles?5poprawnie?0?5wygrywasz?5@ ; `string'
PUBLIC	??_C@_0EF@FAPGEAPP@Obstawiles?5niepoprawnie?5lecz?5uda@ ; `string'
PUBLIC	??_C@_0CF@EMPIFKEH@Obstawiles?5niepoprawnie?0?5przegra@ ; `string'
PUBLIC	??_C@_0CM@BIICBBPD@Nie?5mo?$LPesz?5kontynuowa?f?0?5przegra?$LD@ ; `string'
PUBLIC	??_C@_0DB@MONJHHJM@$?0?5czy?5chcesz?5grac?5dalej?$CI?8t?8?5?9?5t@ ; `string'
PUBLIC	??_C@_0BA@KCLBOCHC@Na?5koncie?5masz?5?$AA@	; `string'
PUBLIC	??_C@_01PFHFFBPC@t?$AA@				; `string'
PUBLIC	??_C@_03PFPKAEFD@tak?$AA@			; `string'
PUBLIC	??_C@_03FFMIKLGN@Tak?$AA@			; `string'
PUBLIC	??_C@_03PIABMJCP@TAK?$AA@			; `string'
PUBLIC	??_C@_03FKMOMPJO@nie?$AA@			; `string'
PUBLIC	??_C@_03PKPMGAKA@Nie?$AA@			; `string'
PUBLIC	??_C@_03FHDFACOC@NIE?$AA@			; `string'
PUBLIC	??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
PUBLIC	??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
PUBLIC	??_C@_04IBLEHOMF@?4wav?$AA@			; `string'
PUBLIC	??_C@_05PNHGCFLK@p?4wav?$AA@			; `string'
PUBLIC	??_C@_05MEKKEGFB@n?4wav?$AA@			; `string'
PUBLIC	??_C@_05LALOIELB@r?4wav?$AA@			; `string'
PUBLIC	??_C@_05LDGIIGCK@b?4wav?$AA@			; `string'
PUBLIC	??_C@_05ODKFBHJJ@g?4wav?$AA@			; `string'
PUBLIC	??_C@_05GFDBGFDH@d?4wav?$AA@			; `string'
PUBLIC	??_C@_01DICPFPGM@k?$AA@				; `string'
PUBLIC	??_C@_01NOFIACDB@w?$AA@				; `string'
PUBLIC	??_C@_09LFKNBKJA@Posiadasz?$AA@			; `string'
PUBLIC	??_C@_0L@DAFLKCID@Wylosowano?$AA@		; `string'
PUBLIC	??_C@_0M@DIDIAOPI@?5Wylosowano?$AA@		; `string'
PUBLIC	??_C@_0BC@EAGHPBJK@Obstawiono?5zaklad?$AA@	; `string'
PUBLIC	??_C@_0O@POHKAIHJ@Obstawiono?5za?$AA@		; `string'
PUBLIC	??_C@_0BE@CILJHICG@Gra?5rozpoczeta?5dnia?$AA@	; `string'
PUBLIC	??_C@_0N@KHLIPMCA@?5o?5godzinie?5?$AA@		; `string'
PUBLIC	??_C@_01LFCBOECM@?4?$AA@			; `string'
PUBLIC	??_C@_0BF@EHKBBICH@Gra?5rozpoczeta?5dnia?5?$AA@	; `string'
PUBLIC	??_C@_01JLIPDDHJ@?3?$AA@			; `string'
PUBLIC	??_C@_0BK@PLEOEKGI@Nowa?5gra?5rozpoczeta?5dnia?5?$AA@ ; `string'
PUBLIC	??_C@_06ECCMNMIG@Jacek?5?$AA@			; `string'
PUBLIC	??_C@_04IDLHMCEL@Ewa?5?$AA@			; `string'
PUBLIC	??_C@_05NBKDILMB@Maja?5?$AA@			; `string'
PUBLIC	??_C@_04HPMJBKOE@Jan?5?$AA@			; `string'
PUBLIC	??_C@_07OJOJFOLI@Jacek?52?$AA@			; `string'
PUBLIC	??_C@_05MPNHLKL@Ewa?52?$AA@			; `string'
PUBLIC	??_C@_06BMCAFNM@Maja?52?$AA@			; `string'
PUBLIC	??_C@_05EKGILLAK@Jan?52?$AA@			; `string'
PUBLIC	??_C@_06JIAINCN@Agata?5?$AA@			; `string'
PUBLIC	??_C@_05CMOJBPHN@G?$LDos?1?$AA@			; `string'
PUBLIC	??_C@_01IDAFKMJL@_?$AA@				; `string'
PUBLIC	??_C@_01KMDKNFGN@?1?$AA@			; `string'
PUBLIC	??_C@_0EA@BAJGLA@Brak?5wszystkich?5plik?sw?5dla?5g?$LDosu@ ; `string'
PUBLIC	??_C@_0GE@BGEAJNPD@Brak?5plik?sw?5dla?5efekt?sw?5d?$JPwi?jkow@ ; `string'
PUBLIC	??_C@_0GC@FGDMKFMP@Warto?$JM?f?5wolnego?5czasu?5przeskoku?5@ ; `string'
PUBLIC	??_C@_0BM@BFHMOJCD@Ustawiam?5domy?$JMne?5ustawienie?$AA@ ; `string'
PUBLIC	??_C@_0DL@EDLBNLFA@Ilo?$JM?f?5minimalna?5obrot?sw?5ruletki?5@ ; `string'
PUBLIC	??_C@_0DF@PACHBLM@Ilo?$JM?f?5max?5obrot?sw?5ruletki?5nie?5mo@ ; `string'
PUBLIC	??_C@_0EG@FJFKONPC@Jedna?5z?5deklaracji?5w?5sprawie?5obr@ ; `string'
PUBLIC	??_C@_0DH@EDACBMH@Styl?5liczeia?5wygranej?5przyjmuje?5@ ; `string'
PUBLIC	??_C@_0DD@CJFGHGHP@Czas?5przerwy?5d?$JPwi?jku?5nie?5mo?$LPe?5by@ ; `string'
PUBLIC	??_C@_0CP@ODEFLMCC@Kwota?5pocz?$LJtkowa?5nie?5mo?$LPe?5by?f?5mn@ ; `string'
PUBLIC	??_C@_0CP@LNDFINPO@Stan?5d?$JPwi?jk?sw?5przyjmuje?5warto?$JMci@ ; `string'
PUBLIC	??_C@_0DJ@OKKJHGDF@Opcja?5kontynuowania?5gry?5przyjmuj@ ; `string'
PUBLIC	??_C@_0EB@BADOFEHO@Opcja?5g?$LDos?5odczytu?5numeru?5przyjm@ ; `string'
PUBLIC	??_C@_0ED@HLOPCNMJ@Opcja?5szybko?$JM?f?5g?$LDosu?5odczytu?5prz@ ; `string'
PUBLIC	??_C@_1NC@MMDHPGIM@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?$DM?$AAc?$AAh?$AAa?$AAr?$AA?0?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAs?$AAt@ ; `string'
PUBLIC	??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
PUBLIC	??_C@_1GK@EPFFCEAH@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?9?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl@ ; `string'
PUBLIC	??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1GO@PNALIMBD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?9?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa@ ; `string'
PUBLIC	??_C@_1BAE@HEEJFKO@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@ ; `string'
PUBLIC	??_C@_1BAO@BGLBIONH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa@ ; `string'
PUBLIC	??_C@_1KK@GJPIMLCF@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@ ; `string'
PUBLIC	??_C@_1KO@CMPBFHAM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa@ ; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_1FM@PKOPLGBP@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAi?$AAn?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAm?$AAa?$AAx?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?5?$AAf?$AAo@ ; `string'
PUBLIC	??_C@_1FC@FNLBOEA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAu?$AAn?$AAi?$AAf?$AAo?$AAr?$AAm?$AA_?$AAi?$AAn?$AAt?$AA?$DM?$AAi?$AAn?$AAt?$AA?$DO?$AA?3?$AA?3?$AAp?$AAa?$AAr?$AAa?$AAm?$AA_?$AAt?$AAy?$AAp@ ; `string'
PUBLIC	??_C@_1GA@FJHEAOJP@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAi?$AAn?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAm?$AAa?$AAx?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?5?$AAf@ ; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PEBVfacet@locale@2@EB ; std::_Facetptr<std::ctype<char> >::_Psave
PUBLIC	_TI2?AVbad_cast@std@@
PUBLIC	_CTA2?AVbad_cast@std@@
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QEAA@AEBV01@@Z24
PUBLIC	?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PEBVfacet@locale@2@EB ; std::_Facetptr<std::codecvt<char,char,_Mbstatet> >::_Psave
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_iostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVios_base@std@@@8			; std::ios_base `RTTI Type Descriptor'
PUBLIC	??_R3ios_base@std@@8				; std::ios_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ios_base@std@@8				; std::ios_base::`RTTI Base Class Array'
PUBLIC	??_R17?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AV?$_Iosb@H@std@@@8			; std::_Iosb<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
PUBLIC	??_R17A@3EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
PUBLIC	??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (16,-1,0,64)'
PUBLIC	??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_filebuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ofstream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_fstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_fstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_fstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_fstream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_fstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_fstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_fstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_fstream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_fstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_fstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_cast@std@@6B@				; std::bad_cast::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_cast@std@@8				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_cast@std@@8				; std::bad_cast::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_cast@std@@8			; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@4040000000000000
PUBLIC	__real@4042800000000000
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX@Z:PROC				; operator delete
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	atexit:PROC
EXTRN	__imp__invalid_parameter:PROC
EXTRN	__imp__invalid_parameter_noinfo:PROC
EXTRN	__imp_??0_Lockit@std@@QEAA@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QEAA@XZ:PROC
EXTRN	__imp__time64:PROC
EXTRN	__imp__errno:PROC
EXTRN	__imp_srand:PROC
EXTRN	__imp_rand:PROC
EXTRN	__imp_atoi:PROC
EXTRN	__imp_system:PROC
EXTRN	__imp__get_stream_buffer_pointers:PROC
EXTRN	__imp_fclose:PROC
EXTRN	__imp_fflush:PROC
EXTRN	__imp_fgetc:PROC
EXTRN	__imp_fgetpos:PROC
EXTRN	__imp_fputc:PROC
EXTRN	__imp_fsetpos:PROC
EXTRN	__imp__fseeki64:PROC
EXTRN	__imp_fwrite:PROC
EXTRN	__imp_remove:PROC
EXTRN	__imp_setvbuf:PROC
EXTRN	__imp_ungetc:PROC
EXTRN	__imp__lock_file:PROC
EXTRN	__imp__unlock_file:PROC
EXTRN	memchr:PROC
EXTRN	memcmp:PROC
EXTRN	memcpy:PROC
EXTRN	memmove:PROC
EXTRN	memset:PROC
EXTRN	strlen:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__std_exception_copy:PROC
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	__imp__CrtDbgReportW:PROC
EXTRN	?_Debug_message@std@@YAXPEB_W0I@Z:PROC		; std::_Debug_message
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPEBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPEBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Ebad_cast@std@@UEAAPEAXI@Z:PROC		; std::bad_cast::`vector deleting destructor'
EXTRN	__imp_setlocale:PROC
EXTRN	?_Facet_Register@std@@YAXPEAV_Facet_base@1@@Z:PROC ; std::_Facet_Register
EXTRN	__imp_??Bid@locale@std@@QEAA_KXZ:PROC
EXTRN	?_Getgloballocale@locale@std@@CAPEAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	__imp_?always_noconv@codecvt_base@std@@QEBA_NXZ:PROC
EXTRN	__imp_?is@?$ctype@D@std@@QEBA_NFD@Z:PROC
EXTRN	__imp_?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z:PROC
EXTRN	__imp_?in@?$codecvt@DDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEAD3AEAPEAD@Z:PROC
EXTRN	__imp_?out@?$codecvt@DDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEAD3AEAPEAD@Z:PROC
EXTRN	__imp_?unshift@?$codecvt@DDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z:PROC
EXTRN	__imp_?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z:PROC
EXTRN	__imp_?good@ios_base@std@@QEBA_NXZ:PROC
EXTRN	__imp_?eof@ios_base@std@@QEBA_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QEBAHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEBA_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEAA_J_J@Z:PROC
EXTRN	__imp_?getloc@ios_base@std@@QEBA?AVlocale@2@XZ:PROC
EXTRN	__imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAA@XZ:PROC
EXTRN	__imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ:PROC
EXTRN	__imp_?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEBA?AVlocale@2@XZ:PROC
EXTRN	__imp_?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ:PROC
EXTRN	__imp_?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ:PROC
EXTRN	__imp_?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z:PROC
EXTRN	__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ:PROC
EXTRN	__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ:PROC
EXTRN	__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ:PROC
EXTRN	__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ:PROC
EXTRN	__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ:PROC
EXTRN	__imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z:PROC
EXTRN	__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z:PROC
EXTRN	__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ:PROC
EXTRN	__imp_?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ:PROC
EXTRN	__imp_?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ:PROC
EXTRN	__imp_?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z:PROC
EXTRN	__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD0@Z:PROC
EXTRN	__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z:PROC
EXTRN	__imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ:PROC
EXTRN	__imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXXZ:PROC
EXTRN	__imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAPEAD0PEAH001@Z:PROC
EXTRN	__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ:PROC
EXTRN	__imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z:PROC
EXTRN	__imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IEAA@XZ:PROC
EXTRN	__imp_??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:PROC
EXTRN	__imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAA@XZ:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@G@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ:PROC
EXTRN	__imp_?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z:PROC
EXTRN	__imp_??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z:PROC
EXTRN	__imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UEAA@XZ:PROC
EXTRN	?_Fiopen@std@@YAPEAU_iobuf@@PEBDHH@Z:PROC	; std::_Fiopen
EXTRN	__imp__access:PROC
EXTRN	?_Random_device@std@@YAIXZ:PROC			; std::_Random_device
EXTRN	__imp_GetStdHandle:PROC
EXTRN	__imp_Sleep:PROC
EXTRN	__imp_GetSystemTime:PROC
EXTRN	__imp_GetConsoleCursorInfo:PROC
EXTRN	__imp_SetConsoleCursorInfo:PROC
EXTRN	__imp_SetConsoleTextAttribute:PROC
EXTRN	__imp_PlaySoundA:PROC
EXTRN	??_E?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z:PROC ; std::basic_filebuf<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z:PROC ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_fstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z:PROC ; std::basic_fstream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z:PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z:PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
EXTRN	?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAXXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
EXTRN	?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAXXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
EXTRN	?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::imbue
EXTRN	?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAPEAV12@PEAD_J@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
EXTRN	?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
EXTRN	?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::sync
EXTRN	?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::uflow
EXTRN	?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
EXTRN	?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
EXTRN	_CxxThrowException:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	_RTC_UninitUse:PROC
EXTRN	__CxxFrameHandler3:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_EH:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__imp_?_BADOFF@std@@3_JB:QWORD
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	__imp_?id@?$ctype@D@std@@2V0locale@2@A:QWORD
EXTRN	__imp_?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A:QWORD
EXTRN	__imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
_BSS	SEGMENT
?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 028H DUP (?) ; G³os
_BSS	ENDS
;	COMDAT ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A
_BSS	SEGMENT
?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A DQ 01H DUP (?) ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PEBVfacet@locale@2@EB
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PEBVfacet@locale@2@EB DQ 01H DUP (?) ; std::_Facetptr<std::ctype<char> >::_Psave
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PEBVfacet@locale@2@EB
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PEBVfacet@locale@2@EB DQ 01H DUP (?) ; std::_Facetptr<std::codecvt<char,char,_Mbstatet> >::_Psave
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$time DD	imagerel time
	DD	imagerel time+65
	DD	imagerel $unwind$time
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$memcpy_s DD imagerel memcpy_s
	DD	imagerel memcpy_s+395
	DD	imagerel $unwind$memcpy_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@QEBDH@Z DD imagerel $LN3
	DD	imagerel $LN3+125
	DD	imagerel $unwind$??0exception@std@@QEAA@QEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+134
	DD	imagerel $unwind$??0exception@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?what@exception@std@@UEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+105
	DD	imagerel $unwind$?what@exception@std@@UEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@_J@std@@SA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?max@?$numeric_limits@_J@std@@SA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??2@YAPEAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?compare@?$char_traits@D@std@@SAHQEBD0_K@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$?compare@?$char_traits@D@std@@SAHQEBD0_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$char_traits@D@std@@SA_KQEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?length@?$char_traits@D@std@@SA_KQEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?find@?$char_traits@D@std@@SAPEBDQEBD_KAEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+93
	DD	imagerel $unwind$?find@?$char_traits@D@std@@SAPEBDQEBD_KAEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?move@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$?move@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$char_traits@D@std@@SAPEADQEAD_KD@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$?assign@?$char_traits@D@std@@SAPEADQEAD_KD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$char_traits@D@std@@SAXAEADAEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$?assign@?$char_traits@D@std@@SAXAEADAEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eq@?$char_traits@D@std@@SA_NAEBD0@Z DD imagerel $LN5
	DD	imagerel $LN5+108
	DD	imagerel $unwind$?eq@?$char_traits@D@std@@SA_NAEBD0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?to_char_type@?$char_traits@D@std@@SADAEBH@Z DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$?to_char_type@?$char_traits@D@std@@SADAEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?to_int_type@?$char_traits@D@std@@SAHAEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$?to_int_type@?$char_traits@D@std@@SAHAEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z DD imagerel $LN5
	DD	imagerel $LN5+104
	DD	imagerel $unwind$?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?not_eof@?$char_traits@D@std@@SAHAEBH@Z DD imagerel $LN7
	DD	imagerel $LN7+134
	DD	imagerel $unwind$?not_eof@?$char_traits@D@std@@SAHAEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eof@?$char_traits@D@std@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$?eof@?$char_traits@D@std@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_proxy@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+86
	DD	imagerel $unwind$??0_Container_proxy@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_base12@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$??0_Container_base12@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Container_base12@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??1_Container_base12@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+235
	DD	imagerel $unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Swap_all@_Container_base12@std@@QEAAXAEAU12@@Z DD imagerel $LN5
	DD	imagerel $LN5+259
	DD	imagerel $unwind$?_Swap_all@_Container_base12@std@@QEAAXAEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Iterator_base12@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+86
	DD	imagerel $unwind$??0_Iterator_base12@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Iterator_base12@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+153
	DD	imagerel $unwind$??1_Iterator_base12@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z DD imagerel $LN6
	DD	imagerel $LN6+288
	DD	imagerel $unwind$?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ DD imagerel $LN5
	DD	imagerel $LN5+103
	DD	imagerel $unwind$?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_me@_Iterator_base12@std@@QEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+252
	DD	imagerel $unwind$?_Orphan_me@_Iterator_base12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@std@@YAPEAX_K0_N@Z DD imagerel $LN13
	DD	imagerel $LN13+581
	DD	imagerel $unwind$?_Allocate@std@@YAPEAX_K0_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Deallocate@std@@YAXPEAX_K1@Z DD imagerel $LN16
	DD	imagerel $LN16+349
	DD	imagerel $unwind$?_Deallocate@std@@YAXPEAX_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Convert_size@_K@std@@YA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??$_Convert_size@_K@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@D@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??0?$allocator@D@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ DD imagerel $LN4
	DD	imagerel $LN4+110
	DD	imagerel $unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ DD imagerel $LN4
	DD	imagerel $LN4+110
	DD	imagerel $unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+93
	DD	imagerel $unwind$?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z DD imagerel $LN3
	DD	imagerel $LN3+112
	DD	imagerel $unwind$?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+106
	DD	imagerel $unwind$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Copy_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEBV?$allocator@D@2@@Z DD imagerel $LN5
	DD	imagerel $LN5+124
	DD	imagerel $unwind$?_Copy_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEBV?$allocator@D@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEAV?$allocator@D@2@@Z DD imagerel $LN7
	DD	imagerel $LN7+191
	DD	imagerel $unwind$?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEAV?$allocator@D@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+280
	DD	imagerel $unwind$?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+203
	DD	imagerel $unwind$?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEAV12@@Z DD imagerel $LN3
	DD	imagerel $LN3+106
	DD	imagerel $unwind$?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$allocator@D@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+138
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA DD imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z DD imagerel $LN4
	DD	imagerel $LN4+132
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z@4HA DD imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DD imagerel $LN4
	DD	imagerel $LN4+120
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA DD imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z DD imagerel $LN4
	DD	imagerel $LN4+133
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA DD imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+169
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+195
	DD	imagerel $unwind$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Assign_rv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+116
	DD	imagerel $unwind$?_Assign_rv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z DD imagerel $LN5
	DD	imagerel $LN5+203
	DD	imagerel $unwind$?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEBV12@@Z DD imagerel $LN4
	DD	imagerel $LN4+451
	DD	imagerel $unwind$?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEBV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z DD imagerel $LN5
	DD	imagerel $LN5+178
	DD	imagerel $unwind$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@D@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@D@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z DD imagerel $LN3
	DD	imagerel $LN3+105
	DD	imagerel $unwind$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z DD imagerel $LN4
	DD	imagerel $LN4+315
	DD	imagerel $unwind$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z DD imagerel $LN4
	DD	imagerel $LN4+315
	DD	imagerel $unwind$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z DD imagerel $LN4
	DD	imagerel $LN4+247
	DD	imagerel $unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z DD imagerel $LN4
	DD	imagerel $LN4+249
	DD	imagerel $unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KAEBV12@@Z DD imagerel $LN3
	DD	imagerel $LN3+117
	DD	imagerel $unwind$?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KAEBV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KQEBD0@Z DD imagerel $LN9
	DD	imagerel $LN9+563
	DD	imagerel $unwind$?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KQEBD0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+115
	DD	imagerel $unwind$?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+271
	DD	imagerel $unwind$?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z DD imagerel $LN4
	DD	imagerel $LN4+173
	DD	imagerel $unwind$??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z DD imagerel $LN4
	DD	imagerel $LN4+244
	DD	imagerel $unwind$?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+212
	DD	imagerel $unwind$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z DD imagerel $LN7
	DD	imagerel $LN7+257
	DD	imagerel $unwind$?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+163
	DD	imagerel $unwind$?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NQEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+149
	DD	imagerel $unwind$?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NQEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z DD imagerel $LN5
	DD	imagerel $LN5+272
	DD	imagerel $unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Become_small@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+225
	DD	imagerel $unwind$?_Become_small@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+132
	DD	imagerel $unwind$?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+243
	DD	imagerel $unwind$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_cast@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+101
	DD	imagerel $unwind$??0bad_cast@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_cast@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??1bad_cast@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_cast@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$??0bad_cast@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_cast@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_Gbad_cast@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1locale@std@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+182
	DD	imagerel $unwind$??1locale@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z DD imagerel $LN10
	DD	imagerel $LN10+244
	DD	imagerel $unwind$?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z DD imagerel $LN11
	DD	imagerel $LN11+354
	DD	imagerel $unwind$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA DD imagerel ?dtor$0@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA+37
	DD	imagerel $unwind$?dtor$0@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Fgetc@D@std@@YA_NAEADPEAU_iobuf@@@Z DD imagerel $LN5
	DD	imagerel $LN5+100
	DD	imagerel $unwind$??$_Fgetc@D@std@@YA_NAEADPEAU_iobuf@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Fputc@D@std@@YA_NDPEAU_iobuf@@@Z DD imagerel $LN5
	DD	imagerel $LN5+112
	DD	imagerel $unwind$??$_Fputc@D@std@@YA_NDPEAU_iobuf@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Ungetc@D@std@@YA_NAEBDPEAU_iobuf@@@Z DD imagerel $LN5
	DD	imagerel $LN5+116
	DD	imagerel $unwind$??$_Ungetc@D@std@@YA_NAEBDPEAU_iobuf@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0random_device@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??0random_device@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?min@random_device@std@@SAIXZ DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$?min@random_device@std@@SAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@random_device@std@@SAIXZ DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$?max@random_device@std@@SAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?entropy@random_device@std@@QEAANXZ DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$?entropy@random_device@std@@QEAANXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Rrandom_device@std@@QEAAIXZ DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??Rrandom_device@std@@QEAAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD imagerel $LN10
	DD	imagerel $LN10+2096
	DD	imagerel $unwind$?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ@4HA DD imagerel ?dtor$0@?0??Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ@4HA
	DD	imagerel ?dtor$0@?0??Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z DD imagerel $LN22
	DD	imagerel $LN22+708
	DD	imagerel $unwind$?Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z@4HA DD imagerel ?dtor$0@?0??Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z@4HA
	DD	imagerel ?dtor$0@?0??Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Zakrêæ_Ruletk¹@@YAHXZ DD imagerel $LN12
	DD	imagerel $LN12+817
	DD	imagerel $unwind$?Zakrêæ_Ruletk¹@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SprawdŸ_Zak³ad@@YAHAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBH@Z DD imagerel $LN60
	DD	imagerel $LN60+1331
	DD	imagerel $unwind$?SprawdŸ_Zak³ad@@YAHAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Czy_Kontynuowaæ@@YA_NAEAH@Z DD imagerel $LN12
	DD	imagerel $LN12+593
	DD	imagerel $unwind$?Czy_Kontynuowaæ@@YA_NAEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??Czy_Kontynuowaæ@@YA_NAEAH@Z@4HA DD imagerel ?dtor$0@?0??Czy_Kontynuowaæ@@YA_NAEAH@Z@4HA
	DD	imagerel ?dtor$0@?0??Czy_Kontynuowaæ@@YA_NAEAH@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??Czy_Kontynuowaæ@@YA_NAEAH@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Wylosuj@@YAHAEBH0@Z DD imagerel $LN6
	DD	imagerel $LN6+265
	DD	imagerel $unwind$?Wylosuj@@YAHAEBH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??Wylosuj@@YAHAEBH0@Z@4HA DD imagerel ?dtor$0@?0??Wylosuj@@YAHAEBH0@Z@4HA
	DD	imagerel ?dtor$0@?0??Wylosuj@@YAHAEBH0@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0??Wylosuj@@YAHAEBH0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD imagerel $LN38
	DD	imagerel $LN38+1682
	DD	imagerel $unwind$?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA DD imagerel ?dtor$0@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
	DD	imagerel ?dtor$0@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA DD imagerel ?dtor$1@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
	DD	imagerel ?dtor$1@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA+39
	DD	imagerel $unwind$?dtor$1@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA DD imagerel ?dtor$2@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
	DD	imagerel ?dtor$2@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA+39
	DD	imagerel $unwind$?dtor$2@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$3@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA DD imagerel ?dtor$3@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
	DD	imagerel ?dtor$3@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA+39
	DD	imagerel $unwind$?dtor$3@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$12@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA DD imagerel ?dtor$12@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
	DD	imagerel ?dtor$12@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA+39
	DD	imagerel $unwind$?dtor$12@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$13@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA DD imagerel ?dtor$13@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
	DD	imagerel ?dtor$13@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA+39
	DD	imagerel $unwind$?dtor$13@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD imagerel $LN71
	DD	imagerel $LN71+4217
	DD	imagerel $unwind$?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA DD imagerel ?dtor$0@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA
	DD	imagerel ?dtor$0@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA DD imagerel ?dtor$1@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA
	DD	imagerel ?dtor$1@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA+36
	DD	imagerel $unwind$?dtor$1@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA DD imagerel ?dtor$2@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA
	DD	imagerel ?dtor$2@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA+39
	DD	imagerel $unwind$?dtor$2@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$3@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA DD imagerel ?dtor$3@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA
	DD	imagerel ?dtor$3@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA+39
	DD	imagerel $unwind$?dtor$3@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$4@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA DD imagerel ?dtor$4@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA
	DD	imagerel ?dtor$4@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA+39
	DD	imagerel $unwind$?dtor$4@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$5@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA DD imagerel ?dtor$5@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA
	DD	imagerel ?dtor$5@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA+39
	DD	imagerel $unwind$?dtor$5@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SprawdŸ_Pliki@@YAXXZ DD imagerel $LN45
	DD	imagerel $LN45+2384
	DD	imagerel $unwind$?SprawdŸ_Pliki@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??SprawdŸ_Pliki@@YAXXZ@4HA DD imagerel ?dtor$0@?0??SprawdŸ_Pliki@@YAXXZ@4HA
	DD	imagerel ?dtor$0@?0??SprawdŸ_Pliki@@YAXXZ@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??SprawdŸ_Pliki@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??SprawdŸ_Pliki@@YAXXZ@4HA DD imagerel ?dtor$1@?0??SprawdŸ_Pliki@@YAXXZ@4HA
	DD	imagerel ?dtor$1@?0??SprawdŸ_Pliki@@YAXXZ@4HA+36
	DD	imagerel $unwind$?dtor$1@?0??SprawdŸ_Pliki@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0??SprawdŸ_Pliki@@YAXXZ@4HA DD imagerel ?dtor$2@?0??SprawdŸ_Pliki@@YAXXZ@4HA
	DD	imagerel ?dtor$2@?0??SprawdŸ_Pliki@@YAXXZ@4HA+39
	DD	imagerel $unwind$?dtor$2@?0??SprawdŸ_Pliki@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$3@?0??SprawdŸ_Pliki@@YAXXZ@4HA DD imagerel ?dtor$3@?0??SprawdŸ_Pliki@@YAXXZ@4HA
	DD	imagerel ?dtor$3@?0??SprawdŸ_Pliki@@YAXXZ@4HA+39
	DD	imagerel $unwind$?dtor$3@?0??SprawdŸ_Pliki@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$4@?0??SprawdŸ_Pliki@@YAXXZ@4HA DD imagerel ?dtor$4@?0??SprawdŸ_Pliki@@YAXXZ@4HA
	DD	imagerel ?dtor$4@?0??SprawdŸ_Pliki@@YAXXZ@4HA+39
	DD	imagerel $unwind$?dtor$4@?0??SprawdŸ_Pliki@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$5@?0??SprawdŸ_Pliki@@YAXXZ@4HA DD imagerel ?dtor$5@?0??SprawdŸ_Pliki@@YAXXZ@4HA
	DD	imagerel ?dtor$5@?0??SprawdŸ_Pliki@@YAXXZ@4HA+39
	DD	imagerel $unwind$?dtor$5@?0??SprawdŸ_Pliki@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$6@?0??SprawdŸ_Pliki@@YAXXZ@4HA DD imagerel ?dtor$6@?0??SprawdŸ_Pliki@@YAXXZ@4HA
	DD	imagerel ?dtor$6@?0??SprawdŸ_Pliki@@YAXXZ@4HA+39
	DD	imagerel $unwind$?dtor$6@?0??SprawdŸ_Pliki@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$7@?0??SprawdŸ_Pliki@@YAXXZ@4HA DD imagerel ?dtor$7@?0??SprawdŸ_Pliki@@YAXXZ@4HA
	DD	imagerel ?dtor$7@?0??SprawdŸ_Pliki@@YAXXZ@4HA+39
	DD	imagerel $unwind$?dtor$7@?0??SprawdŸ_Pliki@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SprawdŸ_ustawienia@@YAXXZ DD imagerel $LN19
	DD	imagerel $LN19+968
	DD	imagerel $unwind$?SprawdŸ_ustawienia@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Change_Col@@YAXAEBH@Z DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$?Change_Col@@YAXAEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Hide_Cursor@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+138
	DD	imagerel $unwind$?Hide_Cursor@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Show_Cursor@@YAXXZ DD imagerel $LN4
	DD	imagerel $LN4+144
	DD	imagerel $unwind$?Show_Cursor@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__EG³os@@YAXXZ DD imagerel ??__EG³os@@YAXXZ
	DD	imagerel ??__EG³os@@YAXXZ+64
	DD	imagerel $unwind$??__EG³os@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__FG³os@@YAXXZ DD imagerel ??__FG³os@@YAXXZ
	DD	imagerel ??__FG³os@@YAXXZ+52
	DD	imagerel $unwind$??__FG³os@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN94
	DD	imagerel $LN94+4263
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$0 DD imagerel main$dtor$0
	DD	imagerel main$dtor$0+36
	DD	imagerel $unwind$main$dtor$0
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$1 DD imagerel main$dtor$1
	DD	imagerel main$dtor$1+36
	DD	imagerel $unwind$main$dtor$1
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$2 DD imagerel main$dtor$2
	DD	imagerel main$dtor$2+39
	DD	imagerel $unwind$main$dtor$2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$dtor$3 DD imagerel main$dtor$3
	DD	imagerel main$dtor$3+39
	DD	imagerel $unwind$main$dtor$3
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN8
	DD	imagerel $LN8+281
	DD	imagerel $unwind$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA+67
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA DD imagerel ?dtor$1@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA
	DD	imagerel ?dtor$1@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA+44
	DD	imagerel $unwind$?dtor$1@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+191
	DD	imagerel $unwind$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXPEBDHH@Z DD imagerel $LN5
	DD	imagerel $LN5+201
	DD	imagerel $unwind$?open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXPEBDHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z DD imagerel $LN4
	DD	imagerel $LN4+129
	DD	imagerel $unwind$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z@4HA DD imagerel ?dtor$0@?0???0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z@4HA+40
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+152
	DD	imagerel $unwind$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z DD imagerel $LN6
	DD	imagerel $LN6+245
	DD	imagerel $unwind$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z@4HA DD imagerel ?dtor$0@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z@4HA
	DD	imagerel ?dtor$0@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ DD imagerel $LN7
	DD	imagerel $LN7+173
	DD	imagerel $unwind$?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+89
	DD	imagerel $unwind$?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+89
	DD	imagerel $unwind$?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z DD imagerel $LN37
	DD	imagerel $LN37+1378
	DD	imagerel $unwind$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA DD imagerel ?dtor$0@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA
	DD	imagerel ?dtor$0@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA DD imagerel ?dtor$1@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA
	DD	imagerel ?dtor$1@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA+39
	DD	imagerel $unwind$?dtor$1@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA DD imagerel ?dtor$2@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA
	DD	imagerel ?dtor$2@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA+39
	DD	imagerel $unwind$?dtor$2@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$3@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA DD imagerel ?dtor$3@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA
	DD	imagerel ?dtor$3@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA+39
	DD	imagerel $unwind$?dtor$3@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$4@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA DD imagerel ?dtor$4@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA
	DD	imagerel ?dtor$4@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA+59
	DD	imagerel $unwind$?dtor$4@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z DD imagerel $LN13
	DD	imagerel $LN13+486
	DD	imagerel $unwind$?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ DD imagerel $LN7
	DD	imagerel $LN7+284
	DD	imagerel $unwind$?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ DD imagerel $LN31
	DD	imagerel $LN31+1250
	DD	imagerel $unwind$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA DD imagerel ?dtor$0@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA
	DD	imagerel ?dtor$0@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA DD imagerel ?dtor$1@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA
	DD	imagerel ?dtor$1@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA+39
	DD	imagerel $unwind$?dtor$1@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA DD imagerel ?dtor$2@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA
	DD	imagerel ?dtor$2@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA+39
	DD	imagerel $unwind$?dtor$2@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$3@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA DD imagerel ?dtor$3@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA
	DD	imagerel ?dtor$3@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA+39
	DD	imagerel $unwind$?dtor$3@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$4@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA DD imagerel ?dtor$4@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA
	DD	imagerel ?dtor$4@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA+39
	DD	imagerel $unwind$?dtor$4@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$5@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA DD imagerel ?dtor$5@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA
	DD	imagerel ?dtor$5@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA+39
	DD	imagerel $unwind$?dtor$5@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z DD imagerel $LN8
	DD	imagerel $LN8+388
	DD	imagerel $unwind$?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z DD imagerel $LN6
	DD	imagerel $LN6+400
	DD	imagerel $unwind$?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PEAD_J@Z DD imagerel $LN8
	DD	imagerel $LN8+211
	DD	imagerel $unwind$?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PEAD_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ DD imagerel $LN5
	DD	imagerel $LN5+205
	DD	imagerel $unwind$?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z DD imagerel $LN6
	DD	imagerel $LN6+362
	DD	imagerel $unwind$?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ DD imagerel $LN28
	DD	imagerel $LN28+997
	DD	imagerel $unwind$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA DD imagerel ?dtor$0@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA
	DD	imagerel ?dtor$0@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA DD imagerel ?dtor$1@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA
	DD	imagerel ?dtor$1@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA+39
	DD	imagerel $unwind$?dtor$1@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA DD imagerel ?dtor$2@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA
	DD	imagerel ?dtor$2@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA+39
	DD	imagerel $unwind$?dtor$2@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$3@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA DD imagerel ?dtor$3@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA
	DD	imagerel ?dtor$3@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA+39
	DD	imagerel $unwind$?dtor$3@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$4@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA DD imagerel ?dtor$4@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA
	DD	imagerel ?dtor$4@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA+59
	DD	imagerel $unwind$?dtor$4@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEBV?$codecvt@DDU_Mbstatet@@@2@@Z DD imagerel $LN5
	DD	imagerel $LN5+125
	DD	imagerel $unwind$?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEBV?$codecvt@DDU_Mbstatet@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+136
	DD	imagerel $unwind$?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+187
	DD	imagerel $unwind$?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__autoclassinit2@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$?__autoclassinit2@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+129
	DD	imagerel $unwind$??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN8
	DD	imagerel $LN8+296
	DD	imagerel $unwind$??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA+67
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA DD imagerel ?dtor$1@?0???0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA
	DD	imagerel ?dtor$1@?0???0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA+44
	DD	imagerel $unwind$?dtor$1@?0???0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_fstream@DU?$char_traits@D@std@@@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+191
	DD	imagerel $unwind$??1?$basic_fstream@DU?$char_traits@D@std@@@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?open@?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAXPEBDHH@Z DD imagerel $LN5
	DD	imagerel $LN5+199
	DD	imagerel $unwind$?open@?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAXPEBDHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?close@?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+120
	DD	imagerel $unwind$?close@?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__autoclassinit2@?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$?__autoclassinit2@?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$basic_fstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+129
	DD	imagerel $unwind$??_G?$basic_fstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_D?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$??_D?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD imagerel $LN25
	DD	imagerel $LN25+1033
	DD	imagerel $unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+80
	DD	imagerel $unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+113
	DD	imagerel $unwind$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QEAV10@QEBD@Z DD imagerel $LN5
	DD	imagerel $LN5+136
	DD	imagerel $unwind$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QEAV10@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z DD imagerel $LN6
	DD	imagerel $LN6+290
	DD	imagerel $unwind$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z@4HA DD imagerel ?dtor$0@?0???$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z@4HA
	DD	imagerel ?dtor$0@?0???$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD imagerel $LN22
	DD	imagerel $LN22+942
	DD	imagerel $unwind$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA DD imagerel ?dtor$0@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA DD imagerel ?dtor$1@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA
	DD	imagerel ?dtor$1@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA+39
	DD	imagerel $unwind$?dtor$1@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$2@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA DD imagerel ?catch$2@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA
	DD	imagerel ?catch$2@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA+80
	DD	imagerel $unwind$?catch$2@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z DD imagerel $LN5
	DD	imagerel $LN5+112
	DD	imagerel $unwind$??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEBDPEBU_Container_base12@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+118
	DD	imagerel $unwind$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEBDPEBU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEBDXZ DD imagerel $LN7
	DD	imagerel $LN7+368
	DD	imagerel $unwind$??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$mersenne_twister@_K$0EA@$0BDI@$0JM@$0BP@$0?EKPNJAKFFGJJOGBH@$0BN@$0BB@$0HBNGHPPPONKGAAAA@$0CF@$0?IBBCAAAAAAAAA@$0CL@@std@@QEAA@_K00@Z DD imagerel $LN3
	DD	imagerel $LN3+121
	DD	imagerel $unwind$??0?$mersenne_twister@_K$0EA@$0BDI@$0JM@$0BP@$0?EKPNJAKFFGJJOGBH@$0BN@$0BB@$0HBNGHPPPONKGAAAA@$0CF@$0?IBBCAAAAAAAAA@$0CL@@std@@QEAA@_K00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?seed@?$mersenne_twister@_K$0EA@$0BDI@$0JM@$0BP@$0?EKPNJAKFFGJJOGBH@$0BN@$0BB@$0HBNGHPPPONKGAAAA@$0CF@$0?IBBCAAAAAAAAA@$0CL@@std@@QEAAX_K0@Z DD imagerel $LN6
	DD	imagerel $LN6+220
	DD	imagerel $unwind$?seed@?$mersenne_twister@_K$0EA@$0BDI@$0JM@$0BP@$0?EKPNJAKFFGJJOGBH@$0BN@$0BB@$0HBNGHPPPONKGAAAA@$0CF@$0?IBBCAAAAAAAAA@$0CL@@std@@QEAAX_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$mersenne_twister_engine@_K$0EA@$0BDI@$0JM@$0BP@$0?EKPNJAKFFGJJOGBH@$0BN@$0FFFFFFFFFFFFFFFF@$0BB@$0HBNGHPPPONKGAAAA@$0CF@$0?IBBCAAAAAAAAA@$0CL@$0FIFBPECNEMJFHPCN@@std@@QEAA@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+103
	DD	imagerel $unwind$??0?$mersenne_twister_engine@_K$0EA@$0BDI@$0JM@$0BP@$0?EKPNJAKFFGJJOGBH@$0BN@$0FFFFFFFFFFFFFFFF@$0BB@$0HBNGHPPPONKGAAAA@$0CF@$0?IBBCAAAAAAAAA@$0CL@$0FIFBPECNEMJFHPCN@@std@@QEAA@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$uniform_int@H@std@@QEAA@HH@Z DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??0?$uniform_int@H@std@@QEAA@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Adjust@?$uniform_int@H@std@@CAII@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?_Adjust@?$uniform_int@H@std@@CAII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Adjust@?$uniform_int@H@std@@CAIIU?$integral_constant@_N$00@2@@Z DD imagerel $LN5
	DD	imagerel $LN5+97
	DD	imagerel $unwind$?_Adjust@?$uniform_int@H@std@@CAIIU?$integral_constant@_N$00@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0param_type@?$uniform_int@H@std@@QEAA@HH@Z DD imagerel $LN3
	DD	imagerel $LN3+93
	DD	imagerel $unwind$??0param_type@?$uniform_int@H@std@@QEAA@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Init@param_type@?$uniform_int@H@std@@QEAAXHH@Z DD imagerel $LN5
	DD	imagerel $LN5+175
	DD	imagerel $unwind$?_Init@param_type@?$uniform_int@H@std@@QEAAXHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$uniform_int_distribution@H@std@@QEAA@HH@Z DD imagerel $LN3
	DD	imagerel $LN3+93
	DD	imagerel $unwind$??0?$uniform_int_distribution@H@std@@QEAA@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?RVrandom_device@std@@@?$uniform_int@H@std@@QEBAHAEAVrandom_device@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$??$?RVrandom_device@std@@@?$uniform_int@H@std@@QEBAHAEAVrandom_device@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z DD imagerel $LN8
	DD	imagerel $LN8+305
	DD	imagerel $unwind$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA DD imagerel ?dtor$0@?0???0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA+67
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA DD imagerel ?dtor$1@?0???0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA
	DD	imagerel ?dtor$1@?0???0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA+44
	DD	imagerel $unwind$?dtor$1@?0???0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+189
	DD	imagerel $unwind$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD imagerel $LN5
	DD	imagerel $LN5+115
	DD	imagerel $unwind$?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z DD imagerel $LN4
	DD	imagerel $LN4+163
	DD	imagerel $unwind$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA DD imagerel ?dtor$0@?0???0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA+40
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+107
	DD	imagerel $unwind$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD imagerel $LN14
	DD	imagerel $LN14+602
	DD	imagerel $unwind$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z DD imagerel $LN24
	DD	imagerel $LN24+1268
	DD	imagerel $unwind$?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+358
	DD	imagerel $unwind$?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ DD imagerel $LN11
	DD	imagerel $LN11+423
	DD	imagerel $unwind$?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z DD imagerel $LN24
	DD	imagerel $LN24+1014
	DD	imagerel $unwind$?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z DD imagerel $LN15
	DD	imagerel $LN15+666
	DD	imagerel $unwind$?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXPEBD_KH@Z DD imagerel $LN9
	DD	imagerel $LN9+465
	DD	imagerel $unwind$?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXPEBD_KH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ DD imagerel $LN6
	DD	imagerel $LN6+293
	DD	imagerel $unwind$?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+152
	DD	imagerel $unwind$?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__autoclassinit2@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$?__autoclassinit2@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+129
	DD	imagerel $unwind$??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@$$QEAV10@@Z DD imagerel $LN5
	DD	imagerel $LN5+138
	DD	imagerel $unwind$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@$$QEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Traits_find@U?$char_traits@D@std@@@std@@YA_KQEBD_K101@Z DD imagerel $LN11
	DD	imagerel $LN11+320
	DD	imagerel $unwind$??$_Traits_find@U?$char_traits@D@std@@@std@@YA_KQEBD_K101@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+128
	DD	imagerel $unwind$??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@D@std@@YAPEADPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??$_Unfancy@D@std@@YAPEADPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??$addressof@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?9DD@std@@YA_NAEBV?$allocator@D@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??$?9DD@std@@YA_NAEBV?$allocator@D@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??$move@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAV?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??$move@AEAV?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+123
	DD	imagerel $unwind$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z@4HA DD imagerel ?dtor$0@?0???$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z@4HA
	DD	imagerel ?dtor$0@?0???$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z DD imagerel $LN3
	DD	imagerel $LN3+117
	DD	imagerel $unwind$??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$fpos@U_Mbstatet@@@std@@QEAA@U_Mbstatet@@_J@Z DD imagerel $LN3
	DD	imagerel $LN3+117
	DD	imagerel $unwind$??0?$fpos@U_Mbstatet@@@std@@QEAA@U_Mbstatet@@_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?state@?$fpos@U_Mbstatet@@@std@@QEBA?AU_Mbstatet@@XZ DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$?state@?$fpos@U_Mbstatet@@@std@@QEBA?AU_Mbstatet@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?seekpos@?$fpos@U_Mbstatet@@@std@@QEBA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$?seekpos@?$fpos@U_Mbstatet@@@std@@QEBA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z DD imagerel $LN11
	DD	imagerel $LN11+354
	DD	imagerel $unwind$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA DD imagerel ?dtor$0@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA+37
	DD	imagerel $unwind$?dtor$0@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEADPEBU_Container_base12@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+95
	DD	imagerel $unwind$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEADPEBU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN4
	DD	imagerel $LN4+219
	DD	imagerel $unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+204
	DD	imagerel $unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN5
	DD	imagerel $LN5+319
	DD	imagerel $unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA DD imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+106
	DD	imagerel $unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@D@std@@YAPEADAEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??$addressof@D@std@@YAPEADAEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Pocca@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@AEBV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$??$_Pocca@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@AEBV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+90
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$destroy@PEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$??$destroy@PEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Max_value@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+128
	DD	imagerel $unwind$??$_Max_value@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R<lambda_319d5e083f45f90dcdce5dce53cbb275>@@QEBA@QEADQEBD_KD@Z DD imagerel ??R<lambda_319d5e083f45f90dcdce5dce53cbb275>@@QEBA@QEADQEBD_KD@Z
	DD	imagerel ??R<lambda_319d5e083f45f90dcdce5dce53cbb275>@@QEBA@QEADQEBD_KD@Z+169
	DD	imagerel $unwind$??R<lambda_319d5e083f45f90dcdce5dce53cbb275>@@QEBA@QEADQEBD_KD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z DD imagerel ??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z
	DD	imagerel ??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z+560
	DD	imagerel $unwind$??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Refancy@PEAD$0A@@std@@YAPEADPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??$_Refancy@PEAD$0A@@std@@YAPEADPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@QEBA@QEAD_KD@Z DD imagerel ??R<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@QEBA@QEAD_KD@Z
	DD	imagerel ??R<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@QEBA@QEAD_KD@Z+136
	DD	imagerel $unwind$??R<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@QEBA@QEAD_KD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z DD imagerel ??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z
	DD	imagerel ??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z+423
	DD	imagerel $unwind$??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z DD imagerel ??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z
	DD	imagerel ??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z+135
	DD	imagerel $unwind$??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z DD imagerel ??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z
	DD	imagerel ??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z+422
	DD	imagerel $unwind$??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R<lambda_e1befb086ad3257e3f042a63030725f7>@@QEBA@QEADQEBD_K2D@Z DD imagerel ??R<lambda_e1befb086ad3257e3f042a63030725f7>@@QEBA@QEADQEBD_K2D@Z
	DD	imagerel ??R<lambda_e1befb086ad3257e3f042a63030725f7>@@QEBA@QEADQEBD_K2D@Z+191
	DD	imagerel $unwind$??R<lambda_e1befb086ad3257e3f042a63030725f7>@@QEBA@QEADQEBD_K2D@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Reallocate_grow_by@V<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@Z DD imagerel ??$_Reallocate_grow_by@V<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@Z
	DD	imagerel ??$_Reallocate_grow_by@V<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@Z+584
	DD	imagerel $unwind$??$_Reallocate_grow_by@V<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R<lambda_65e615be2a453ca0576c979606f46740>@@QEBA@QEADQEBD_K12@Z DD imagerel ??R<lambda_65e615be2a453ca0576c979606f46740>@@QEBA@QEADQEBD_K12@Z
	DD	imagerel ??R<lambda_65e615be2a453ca0576c979606f46740>@@QEBA@QEADQEBD_K12@Z+190
	DD	imagerel $unwind$??R<lambda_65e615be2a453ca0576c979606f46740>@@QEBA@QEADQEBD_K12@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Reallocate_grow_by@V<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@Z DD imagerel ??$_Reallocate_grow_by@V<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@Z
	DD	imagerel ??$_Reallocate_grow_by@V<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@Z+586
	DD	imagerel $unwind$??$_Reallocate_grow_by@V<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@PEADAEBQEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEADAEBQEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+111
	DD	imagerel $unwind$??$construct@PEADAEBQEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEADAEBQEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@$$QEAU31@@Z DD imagerel $LN3
	DD	imagerel $LN3+117
	DD	imagerel $unwind$??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@$$QEAU31@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@$$CBD@std@@YAPEBDPEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??$_Unfancy@$$CBD@std@@YAPEBDPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DD imagerel $LN25
	DD	imagerel $LN25+1029
	DD	imagerel $unwind$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA DD imagerel ?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA DD imagerel ?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA
	DD	imagerel ?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA+80
	DD	imagerel $unwind$?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??$move@AEAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Eval@Vrandom_device@std@@@?$uniform_int@H@std@@AEBAHAEAVrandom_device@1@HH@Z DD imagerel $LN5
	DD	imagerel $LN5+244
	DD	imagerel $unwind$??$_Eval@Vrandom_device@std@@@?$uniform_int@H@std@@AEBAHAEAVrandom_device@1@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z DD imagerel $LN21
	DD	imagerel $LN21+683
	DD	imagerel $unwind$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z@4HA DD imagerel ?dtor$0@?0???$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z@4HA
	DD	imagerel ?dtor$0@?0???$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0???$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z@4HA DD imagerel ?catch$1@?0???$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z@4HA
	DD	imagerel ?catch$1@?0???$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z@4HA+80
	DD	imagerel $unwind$?catch$1@?0???$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+95
	DD	imagerel $unwind$??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0U?$integral_constant@_N$00@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0U?$integral_constant@_N$00@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Pocca@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@AEBV10@U?$integral_constant@_N$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??$_Pocca@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@AEBV10@U?$integral_constant@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQEBD_K01@Z DD imagerel $LN5
	DD	imagerel $LN5+142
	DD	imagerel $unwind$??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQEBD_K01@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@QEBA@QEADQEBD_K@Z DD imagerel ??R<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@QEBA@QEADQEBD_K@Z
	DD	imagerel ??R<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@QEBA@QEADQEBD_K@Z+99
	DD	imagerel $unwind$??R<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@QEBA@QEADQEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Reallocate_grow_by@V<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@$$V@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@@Z DD imagerel ??$_Reallocate_grow_by@V<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@$$V@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@@Z
	DD	imagerel ??$_Reallocate_grow_by@V<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@$$V@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@@Z+533
	DD	imagerel $unwind$??$_Reallocate_grow_by@V<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@$$V@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R<lambda_f3a66ab6a0570788f31503db83886f49>@@QEBA@QEADQEBD_K212@Z DD imagerel ??R<lambda_f3a66ab6a0570788f31503db83886f49>@@QEBA@QEADQEBD_K212@Z
	DD	imagerel ??R<lambda_f3a66ab6a0570788f31503db83886f49>@@QEBA@QEADQEBD_K212@Z+233
	DD	imagerel $unwind$??R<lambda_f3a66ab6a0570788f31503db83886f49>@@QEBA@QEADQEBD_K212@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Reallocate_grow_by@V<lambda_f3a66ab6a0570788f31503db83886f49>@@_KPEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_f3a66ab6a0570788f31503db83886f49>@@_KPEBD2@Z DD imagerel ??$_Reallocate_grow_by@V<lambda_f3a66ab6a0570788f31503db83886f49>@@_KPEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_f3a66ab6a0570788f31503db83886f49>@@_KPEBD2@Z
	DD	imagerel ??$_Reallocate_grow_by@V<lambda_f3a66ab6a0570788f31503db83886f49>@@_KPEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_f3a66ab6a0570788f31503db83886f49>@@_KPEBD2@Z+614
	DD	imagerel $unwind$??$_Reallocate_grow_by@V<lambda_f3a66ab6a0570788f31503db83886f49>@@_KPEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_f3a66ab6a0570788f31503db83886f49>@@_KPEBD2@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN4
	DD	imagerel $LN4+219
	DD	imagerel $unwind$??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+204
	DD	imagerel $unwind$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z DD imagerel $LN4
	DD	imagerel $LN4+133
	DD	imagerel $unwind$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z@4HA DD imagerel ?dtor$0@?0???0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z@4HA
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAA@AEAVrandom_device@1@@Z DD imagerel $LN6
	DD	imagerel $LN6+199
	DD	imagerel $unwind$??0?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAA@AEAVrandom_device@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAII@Z DD imagerel $LN10
	DD	imagerel $LN10+276
	DD	imagerel $unwind$??R?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_all_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAIXZ DD imagerel $LN6
	DD	imagerel $LN6+161
	DD	imagerel $unwind$?_Get_all_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@AEAAIXZ DD imagerel $LN7
	DD	imagerel $LN7+113
	DD	imagerel $unwind$?_Get_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@AEAAIXZ
pdata	ENDS
CRT$XCU	SEGMENT
?G³os$initializer$@@3P6AXXZEA DQ FLAT:??__EG³os@@YAXXZ	; G³os$initializer$
CRT$XCU	ENDS
;	COMDAT __real@4042800000000000
CONST	SEGMENT
__real@4042800000000000 DQ 04042800000000000r	; 37
CONST	ENDS
;	COMDAT __real@4040000000000000
CONST	SEGMENT
__real@4040000000000000 DQ 04040000000000000r	; 32
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_cast@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_cast@std@@8 DD imagerel ??_R0?AVbad_cast@std@@@8 ; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_cast@std@@8
rdata$r	SEGMENT
??_R2bad_cast@std@@8 DD imagerel ??_R1A@?0A@EA@bad_cast@std@@8 ; std::bad_cast::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_cast@std@@8
rdata$r	SEGMENT
??_R3bad_cast@std@@8 DD 00H				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_cast@std@@6B@
rdata$r	SEGMENT
??_R4bad_cast@std@@6B@ DD 01H				; std::bad_cast::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_cast@std@@@8
	DD	imagerel ??_R3bad_cast@std@@8
	DD	imagerel ??_R4bad_cast@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_fstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_fstream@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_fstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_fstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_fstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_fstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_fstream@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_fstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_fstream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3EA@ios_base@std@@8
	DD	imagerel ??_R17A@3EA@?$_Iosb@H@std@@8
	DD	imagerel ??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3EA@ios_base@std@@8
	DD	imagerel ??_R17A@3EA@?$_Iosb@H@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_fstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_fstream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_fstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	0aH
	DD	imagerel ??_R2?$basic_fstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_fstream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_fstream@DU?$char_traits@D@std@@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_fstream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_fstream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_fstream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_fstream@DU?$char_traits@D@std@@@std@@6B@ DD 01H ; std::basic_fstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	0b8H
	DD	04H
	DD	imagerel ??_R0?AV?$basic_fstream@DU?$char_traits@D@std@@@std@@@8
	DD	imagerel ??_R3?$basic_fstream@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R4?$basic_fstream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3EA@ios_base@std@@8
	DD	imagerel ??_R17A@3EA@?$_Iosb@H@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	imagerel ??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_ofstream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ DD 01H ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	0a8H
	DD	04H
	DD	imagerel ??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8
	DD	imagerel ??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_filebuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ DD 01H ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8
	DD	imagerel ??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3EA@ios_base@std@@8
	DD	imagerel ??_R17A@3EA@?$_Iosb@H@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	imagerel ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (16,-1,0,64)'
	DD	03H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17A@3EA@?$_Iosb@H@std@@8 DD imagerel ??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
	DD	00H
	DD	08H
	DD	00H
	DD	04H
	DD	040H
	DD	imagerel ??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@A@3EA@ios_base@std@@8 DD imagerel ??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
	DD	01H
	DD	00H
	DD	00H
	DD	04H
	DD	040H
	DD	imagerel ??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Iosb@H@std@@8 DD imagerel ??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R2?$_Iosb@H@std@@8 DD imagerel ??_R1A@?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R3?$_Iosb@H@std@@8 DD 00H				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Iosb@H@std@@@8
data$r	SEGMENT
??_R0?AV?$_Iosb@H@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::_Iosb<int> `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$_Iosb@H@std@@', 00H
data$r	ENDS
;	COMDAT ??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$_Iosb@H@std@@8 DD imagerel ??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ios_base@std@@8
rdata$r	SEGMENT
??_R2ios_base@std@@8 DD imagerel ??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
	DD	imagerel ??_R17?0A@EA@?$_Iosb@H@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3ios_base@std@@8
rdata$r	SEGMENT
??_R3ios_base@std@@8 DD 00H				; std::ios_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVios_base@std@@@8
data$r	SEGMENT
??_R0?AVios_base@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::ios_base `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVios_base@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ios_base@std@@8 DD imagerel ??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@ios_base@std@@8
	DD	imagerel ??_R17?0A@EA@?$_Iosb@H@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD 00H	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_ios@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	imagerel ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3EA@ios_base@std@@8
	DD	imagerel ??_R17A@3EA@?$_Iosb@H@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	imagerel ??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_istream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3EA@ios_base@std@@8
	DD	imagerel ??_R17A@3EA@?$_Iosb@H@std@@8
	DD	imagerel ??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3EA@ios_base@std@@8
	DD	imagerel ??_R17A@3EA@?$_Iosb@H@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	09H
	DD	imagerel ??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_iostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD imagerel ??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3EA@ios_base@std@@8
	DD	imagerel ??_R17A@3EA@?$_Iosb@H@std@@8
	DD	imagerel ??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3EA@ios_base@std@@8
	DD	imagerel ??_R17A@3EA@?$_Iosb@H@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	0aH
	DD	imagerel ??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$alloc'
	DB	'ator@D@2@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 01H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	098H
	DD	04H
	DD	imagerel ??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	imagerel ??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
	DD	imagerel ??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD imagerel ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocato'
	DB	'r@D@2@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 01H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	imagerel ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
	DD	imagerel ??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_cast@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
data$r	SEGMENT
??_R0?AVbad_cast@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_cast@std@@', 00H
data$r	ENDS
;	COMDAT _CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
_CTA2?AVbad_cast@std@@ DD 02H
	DD	imagerel _CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT _TI2?AVbad_cast@std@@
xdata$x	SEGMENT
_TI2?AVbad_cast@std@@ DD 00H
	DD	imagerel ??1bad_cast@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_1GA@FJHEAOJP@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAi?$AAn?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAm?$AAa?$AAx?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?5?$AAf@
CONST	SEGMENT
??_C@_1GA@FJHEAOJP@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAi?$AAn?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAm?$AAa?$AAx?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?5?$AAf@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'm', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'a'
	DB	00H, 'n', 00H, 'd', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'x', 00H
	DB	' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 's', 00H, ' ', 00H, 'f', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, 'u', 00H, 'n', 00H, 'i', 00H, 'f', 00H, 'o'
	DB	00H, 'r', 00H, 'm', 00H, '_', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'"', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@FNLBOEA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAu?$AAn?$AAi?$AAf?$AAo?$AAr?$AAm?$AA_?$AAi?$AAn?$AAt?$AA?$DM?$AAi?$AAn?$AAt?$AA?$DO?$AA?3?$AA?3?$AAp?$AAa?$AAr?$AAa?$AAm?$AA_?$AAt?$AAy?$AAp@
CONST	SEGMENT
??_C@_1FC@FNLBOEA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAu?$AAn?$AAi?$AAf?$AAo?$AAr?$AAm?$AA_?$AAi?$AAn?$AAt?$AA?$DM?$AAi?$AAn?$AAt?$AA?$DO?$AA?3?$AA?3?$AAp?$AAa?$AAr?$AAa?$AAm?$AA_?$AAt?$AAy?$AAp@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, '_', 00H, 'i'
	DB	00H, 'n', 00H, 't', 00H, '<', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'>', 00H, ':', 00H, ':', 00H, 'p', 00H, 'a', 00H, 'r', 00H, 'a'
	DB	00H, 'm', 00H, '_', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H
	DB	':', 00H, ':', 00H, '_', 00H, 'I', 00H, 'n', 00H, 'i', 00H, 't'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FM@PKOPLGBP@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAi?$AAn?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAm?$AAa?$AAx?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?5?$AAf?$AAo@
CONST	SEGMENT
??_C@_1FM@PKOPLGBP@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAi?$AAn?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAm?$AAa?$AAx?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?5?$AAf?$AAo@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'm', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'a', 00H, 'n'
	DB	00H, 'd', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'x', 00H, ' ', 00H
	DB	'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm', 00H, 'e', 00H, 'n'
	DB	00H, 't', 00H, 's', 00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 'u', 00H, 'n', 00H, 'i', 00H, 'f', 00H, 'o', 00H, 'r'
	DB	00H, 'm', 00H, '_', 00H, 'i', 00H, 'n', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1KO@CMPBFHAM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa@
CONST	SEGMENT
??_C@_1KO@CMPBFHAM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' '
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'c', 00H, 'a'
	DB	00H, 'u', 00H, 's', 00H, 'e', 00H, ' ', 00H, 'i', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 's', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't'
	DB	00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a', 00H
	DB	'n', 00H, 'g', 00H, 'e', 00H, ' ', 00H, '(', 00H, 'e', 00H, '.'
	DB	00H, 'g', 00H, '.', 00H, ' ', 00H, 'a', 00H, 'n', 00H, ' ', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ')', 00H
	DB	'"', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1KK@GJPIMLCF@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@
CONST	SEGMENT
??_C@_1KK@GJPIMLCF@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@ DB 'c'
	DB	00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'i'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'c', 00H, 'a', 00H, 'u'
	DB	00H, 's', 00H, 'e', 00H, ' ', 00H, 'i', 00H, 't', 00H, ' ', 00H
	DB	'i', 00H, 's', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, ' '
	DB	00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, ' ', 00H, '(', 00H, 'e', 00H, '.', 00H, 'g'
	DB	00H, '.', 00H, ' ', 00H, 'a', 00H, 'n', 00H, ' ', 00H, 'e', 00H
	DB	'n', 00H, 'd', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BAO@BGLBIONH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa@
CONST	SEGMENT
??_C@_1BAO@BGLBIONH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' '
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'c', 00H, 'a'
	DB	00H, 'u', 00H, 's', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'h', 00H
	DB	'e', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'w', 00H, 'a', 00H
	DB	's', 00H, '"', 00H, ' ', 00H, '"', 00H, ' ', 00H, 'i', 00H, 'n'
	DB	00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '(', 00H, 'e', 00H, '.'
	DB	00H, 'g', 00H, '.', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, ' ', 00H, 'o', 00H, 'c', 00H, 'c', 00H
	DB	'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'd', 00H, ',', 00H, ' '
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, ' ', 00H, 'w', 00H, 'a', 00H, 's', 00H, ' ', 00H, 'd', 00H
	DB	'e', 00H, 's', 00H, 't', 00H, 'r', 00H, 'o', 00H, 'y', 00H, 'e'
	DB	00H, 'd', 00H, ')', 00H, '"', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BAE@HEEJFKO@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@
CONST	SEGMENT
??_C@_1BAE@HEEJFKO@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@ DB 'c'
	DB	00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'i'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'c', 00H, 'a', 00H, 'u'
	DB	00H, 's', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 'w', 00H, 'a', 00H, 's', 00H
	DB	' ', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i'
	DB	00H, 'd', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'(', 00H, 'e', 00H, '.', 00H, 'g', 00H, '.', 00H, ' ', 00H, 'r'
	DB	00H, 'e', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H
	DB	'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'o'
	DB	00H, 'c', 00H, 'c', 00H, 'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H
	DB	'd', 00H, ',', 00H, ' ', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 't'
	DB	00H, 'h', 00H, 'e', 00H, ' ', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'w', 00H, 'a', 00H, 's'
	DB	00H, ' ', 00H, 'd', 00H, 'e', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'o', 00H, 'y', 00H, 'e', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GO@PNALIMBD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?9?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa@
CONST	SEGMENT
??_C@_1GO@PNALIMBD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?9?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i'
	DB	00H, 'n', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'c', 00H, 'h'
	DB	00H, 'a', 00H, 'r', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '*', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1GK@EPFFCEAH@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?9?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl@
CONST	SEGMENT
??_C@_1GK@EPFFCEAH@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?9?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl@ DB 'c'
	DB	00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'v', 00H
	DB	'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 's', 00H, 't', 00H, 'r'
	DB	00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'i', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?$DM?$AAc?$AAh?$AAa?$AAr?$AA?0?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAs?$AAt@
CONST	SEGMENT
??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?$DM?$AAc?$AAh?$AAa?$AAr?$AA?0?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAs?$AAt@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'b', 00H, 'a', 00H
	DB	's', 00H, 'i', 00H, 'c', 00H, '_', 00H, 's', 00H, 't', 00H, 'r'
	DB	00H, 'i', 00H, 'n', 00H, 'g', 00H, '<', 00H, 'c', 00H, 'h', 00H
	DB	'a', 00H, 'r', 00H, ',', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u'
	DB	00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_'
	DB	00H, 't', 00H, 'r', 00H, 'a', 00H, 'i', 00H, 't', 00H, 's', 00H
	DB	'<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '>', 00H, ','
	DB	00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' '
	DB	00H, '[', 00H, ']', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H
	DB	's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r', 00H, 'i'
	DB	00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n'
	DB	00H, 'g', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1NC@MMDHPGIM@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1NC@MMDHPGIM@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'f'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'p', 00H, 'r', 00H
	DB	'i', 00H, 's', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\'
	DB	00H, 't', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'm', 00H, 's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '1', 00H, '1', 00H, '.', 00H, '2', 00H, '5', 00H
	DB	'5', 00H, '0', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@HLOPCNMJ@Opcja?5szybko?$JM?f?5g?$LDosu?5odczytu?5prz@
CONST	SEGMENT
??_C@_0ED@HLOPCNMJ@Opcja?5szybko?$JM?f?5g?$LDosu?5odczytu?5prz@ DB 'Opcja'
	DB	' szybko', 09cH, 0e6H, ' g', 0b3H, 'osu odczytu przyjmuje wart'
	DB	'o', 09cH, 'ci w przedziale <0;5>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@BADOFEHO@Opcja?5g?$LDos?5odczytu?5numeru?5przyjm@
CONST	SEGMENT
??_C@_0EB@BADOFEHO@Opcja?5g?$LDos?5odczytu?5numeru?5przyjm@ DB 'Opcja g', 0b3H
	DB	'os odczytu numeru przyjmuje warto', 09cH, 'ci w przedziale <0'
	DB	';10>', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@OKKJHGDF@Opcja?5kontynuowania?5gry?5przyjmuj@
CONST	SEGMENT
??_C@_0DJ@OKKJHGDF@Opcja?5kontynuowania?5gry?5przyjmuj@ DB 'Opcja kontynu'
	DB	'owania gry przyjmuje warto', 09cH, 'ci tylko 0 lub 1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@LNDFINPO@Stan?5d?$JPwi?jk?sw?5przyjmuje?5warto?$JMci@
CONST	SEGMENT
??_C@_0CP@LNDFINPO@Stan?5d?$JPwi?jk?sw?5przyjmuje?5warto?$JMci@ DB 'Stan '
	DB	'd', 09fH, 'wi', 0eaH, 'k', 0f3H, 'w przyjmuje warto', 09cH, 'c'
	DB	'i tylko 0 lub 1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@ODEFLMCC@Kwota?5pocz?$LJtkowa?5nie?5mo?$LPe?5by?f?5mn@
CONST	SEGMENT
??_C@_0CP@ODEFLMCC@Kwota?5pocz?$LJtkowa?5nie?5mo?$LPe?5by?f?5mn@ DB 'Kwot'
	DB	'a pocz', 0b9H, 'tkowa nie mo', 0bfH, 'e by', 0e6H, ' mniejsza'
	DB	' od zera', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@CJFGHGHP@Czas?5przerwy?5d?$JPwi?jku?5nie?5mo?$LPe?5by@
CONST	SEGMENT
??_C@_0DD@CJFGHGHP@Czas?5przerwy?5d?$JPwi?jku?5nie?5mo?$LPe?5by@ DB 'Czas'
	DB	' przerwy d', 09fH, 'wi', 0eaH, 'ku nie mo', 0bfH, 'e by', 0e6H
	DB	' mniejszy od zera', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@EDACBMH@Styl?5liczeia?5wygranej?5przyjmuje?5@
CONST	SEGMENT
??_C@_0DH@EDACBMH@Styl?5liczeia?5wygranej?5przyjmuje?5@ DB 'Styl liczeia '
	DB	'wygranej przyjmuje warto', 09cH, 'ci tylko 0 lub 1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@FJFKONPC@Jedna?5z?5deklaracji?5w?5sprawie?5obr@
CONST	SEGMENT
??_C@_0EG@FJFKONPC@Jedna?5z?5deklaracji?5w?5sprawie?5obr@ DB 'Jedna z dek'
	DB	'laracji w sprawie obrot', 0f3H, 'w ruletki musi by', 0e6H, ' '
	DB	'wi', 0eaH, 'ksza od zera', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@PACHBLM@Ilo?$JM?f?5max?5obrot?sw?5ruletki?5nie?5mo@
CONST	SEGMENT
??_C@_0DF@PACHBLM@Ilo?$JM?f?5max?5obrot?sw?5ruletki?5nie?5mo@ DB 'Ilo', 09cH
	DB	0e6H, ' max obrot', 0f3H, 'w ruletki nie mo', 0bfH, 'e by', 0e6H
	DB	' mniejsza od 0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@EDLBNLFA@Ilo?$JM?f?5minimalna?5obrot?sw?5ruletki?5@
CONST	SEGMENT
??_C@_0DL@EDLBNLFA@Ilo?$JM?f?5minimalna?5obrot?sw?5ruletki?5@ DB 'Ilo', 09cH
	DB	0e6H, ' minimalna obrot', 0f3H, 'w ruletki nie mo', 0bfH, 'e b'
	DB	'y', 0e6H, ' mniejsza od 0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BFHMOJCD@Ustawiam?5domy?$JMne?5ustawienie?$AA@
CONST	SEGMENT
??_C@_0BM@BFHMOJCD@Ustawiam?5domy?$JMne?5ustawienie?$AA@ DB 'Ustawiam dom'
	DB	'y', 09cH, 'ne ustawienie', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@FGDMKFMP@Warto?$JM?f?5wolnego?5czasu?5przeskoku?5@
CONST	SEGMENT
??_C@_0GC@FGDMKFMP@Warto?$JM?f?5wolnego?5czasu?5przeskoku?5@ DB 'Warto', 09cH
	DB	0e6H, ' wolnego czasu przeskoku kulki musi by', 0e6H, ' ni', 0bfH
	DB	'sza ni', 0bfH, ' warto', 09cH, 0e6H, ' szybkiego czasu przesk'
	DB	'oku kulki', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GE@BGEAJNPD@Brak?5plik?sw?5dla?5efekt?sw?5d?$JPwi?jkow@
CONST	SEGMENT
??_C@_0GE@BGEAJNPD@Brak?5plik?sw?5dla?5efekt?sw?5d?$JPwi?jkow@ DB 'Brak p'
	DB	'lik', 0f3H, 'w dla efekt', 0f3H, 'w d', 09fH, 'wi', 0eaH, 'ko'
	DB	'wych, wy', 0b3H, 0b9H, 'czono efekty d', 09fH, 'wi', 0eaH, 'k'
	DB	'owe muzyczne, w', 0b3H, 0b9H, 'czono efekty systemowe', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@BAJGLA@Brak?5wszystkich?5plik?sw?5dla?5g?$LDosu@
CONST	SEGMENT
??_C@_0EA@BAJGLA@Brak?5wszystkich?5plik?sw?5dla?5g?$LDosu@ DB 'Brak wszys'
	DB	'tkich plik', 0f3H, 'w dla g', 0b3H, 'osu, wy', 0b3H, 0b9H, 'c'
	DB	'zono odczytywanie wyniku', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KMDKNFGN@?1?$AA@
CONST	SEGMENT
??_C@_01KMDKNFGN@?1?$AA@ DB '/', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01IDAFKMJL@_?$AA@
CONST	SEGMENT
??_C@_01IDAFKMJL@_?$AA@ DB '_', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05CMOJBPHN@G?$LDos?1?$AA@
CONST	SEGMENT
??_C@_05CMOJBPHN@G?$LDos?1?$AA@ DB 'G', 0b3H, 'os/', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06JIAINCN@Agata?5?$AA@
CONST	SEGMENT
??_C@_06JIAINCN@Agata?5?$AA@ DB 'Agata ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EKGILLAK@Jan?52?$AA@
CONST	SEGMENT
??_C@_05EKGILLAK@Jan?52?$AA@ DB 'Jan 2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BMCAFNM@Maja?52?$AA@
CONST	SEGMENT
??_C@_06BMCAFNM@Maja?52?$AA@ DB 'Maja 2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MPNHLKL@Ewa?52?$AA@
CONST	SEGMENT
??_C@_05MPNHLKL@Ewa?52?$AA@ DB 'Ewa 2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OJOJFOLI@Jacek?52?$AA@
CONST	SEGMENT
??_C@_07OJOJFOLI@Jacek?52?$AA@ DB 'Jacek 2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04HPMJBKOE@Jan?5?$AA@
CONST	SEGMENT
??_C@_04HPMJBKOE@Jan?5?$AA@ DB 'Jan ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NBKDILMB@Maja?5?$AA@
CONST	SEGMENT
??_C@_05NBKDILMB@Maja?5?$AA@ DB 'Maja ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IDLHMCEL@Ewa?5?$AA@
CONST	SEGMENT
??_C@_04IDLHMCEL@Ewa?5?$AA@ DB 'Ewa ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ECCMNMIG@Jacek?5?$AA@
CONST	SEGMENT
??_C@_06ECCMNMIG@Jacek?5?$AA@ DB 'Jacek ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PLEOEKGI@Nowa?5gra?5rozpoczeta?5dnia?5?$AA@
CONST	SEGMENT
??_C@_0BK@PLEOEKGI@Nowa?5gra?5rozpoczeta?5dnia?5?$AA@ DB 'Nowa gra rozpoc'
	DB	'zeta dnia ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01JLIPDDHJ@?3?$AA@
CONST	SEGMENT
??_C@_01JLIPDDHJ@?3?$AA@ DB ':', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EHKBBICH@Gra?5rozpoczeta?5dnia?5?$AA@
CONST	SEGMENT
??_C@_0BF@EHKBBICH@Gra?5rozpoczeta?5dnia?5?$AA@ DB 'Gra rozpoczeta dnia ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4?$AA@
CONST	SEGMENT
??_C@_01LFCBOECM@?4?$AA@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KHLIPMCA@?5o?5godzinie?5?$AA@
CONST	SEGMENT
??_C@_0N@KHLIPMCA@?5o?5godzinie?5?$AA@ DB ' o godzinie ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CILJHICG@Gra?5rozpoczeta?5dnia?$AA@
CONST	SEGMENT
??_C@_0BE@CILJHICG@Gra?5rozpoczeta?5dnia?$AA@ DB 'Gra rozpoczeta dnia', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@POHKAIHJ@Obstawiono?5za?$AA@
CONST	SEGMENT
??_C@_0O@POHKAIHJ@Obstawiono?5za?$AA@ DB 'Obstawiono za', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EAGHPBJK@Obstawiono?5zaklad?$AA@
CONST	SEGMENT
??_C@_0BC@EAGHPBJK@Obstawiono?5zaklad?$AA@ DB 'Obstawiono zaklad', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DIDIAOPI@?5Wylosowano?$AA@
CONST	SEGMENT
??_C@_0M@DIDIAOPI@?5Wylosowano?$AA@ DB ' Wylosowano', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DAFLKCID@Wylosowano?$AA@
CONST	SEGMENT
??_C@_0L@DAFLKCID@Wylosowano?$AA@ DB 'Wylosowano', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LFKNBKJA@Posiadasz?$AA@
CONST	SEGMENT
??_C@_09LFKNBKJA@Posiadasz?$AA@ DB 'Posiadasz', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w?$AA@
CONST	SEGMENT
??_C@_01NOFIACDB@w?$AA@ DB 'w', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01DICPFPGM@k?$AA@
CONST	SEGMENT
??_C@_01DICPFPGM@k?$AA@ DB 'k', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05GFDBGFDH@d?4wav?$AA@
CONST	SEGMENT
??_C@_05GFDBGFDH@d?4wav?$AA@ DB 'd.wav', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05ODKFBHJJ@g?4wav?$AA@
CONST	SEGMENT
??_C@_05ODKFBHJJ@g?4wav?$AA@ DB 'g.wav', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LDGIIGCK@b?4wav?$AA@
CONST	SEGMENT
??_C@_05LDGIIGCK@b?4wav?$AA@ DB 'b.wav', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LALOIELB@r?4wav?$AA@
CONST	SEGMENT
??_C@_05LALOIELB@r?4wav?$AA@ DB 'r.wav', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MEKKEGFB@n?4wav?$AA@
CONST	SEGMENT
??_C@_05MEKKEGFB@n?4wav?$AA@ DB 'n.wav', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PNHGCFLK@p?4wav?$AA@
CONST	SEGMENT
??_C@_05PNHGCFLK@p?4wav?$AA@ DB 'p.wav', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IBLEHOMF@?4wav?$AA@
CONST	SEGMENT
??_C@_04IBLEHOMF@?4wav?$AA@ DB '.wav', 00H		; `string'
CONST	ENDS
;	COMDAT ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
	DD	088H
CONST	ENDS
;	COMDAT ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
	DD	098H
CONST	ENDS
;	COMDAT ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DQ FLAT:??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DQ	FLAT:??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@EAAPEAXI@Z
CONST	ENDS
;	COMDAT ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DQ FLAT:??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DQ	FLAT:??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z
	DQ	FLAT:?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAXXZ
	DQ	FLAT:?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAXXZ
	DQ	FLAT:?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z
	DQ	FLAT:?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z
	DQ	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JXZ
	DQ	FLAT:?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ
	DQ	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
	DQ	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z
	DQ	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z
	DQ	FLAT:?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	DQ	FLAT:?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	DQ	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAPEAV12@PEAD_J@Z
	DQ	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
	DQ	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_C@_03FHDFACOC@NIE?$AA@
CONST	SEGMENT
??_C@_03FHDFACOC@NIE?$AA@ DB 'NIE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PKPMGAKA@Nie?$AA@
CONST	SEGMENT
??_C@_03PKPMGAKA@Nie?$AA@ DB 'Nie', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FKMOMPJO@nie?$AA@
CONST	SEGMENT
??_C@_03FKMOMPJO@nie?$AA@ DB 'nie', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PIABMJCP@TAK?$AA@
CONST	SEGMENT
??_C@_03PIABMJCP@TAK?$AA@ DB 'TAK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FFMIKLGN@Tak?$AA@
CONST	SEGMENT
??_C@_03FFMIKLGN@Tak?$AA@ DB 'Tak', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PFPKAEFD@tak?$AA@
CONST	SEGMENT
??_C@_03PFPKAEFD@tak?$AA@ DB 'tak', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01PFHFFBPC@t?$AA@
CONST	SEGMENT
??_C@_01PFHFFBPC@t?$AA@ DB 't', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KCLBOCHC@Na?5koncie?5masz?5?$AA@
CONST	SEGMENT
??_C@_0BA@KCLBOCHC@Na?5koncie?5masz?5?$AA@ DB 'Na koncie masz ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@MONJHHJM@$?0?5czy?5chcesz?5grac?5dalej?$CI?8t?8?5?9?5t@
CONST	SEGMENT
??_C@_0DB@MONJHHJM@$?0?5czy?5chcesz?5grac?5dalej?$CI?8t?8?5?9?5t@ DB '$, '
	DB	'czy chcesz grac dalej(''t'' - tak, ''n'' - nie) ?', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@BIICBBPD@Nie?5mo?$LPesz?5kontynuowa?f?0?5przegra?$LD@
CONST	SEGMENT
??_C@_0CM@BIICBBPD@Nie?5mo?$LPesz?5kontynuowa?f?0?5przegra?$LD@ DB 'Nie m'
	DB	'o', 0bfH, 'esz kontynuowa', 0e6H, ', przegra', 0b3H, 'e', 09cH
	DB	' wszystko', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@EMPIFKEH@Obstawiles?5niepoprawnie?0?5przegra@
CONST	SEGMENT
??_C@_0CF@EMPIFKEH@Obstawiles?5niepoprawnie?0?5przegra@ DB 'Obstawiles ni'
	DB	'epoprawnie, przegra', 0b3H, 'e', 09cH, ' ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@FAPGEAPP@Obstawiles?5niepoprawnie?5lecz?5uda@
CONST	SEGMENT
??_C@_0EF@FAPGEAPP@Obstawiles?5niepoprawnie?5lecz?5uda@ DB 'Obstawiles ni'
	DB	'epoprawnie lecz uda', 0b3H, 'o Ci si', 0eaH, ', dostajesz po', 0b3H
	DB	'ow', 0eaH, ' zak', 0b3H, 'adu ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MBIMKPJH@Obstawiles?5poprawnie?0?5wygrywasz?5@
CONST	SEGMENT
??_C@_0CB@MBIMKPJH@Obstawiles?5poprawnie?0?5wygrywasz?5@ DB 'Obstawiles p'
	DB	'oprawnie, wygrywasz ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DEPNMBPN@$?4?$AA@
CONST	SEGMENT
??_C@_02DEPNMBPN@$?4?$AA@ DB '$.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KNHHEEKP@?5?5?$AA@
CONST	SEGMENT
??_C@_02KNHHEEKP@?5?5?$AA@ DB '  ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MGHEPNFN@?$AI?$AI?$AA@
CONST	SEGMENT
??_C@_02MGHEPNFN@?$AI?$AI?$AA@ DB 08H, 08H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@PMIHJCIC@Nie?5mo?$LPesz?5obstawi?f?5ujemn?$LJ?5kwot?$LJ@
CONST	SEGMENT
??_C@_0CJ@PMIHJCIC@Nie?5mo?$LPesz?5obstawi?f?5ujemn?$LJ?5kwot?$LJ@ DB 'Ni'
	DB	'e mo', 0bfH, 'esz obstawi', 0e6H, ' ujemn', 0b9H, ' kwot', 0b9H
	DB	' zak', 0b3H, 'adu', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CMKDFAEK@Nie?5masz?5tyle?5pieni?jdzy?$AA@
CONST	SEGMENT
??_C@_0BI@CMKDFAEK@Nie?5masz?5tyle?5pieni?jdzy?$AA@ DB 'Nie masz tyle pie'
	DB	'ni', 0eaH, 'dzy', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@LJDHNEHM@Nie?5mo?$LPesz?5obstawi?f?5zerowego?5zak@
CONST	SEGMENT
??_C@_0CF@LJDHNEHM@Nie?5mo?$LPesz?5obstawi?f?5zerowego?5zak@ DB 'Nie mo', 0bfH
	DB	'esz obstawi', 0e6H, ' zerowego zak', 0b3H, 'adu', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@OGNPPNBN@Wprowadzi?$LDe?f?5nieprawid?$LDow?$LJ?5warto@
CONST	SEGMENT
??_C@_0CD@OGNPPNBN@Wprowadzi?$LDe?f?5nieprawid?$LDow?$LJ?5warto@ DB 'Wpro'
	DB	'wadzi', 0b3H, 'e', 0e6H, ' nieprawid', 0b3H, 'ow', 0b9H, ' wa'
	DB	'rto', 09cH, 0e6H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OMMBNPEF@Masz?5?$AA@
CONST	SEGMENT
??_C@_05OMMBNPEF@Masz?5?$AA@ DB 'Masz ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BGACGNBA@$?0?5jak?$LJ?5kwot?j?5chcesz?5obstawi?f?5wy@
CONST	SEGMENT
??_C@_0CF@BGACGNBA@$?0?5jak?$LJ?5kwot?j?5chcesz?5obstawi?f?5wy@ DB '$, ja'
	DB	'k', 0b9H, ' kwot', 0eaH, ' chcesz obstawi', 0e6H, ' wynik?', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KPIPOMFB@36?$AA@
CONST	SEGMENT
??_C@_02KPIPOMFB@36?$AA@ DB '36', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02IEKCLPJC@35?$AA@
CONST	SEGMENT
??_C@_02IEKCLPJC@35?$AA@ DB '35', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JNLJIOND@34?$AA@
CONST	SEGMENT
??_C@_02JNLJIOND@34?$AA@ DB '34', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02NCPIBIBE@33?$AA@
CONST	SEGMENT
??_C@_02NCPIBIBE@33?$AA@ DB '33', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MLODCJFF@32?$AA@
CONST	SEGMENT
??_C@_02MLODCJFF@32?$AA@ DB '32', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OAMOHKJG@31?$AA@
CONST	SEGMENT
??_C@_02OAMOHKJG@31?$AA@ DB '31', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PJNFELNH@30?$AA@
CONST	SEGMENT
??_C@_02PJNFELNH@30?$AA@ DB '30', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02CJNFJKKJ@29?$AA@
CONST	SEGMENT
??_C@_02CJNFJKKJ@29?$AA@ DB '29', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DAMOKLOI@28?$AA@
CONST	SEGMENT
??_C@_02DAMOKLOI@28?$AA@ DB '28', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LHFGLHCH@27?$AA@
CONST	SEGMENT
??_C@_02LHFGLHCH@27?$AA@ DB '27', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KOENIGGG@26?$AA@
CONST	SEGMENT
??_C@_02KOENIGGG@26?$AA@ DB '26', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02IFGANFKF@25?$AA@
CONST	SEGMENT
??_C@_02IFGANFKF@25?$AA@ DB '25', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JMHLOEOE@24?$AA@
CONST	SEGMENT
??_C@_02JMHLOEOE@24?$AA@ DB '24', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02NDDKHCCD@23?$AA@
CONST	SEGMENT
??_C@_02NDDKHCCD@23?$AA@ DB '23', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MKCBEDGC@22?$AA@
CONST	SEGMENT
??_C@_02MKCBEDGC@22?$AA@ DB '22', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OBAMBAKB@21?$AA@
CONST	SEGMENT
??_C@_02OBAMBAKB@21?$AA@ DB '21', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PIBHCBOA@20?$AA@
CONST	SEGMENT
??_C@_02PIBHCBOA@20?$AA@ DB '20', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02CLJDCEPA@19?$AA@
CONST	SEGMENT
??_C@_02CLJDCEPA@19?$AA@ DB '19', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DCIIBFLB@18?$AA@
CONST	SEGMENT
??_C@_02DCIIBFLB@18?$AA@ DB '18', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LFBAAJHO@17?$AA@
CONST	SEGMENT
??_C@_02LFBAAJHO@17?$AA@ DB '17', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KMALDIDP@16?$AA@
CONST	SEGMENT
??_C@_02KMALDIDP@16?$AA@ DB '16', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02IHCGGLPM@15?$AA@
CONST	SEGMENT
??_C@_02IHCGGLPM@15?$AA@ DB '15', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JODNFKLN@14?$AA@
CONST	SEGMENT
??_C@_02JODNFKLN@14?$AA@ DB '14', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02NBHMMMHK@13?$AA@
CONST	SEGMENT
??_C@_02NBHMMMHK@13?$AA@ DB '13', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MIGHPNDL@12?$AA@
CONST	SEGMENT
??_C@_02MIGHPNDL@12?$AA@ DB '12', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02ODEKKOPI@11?$AA@
CONST	SEGMENT
??_C@_02ODEKKOPI@11?$AA@ DB '11', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LAKCGALK@9?$AA@
CONST	SEGMENT
??_C@_01LAKCGALK@9?$AA@ DB '9', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KJLJFBPL@8?$AA@
CONST	SEGMENT
??_C@_01KJLJFBPL@8?$AA@ DB '8', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01COCBENDE@7?$AA@
CONST	SEGMENT
??_C@_01COCBENDE@7?$AA@ DB '7', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01DHDKHMHF@6?$AA@
CONST	SEGMENT
??_C@_01DHDKHMHF@6?$AA@ DB '6', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01BMBHCPLG@5?$AA@
CONST	SEGMENT
??_C@_01BMBHCPLG@5?$AA@ DB '5', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FAMBOPH@4?$AA@
CONST	SEGMENT
??_C@_01FAMBOPH@4?$AA@ DB '4', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EKENIIDA@3?$AA@
CONST	SEGMENT
??_C@_01EKENIIDA@3?$AA@ DB '3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FDFGLJHB@2?$AA@
CONST	SEGMENT
??_C@_01FDFGLJHB@2?$AA@ DB '2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01HIHLOKLC@1?$AA@
CONST	SEGMENT
??_C@_01HIHLOKLC@1?$AA@ DB '1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
CONST	SEGMENT
??_C@_01GBGANLPD@0?$AA@ DB '0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03OAIKGDBA@w12?$AA@
CONST	SEGMENT
??_C@_03OAIKGDBA@w12?$AA@ DB 'w12', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MLKHDAND@w11?$AA@
CONST	SEGMENT
??_C@_03MLKHDAND@w11?$AA@ DB 'w11', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NCLMABJC@w10?$AA@
CONST	SEGMENT
??_C@_03NCLMABJC@w10?$AA@ DB 'w10', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FPIENFIC@w9?$AA@
CONST	SEGMENT
??_C@_02FPIENFIC@w9?$AA@ DB 'w9', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EGJPOEMD@w8?$AA@
CONST	SEGMENT
??_C@_02EGJPOEMD@w8?$AA@ DB 'w8', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MBAHPIAM@w7?$AA@
CONST	SEGMENT
??_C@_02MBAHPIAM@w7?$AA@ DB 'w7', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02NIBMMJEN@w6?$AA@
CONST	SEGMENT
??_C@_02NIBMMJEN@w6?$AA@ DB 'w6', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PDDBJKIO@w5?$AA@
CONST	SEGMENT
??_C@_02PDDBJKIO@w5?$AA@ DB 'w5', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OKCKKLMP@w4?$AA@
CONST	SEGMENT
??_C@_02OKCKKLMP@w4?$AA@ DB 'w4', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KFGLDNAI@w3?$AA@
CONST	SEGMENT
??_C@_02KFGLDNAI@w3?$AA@ DB 'w3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LMHAAMEJ@w2?$AA@
CONST	SEGMENT
??_C@_02LMHAAMEJ@w2?$AA@ DB 'w2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LAFHGHBM@k3?$AA@
CONST	SEGMENT
??_C@_02LAFHGHBM@k3?$AA@ DB 'k3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KJEMFGFN@k2?$AA@
CONST	SEGMENT
??_C@_02KJEMFGFN@k2?$AA@ DB 'k2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LPLHEDKD@d?$AA@
CONST	SEGMENT
??_C@_01LPLHEDKD@d?$AA@ DB 'd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01OJONOECF@b?$AA@
CONST	SEGMENT
??_C@_01OJONOECF@b?$AA@ DB 'b', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EFFIKLCJ@n?$AA@
CONST	SEGMENT
??_C@_01EFFIKLCJ@n?$AA@ DB 'n', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@FOKBNGLG@0?5?9?536?5?9?5pojedyncze?5pole?5o?5odpow@
CONST	SEGMENT
??_C@_0CP@FOKBNGLG@0?5?9?536?5?9?5pojedyncze?5pole?5o?5odpow@ DB '0 - 36 '
	DB	'- pojedyncze pole o odpowiednim numerze', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@KMEGGBFA@w1?0?5w2?0?5?4?4?4?0?5w12?5?9?5wiersz?5trzech@
CONST	SEGMENT
??_C@_0CJ@KMEGGBFA@w1?0?5w2?0?5?4?4?4?0?5w12?5?9?5wiersz?5trzech@ DB 'w1,'
	DB	' w2, ..., w12 - wiersz trzech numer', 0f3H, 'w', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@EJBDEIIK@k1?0?5k2?0?5k3?5?9?5kolumna?51?0?5kolumna?5@
CONST	SEGMENT
??_C@_0CN@EJBDEIIK@k1?0?5k2?0?5k3?5?9?5kolumna?51?0?5kolumna?5@ DB 'k1, k'
	DB	'2, k3 - kolumna 1, kolumna 2, kolumna 3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CHNPGJIO@d?5?9?5dolna?5po?$LDowa?$AA@
CONST	SEGMENT
??_C@_0BB@CHNPGJIO@d?5?9?5dolna?5po?$LDowa?$AA@ DB 'd - dolna po', 0b3H, 'o'
	DB	'wa', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FMNKHOJE@g?5?9?5g?srna?5po?$LDowa?$AA@
CONST	SEGMENT
??_C@_0BB@FMNKHOJE@g?5?9?5g?srna?5po?$LDowa?$AA@ DB 'g - g', 0f3H, 'rna p'
	DB	'o', 0b3H, 'owa', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LKBFHLDI@b?5?9?5czarne?$CIblack?$CJ?$AA@
CONST	SEGMENT
??_C@_0BC@LKBFHLDI@b?5?9?5czarne?$CIblack?$CJ?$AA@ DB 'b - czarne(black)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GOMOHEMO@r?5?9?5czerwone?$CIred?$CJ?$AA@
CONST	SEGMENT
??_C@_0BC@GOMOHEMO@r?5?9?5czerwone?$CIred?$CJ?$AA@ DB 'r - czerwone(red)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GNAADEAG@n?5?9?5nieparzyste?$AA@
CONST	SEGMENT
??_C@_0BA@GNAADEAG@n?5?9?5nieparzyste?$AA@ DB 'n - nieparzyste', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KLINIBPG@p?5?9?5parzyste?$AA@
CONST	SEGMENT
??_C@_0N@KLINIBPG@p?5?9?5parzyste?$AA@ DB 'p - parzyste', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@FGCBIOFJ@Jak?$LJ?5opcje?5chcesz?5obstawic?5?$DP?5?$CIzg@
CONST	SEGMENT
??_C@_0DM@FGCBIOFJ@Jak?$LJ?5opcje?5chcesz?5obstawic?5?$DP?5?$CIzg@ DB 'Ja'
	DB	'k', 0b9H, ' opcje chcesz obstawic ? (zgodnie z poni', 0bfH, 's'
	DB	'zym opisem) :', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05PDJBBECF@pause?$AA@
CONST	SEGMENT
??_C@_05PDJBBECF@pause?$AA@ DB 'pause', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DNPALCEH@Efekty?5dzwi?jkowe?1zwielokrotnenie@
CONST	SEGMENT
??_C@_0CF@DNPALCEH@Efekty?5dzwi?jkowe?1zwielokrotnenie@ DB 'Efekty dzwi', 0eaH
	DB	'kowe/zwielokrotnenie.wav', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GDCLDFHN@Gratuluje?5zwi?jkszy?$LDe?$JM?5?$AA@
CONST	SEGMENT
??_C@_0BH@GDCLDFHN@Gratuluje?5zwi?jkszy?$LDe?$JM?5?$AA@ DB 'Gratuluje zwi'
	DB	0eaH, 'kszy', 0b3H, 'e', 09cH, ' ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CAHFKDBP@?5krotnie?5sw?sj?5zas?sb?5finansowy?$AA@
CONST	SEGMENT
??_C@_0BO@CAHFKDBP@?5krotnie?5sw?sj?5zas?sb?5finansowy?$AA@ DB ' krotnie '
	DB	'sw', 0f3H, 'j zas', 0f3H, 'b finansowy', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GGDJEIKJ@Efekty?5dzwi?jkowe?1wygrana2?4wav?$AA@
CONST	SEGMENT
??_C@_0BO@GGDJEIKJ@Efekty?5dzwi?jkowe?1wygrana2?4wav?$AA@ DB 'Efekty dzwi'
	DB	0eaH, 'kowe/wygrana2.wav', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@OAKNDKAH@Efekty?5dzwi?jkowe?1wygrana1?4wav?$AA@
CONST	SEGMENT
??_C@_0BO@OAKNDKAH@Efekty?5dzwi?jkowe?1wygrana1?4wav?$AA@ DB 'Efekty dzwi'
	DB	0eaH, 'kowe/wygrana1.wav', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@DCKMMPCF@Gratuluje?5zwi?jkszy?$LDe?$JM?5sw?sj?5zas?sb@
CONST	SEGMENT
??_C@_0CL@DCKMMPCF@Gratuluje?5zwi?jkszy?$LDe?$JM?5sw?sj?5zas?sb@ DB 'Grat'
	DB	'uluje zwi', 0eaH, 'kszy', 0b3H, 'e', 09cH, ' sw', 0f3H, 'j za'
	DB	's', 0f3H, 'b finansowy', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DACGNLHK@Efekty?5dzwi?jkowe?1bankrut?4wav?$AA@
CONST	SEGMENT
??_C@_0BN@DACGNLHK@Efekty?5dzwi?jkowe?1bankrut?4wav?$AA@ DB 'Efekty dzwi', 0eaH
	DB	'kowe/bankrut.wav', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@GCHIFPGC@Ko?qczysz?5gr?j?5z?5wynikiem?5?$AA@
CONST	SEGMENT
??_C@_0BJ@GCHIFPGC@Ko?qczysz?5gr?j?5z?5wynikiem?5?$AA@ DB 'Ko', 0f1H, 'cz'
	DB	'ysz gr', 0eaH, ' z wynikiem ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NPCHEJIF@?5Przegrales?5?$AA@
CONST	SEGMENT
??_C@_0N@NPCHEJIF@?5Przegrales?5?$AA@ DB ' Przegrales ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LJEGNEAJ@?5Dostajesz?5polowe?5zak?$LDadu?5?$AA@
CONST	SEGMENT
??_C@_0BL@LJEGNEAJ@?5Dostajesz?5polowe?5zak?$LDadu?5?$AA@ DB ' Dostajesz '
	DB	'polowe zak', 0b3H, 'adu ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01PBGHHLMH@?$AH?$AA@
CONST	SEGMENT
??_C@_01PBGHHLMH@?$AH?$AA@ DB 07H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07KIPBKJCE@win?4wav?$AA@
CONST	SEGMENT
??_C@_07KIPBKJCE@win?4wav?$AA@ DB 'win.wav', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GNFNLGIH@?5Posiadasz?5?$AA@
CONST	SEGMENT
??_C@_0M@GNFNLGIH@?5Posiadasz?5?$AA@ DB ' Posiadasz ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GPFIMODH@?5Wygrywasz?5?$AA@
CONST	SEGMENT
??_C@_0M@GPFIMODH@?5Wygrywasz?5?$AA@ DB ' Wygrywasz ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CGNKGGIC@?5Wylosowano?5?$AA@
CONST	SEGMENT
??_C@_0N@CGNKGGIC@?5Wylosowano?5?$AA@ DB ' Wylosowano ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KHOJGJKF@?4?5?$AA@
CONST	SEGMENT
??_C@_02KHOJGJKF@?4?5?$AA@ DB '. ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IEHJKDDM@Wylosowano?5numer?5?$AA@
CONST	SEGMENT
??_C@_0BC@IEHJKDDM@Wylosowano?5numer?5?$AA@ DB 'Wylosowano numer ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@EJNBAHOM@Kulka?5w?5grze?0?5zaczekaj?5na?5wyloso@
CONST	SEGMENT
??_C@_0DA@EJNBAHOM@Kulka?5w?5grze?0?5zaczekaj?5na?5wyloso@ DB 'Kulka w gr'
	DB	'ze, zaczekaj na wylosowanie numeru...', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EKDPDLOA@?5Obstawiono?5zaklad?5?$AA@
CONST	SEGMENT
??_C@_0BE@EKDPDLOA@?5Obstawiono?5zaklad?5?$AA@ DB ' Obstawiono zaklad ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IOLLNBIB@Obstawiono?5zak?$LDad?5?$AA@
CONST	SEGMENT
??_C@_0BD@IOLLNBIB@Obstawiono?5zak?$LDad?5?$AA@ DB 'Obstawiono zak', 0b3H
	DB	'ad ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LMKDJHDC@Obstawiono?5za?5?$AA@
CONST	SEGMENT
??_C@_0P@LMKDJHDC@Obstawiono?5za?5?$AA@ DB 'Obstawiono za ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01EPMOAMKG@$?$AA@
CONST	SEGMENT
??_C@_01EPMOAMKG@$?$AA@ DB '$', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@EFIKGJBI@Uruchomiono?5ponownie?5gr?j?5z?5wy?$LD?$LJc@
CONST	SEGMENT
??_C@_0DJ@EFIKGJBI@Uruchomiono?5ponownie?5gr?j?5z?5wy?$LD?$LJc@ DB 'Uruch'
	DB	'omiono ponownie gr', 0eaH, ' z wy', 0b3H, 0b9H, 'czon', 0b9H, ' '
	DB	'opcj', 0b9H, ' kontynuowania', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KLDNCCFE@log_aktualny?4txt?$AA@
CONST	SEGMENT
??_C@_0BB@KLDNCCFE@log_aktualny?4txt?$AA@ DB 'log_aktualny.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GMFAENOC@log_og?slny?4txt?$AA@
CONST	SEGMENT
??_C@_0P@GMFAENOC@log_og?slny?4txt?$AA@ DB 'log_og', 0f3H, 'lny.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02JHFNFPIK@w1?$AA@
CONST	SEGMENT
??_C@_02JHFNFPIK@w1?$AA@ DB 'w1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02ICGBAFJO@k1?$AA@
CONST	SEGMENT
??_C@_02ICGBAFJO@k1?$AA@ DB 'k1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01JEJKBAGA@g?$AA@
CONST	SEGMENT
??_C@_01JEJKBAGA@g?$AA@ DB 'g', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01JBBJJEPG@p?$AA@
CONST	SEGMENT
??_C@_01JBBJJEPG@p?$AA@ DB 'p', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PKFBJPLJ@10?$AA@
CONST	SEGMENT
??_C@_02PKFBJPLJ@10?$AA@ DB '10', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06JGCGFIEG@polish?$AA@
CONST	SEGMENT
??_C@_06JGCGFIEG@polish?$AA@ DB 'polish', 00H		; `string'
CONST	ENDS
;	COMDAT ??_8?$basic_fstream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_fstream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_fstream<char,std::char_traits<char> >::`vbtable'
	DD	0a8H
CONST	ENDS
;	COMDAT ??_8?$basic_fstream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_fstream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_fstream<char,std::char_traits<char> >::`vbtable'
	DD	0b8H
CONST	ENDS
;	COMDAT ??_7?$basic_fstream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_fstream@DU?$char_traits@D@std@@@std@@6B@ DQ FLAT:??_R4?$basic_fstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_fstream<char,std::char_traits<char> >::`vftable'
	DQ	FLAT:??_E?$basic_fstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z
CONST	ENDS
;	COMDAT ??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ofstream<char,std::char_traits<char> >::`vbtable'
	DD	0a8H
CONST	ENDS
;	COMDAT ??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ DQ FLAT:??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ofstream<char,std::char_traits<char> >::`vftable'
	DQ	FLAT:??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z
CONST	ENDS
;	COMDAT ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ DQ FLAT:??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`vftable'
	DQ	FLAT:??_E?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
	DQ	FLAT:?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ
	DQ	FLAT:?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ
	DQ	FLAT:?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z
	DQ	FLAT:?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z
	DQ	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JXZ
	DQ	FLAT:?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
	DQ	FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
	DQ	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z
	DQ	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z
	DQ	FLAT:?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	DQ	FLAT:?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	DQ	FLAT:?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PEAD_J@Z
	DQ	FLAT:?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
	DQ	FLAT:?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_C@_1NA@LJCFENMG@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1NA@LJCFENMG@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'f'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'p', 00H, 'r', 00H
	DB	'i', 00H, 's', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\'
	DB	00H, 't', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'm', 00H, 's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '1', 00H, '1', 00H, '.', 00H, '2', 00H, '5', 00H
	DB	'5', 00H, '0', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'r', 00H
	DB	'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0exception@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast?$AA@ DB 'bad cast', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7bad_cast@std@@6B@
CONST	SEGMENT
??_7bad_cast@std@@6B@ DQ FLAT:??_R4bad_cast@std@@6B@	; std::bad_cast::`vftable'
	DQ	FLAT:??_Ebad_cast@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2_KB
CONST	SEGMENT
?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2_KB DQ ffffffffffffffffH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
CONST	ENDS
;	COMDAT ??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'D', 00H
	DB	'e', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Deallocate@std@@YAXPEAX_K1@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Deallocate@std@@YAXPEAX_K1@Z@4JA DD 065H ; `std::_Deallocate'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CC@GKJLLHIM@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@GKJLLHIM@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ DB '"'
	DB	00H, '_', 00H, 'P', 00H, 't', 00H, 'r', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, '"', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09GLJCAGLP@_Ptr?5?$CB?$DN?50?$AA@
CONST	SEGMENT
??_C@_09GLJCAGLP@_Ptr?5?$CB?$DN?50?$AA@ DB '_Ptr != 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@GPIBOEJC@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1NE@GPIBOEJC@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'f'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'p', 00H, 'r', 00H
	DB	'i', 00H, 's', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\'
	DB	00H, 't', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'm', 00H, 's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '1', 00H, '1', 00H, '.', 00H, '2', 00H, '5', 00H
	DB	'5', 00H, '0', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, '0'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@ DB '%', 00H, 'l', 00H, 's', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ DB '"'
	DB	00H, '_', 00H, 'P', 00H, 't', 00H, 'r', 00H, '_', 00H, 'c', 00H
	DB	'o', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	'"', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@
CONST	SEGMENT
??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@ DB '_Ptr_container !='
	DB	' 0', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Allocate@std@@YAPEAX_K0_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Allocate@std@@YAPEAX_K0_N@Z@4JA DD 031H ; `std::_Allocate'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'I', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H
	DB	'O', 00H, 'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, ' ', 00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H
	DB	'P', 00H, 'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_?$AAb?$AAa?$AAs?$AAe?$AA1?$AA2?$AA?3?$AA?3?$AA_?$AAO?$AAr?$AAp?$AAh?$AAa?$AAn?$AA_?$AAm@
CONST	SEGMENT
??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_?$AAb?$AAa?$AAs?$AAe?$AA1?$AA2?$AA?3?$AA?3?$AA_?$AAO?$AAr?$AAp?$AAh?$AAa?$AAn?$AA_?$AAm@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'I', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '_', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, '1', 00H
	DB	'2', 00H, ':', 00H, ':', 00H, '_', 00H, 'O', 00H, 'r', 00H, 'p'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, '_', 00H, 'm', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ DB 'I'
	DB	00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H, 'O', 00H
	DB	'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T', 00H, ' '
	DB	00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H, 'P', 00H
	DB	'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@JCGKDBDB@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1NE@JCGKDBDB@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'f'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'p', 00H, 'r', 00H
	DB	'i', 00H, 's', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\'
	DB	00H, 't', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'm', 00H, 's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '1', 00H, '1', 00H, '.', 00H, '2', 00H, '5', 00H
	DB	'5', 00H, '0', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception?$AA@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception?$AA@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@AEAAIXZ DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_all_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAIXZ DD 025052a01H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAII@Z DD 025052e01H
	DD	01122317H
	DD	0700b0025H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAA@AEAVrandom_device@1@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z DD imagerel ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z
	DD	0ffffffffH
	DD	imagerel ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z+83
	DD	00H
	DD	imagerel ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z+116
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z
	DD	0e8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z DD 025053f11H
	DD	0118231dH
	DD	070110021H
	DD	05010H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070023H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Reallocate_grow_by@V<lambda_f3a66ab6a0570788f31503db83886f49>@@_KPEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_f3a66ab6a0570788f31503db83886f49>@@_KPEBD2@Z DD 045054a19H
	DD	011d4322H
	DD	070160045H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0218H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Reallocate_grow_by@V<lambda_f3a66ab6a0570788f31503db83886f49>@@_KPEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_f3a66ab6a0570788f31503db83886f49>@@_KPEBD2@Z$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_f3a66ab6a0570788f31503db83886f49>,unsigned __int64,char const * __ptr64,unsigned __int64>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+7
??$_Reallocate_grow_by@V<lambda_f3a66ab6a0570788f31503db83886f49>@@_KPEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_f3a66ab6a0570788f31503db83886f49>@@_KPEBD2@Z$rtcVarDesc DD 0108H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_f3a66ab6a0570788f31503db83886f49>,unsigned __int64,char const * __ptr64,unsigned __int64>
	DD	08H
	DQ	FLAT:??$_Reallocate_grow_by@V<lambda_f3a66ab6a0570788f31503db83886f49>@@_KPEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_f3a66ab6a0570788f31503db83886f49>@@_KPEBD2@Z$rtcName$0
	ORG $+48
??$_Reallocate_grow_by@V<lambda_f3a66ab6a0570788f31503db83886f49>@@_KPEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_f3a66ab6a0570788f31503db83886f49>@@_KPEBD2@Z$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_f3a66ab6a0570788f31503db83886f49>,unsigned __int64,char const * __ptr64,unsigned __int64>
	DD	00H
	DQ	FLAT:??$_Reallocate_grow_by@V<lambda_f3a66ab6a0570788f31503db83886f49>@@_KPEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_f3a66ab6a0570788f31503db83886f49>@@_KPEBD2@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R<lambda_f3a66ab6a0570788f31503db83886f49>@@QEBA@QEADQEBD_K212@Z DD 025053901H
	DD	011d2322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Reallocate_grow_by@V<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@$$V@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@@Z DD 025054519H
	DD	0118231dH
	DD	070110041H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	01f8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Reallocate_grow_by@V<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@$$V@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@@Z$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_9013ee9e23efe4882b67eff5b0ecf103> >
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+7
??$_Reallocate_grow_by@V<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@$$V@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@@Z$rtcVarDesc DD 0e8H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_9013ee9e23efe4882b67eff5b0ecf103> >
	DD	08H
	DQ	FLAT:??$_Reallocate_grow_by@V<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@$$V@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@@Z$rtcName$0
	ORG $+48
??$_Reallocate_grow_by@V<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@$$V@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@@Z$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_9013ee9e23efe4882b67eff5b0ecf103> >
	DD	00H
	DQ	FLAT:??$_Reallocate_grow_by@V<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@$$V@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@QEBA@QEADQEBD_K@Z DD 025053901H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQEBD_K01@Z DD 025053901H
	DD	011d2322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Pocca@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@AEBV10@U?$integral_constant@_N$0A@@0@@Z DD 05053201H
	DD	0118031bH
	DD	070110019H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0U?$integral_constant@_N$00@0@@Z DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z DD 025053301H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0???$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z@4HA DD 031019H
	DD	0700c4210H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z DD imagerel ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
	DD	0ffffffffH
	DD	imagerel ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z+111
	DD	00H
	DD	imagerel ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z+131
	DD	01H
	DD	imagerel ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z+545
	DD	00H
	DD	imagerel ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z+620
	DD	0ffffffffH
	DD	imagerel ?catch$1@?0???$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z@4HA
	DD	00H
	DD	imagerel ?catch$1@?0???$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z@4HA+20
	DD	02H
	DD	imagerel ?catch$1@?0???$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z@4HA+65
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$1@?0???$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z@4HA
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	imagerel $handlerMap$0$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z@4HA
	DD	00H
	DD	00H
	DD	00H
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z DD 025055019H
	DD	0118231dH
	DD	070110041H
	DD	05010H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
	DD	01fbH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$rtcName$0 DB 05fH ; std::getline<char,std::char_traits<char>,std::allocator<char> >
	DB	04fH
	DB	06bH
	DB	00H
	ORG $+4
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$rtcName$1 DB 05fH ; std::getline<char,std::char_traits<char>,std::allocator<char> >
	DB	04dH
	DB	065H
	DB	074H
	DB	061H
	DB	064H
	DB	065H
	DB	06cH
	DB	069H
	DB	06dH
	DB	00H
	ORG $+1
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$rtcName$2 DB 05fH ; std::getline<char,std::char_traits<char>,std::allocator<char> >
	DB	04dH
	DB	065H
	DB	074H
	DB	061H
	DB	00H
	ORG $+6
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$rtcVarDesc DD 0b4H ; std::getline<char,std::char_traits<char>,std::allocator<char> >
	DD	04H
	DQ	FLAT:??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$rtcName$2
	DD	094H
	DD	04H
	DQ	FLAT:??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$rtcName$1
	DD	068H
	DD	010H
	DQ	FLAT:??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$rtcName$0
	ORG $+144
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$rtcFrameData DD 03H ; std::getline<char,std::char_traits<char>,std::allocator<char> >
	DD	00H
	DQ	FLAT:??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$rtcVarDesc
$cppxdata$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z DD 019930522H
	DD	03H
	DD	imagerel $stateUnwindMap$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
	DD	01H
	DD	imagerel $tryMap$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
	DD	08H
	DD	imagerel $ip2state$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
	DD	01d8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Eval@Vrandom_device@std@@@?$uniform_int@H@std@@AEBAHAEAVrandom_device@1@HH@Z DD 025054a19H
	DD	011d2322H
	DD	07016002fH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0168H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Eval@Vrandom_device@std@@@?$uniform_int@H@std@@AEBAHAEAVrandom_device@1@HH@Z$rtcName$0 DB 05fH ; std::uniform_int<int>::_Eval<std::random_device>
	DB	052H
	DB	06eH
	DB	067H
	DB	00H
	ORG $+11
??$_Eval@Vrandom_device@std@@@?$uniform_int@H@std@@AEBAHAEAVrandom_device@1@HH@Z$rtcVarDesc DD 028H ; std::uniform_int<int>::_Eval<std::random_device>
	DD	018H
	DQ	FLAT:??$_Eval@Vrandom_device@std@@@?$uniform_int@H@std@@AEBAHAEAVrandom_device@1@HH@Z$rtcName$0
	ORG $+48
??$_Eval@Vrandom_device@std@@@?$uniform_int@H@std@@AEBAHAEAVrandom_device@1@HH@Z$rtcFrameData DD 01H ; std::uniform_int<int>::_Eval<std::random_device>
	DD	00H
	DQ	FLAT:??$_Eval@Vrandom_device@std@@@?$uniform_int@H@std@@AEBAHAEAVrandom_device@1@HH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA DD 031019H
	DD	0700c4210H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DD imagerel ??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
	DD	0ffffffffH
	DD	imagerel ??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z+264
	DD	00H
	DD	imagerel ??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z+294
	DD	01H
	DD	imagerel ??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z+908
	DD	00H
	DD	imagerel ??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z+966
	DD	0ffffffffH
	DD	imagerel ?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA
	DD	00H
	DD	imagerel ?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA+20
	DD	02H
	DD	imagerel ?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA+65
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	imagerel $handlerMap$0$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA
	DD	00H
	DD	00H
	DD	00H
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DD 025055019H
	DD	0118231dH
	DD	070110045H
	DD	05010H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
	DD	021bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$rtcName$0 DB 05fH ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>
	DB	04fH
	DB	06bH
	DB	00H
	ORG $+12
??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$rtcVarDesc DD 068H ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>
	DD	010H
	DQ	FLAT:??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$rtcName$0
	ORG $+48
??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$rtcFrameData DD 01H ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>
	DD	00H
	DQ	FLAT:??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$rtcVarDesc
$cppxdata$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DD 019930522H
	DD	03H
	DD	imagerel $stateUnwindMap$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
	DD	01H
	DD	imagerel $tryMap$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
	DD	08H
	DD	imagerel $ip2state$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
	DD	01f8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z DD 05052d01H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@$$CBD@std@@YAPEBDPEBD@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@$$QEAU31@@Z DD 025063501H
	DD	0119231eH
	DD	070120020H
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@@Z DD 05052d01H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@PEADAEBQEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEADAEBQEAD@Z DD 025053401H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Reallocate_grow_by@V<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@Z DD 035054a19H
	DD	011d3322H
	DD	070160043H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0208H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Reallocate_grow_by@V<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@Z$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_65e615be2a453ca0576c979606f46740>,char const * __ptr64,unsigned __int64>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+7
??$_Reallocate_grow_by@V<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@Z$rtcVarDesc DD 0f8H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_65e615be2a453ca0576c979606f46740>,char const * __ptr64,unsigned __int64>
	DD	08H
	DQ	FLAT:??$_Reallocate_grow_by@V<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@Z$rtcName$0
	ORG $+48
??$_Reallocate_grow_by@V<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@Z$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_65e615be2a453ca0576c979606f46740>,char const * __ptr64,unsigned __int64>
	DD	00H
	DQ	FLAT:??$_Reallocate_grow_by@V<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R<lambda_65e615be2a453ca0576c979606f46740>@@QEBA@QEADQEBD_K12@Z DD 025053901H
	DD	011d2322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Reallocate_grow_by@V<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@Z DD 035054a19H
	DD	011d3322H
	DD	070160043H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0208H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Reallocate_grow_by@V<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@Z$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_e1befb086ad3257e3f042a63030725f7>,unsigned __int64,char>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+7
??$_Reallocate_grow_by@V<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@Z$rtcVarDesc DD 0f8H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_e1befb086ad3257e3f042a63030725f7>,unsigned __int64,char>
	DD	08H
	DQ	FLAT:??$_Reallocate_grow_by@V<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@Z$rtcName$0
	ORG $+48
??$_Reallocate_grow_by@V<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@Z$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_e1befb086ad3257e3f042a63030725f7>,unsigned __int64,char>
	DD	00H
	DQ	FLAT:??$_Reallocate_grow_by@V<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R<lambda_e1befb086ad3257e3f042a63030725f7>@@QEBA@QEADQEBD_K2D@Z DD 025053901H
	DD	011d2322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z DD 025054a19H
	DD	011d2322H
	DD	070160031H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0178H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const * __ptr64>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+7
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcVarDesc DD 0a8H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const * __ptr64>
	DD	08H
	DQ	FLAT:??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcName$0
	ORG $+48
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const * __ptr64>
	DD	00H
	DQ	FLAT:??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z DD 025053901H
	DD	011d2322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z DD 025054a19H
	DD	011d2322H
	DD	070160031H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0178H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>,char>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+7
??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z$rtcVarDesc DD 0a8H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>,char>
	DD	08H
	DQ	FLAT:??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z$rtcName$0
	ORG $+48
??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>,char>
	DD	00H
	DQ	FLAT:??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@QEBA@QEAD_KD@Z DD 025053901H
	DD	011d2322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Refancy@PEAD$0A@@std@@YAPEADPEAD@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z DD 035054a19H
	DD	011d3322H
	DD	070160043H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0208H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_319d5e083f45f90dcdce5dce53cbb275>,char>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+7
??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z$rtcVarDesc DD 0f8H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_319d5e083f45f90dcdce5dce53cbb275>,char>
	DD	08H
	DQ	FLAT:??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z$rtcName$0
	ORG $+48
??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_319d5e083f45f90dcdce5dce53cbb275>,char>
	DD	00H
	DQ	FLAT:??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R<lambda_319d5e083f45f90dcdce5dce53cbb275>@@QEBA@QEADQEBD_KD@Z DD 025053901H
	DD	011d2322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Max_value@_K@std@@YAAEB_KAEB_K0@Z DD 05052d01H
	DD	01130316H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$destroy@PEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEAD@Z DD 05052d01H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Pocca@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@AEBV10@@Z DD 025052f01H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Pocca@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@AEBV10@@Z$rtcName$0 DB 05fH ; std::_Pocca<std::allocator<char> >
	DB	054H
	DB	061H
	DB	067H
	DB	00H
	ORG $+11
??$_Pocca@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@AEBV10@@Z$rtcVarDesc DD 024H ; std::_Pocca<std::allocator<char> >
	DD	01H
	DQ	FLAT:??$_Pocca@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@AEBV10@@Z$rtcName$0
	ORG $+48
??$_Pocca@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@AEBV10@@Z$rtcFrameData DD 01H ; std::_Pocca<std::allocator<char> >
	DD	00H
	DQ	FLAT:??$_Pocca@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@AEBV10@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0@Z DD 025052f01H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0@Z$rtcName$0 DB 05fH ; std::_Pocma<std::allocator<char> >
	DB	054H
	DB	061H
	DB	067H
	DB	00H
	ORG $+11
??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0@Z$rtcVarDesc DD 024H ; std::_Pocma<std::allocator<char> >
	DD	01H
	DQ	FLAT:??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0@Z$rtcName$0
	ORG $+48
??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0@Z$rtcFrameData DD 01H ; std::_Pocma<std::allocator<char> >
	DD	00H
	DQ	FLAT:??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@D@std@@YAPEADAEAD@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
	DD	0ffffffffH
	DD	imagerel ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z+78
	DD	00H
	DD	imagerel ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z+302
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
	DD	0e8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 025053a11H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070023H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEADPEBU_Container_base12@1@@Z DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z DD imagerel ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z
	DD	0ffffffffH
	DD	imagerel ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z+83
	DD	00H
	DD	imagerel ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z+290
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z DD 025054619H
	DD	010e2313H
	DD	07007003fH
	DD	05006H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z
	DD	01eaH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z$rtcName$0 DB 05fH ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+2
??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z$rtcName$1 DB 05fH ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
	DB	050H
	DB	073H
	DB	061H
	DB	076H
	DB	065H
	DB	00H
	ORG $+1
??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z$rtcVarDesc DD 048H ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
	DD	08H
	DQ	FLAT:??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z$rtcName$0
	ORG $+96
??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z$rtcFrameData DD 02H ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
	DD	00H
	DQ	FLAT:??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z$rtcVarDesc
$cppxdata$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z
	DD	01d8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?seekpos@?$fpos@U_Mbstatet@@@std@@QEBA_JXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?state@?$fpos@U_Mbstatet@@@std@@QEBA?AU_Mbstatet@@XZ DD 05052d01H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$fpos@U_Mbstatet@@@std@@QEAA@U_Mbstatet@@_J@Z DD 05053201H
	DD	0118031bH
	DD	070110019H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z DD 05052d01H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z DD imagerel ??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z
	DD	0ffffffffH
	DD	imagerel ??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z+93
	DD	00H
	DD	imagerel ??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z+106
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z
	DD	0108H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z DD 025053a11H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAV?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?9DD@std@@YA_NAEBV?$allocator@D@0@0@Z DD 05052d01H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@D@std@@YAPEADPEAD@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z DD 05052d01H
	DD	01130316H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Traits_find@U?$char_traits@D@std@@@std@@YA_KQEBD_K101@Z DD 025053901H
	DD	011d2322H
	DD	070160025H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@$$QEAV10@@Z DD 025053401H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__autoclassinit2@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z DD 05052d01H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAHH@Z DD 05052c01H
	DD	01120315H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXPEBD_KH@Z DD 025053901H
	DD	011d2322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z DD 025053901H
	DD	011d2322H
	DD	070160023H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z DD 025053901H
	DD	011d2322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z DD 025052e01H
	DD	01122317H
	DD	0700b0029H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z DD 025052e01H
	DD	01122317H
	DD	0700b0037H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 025054019H
	DD	01132318H
	DD	0700c003bH
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	01c8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$rtcName$0 DB 05fH ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
	DB	053H
	DB	074H
	DB	072H
	DB	00H
	ORG $+3
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$rtcName$1 DB 05fH ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
	DB	053H
	DB	074H
	DB	072H
	DB	00H
	ORG $+3
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$rtcName$2 DB 05fH ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
	DB	04eH
	DB	075H
	DB	06cH
	DB	00H
	ORG $+3
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$rtcFrameData DD 03H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
	DD	00H
	DQ	FLAT:?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$rtcVarDesc
	ORG $+8
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$rtcVarDesc DD 0a8H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
	DD	028H
	DQ	FLAT:?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$rtcName$2
	DD	068H
	DD	028H
	DQ	FLAT:?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$rtcName$1
	DD	028H
	DD	028H
	DQ	FLAT:?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ DD imagerel ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z DD imagerel ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z
	DD	0ffffffffH
	DD	imagerel ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z+71
	DD	00H
	DD	imagerel ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z+146
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z
	DD	0e8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z DD 025053911H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 025052f01H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z DD imagerel ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z
	DD	0ffffffffH
	DD	imagerel ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z+139
	DD	00H
	DD	imagerel ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z+185
	DD	01H
	DD	imagerel ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z+288
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0???0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z
	DD	00H
	DD	00H
	DD	04H
	DD	imagerel $ip2state$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z
	DD	0108H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z DD 025053e11H
	DD	0117231cH
	DD	070100025H
	DD	0500fH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?RVrandom_device@std@@@?$uniform_int@H@std@@QEBAHAEAVrandom_device@1@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$uniform_int_distribution@H@std@@QEAA@HH@Z DD 025053301H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Init@param_type@?$uniform_int@H@std@@QEAAXHH@Z DD 035053301H
	DD	0117331cH
	DD	07010001fH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0param_type@?$uniform_int@H@std@@QEAA@HH@Z DD 025053301H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Adjust@?$uniform_int@H@std@@CAIIU?$integral_constant@_N$00@2@@Z DD 05052a01H
	DD	01110314H
	DD	0700a001dH
	DD	05009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Adjust@?$uniform_int@H@std@@CAII@Z DD 025052801H
	DD	010d2312H
	DD	070060025H
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$uniform_int@H@std@@QEAA@HH@Z DD 025053301H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$mersenne_twister_engine@_K$0EA@$0BDI@$0JM@$0BP@$0?EKPNJAKFFGJJOGBH@$0BN@$0FFFFFFFFFFFFFFFF@$0BB@$0HBNGHPPPONKGAAAA@$0CF@$0?IBBCAAAAAAAAA@$0CL@$0FIFBPECNEMJFHPCN@@std@@QEAA@_K@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?seed@?$mersenne_twister@_K$0EA@$0BDI@$0JM@$0BP@$0?EKPNJAKFFGJJOGBH@$0BN@$0BB@$0HBNGHPPPONKGAAAA@$0CF@$0?IBBCAAAAAAAAA@$0CL@@std@@QEAAX_K0@Z DD 05053201H
	DD	0118031bH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$mersenne_twister@_K$0EA@$0BDI@$0JM@$0BP@$0?EKPNJAKFFGJJOGBH@$0BN@$0BB@$0HBNGHPPPONKGAAAA@$0CF@$0?IBBCAAAAAAAAA@$0CL@@std@@QEAA@_K00@Z DD 025053901H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEBDXZ DD 035052a01H
	DD	010e3313H
	DD	07007002bH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEBDPEBU_Container_base12@1@@Z DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z DD 025052f01H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$2@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA DD 031019H
	DD	0700c4210H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD imagerel ??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
	DD	0ffffffffH
	DD	imagerel ??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z+106
	DD	00H
	DD	imagerel ??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z+190
	DD	01H
	DD	imagerel ??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z+206
	DD	00H
	DD	imagerel ??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z+233
	DD	02H
	DD	imagerel ??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z+766
	DD	00H
	DD	imagerel ??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z+879
	DD	0ffffffffH
	DD	imagerel ?catch$2@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA
	DD	00H
	DD	imagerel ?catch$2@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA+20
	DD	03H
	DD	imagerel ?catch$2@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA+65
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$2@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	imagerel $handlerMap$0$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA
	DD	00H
	DD	00H
	DD	00H
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 025054b19H
	DD	01132318H
	DD	0700c004dH
	DD	0500bH
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
	DD	025bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$rtcName$0 DB 05fH ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
	DB	04fH
	DB	06bH
	DB	00H
??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$rtcName$1 DB 05fH ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
	DB	04dH
	DB	065H
	DB	074H
	DB	061H
	DB	00H
	ORG $+6
??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$rtcVarDesc DD 0d4H ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
	DD	04H
	DQ	FLAT:??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$rtcName$1
	DD	068H
	DD	010H
	DQ	FLAT:??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$rtcName$0
	ORG $+96
??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$rtcFrameData DD 02H ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
	DD	00H
	DQ	FLAT:??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$rtcVarDesc
$cppxdata$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 019930522H
	DD	04H
	DD	imagerel $stateUnwindMap$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
	DD	01H
	DD	imagerel $tryMap$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
	DD	0aH
	DD	imagerel $ip2state$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
	DD	0228H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z DD imagerel ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z
	DD	0ffffffffH
	DD	imagerel ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z+100
	DD	00H
	DD	imagerel ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z+227
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z DD 025055019H
	DD	0118231dH
	DD	07011002fH
	DD	05010H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z
	DD	0162H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z$rtcName$0 DB 05fH ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
	DB	041H
	DB	06eH
	DB	073H
	DB	00H
	ORG $+11
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z$rtcVarDesc DD 028H ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
	DD	028H
	DQ	FLAT:??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z$rtcName$0
	ORG $+48
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z$rtcFrameData DD 01H ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
	DD	00H
	DQ	FLAT:??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z$rtcVarDesc
$cppxdata$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z
	DD	0148H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QEAV10@QEBD@Z DD 025053401H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 031019H
	DD	0700c4210H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD imagerel ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	0ffffffffH
	DD	imagerel ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z+269
	DD	00H
	DD	imagerel ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z+299
	DD	01H
	DD	imagerel ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z+912
	DD	00H
	DD	imagerel ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z+970
	DD	0ffffffffH
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	00H
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+20
	DD	02H
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+65
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	imagerel $handlerMap$0$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	00H
	DD	00H
	DD	00H
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 025054b19H
	DD	01132318H
	DD	0700c0049H
	DD	0500bH
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	023bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcName$0 DB 05fH ; std::operator<<<std::char_traits<char> >
	DB	04fH
	DB	06bH
	DB	00H
	ORG $+12
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcVarDesc DD 088H ; std::operator<<<std::char_traits<char> >
	DD	010H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcName$0
	ORG $+48
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcFrameData DD 01H ; std::operator<<<std::char_traits<char> >
	DD	00H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcVarDesc
$cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 019930522H
	DD	03H
	DD	imagerel $stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	01H
	DD	imagerel $tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	08H
	DD	imagerel $ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	0218H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_D?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$basic_fstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__autoclassinit2@?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z DD 05052d01H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?close@?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?open@?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAXPEBDHH@Z DD 025053901H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_fstream@DU?$char_traits@D@std@@@std@@UEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel ??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DD	0ffffffffH
	DD	imagerel ??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ+134
	DD	00H
	DD	imagerel ??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ+180
	DD	01H
	DD	imagerel ??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ+279
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0???0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DD	00H
	DD	00H
	DD	04H
	DD	imagerel $ip2state$??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DD	0108H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 025053911H
	DD	01122317H
	DD	0700b0025H
	DD	0500aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__autoclassinit2@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z DD 05052d01H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEBV?$codecvt@DDU_Mbstatet@@@2@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$4@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$3@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ DD imagerel ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ
	DD	0ffffffffH
	DD	imagerel ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ+237
	DD	00H
	DD	imagerel ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ+274
	DD	01H
	DD	imagerel ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ+359
	DD	02H
	DD	imagerel ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ+430
	DD	01H
	DD	imagerel ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ+443
	DD	00H
	DD	imagerel ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ+551
	DD	03H
	DD	imagerel ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ+580
	DD	00H
	DD	imagerel ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ+639
	DD	04H
	DD	imagerel ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ+745
	DD	00H
	DD	imagerel ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ+795
	DD	0ffffffffH
	DD	imagerel ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ+816
	DD	00H
	DD	imagerel ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ+838
	DD	0ffffffffH
	DD	imagerel ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ+856
	DD	00H
	DD	imagerel ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ+892
	DD	0ffffffffH
	DD	imagerel ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ+910
	DD	00H
	DD	imagerel ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ+917
	DD	0ffffffffH
	DD	imagerel ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ+935
	DD	00H
	DD	imagerel ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ+950
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA
	DD	01H
	DD	imagerel ?dtor$2@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA
	DD	00H
	DD	imagerel ?dtor$3@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA
	DD	00H
	DD	imagerel ?dtor$4@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ DD 035054619H
	DD	010e3313H
	DD	070070093H
	DD	05006H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ
	DD	0482H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ$rtcName$0 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
	DB	044H
	DB	065H
	DB	073H
	DB	074H
	DB	00H
	ORG $+2
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ$rtcName$1 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
	DB	053H
	DB	074H
	DB	072H
	DB	00H
	ORG $+3
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ$rtcVarDesc DD 078H ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
	DD	028H
	DQ	FLAT:?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ$rtcName$1
	DD	058H
	DD	08H
	DQ	FLAT:?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ$rtcName$0
	ORG $+96
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ$rtcFrameData DD 02H ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
	DD	00H
	DQ	FLAT:?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ$rtcVarDesc
$cppxdata$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ DD 019930522H
	DD	05H
	DD	imagerel $stateUnwindMap$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ
	DD	00H
	DD	00H
	DD	013H
	DD	imagerel $ip2state$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ
	DD	0438H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z DD 045054519H
	DD	0118431dH
	DD	070110031H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0178H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z$rtcName$0 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::_Init
	DB	050H
	DB	062H
	DB	00H
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z$rtcName$1 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::_Init
	DB	050H
	DB	06eH
	DB	00H
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z$rtcName$2 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::_Init
	DB	04eH
	DB	072H
	DB	00H
	ORG $+4
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z$rtcVarDesc DD 088H ; std::basic_filebuf<char,std::char_traits<char> >::_Init
	DD	08H
	DQ	FLAT:?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z$rtcName$2
	DD	068H
	DD	08H
	DQ	FLAT:?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z$rtcName$1
	DD	048H
	DD	08H
	DQ	FLAT:?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z$rtcName$0
	ORG $+144
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z$rtcFrameData DD 03H ; std::basic_filebuf<char,std::char_traits<char> >::_Init
	DD	00H
	DQ	FLAT:?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ DD 025052a01H
	DD	010e2313H
	DD	070070027H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PEAD_J@Z DD 025053401H
	DD	0118231dH
	DD	07011001fH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z DD 025054a19H
	DD	011d2322H
	DD	070160029H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0138H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z$rtcName$0 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
	DB	046H
	DB	069H
	DB	06cH
	DB	065H
	DB	070H
	DB	06fH
	DB	073H
	DB	069H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	00H
	ORG $+2
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z$rtcVarDesc DD 028H ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
	DD	08H
	DQ	FLAT:?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z$rtcName$0
	ORG $+48
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z$rtcFrameData DD 01H ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
	DD	00H
	DQ	FLAT:?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z DD 025054a19H
	DD	011d2322H
	DD	070160021H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0f8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z$rtcName$0 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
	DB	046H
	DB	069H
	DB	06cH
	DB	065H
	DB	070H
	DB	06fH
	DB	073H
	DB	069H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	00H
	ORG $+2
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z$rtcVarDesc DD 028H ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
	DD	08H
	DQ	FLAT:?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z$rtcName$0
	ORG $+48
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z$rtcFrameData DD 01H ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
	DD	00H
	DQ	FLAT:?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$5@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$4@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$3@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ DD imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
	DD	0ffffffffH
	DD	imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ+302
	DD	00H
	DD	imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ+348
	DD	0ffffffffH
	DD	imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ+368
	DD	00H
	DD	imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ+438
	DD	01H
	DD	imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ+523
	DD	02H
	DD	imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ+630
	DD	01H
	DD	imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ+643
	DD	00H
	DD	imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ+761
	DD	03H
	DD	imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ+815
	DD	00H
	DD	imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ+907
	DD	0ffffffffH
	DD	imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ+929
	DD	00H
	DD	imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ+966
	DD	04H
	DD	imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ+1006
	DD	00H
	DD	imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ+1080
	DD	05H
	DD	imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ+1116
	DD	00H
	DD	imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ+1143
	DD	0ffffffffH
	DD	imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ+1160
	DD	00H
	DD	imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ+1171
	DD	0ffffffffH
	DD	imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ+1188
	DD	00H
	DD	imagerel ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ+1203
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA
	DD	01H
	DD	imagerel ?dtor$2@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA
	DD	00H
	DD	imagerel ?dtor$3@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA
	DD	00H
	DD	imagerel ?dtor$4@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA
	DD	00H
	DD	imagerel ?dtor$5@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ DD 045054619H
	DD	010e4313H
	DD	070070097H
	DD	05006H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
	DD	04aaH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$0 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::uflow
	DB	043H
	DB	068H
	DB	00H
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$1 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::uflow
	DB	053H
	DB	074H
	DB	072H
	DB	00H
	ORG $+3
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$2 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::uflow
	DB	043H
	DB	068H
	DB	00H
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$3 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::uflow
	DB	044H
	DB	065H
	DB	073H
	DB	074H
	DB	00H
	ORG $+2
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$4 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::uflow
	DB	053H
	DB	072H
	DB	063H
	DB	00H
	ORG $+3
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcVarDesc DD 0e8H ; std::basic_filebuf<char,std::char_traits<char> >::uflow
	DD	08H
	DQ	FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$4
	DD	0c8H
	DD	08H
	DQ	FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$3
	DD	0a4H
	DD	01H
	DQ	FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$2
	DD	068H
	DD	028H
	DQ	FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$1
	DD	044H
	DD	01H
	DQ	FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$0
	ORG $+240
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcFrameData DD 05H ; std::basic_filebuf<char,std::char_traits<char> >::uflow
	DD	00H
	DQ	FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcVarDesc
$cppxdata$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ DD 019930522H
	DD	06H
	DD	imagerel $stateUnwindMap$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
	DD	00H
	DD	00H
	DD	015H
	DD	imagerel $ip2state$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
	DD	0458H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ DD 025053b19H
	DD	010e2313H
	DD	070070027H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0120H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$0 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::underflow
	DB	04dH
	DB	065H
	DB	074H
	DB	061H
	DB	00H
	ORG $+10
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcVarDesc DD 024H ; std::basic_filebuf<char,std::char_traits<char> >::underflow
	DD	04H
	DQ	FLAT:?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcName$0
	ORG $+48
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcFrameData DD 01H ; std::basic_filebuf<char,std::char_traits<char> >::underflow
	DD	00H
	DQ	FLAT:?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z DD 025052e01H
	DD	01122317H
	DD	0700b002dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$4@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$3@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z DD imagerel ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z
	DD	0ffffffffH
	DD	imagerel ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z+437
	DD	00H
	DD	imagerel ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z+477
	DD	01H
	DD	imagerel ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z+568
	DD	02H
	DD	imagerel ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z+660
	DD	01H
	DD	imagerel ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z+673
	DD	00H
	DD	imagerel ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z+777
	DD	03H
	DD	imagerel ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z+806
	DD	00H
	DD	imagerel ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z+868
	DD	04H
	DD	imagerel ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z+974
	DD	00H
	DD	imagerel ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z+1028
	DD	0ffffffffH
	DD	imagerel ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z+1051
	DD	00H
	DD	imagerel ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z+1084
	DD	0ffffffffH
	DD	imagerel ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z+1107
	DD	00H
	DD	imagerel ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z+1170
	DD	0ffffffffH
	DD	imagerel ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z+1193
	DD	00H
	DD	imagerel ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z+1262
	DD	0ffffffffH
	DD	imagerel ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z+1282
	DD	00H
	DD	imagerel ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z+1293
	DD	0ffffffffH
	DD	imagerel ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z+1313
	DD	00H
	DD	imagerel ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z+1331
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA
	DD	01H
	DD	imagerel ?dtor$2@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA
	DD	00H
	DD	imagerel ?dtor$3@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA
	DD	00H
	DD	imagerel ?dtor$4@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z DD 045054a19H
	DD	01124317H
	DD	0700b009dH
	DD	0500aH
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z
	DD	04d2H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcName$0 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::overflow
	DB	043H
	DB	068H
	DB	00H
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcName$1 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::overflow
	DB	053H
	DB	072H
	DB	063H
	DB	00H
	ORG $+3
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcName$2 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::overflow
	DB	044H
	DB	065H
	DB	073H
	DB	074H
	DB	00H
	ORG $+2
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcName$3 DB 05fH ; std::basic_filebuf<char,std::char_traits<char> >::overflow
	DB	053H
	DB	074H
	DB	072H
	DB	00H
	ORG $+7
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcVarDesc DD 0c8H ; std::basic_filebuf<char,std::char_traits<char> >::overflow
	DD	028H
	DQ	FLAT:?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcName$3
	DD	0a8H
	DD	08H
	DQ	FLAT:?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcName$2
	DD	088H
	DD	08H
	DQ	FLAT:?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcName$1
	DD	064H
	DD	01H
	DQ	FLAT:?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcName$0
	ORG $+192
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcFrameData DD 04H ; std::basic_filebuf<char,std::char_traits<char> >::overflow
	DD	00H
	DQ	FLAT:?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcVarDesc
$cppxdata$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z DD 019930522H
	DD	05H
	DD	imagerel $stateUnwindMap$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z
	DD	00H
	DD	00H
	DD	015H
	DD	imagerel $ip2state$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z
	DD	0488H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z DD imagerel ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z
	DD	0ffffffffH
	DD	imagerel ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z+188
	DD	00H
	DD	imagerel ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z+216
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z
	DD	0138H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z DD 025054411H
	DD	011d2322H
	DD	07016002dH
	DD	05015H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ DD imagerel ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z DD imagerel ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z
	DD	0ffffffffH
	DD	imagerel ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z+72
	DD	00H
	DD	imagerel ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z+112
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z
	DD	0e8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z DD 025053a11H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXPEBDHH@Z DD 025053901H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DD	0ffffffffH
	DD	imagerel ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ+116
	DD	00H
	DD	imagerel ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ+165
	DD	01H
	DD	imagerel ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ+264
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DD	00H
	DD	00H
	DD	04H
	DD	imagerel $ip2state$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DD	0108H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 025053911H
	DD	01122317H
	DD	0700b0025H
	DD	0500aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$3 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$2 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$1 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$dtor$0 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$main DD imagerel main
	DD	0ffffffffH
	DD	imagerel main+129
	DD	00H
	DD	imagerel main+316
	DD	01H
	DD	imagerel main+379
	DD	02H
	DD	imagerel main+404
	DD	03H
	DD	imagerel main+4167
	DD	02H
	DD	imagerel main+4180
	DD	01H
	DD	imagerel main+4193
	DD	00H
	DD	imagerel main+4203
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$main DD 0ffffffffH
	DD	imagerel main$dtor$0
	DD	00H
	DD	imagerel main$dtor$1
	DD	01H
	DD	imagerel main$dtor$2
	DD	02H
	DD	imagerel main$dtor$3
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	045053a19H
	DD	010a430fH
	DD	0700300edH
	DD	05002H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$main
	DD	0752H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
main$rtcName$0 DB 077H
	DB	079H
	DB	067H
	DB	072H
	DB	061H
	DB	06eH
	DB	061H
	DB	00H
main$rtcName$1 DB 061H
	DB	00H
	ORG $+2
main$rtcName$2 DB 062H
	DB	00H
	ORG $+2
main$rtcName$3 DB 06cH
	DB	06fH
	DB	067H
	DB	05fH
	DB	06fH
	DB	067H
	DB	0c3H
	DB	0b3H
	DB	06cH
	DB	06eH
	DB	079H
	DB	00H
main$rtcName$4 DB 06cH
	DB	06fH
	DB	067H
	DB	00H
main$rtcName$5 DB 069H
	DB	06cH
	DB	06fH
	DB	0c5H
	DB	09bH
	DB	0c4H
	DB	087H
	DB	05fH
	DB	070H
	DB	069H
	DB	065H
	DB	06eH
	DB	069H
	DB	0c4H
	DB	099H
	DB	064H
	DB	07aH
	DB	079H
	DB	00H
	ORG $+1
main$rtcName$10 DB 062H
	DB	075H
	DB	066H
	DB	00H
main$rtcName$6 DB 06bH
	DB	077H
	DB	06fH
	DB	074H
	DB	061H
	DB	05fH
	DB	07aH
	DB	061H
	DB	06bH
	DB	0c5H
	DB	082H
	DB	061H
	DB	064H
	DB	075H
	DB	00H
	ORG $+1
main$rtcName$7 DB 077H
	DB	079H
	DB	06cH
	DB	06fH
	DB	073H
	DB	06fH
	DB	077H
	DB	061H
	DB	06eH
	DB	061H
	DB	05fH
	DB	06cH
	DB	069H
	DB	063H
	DB	07aH
	DB	062H
	DB	061H
	DB	00H
	ORG $+6
main$rtcName$8 DB 074H
	DB	079H
	DB	070H
	DB	05fH
	DB	07aH
	DB	061H
	DB	06bH
	DB	0c5H
	DB	082H
	DB	061H
	DB	064H
	DB	075H
	DB	00H
	ORG $+3
main$rtcName$9 DB 063H
	DB	06fH
	DB	05fH
	DB	06bH
	DB	06fH
	DB	06eH
	DB	074H
	DB	079H
	DB	06eH
	DB	075H
	DB	06fH
	DB	077H
	DB	061H
	DB	0c4H
	DB	087H
	DB	00H
main$rtcVarDesc DD 03f8H
	DD	028H
	DQ	FLAT:main$rtcName$10
	DD	03d4H
	DD	01H
	DQ	FLAT:main$rtcName$9
	DD	0398H
	DD	028H
	DQ	FLAT:main$rtcName$8
	DD	0354H
	DD	04H
	DQ	FLAT:main$rtcName$7
	DD	0334H
	DD	04H
	DQ	FLAT:main$rtcName$6
	DD	0314H
	DD	04H
	DQ	FLAT:main$rtcName$5
	DD	01e0H
	DD	0118H
	DQ	FLAT:main$rtcName$4
	DD	0b0H
	DD	0108H
	DQ	FLAT:main$rtcName$3
	DD	068H
	DD	028H
	DQ	FLAT:main$rtcName$2
	DD	044H
	DD	04H
	DQ	FLAT:main$rtcName$1
	ORG $+480
main$rtcFrameData DD 0aH
	DD	00H
	DQ	FLAT:main$rtcVarDesc
$cppxdata$main DD 019930522H
	DD	04H
	DD	imagerel $stateUnwindMap$main
	DD	00H
	DD	00H
	DD	09H
	DD	imagerel $ip2state$main
	DD	0738H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__FG³os@@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__EG³os@@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Show_Cursor@@YAXXZ DD 025052f19H
	DD	010a230fH
	DD	070030025H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?Show_Cursor@@YAXXZ$rtcName$0 DB 068H			; Show_Cursor
	DB	043H
	DB	043H
	DB	049H
	DB	00H
	ORG $+11
?Show_Cursor@@YAXXZ$rtcVarDesc DD 048H			; Show_Cursor
	DD	08H
	DQ	FLAT:?Show_Cursor@@YAXXZ$rtcName$0
	ORG $+48
?Show_Cursor@@YAXXZ$rtcFrameData DD 01H			; Show_Cursor
	DD	00H
	DQ	FLAT:?Show_Cursor@@YAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Hide_Cursor@@YAXXZ DD 025052f19H
	DD	010a230fH
	DD	070030025H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?Hide_Cursor@@YAXXZ$rtcName$0 DB 068H			; Hide_Cursor
	DB	043H
	DB	043H
	DB	049H
	DB	00H
	ORG $+11
?Hide_Cursor@@YAXXZ$rtcVarDesc DD 048H			; Hide_Cursor
	DD	08H
	DQ	FLAT:?Hide_Cursor@@YAXXZ$rtcName$0
	ORG $+48
?Hide_Cursor@@YAXXZ$rtcFrameData DD 01H			; Hide_Cursor
	DD	00H
	DQ	FLAT:?Hide_Cursor@@YAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Change_Col@@YAXAEBH@Z DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SprawdŸ_ustawienia@@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$7@?0??SprawdŸ_Pliki@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$6@?0??SprawdŸ_Pliki@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$5@?0??SprawdŸ_Pliki@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$4@?0??SprawdŸ_Pliki@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$3@?0??SprawdŸ_Pliki@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0??SprawdŸ_Pliki@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??SprawdŸ_Pliki@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??SprawdŸ_Pliki@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?SprawdŸ_Pliki@@YAXXZ DD imagerel ?SprawdŸ_Pliki@@YAXXZ
	DD	0ffffffffH
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+68
	DD	00H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+78
	DD	01H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+141
	DD	00H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+143
	DD	01H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+501
	DD	00H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+511
	DD	0ffffffffH
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+525
	DD	01H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+623
	DD	00H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+633
	DD	0ffffffffH
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+647
	DD	01H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+745
	DD	00H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+755
	DD	0ffffffffH
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+769
	DD	01H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+867
	DD	00H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+877
	DD	0ffffffffH
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+891
	DD	01H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+989
	DD	00H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+999
	DD	0ffffffffH
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+1013
	DD	01H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+1111
	DD	00H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+1121
	DD	0ffffffffH
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+1135
	DD	01H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+1255
	DD	02H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+1318
	DD	03H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+1335
	DD	02H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+1429
	DD	01H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+1442
	DD	00H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+1452
	DD	0ffffffffH
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+1466
	DD	01H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+1603
	DD	04H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+1666
	DD	05H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+1683
	DD	04H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+1777
	DD	01H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+1790
	DD	00H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+1800
	DD	0ffffffffH
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+1814
	DD	01H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+1932
	DD	06H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+1995
	DD	07H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+2012
	DD	06H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+2106
	DD	01H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+2119
	DD	00H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+2129
	DD	0ffffffffH
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+2143
	DD	01H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+2287
	DD	00H
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+2297
	DD	0ffffffffH
	DD	imagerel ?SprawdŸ_Pliki@@YAXXZ+2348
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?SprawdŸ_Pliki@@YAXXZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??SprawdŸ_Pliki@@YAXXZ@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0??SprawdŸ_Pliki@@YAXXZ@4HA
	DD	01H
	DD	imagerel ?dtor$2@?0??SprawdŸ_Pliki@@YAXXZ@4HA
	DD	02H
	DD	imagerel ?dtor$3@?0??SprawdŸ_Pliki@@YAXXZ@4HA
	DD	01H
	DD	imagerel ?dtor$4@?0??SprawdŸ_Pliki@@YAXXZ@4HA
	DD	04H
	DD	imagerel ?dtor$5@?0??SprawdŸ_Pliki@@YAXXZ@4HA
	DD	01H
	DD	imagerel ?dtor$6@?0??SprawdŸ_Pliki@@YAXXZ@4HA
	DD	06H
	DD	imagerel ?dtor$7@?0??SprawdŸ_Pliki@@YAXXZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SprawdŸ_Pliki@@YAXXZ DD 025053a19H
	DD	010a230fH
	DD	0700300f3H
	DD	05002H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?SprawdŸ_Pliki@@YAXXZ
	DD	078aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?SprawdŸ_Pliki@@YAXXZ$rtcName$0 DB 067H			; SprawdŸ_Pliki
	DB	0c5H
	DB	082H
	DB	06fH
	DB	073H
	DB	05fH
	DB	06eH
	DB	061H
	DB	07aH
	DB	077H
	DB	061H
	DB	00H
?SprawdŸ_Pliki@@YAXXZ$rtcName$1 DB 062H			; SprawdŸ_Pliki
	DB	075H
	DB	066H
	DB	00H
?SprawdŸ_Pliki@@YAXXZ$rtcName$2 DB 06eH			; SprawdŸ_Pliki
	DB	075H
	DB	06dH
	DB	065H
	DB	072H
	DB	073H
	DB	00H
	ORG $+1
?SprawdŸ_Pliki@@YAXXZ$rtcName$3 DB 06eH			; SprawdŸ_Pliki
	DB	075H
	DB	06dH
	DB	065H
	DB	072H
	DB	073H
	DB	00H
	ORG $+1
?SprawdŸ_Pliki@@YAXXZ$rtcName$4 DB 06eH			; SprawdŸ_Pliki
	DB	075H
	DB	06dH
	DB	065H
	DB	072H
	DB	073H
	DB	00H
	ORG $+1
?SprawdŸ_Pliki@@YAXXZ$rtcFrameData DD 05H		; SprawdŸ_Pliki
	DD	00H
	DQ	FLAT:?SprawdŸ_Pliki@@YAXXZ$rtcVarDesc
$cppxdata$?SprawdŸ_Pliki@@YAXXZ DD 019930522H
	DD	08H
	DD	imagerel $stateUnwindMap$?SprawdŸ_Pliki@@YAXXZ
	DD	00H
	DD	00H
	DD	02fH
	DD	imagerel $ip2state$?SprawdŸ_Pliki@@YAXXZ
	DD	0768H
	DD	00H
	DD	01H
?SprawdŸ_Pliki@@YAXXZ$rtcVarDesc DD 0350H		; SprawdŸ_Pliki
	DD	0f8H
	DQ	FLAT:?SprawdŸ_Pliki@@YAXXZ$rtcName$4
	DD	0210H
	DD	0f8H
	DQ	FLAT:?SprawdŸ_Pliki@@YAXXZ$rtcName$3
	DD	0d0H
	DD	0f8H
	DQ	FLAT:?SprawdŸ_Pliki@@YAXXZ$rtcName$2
	DD	068H
	DD	028H
	DQ	FLAT:?SprawdŸ_Pliki@@YAXXZ$rtcName$1
	DD	028H
	DD	028H
	DQ	FLAT:?SprawdŸ_Pliki@@YAXXZ$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$5@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$4@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$3@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD imagerel ?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
	DD	0ffffffffH
	DD	imagerel ?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z+149
	DD	00H
	DD	imagerel ?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z+159
	DD	01H
	DD	imagerel ?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z+456
	DD	02H
	DD	imagerel ?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z+546
	DD	01H
	DD	imagerel ?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z+725
	DD	03H
	DD	imagerel ?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z+1677
	DD	01H
	DD	imagerel ?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z+1859
	DD	04H
	DD	imagerel ?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z+2544
	DD	01H
	DD	imagerel ?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z+2855
	DD	05H
	DD	imagerel ?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z+3150
	DD	01H
	DD	imagerel ?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z+3258
	DD	00H
	DD	imagerel ?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z+3268
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA
	DD	01H
	DD	imagerel ?dtor$2@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA
	DD	01H
	DD	imagerel ?dtor$3@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA
	DD	01H
	DD	imagerel ?dtor$4@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA
	DD	01H
	DD	imagerel ?dtor$5@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD 025055519H
	DD	011d2322H
	DD	070160087H
	DD	05015H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
	DD	042aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$rtcName$0 DB 062H ; Wczytaj_z_pliku
	DB	075H
	DB	066H
	DB	00H
?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$rtcName$1 DB 062H ; Wczytaj_z_pliku
	DB	075H
	DB	066H
	DB	06fH
	DB	072H
	DB	032H
	DB	00H
	ORG $+1
?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$rtcName$2 DB 062H ; Wczytaj_z_pliku
	DB	075H
	DB	066H
	DB	032H
	DB	00H
	ORG $+3
?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$rtcName$3 DB 062H ; Wczytaj_z_pliku
	DB	075H
	DB	066H
	DB	032H
	DB	00H
	ORG $+3
?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$rtcName$4 DB 062H ; Wczytaj_z_pliku
	DB	075H
	DB	066H
	DB	032H
	DB	00H
	ORG $+3
?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$rtcName$5 DB 062H ; Wczytaj_z_pliku
	DB	075H
	DB	066H
	DB	032H
	DB	00H
	ORG $+7
?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$rtcVarDesc DD 0248H ; Wczytaj_z_pliku
	DD	028H
	DQ	FLAT:?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$rtcName$5
	DD	01a8H
	DD	028H
	DQ	FLAT:?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$rtcName$4
	DD	0128H
	DD	028H
	DQ	FLAT:?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$rtcName$3
	DD	0c8H
	DD	028H
	DQ	FLAT:?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$rtcName$2
	DD	068H
	DD	028H
	DQ	FLAT:?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$rtcName$1
	DD	028H
	DD	028H
	DQ	FLAT:?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$rtcName$0
	ORG $+288
?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$rtcFrameData DD 06H ; Wczytaj_z_pliku
	DD	00H
	DQ	FLAT:?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$rtcVarDesc
$cppxdata$?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD 019930522H
	DD	06H
	DD	imagerel $stateUnwindMap$?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
	DD	00H
	DD	00H
	DD	0dH
	DD	imagerel $ip2state$?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
	DD	0408H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$13@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$12@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$3@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD imagerel ?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	0ffffffffH
	DD	imagerel ?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z+158
	DD	00H
	DD	imagerel ?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z+217
	DD	01H
	DD	imagerel ?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z+264
	DD	02H
	DD	imagerel ?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z+291
	DD	04H
	DD	imagerel ?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z+304
	DD	05H
	DD	imagerel ?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z+1452
	DD	06H
	DD	imagerel ?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z+1528
	DD	07H
	DD	imagerel ?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z+1548
	DD	06H
	DD	imagerel ?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z+1606
	DD	05H
	DD	imagerel ?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z+1619
	DD	00H
	DD	imagerel ?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z+1632
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
	DD	01H
	DD	imagerel ?dtor$2@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
	DD	02H
	DD	imagerel ?dtor$3@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
	DD	01H
	DD	imagerel ?dtor$3@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
	DD	00H
	DD	imagerel ?dtor$3@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
	DD	05H
	DD	imagerel ?dtor$12@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
	DD	06H
	DD	imagerel ?dtor$13@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 025054b19H
	DD	01132318H
	DD	0700c00fdH
	DD	0500bH
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	07daH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$rtcName$0 DB 06eH ; Odczytaj_liczbê
	DB	075H
	DB	06dH
	DB	065H
	DB	072H
	DB	073H
	DB	00H
	ORG $+1
?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$rtcName$1 DB 077H ; Odczytaj_liczbê
	DB	079H
	DB	06eH
	DB	069H
	DB	06bH
	DB	00H
	ORG $+2
?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$rtcName$2 DB 06eH ; Odczytaj_liczbê
	DB	075H
	DB	06dH
	DB	065H
	DB	072H
	DB	073H
	DB	00H
	ORG $+1
?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$rtcFrameData DD 03H ; Odczytaj_liczbê
	DD	00H
	DQ	FLAT:?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$rtcVarDesc
$cppxdata$?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	08H
	DD	imagerel $stateUnwindMap$?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	00H
	DD	00H
	DD	0cH
	DD	imagerel $ip2state$?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	07a8H
	DD	00H
	DD	01H
?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$rtcVarDesc DD 0190H ; Odczytaj_liczbê
	DD	0f8H
	DQ	FLAT:?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$rtcName$2
	DD	0148H
	DD	028H
	DQ	FLAT:?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$rtcName$1
	DD	030H
	DD	0f8H
	DQ	FLAT:?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??Wylosuj@@YAHAEBH0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?Wylosuj@@YAHAEBH0@Z DD imagerel ?Wylosuj@@YAHAEBH0@Z
	DD	0ffffffffH
	DD	imagerel ?Wylosuj@@YAHAEBH0@Z+101
	DD	00H
	DD	imagerel ?Wylosuj@@YAHAEBH0@Z+118
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?Wylosuj@@YAHAEBH0@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??Wylosuj@@YAHAEBH0@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Wylosuj@@YAHAEBH0@Z DD 025055119H
	DD	0119231eH
	DD	0700c034fH
	DD	0500bH
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?Wylosuj@@YAHAEBH0@Z
	DD	01a6aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?Wylosuj@@YAHAEBH0@Z$rtcName$0 DB 067H			; Wylosuj
	DB	065H
	DB	06eH
	DB	065H
	DB	072H
	DB	061H
	DB	074H
	DB	06fH
	DB	072H
	DB	00H
	ORG $+6
?Wylosuj@@YAHAEBH0@Z$rtcName$1 DB 067H			; Wylosuj
	DB	065H
	DB	06eH
	DB	065H
	DB	072H
	DB	061H
	DB	074H
	DB	06fH
	DB	072H
	DB	00H
	ORG $+6
?Wylosuj@@YAHAEBH0@Z$rtcName$2 DB 064H			; Wylosuj
	DB	069H
	DB	073H
	DB	074H
	DB	072H
	DB	069H
	DB	062H
	DB	075H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	00H
	ORG $+3
?Wylosuj@@YAHAEBH0@Z$rtcVarDesc DD 013f8H		; Wylosuj
	DD	08H
	DQ	FLAT:?Wylosuj@@YAHAEBH0@Z$rtcName$2
	DD	050H
	DD	01390H
	DQ	FLAT:?Wylosuj@@YAHAEBH0@Z$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:?Wylosuj@@YAHAEBH0@Z$rtcName$0
	ORG $+144
?Wylosuj@@YAHAEBH0@Z$rtcFrameData DD 03H		; Wylosuj
	DD	00H
	DQ	FLAT:?Wylosuj@@YAHAEBH0@Z$rtcVarDesc
$cppxdata$?Wylosuj@@YAHAEBH0@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?Wylosuj@@YAHAEBH0@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?Wylosuj@@YAHAEBH0@Z
	DD	01a58H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??Czy_Kontynuowaæ@@YA_NAEAH@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?Czy_Kontynuowaæ@@YA_NAEAH@Z DD imagerel ?Czy_Kontynuowaæ@@YA_NAEAH@Z
	DD	0ffffffffH
	DD	imagerel ?Czy_Kontynuowaæ@@YA_NAEAH@Z+80
	DD	00H
	DD	imagerel ?Czy_Kontynuowaæ@@YA_NAEAH@Z+134
	DD	0ffffffffH
	DD	imagerel ?Czy_Kontynuowaæ@@YA_NAEAH@Z+155
	DD	00H
	DD	imagerel ?Czy_Kontynuowaæ@@YA_NAEAH@Z+487
	DD	0ffffffffH
	DD	imagerel ?Czy_Kontynuowaæ@@YA_NAEAH@Z+507
	DD	00H
	DD	imagerel ?Czy_Kontynuowaæ@@YA_NAEAH@Z+514
	DD	0ffffffffH
	DD	imagerel ?Czy_Kontynuowaæ@@YA_NAEAH@Z+532
	DD	00H
	DD	imagerel ?Czy_Kontynuowaæ@@YA_NAEAH@Z+537
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?Czy_Kontynuowaæ@@YA_NAEAH@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??Czy_Kontynuowaæ@@YA_NAEAH@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Czy_Kontynuowaæ@@YA_NAEAH@Z DD 025054619H
	DD	010e2313H
	DD	070070035H
	DD	05006H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?Czy_Kontynuowaæ@@YA_NAEAH@Z
	DD	019aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?Czy_Kontynuowaæ@@YA_NAEAH@Z$rtcName$0 DB 074H		; Czy_Kontynuowaæ
	DB	061H
	DB	06bH
	DB	05fH
	DB	06eH
	DB	069H
	DB	065H
	DB	00H
$cppxdata$?Czy_Kontynuowaæ@@YA_NAEAH@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?Czy_Kontynuowaæ@@YA_NAEAH@Z
	DD	00H
	DD	00H
	DD	09H
	DD	imagerel $ip2state$?Czy_Kontynuowaæ@@YA_NAEAH@Z
	DD	0188H
	DD	00H
	DD	01H
?Czy_Kontynuowaæ@@YA_NAEAH@Z$rtcVarDesc DD 028H		; Czy_Kontynuowaæ
	DD	028H
	DQ	FLAT:?Czy_Kontynuowaæ@@YA_NAEAH@Z$rtcName$0
	ORG $+48
?Czy_Kontynuowaæ@@YA_NAEAH@Z$rtcFrameData DD 01H	; Czy_Kontynuowaæ
	DD	00H
	DQ	FLAT:?Czy_Kontynuowaæ@@YA_NAEAH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SprawdŸ_Zak³ad@@YAHAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBH@Z DD 025053401H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Zakrêæ_Ruletk¹@@YAHXZ DD 025051e01H
	DD	010a230fH
	DD	07003004dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z DD imagerel ?Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z
	DD	0ffffffffH
	DD	imagerel ?Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z+85
	DD	00H
	DD	imagerel ?Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z+658
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z DD 025054b19H
	DD	01132318H
	DD	0700c0031H
	DD	0500bH
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z
	DD	017aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z$rtcName$0 DB 06bH	; Wczytaj_Kwotê_Zak³adu
	DB	077H
	DB	06fH
	DB	074H
	DB	061H
	DB	05fH
	DB	07aH
	DB	061H
	DB	06bH
	DB	0c5H
	DB	082H
	DB	061H
	DB	064H
	DB	075H
	DB	05fH
	DB	073H
	DB	00H
	ORG $+15
?Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z$rtcVarDesc DD 028H	; Wczytaj_Kwotê_Zak³adu
	DD	028H
	DQ	FLAT:?Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z$rtcName$0
	ORG $+48
?Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z$rtcFrameData DD 01H	; Wczytaj_Kwotê_Zak³adu
	DD	00H
	DQ	FLAT:?Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z$rtcVarDesc
$cppxdata$?Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z
	DD	0168H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD imagerel ?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	0ffffffffH
	DD	imagerel ?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ+90
	DD	00H
	DD	imagerel ?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ+2033
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 025054619H
	DD	010e2313H
	DD	07007002dH
	DD	05006H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	015aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$rtcName$0 DB 07aH ; Obstaw
	DB	061H
	DB	06bH
	DB	06cH
	DB	061H
	DB	064H
	DB	05fH
	DB	074H
	DB	079H
	DB	070H
	DB	00H
	ORG $+5
?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$rtcVarDesc DD 028H ; Obstaw
	DD	028H
	DQ	FLAT:?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$rtcName$0
	ORG $+48
?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$rtcFrameData DD 01H ; Obstaw
	DD	00H
	DQ	FLAT:?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$rtcVarDesc
$cppxdata$?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	0148H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Rrandom_device@std@@QEAAIXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?entropy@random_device@std@@QEAANXZ DD 015052a01H
	DD	010e1313H
	DD	07007001bH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@random_device@std@@SAIXZ DD 05051c01H
	DD	010a030dH
	DD	070030019H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?min@random_device@std@@SAIXZ DD 05051c01H
	DD	010a030dH
	DD	070030019H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0random_device@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Ungetc@D@std@@YA_NAEBDPEAU_iobuf@@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Fputc@D@std@@YA_NDPEAU_iobuf@@@Z DD 025052e01H
	DD	01122317H
	DD	0700b001fH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Fgetc@D@std@@YA_NAEADPEAU_iobuf@@@Z DD 025052f01H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z DD imagerel ??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z
	DD	0ffffffffH
	DD	imagerel ??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z+83
	DD	00H
	DD	imagerel ??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z+290
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z DD 025054619H
	DD	010e2313H
	DD	07007003fH
	DD	05006H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z
	DD	01eaH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z$rtcName$0 DB 05fH ; std::use_facet<std::ctype<char> >
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+2
??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z$rtcName$1 DB 05fH ; std::use_facet<std::ctype<char> >
	DB	050H
	DB	073H
	DB	061H
	DB	076H
	DB	065H
	DB	00H
	ORG $+1
??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z$rtcVarDesc DD 048H ; std::use_facet<std::ctype<char> >
	DD	08H
	DQ	FLAT:??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z$rtcName$0
	ORG $+96
??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z$rtcFrameData DD 02H ; std::use_facet<std::ctype<char> >
	DD	00H
	DQ	FLAT:??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z$rtcVarDesc
$cppxdata$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z
	DD	01d8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z DD 025052f01H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1locale@std@@QEAA@XZ DD imagerel ??1locale@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1locale@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1locale@std@@QEAA@XZ
	DD	0128H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1locale@std@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070029H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1locale@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_cast@std@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_cast@std@@QEAA@AEBV01@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_cast@std@@UEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_cast@std@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007002dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z DD 025052f01H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Become_small@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	070070029H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z DD 025054019H
	DD	01132318H
	DD	0700c0031H
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	0178H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	DB	04dH
	DB	061H
	DB	073H
	DB	06bH
	DB	065H
	DB	064H
	DB	00H
	ORG $+8
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z$rtcVarDesc DD 068H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	DD	08H
	DQ	FLAT:?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z$rtcName$0
	ORG $+48
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	DD	00H
	DQ	FLAT:?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NQEBD@Z DD imagerel ?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NQEBD@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NQEBD@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NQEBD@Z
	DD	0108H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NQEBD@Z DD 025053a19H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NQEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z DD imagerel ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z
	DD	0118H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z DD 035053f19H
	DD	0118331dH
	DD	070110027H
	DD	05010H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z DD 025052f01H
	DD	01132318H
	DD	0700c0029H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD 025053b19H
	DD	010e2313H
	DD	070070031H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0178H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	DB	041H
	DB	06cH
	DB	06cH
	DB	06fH
	DB	063H
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	00H
	ORG $+5
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcVarDesc DD 028H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	DD	08H
	DQ	FLAT:?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcName$0
	ORG $+48
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	DD	00H
	DQ	FLAT:?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD imagerel ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD imagerel ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z DD 025052e01H
	DD	01122317H
	DD	0700b0031H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z DD 035052f01H
	DD	01133318H
	DD	0700c0023H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ DD imagerel ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
	DD	0108H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ DD 025053a19H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ DD imagerel ?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z DD 025053401H
	DD	0118231dH
	DD	070110031H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z DD 025052f01H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KQEBD0@Z DD 035053901H
	DD	011d3322H
	DD	070160037H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KAEBV12@@Z DD 025053401H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z DD 025053401H
	DD	0118231dH
	DD	07011002dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z DD 025053401H
	DD	0118231dH
	DD	07011002dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z DD 035053401H
	DD	0118331dH
	DD	070110033H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z DD 035053401H
	DD	0118331dH
	DD	070110033H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z DD 025052f01H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@D@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z DD 025052f01H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEBV12@@Z DD 025054019H
	DD	01132318H
	DD	0700c0043H
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	0200H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEBV12@@Z$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	061H
	DB	072H
	DB	072H
	DB	061H
	DB	079H
	DB	00H
	ORG $+5
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEBV12@@Z$rtcVarDesc DD 0e8H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
	DD	08H
	DQ	FLAT:?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEBV12@@Z$rtcName$0
	ORG $+48
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEBV12@@Z$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
	DD	00H
	DQ	FLAT:?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEBV12@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z DD 025053401H
	DD	0118231dH
	DD	070110029H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Assign_rv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z DD 025053401H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z DD imagerel ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z
	DD	0108H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z DD 025053a19H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z DD imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z
	DD	0108H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z DD 025053a19H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z DD imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z
	DD	0ffffffffH
	DD	imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z+76
	DD	00H
	DD	imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z+116
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z
	DD	0e8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z DD 025053f11H
	DD	0118231dH
	DD	070110021H
	DD	05010H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DD imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
	DD	0ffffffffH
	DD	imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z+71
	DD	00H
	DD	imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z+103
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
	DD	0e8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DD 025053a11H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z DD imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z
	DD	0ffffffffH
	DD	imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z+76
	DD	00H
	DD	imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z+115
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z
	DD	0e8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z DD 025053f11H
	DD	0118231dH
	DD	070110021H
	DD	05010H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z DD imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z
	DD	0ffffffffH
	DD	imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z+101
	DD	00H
	DD	imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z+121
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z
	DD	0108H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z DD 025053a11H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$allocator@D@2@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEAV12@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ DD 025053b19H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0f8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ$rtcName$0 DB 05fH ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
	DB	050H
	DB	072H
	DB	06fH
	DB	078H
	DB	079H
	DB	05fH
	DB	061H
	DB	06cH
	DB	06cH
	DB	06fH
	DB	063H
	DB	061H
	DB	074H
	DB	06fH
	DB	072H
	DB	00H
	ORG $+15
?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ$rtcVarDesc DD 024H ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
	DD	01H
	DQ	FLAT:?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ$rtcName$0
	ORG $+48
?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ$rtcFrameData DD 01H ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
	DD	00H
	DQ	FLAT:?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ DD 025053b19H
	DD	010e2313H
	DD	070070029H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0130H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ$rtcName$0 DB 05fH ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
	DB	050H
	DB	072H
	DB	06fH
	DB	078H
	DB	079H
	DB	05fH
	DB	061H
	DB	06cH
	DB	06cH
	DB	06fH
	DB	063H
	DB	061H
	DB	074H
	DB	06fH
	DB	072H
	DB	00H
	ORG $+15
?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ$rtcVarDesc DD 024H ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
	DD	01H
	DQ	FLAT:?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ$rtcName$0
	ORG $+48
?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ$rtcFrameData DD 01H ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
	DD	00H
	DQ	FLAT:?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEAV?$allocator@D@2@@Z DD 025052f01H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Copy_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEBV?$allocator@D@2@@Z DD 025052f01H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ DD imagerel ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ DD imagerel ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
	DD	0ffffffffH
	DD	imagerel ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ+76
	DD	00H
	DD	imagerel ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ+89
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
	DD	0108H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ DD 025053511H
	DD	010e2313H
	DD	070070025H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z DD 025053401H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ DD 05052801H
	DD	010e0311H
	DD	07007001bH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
	DD	0ffffffffH
	DD	imagerel ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ+66
	DD	00H
	DD	imagerel ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ+115
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 025053511H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z DD 05052d01H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@D@std@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Convert_size@_K@std@@YA_K_K@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Deallocate@std@@YAXPEAX_K1@Z DD 035053401H
	DD	0118331dH
	DD	07011002bH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@std@@YAPEAX_K0_N@Z DD 035053401H
	DD	0118331dH
	DD	07011002fH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Orphan_me@_Iterator_base12@std@@QEAAXXZ DD imagerel ?_Orphan_me@_Iterator_base12@std@@QEAAXXZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Orphan_me@_Iterator_base12@std@@QEAAXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?_Orphan_me@_Iterator_base12@std@@QEAAXXZ
	DD	0118H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_me@_Iterator_base12@std@@QEAAXXZ DD 035053519H
	DD	010e3313H
	DD	070070027H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Orphan_me@_Iterator_base12@std@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ DD 05052801H
	DD	010e0311H
	DD	07007001bH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z DD imagerel ?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z DD 025054b19H
	DD	01132318H
	DD	0700c002dH
	DD	0500bH
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z
	DD	015bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z$rtcName$0 DB 05fH ; std::_Iterator_base12::_Adopt
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+2
?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z$rtcName$1 DB 05fH ; std::_Iterator_base12::_Adopt
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+2
?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z$rtcVarDesc DD 064H ; std::_Iterator_base12::_Adopt
	DD	04H
	DQ	FLAT:?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z$rtcName$0
	ORG $+96
?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z$rtcFrameData DD 02H ; std::_Iterator_base12::_Adopt
	DD	00H
	DQ	FLAT:?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z$rtcVarDesc
$cppxdata$?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z
	DD	0148H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1_Iterator_base12@std@@QEAA@XZ DD imagerel ??1_Iterator_base12@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Iterator_base12@std@@QEAA@XZ DD 025054619H
	DD	010e2313H
	DD	070070025H
	DD	05006H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$??1_Iterator_base12@std@@QEAA@XZ
	DD	011bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1_Iterator_base12@std@@QEAA@XZ$rtcName$0 DB 05fH	; std::_Iterator_base12::~_Iterator_base12
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
??1_Iterator_base12@std@@QEAA@XZ$rtcVarDesc DD 024H	; std::_Iterator_base12::~_Iterator_base12
	DD	04H
	DQ	FLAT:??1_Iterator_base12@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1_Iterator_base12@std@@QEAA@XZ$rtcFrameData DD 01H	; std::_Iterator_base12::~_Iterator_base12
	DD	00H
	DQ	FLAT:??1_Iterator_base12@std@@QEAA@XZ$rtcVarDesc
$cppxdata$??1_Iterator_base12@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1_Iterator_base12@std@@QEAA@XZ
	DD	0108H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Iterator_base12@std@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Swap_all@_Container_base12@std@@QEAAXAEAU12@@Z DD imagerel ?_Swap_all@_Container_base12@std@@QEAAXAEAU12@@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Swap_all@_Container_base12@std@@QEAAXAEAU12@@Z DD 025054b19H
	DD	01132318H
	DD	0700c0029H
	DD	0500bH
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?_Swap_all@_Container_base12@std@@QEAAXAEAU12@@Z
	DD	013bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Swap_all@_Container_base12@std@@QEAAXAEAU12@@Z$rtcName$0 DB 05fH ; std::_Container_base12::_Swap_all
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Swap_all@_Container_base12@std@@QEAAXAEAU12@@Z$rtcVarDesc DD 024H ; std::_Container_base12::_Swap_all
	DD	04H
	DQ	FLAT:?_Swap_all@_Container_base12@std@@QEAAXAEAU12@@Z$rtcName$0
	ORG $+48
?_Swap_all@_Container_base12@std@@QEAAXAEAU12@@Z$rtcFrameData DD 01H ; std::_Container_base12::_Swap_all
	DD	00H
	DQ	FLAT:?_Swap_all@_Container_base12@std@@QEAAXAEAU12@@Z$rtcVarDesc
$cppxdata$?_Swap_all@_Container_base12@std@@QEAAXAEAU12@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?_Swap_all@_Container_base12@std@@QEAAXAEAU12@@Z
	DD	0128H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD imagerel ?_Orphan_all@_Container_base12@std@@QEAAXXZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD 025054619H
	DD	010e2313H
	DD	070070029H
	DD	05006H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?_Orphan_all@_Container_base12@std@@QEAAXXZ
	DD	013bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_all@_Container_base12@std@@QEAAXXZ$rtcName$0 DB 05fH ; std::_Container_base12::_Orphan_all
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_all@_Container_base12@std@@QEAAXXZ$rtcVarDesc DD 024H ; std::_Container_base12::_Orphan_all
	DD	04H
	DQ	FLAT:?_Orphan_all@_Container_base12@std@@QEAAXXZ$rtcName$0
	ORG $+48
?_Orphan_all@_Container_base12@std@@QEAAXXZ$rtcFrameData DD 01H ; std::_Container_base12::_Orphan_all
	DD	00H
	DQ	FLAT:?_Orphan_all@_Container_base12@std@@QEAAXXZ$rtcVarDesc
$cppxdata$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?_Orphan_all@_Container_base12@std@@QEAAXXZ
	DD	0128H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Container_base12@std@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_base12@std@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_proxy@std@@QEAA@XZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eof@?$char_traits@D@std@@SAHXZ DD 05051c01H
	DD	010a030dH
	DD	070030019H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?not_eof@?$char_traits@D@std@@SAHAEBH@Z DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z DD 05052d01H
	DD	01130316H
	DD	0700c001bH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?to_int_type@?$char_traits@D@std@@SAHAEBD@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?to_char_type@?$char_traits@D@std@@SADAEBH@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eq@?$char_traits@D@std@@SA_NAEBD0@Z DD 05052d01H
	DD	01130316H
	DD	0700c001bH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$char_traits@D@std@@SAXAEADAEBD@Z DD 05052d01H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$char_traits@D@std@@SAPEADQEAD_KD@Z DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?move@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?find@?$char_traits@D@std@@SAPEBDQEBD_KAEBD@Z DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$char_traits@D@std@@SA_KQEBD@Z DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?compare@?$char_traits@D@std@@SAHQEBD0_K@Z DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KPEAX@Z DD 05052d01H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@_J@std@@SA_JXZ DD 05051c01H
	DD	010a030dH
	DD	070030019H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?what@exception@std@@UEBAPEBDXZ DD 05052801H
	DD	010e0311H
	DD	07007001bH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@AEBV01@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@QEBDH@Z DD 05053201H
	DD	0118031bH
	DD	070110019H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$memcpy_s DD 025053901H
	DD	011d2322H
	DD	070160029H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$time DD	025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_K@Z DD 05052d01H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_E?$basic_fstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z
_TEXT	SEGMENT
??_E?$basic_fstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z PROC ; std::basic_fstream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
  00000	48 63 41 fc	 movsxd	 rax, DWORD PTR [rcx-4]
  00004	48 2b c8	 sub	 rcx, rax
  00007	e9 00 00 00 00	 jmp	 ??_E?$basic_fstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
??_E?$basic_fstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z ENDP ; std::basic_fstream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z
_TEXT	SEGMENT
??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
  00000	48 63 41 fc	 movsxd	 rax, DWORD PTR [rcx-4]
  00004	48 2b c8	 sub	 rcx, rax
  00007	e9 00 00 00 00	 jmp	 ??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@EAAPEAXI@Z
_TEXT	SEGMENT
??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@EAAPEAXI@Z PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor', COMDAT
  00000	48 63 41 fc	 movsxd	 rax, DWORD PTR [rcx-4]
  00004	48 2b c8	 sub	 rcx, rax
  00007	e9 00 00 00 00	 jmp	 ??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z
??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@EAAPEAXI@Z ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Get_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@AEAAIXZ
_TEXT	SEGMENT
_Val$1 = 4
tv66 = 212
this$ = 256
?_Get_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@AEAAIXZ PROC ; std::_Rng_from_urng<unsigned int,std::random_device>::_Get_bits, COMDAT

; 3527 : 		{	// return a random value within [0, _Bmask]

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
$LN2@Get_bits:

; 3528 : 		for (; ; )
; 3529 : 			{	// repeat until random value is in range
; 3530 : 			_Udiff _Val = _Ref() - (_Urng::min)();

  0002a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00034	e8 00 00 00 00	 call	 ??Rrandom_device@std@@QEAAIXZ ; std::random_device::operator()
  00039	89 85 d4 00 00
	00		 mov	 DWORD PTR tv66[rbp], eax
  0003f	e8 00 00 00 00	 call	 ?min@random_device@std@@SAIXZ ; std::random_device::min
  00044	8b 8d d4 00 00
	00		 mov	 ecx, DWORD PTR tv66[rbp]
  0004a	2b c8		 sub	 ecx, eax
  0004c	8b c1		 mov	 eax, ecx
  0004e	89 45 04	 mov	 DWORD PTR _Val$1[rbp], eax

; 3531 : 
; 3532 : 			if (_Val <= _Bmask)

  00051	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00058	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0005b	39 45 04	 cmp	 DWORD PTR _Val$1[rbp], eax
  0005e	77 05		 ja	 SHORT $LN5@Get_bits

; 3533 : 				return (_Val);

  00060	8b 45 04	 mov	 eax, DWORD PTR _Val$1[rbp]
  00063	eb 02		 jmp	 SHORT $LN1@Get_bits
$LN5@Get_bits:

; 3534 : 			}

  00065	eb c3		 jmp	 SHORT $LN2@Get_bits
$LN1@Get_bits:

; 3535 : 		}

  00067	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006e	5f		 pop	 rdi
  0006f	5d		 pop	 rbp
  00070	c3		 ret	 0
?_Get_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@AEAAIXZ ENDP ; std::_Rng_from_urng<unsigned int,std::random_device>::_Get_bits
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Get_all_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAIXZ
_TEXT	SEGMENT
_Ret$ = 4
_Num$1 = 40
this$ = 288
?_Get_all_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAIXZ PROC ; std::_Rng_from_urng<unsigned int,std::random_device>::_Get_all_bits, COMDAT

; 3508 : 		{	// return a random value

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]

; 3509 : 		_Udiff _Ret = 0;

  0002a	c7 45 04 00 00
	00 00		 mov	 DWORD PTR _Ret$[rbp], 0

; 3510 : 
; 3511 : 		for (size_t _Num = 0; _Num < CHAR_BIT * sizeof (_Udiff);

  00031	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR _Num$1[rbp], 0
  00039	eb 19		 jmp	 SHORT $LN4@Get_all_bi
$LN2@Get_all_bi:

; 3512 : 			_Num += _Bits)

  0003b	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00042	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00046	48 8b 4d 28	 mov	 rcx, QWORD PTR _Num$1[rbp]
  0004a	48 03 c8	 add	 rcx, rax
  0004d	48 8b c1	 mov	 rax, rcx
  00050	48 89 45 28	 mov	 QWORD PTR _Num$1[rbp], rax
$LN4@Get_all_bi:

; 3510 : 
; 3511 : 		for (size_t _Num = 0; _Num < CHAR_BIT * sizeof (_Udiff);

  00054	48 83 7d 28 20	 cmp	 QWORD PTR _Num$1[rbp], 32 ; 00000020H
  00059	73 39		 jae	 SHORT $LN3@Get_all_bi

; 3513 : 			{	// don't mask away any bits
; 3514 : 			_Ret <<= _Bits - 1;	// avoid full shift

  0005b	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00062	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00066	48 ff c8	 dec	 rax
  00069	0f b6 c8	 movzx	 ecx, al
  0006c	8b 45 04	 mov	 eax, DWORD PTR _Ret$[rbp]
  0006f	d3 e0		 shl	 eax, cl
  00071	89 45 04	 mov	 DWORD PTR _Ret$[rbp], eax

; 3515 : 			_Ret <<= 1;

  00074	8b 45 04	 mov	 eax, DWORD PTR _Ret$[rbp]
  00077	d1 e0		 shl	 eax, 1
  00079	89 45 04	 mov	 DWORD PTR _Ret$[rbp], eax

; 3516 : 			_Ret |= _Get_bits();

  0007c	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00083	e8 00 00 00 00	 call	 ?_Get_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@AEAAIXZ ; std::_Rng_from_urng<unsigned int,std::random_device>::_Get_bits
  00088	8b 4d 04	 mov	 ecx, DWORD PTR _Ret$[rbp]
  0008b	0b c8		 or	 ecx, eax
  0008d	8b c1		 mov	 eax, ecx
  0008f	89 45 04	 mov	 DWORD PTR _Ret$[rbp], eax

; 3517 : 			}

  00092	eb a7		 jmp	 SHORT $LN2@Get_all_bi
$LN3@Get_all_bi:

; 3518 : 
; 3519 : 		return (_Ret);

  00094	8b 45 04	 mov	 eax, DWORD PTR _Ret$[rbp]

; 3520 : 		}

  00097	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0009e	5f		 pop	 rdi
  0009f	5d		 pop	 rbp
  000a0	c3		 ret	 0
?_Get_all_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAIXZ ENDP ; std::_Rng_from_urng<unsigned int,std::random_device>::_Get_all_bits
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??R?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAII@Z
_TEXT	SEGMENT
_Ret$1 = 4
_Mask$2 = 36
tv79 = 244
this$ = 288
_Index$ = 296
??R?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAII@Z PROC ; std::_Rng_from_urng<unsigned int,std::random_device>::operator(), COMDAT

; 3484 : 		{	// adapt _Urng closed range to [0, _Index)

$LN10:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
$LN2@operator:

; 3485 : 		for (; ; )
; 3486 : 			{	// try a sample random value
; 3487 : 			_Udiff _Ret = 0;	// random bits

  0002e	c7 45 04 00 00
	00 00		 mov	 DWORD PTR _Ret$1[rbp], 0

; 3488 : 			_Udiff _Mask = 0;	// 2^N - 1, _Ret is within [0, _Mask]

  00035	c7 45 24 00 00
	00 00		 mov	 DWORD PTR _Mask$2[rbp], 0
$LN5@operator:

; 3489 : 
; 3490 : 			while (_Mask < _Udiff(_Index - 1))

  0003c	8b 85 28 01 00
	00		 mov	 eax, DWORD PTR _Index$[rbp]
  00042	ff c8		 dec	 eax
  00044	39 45 24	 cmp	 DWORD PTR _Mask$2[rbp], eax
  00047	73 6e		 jae	 SHORT $LN6@operator

; 3491 : 				{	// need more random bits
; 3492 : 				_Ret <<= _Bits - 1;	// avoid full shift

  00049	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00050	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00054	48 ff c8	 dec	 rax
  00057	0f b6 c8	 movzx	 ecx, al
  0005a	8b 45 04	 mov	 eax, DWORD PTR _Ret$1[rbp]
  0005d	d3 e0		 shl	 eax, cl
  0005f	89 45 04	 mov	 DWORD PTR _Ret$1[rbp], eax

; 3493 : 				_Ret <<= 1;

  00062	8b 45 04	 mov	 eax, DWORD PTR _Ret$1[rbp]
  00065	d1 e0		 shl	 eax, 1
  00067	89 45 04	 mov	 DWORD PTR _Ret$1[rbp], eax

; 3494 : 				_Ret |= _Get_bits();

  0006a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00071	e8 00 00 00 00	 call	 ?_Get_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@AEAAIXZ ; std::_Rng_from_urng<unsigned int,std::random_device>::_Get_bits
  00076	8b 4d 04	 mov	 ecx, DWORD PTR _Ret$1[rbp]
  00079	0b c8		 or	 ecx, eax
  0007b	8b c1		 mov	 eax, ecx
  0007d	89 45 04	 mov	 DWORD PTR _Ret$1[rbp], eax

; 3495 : 				_Mask <<= _Bits - 1;	// avoid full shift

  00080	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00087	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0008b	48 ff c8	 dec	 rax
  0008e	0f b6 c8	 movzx	 ecx, al
  00091	8b 45 24	 mov	 eax, DWORD PTR _Mask$2[rbp]
  00094	d3 e0		 shl	 eax, cl
  00096	89 45 24	 mov	 DWORD PTR _Mask$2[rbp], eax

; 3496 : 				_Mask <<= 1;

  00099	8b 45 24	 mov	 eax, DWORD PTR _Mask$2[rbp]
  0009c	d1 e0		 shl	 eax, 1
  0009e	89 45 24	 mov	 DWORD PTR _Mask$2[rbp], eax

; 3497 : 				_Mask |= _Bmask;

  000a1	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a8	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  000ab	8b 4d 24	 mov	 ecx, DWORD PTR _Mask$2[rbp]
  000ae	0b c8		 or	 ecx, eax
  000b0	8b c1		 mov	 eax, ecx
  000b2	89 45 24	 mov	 DWORD PTR _Mask$2[rbp], eax

; 3498 : 				}

  000b5	eb 85		 jmp	 SHORT $LN5@operator
$LN6@operator:

; 3499 : 
; 3500 : 			// _Ret is [0, _Mask], _Index - 1 <= _Mask, return if unbiased
; 3501 : 			if (_Ret / _Index < _Mask / _Index
; 3502 : 				|| _Mask % _Index == _Udiff(_Index - 1))

  000b7	33 d2		 xor	 edx, edx
  000b9	8b 45 04	 mov	 eax, DWORD PTR _Ret$1[rbp]
  000bc	f7 b5 28 01 00
	00		 div	 DWORD PTR _Index$[rbp]
  000c2	89 85 f4 00 00
	00		 mov	 DWORD PTR tv79[rbp], eax
  000c8	33 d2		 xor	 edx, edx
  000ca	8b 45 24	 mov	 eax, DWORD PTR _Mask$2[rbp]
  000cd	f7 b5 28 01 00
	00		 div	 DWORD PTR _Index$[rbp]
  000d3	8b 8d f4 00 00
	00		 mov	 ecx, DWORD PTR tv79[rbp]
  000d9	3b c8		 cmp	 ecx, eax
  000db	72 19		 jb	 SHORT $LN8@operator
  000dd	33 d2		 xor	 edx, edx
  000df	8b 45 24	 mov	 eax, DWORD PTR _Mask$2[rbp]
  000e2	f7 b5 28 01 00
	00		 div	 DWORD PTR _Index$[rbp]
  000e8	8b c2		 mov	 eax, edx
  000ea	8b 8d 28 01 00
	00		 mov	 ecx, DWORD PTR _Index$[rbp]
  000f0	ff c9		 dec	 ecx
  000f2	3b c1		 cmp	 eax, ecx
  000f4	75 0f		 jne	 SHORT $LN7@operator
$LN8@operator:

; 3503 : 				return (_Ret % _Index);

  000f6	33 d2		 xor	 edx, edx
  000f8	8b 45 04	 mov	 eax, DWORD PTR _Ret$1[rbp]
  000fb	f7 b5 28 01 00
	00		 div	 DWORD PTR _Index$[rbp]
  00101	8b c2		 mov	 eax, edx
  00103	eb 05		 jmp	 SHORT $LN1@operator
$LN7@operator:

; 3504 : 			}

  00105	e9 24 ff ff ff	 jmp	 $LN2@operator
$LN1@operator:

; 3505 : 		}

  0010a	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00111	5f		 pop	 rdi
  00112	5d		 pop	 rbp
  00113	c3		 ret	 0
??R?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAII@Z ENDP ; std::_Rng_from_urng<unsigned int,std::random_device>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??0?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAA@AEAVrandom_device@1@@Z
_TEXT	SEGMENT
tv70 = 192
this$ = 240
_Func$ = 248
??0?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAA@AEAVrandom_device@1@@Z PROC ; std::_Rng_from_urng<unsigned int,std::random_device>::_Rng_from_urng<unsigned int,std::random_device>, COMDAT

; 3478 : 		{	// construct from URNG

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 3477 : 		: _Ref(_Func), _Bits(CHAR_BIT * sizeof (_Udiff)), _Bmask(_Udiff(-1))

  0002f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _Func$[rbp]
  0003d	48 89 08	 mov	 QWORD PTR [rax], rcx
  00040	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00047	48 c7 40 08 20
	00 00 00	 mov	 QWORD PTR [rax+8], 32	; 00000020H
  0004f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00056	c7 40 10 ff ff
	ff ff		 mov	 DWORD PTR [rax+16], -1	; ffffffffH

; 3479 : 		for (; (_Urng::max)() - (_Urng::min)() < _Bmask; _Bmask >>= 1)

  0005d	eb 16		 jmp	 SHORT $LN4@Rng_from_u
$LN2@Rng_from_u:
  0005f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00066	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00069	d1 e8		 shr	 eax, 1
  0006b	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00072	89 41 10	 mov	 DWORD PTR [rcx+16], eax
$LN4@Rng_from_u:
  00075	e8 00 00 00 00	 call	 ?max@random_device@std@@SAIXZ ; std::random_device::max
  0007a	89 85 c0 00 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00080	e8 00 00 00 00	 call	 ?min@random_device@std@@SAIXZ ; std::random_device::min
  00085	8b 8d c0 00 00
	00		 mov	 ecx, DWORD PTR tv70[rbp]
  0008b	2b c8		 sub	 ecx, eax
  0008d	8b c1		 mov	 eax, ecx
  0008f	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00096	3b 41 10	 cmp	 eax, DWORD PTR [rcx+16]
  00099	73 1b		 jae	 SHORT $LN3@Rng_from_u

; 3480 : 			--_Bits;

  0009b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a2	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000a6	48 ff c8	 dec	 rax
  000a9	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b0	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  000b4	eb a9		 jmp	 SHORT $LN2@Rng_from_u
$LN3@Rng_from_u:

; 3481 : 		}

  000b6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000bd	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  000c4	5f		 pop	 rdi
  000c5	5d		 pop	 rbp
  000c6	c3		 ret	 0
??0?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAA@AEAVrandom_device@1@@Z ENDP ; std::_Rng_from_urng<unsigned int,std::random_device>::_Rng_from_urng<unsigned int,std::random_device>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00036	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003d	5f		 pop	 rdi
  0003e	5d		 pop	 rbp
  0003f	c3		 ret	 0
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\istream
;	COMDAT ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEBA_NXZ PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool, COMDAT

; 121  : 			{	// test if _Ipfx succeeded

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 122  : 			return (_Ok);

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]

; 123  : 			}

  00033	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003a	5f		 pop	 rdi
  0003b	5d		 pop	 rbp
  0003c	c3		 ret	 0
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\istream
;	COMDAT ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
_Istr$ = 264
_Noskip$ = 272
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry, COMDAT

; 116  : 			{	// construct locking and calling _Ipfx

$LN4:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00034	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2

; 115  : 			: _Sentry_base(_Istr)

  0003f	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Istr$[rbp]
  00046	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004d	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00052	90		 npad	 1

; 117  : 			_Ok = this->_Myistr._Ipfx(_Noskip);

  00053	0f b6 95 10 01
	00 00		 movzx	 edx, BYTE PTR _Noskip$[rbp]
  0005a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00061	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z
  0006a	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00071	88 41 08	 mov	 BYTE PTR [rcx+8], al

; 118  : 			}

  00074	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007b	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00082	5f		 pop	 rdi
  00083	5d		 pop	 rbp
  00084	c3		 ret	 0
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
_Istr$ = 264
_Noskip$ = 272
?dtor$0@?0???0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z@4HA PROC ; `std::basic_istream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z@4HA ENDP ; `std::basic_istream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
_Istr$ = 264
_Noskip$ = 272
?dtor$0@?0???0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z@4HA PROC ; `std::basic_istream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z@4HA ENDP ; `std::basic_istream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\istream
;	COMDAT ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
tv87 = 216
tv72 = 216
tv94 = 224
this$ = 272
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT

; 99   : 			{	// destroy after unlocking

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR [rsp+312]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2

; 100  : 			if (_Myistr.rdbuf() != 0)

  00035	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003f	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv72[rbp], rax
  00046	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv72[rbp]
  0004d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00050	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00054	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv72[rbp]
  0005b	48 03 c8	 add	 rcx, rax
  0005e	48 8b c1	 mov	 rax, rcx
  00061	48 8b c8	 mov	 rcx, rax
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0006a	90		 npad	 1
  0006b	48 85 c0	 test	 rax, rax
  0006e	74 52		 je	 SHORT $LN2@Sentry_bas

; 101  : 				_Myistr.rdbuf()->_Unlock();

  00070	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00077	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007a	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv87[rbp], rax
  00081	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv87[rbp]
  00088	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0008b	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0008f	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv87[rbp]
  00096	48 03 c8	 add	 rcx, rax
  00099	48 8b c1	 mov	 rax, rcx
  0009c	48 8b c8	 mov	 rcx, rax
  0009f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  000a5	90		 npad	 1
  000a6	48 89 85 e0 00
	00 00		 mov	 QWORD PTR tv94[rbp], rax
  000ad	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR tv94[rbp]
  000b4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000b7	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR tv94[rbp]
  000be	ff 50 10	 call	 QWORD PTR [rax+16]
  000c1	90		 npad	 1
$LN2@Sentry_bas:

; 102  : 			}

  000c2	48 8d a5 f8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+248]
  000c9	5f		 pop	 rdi
  000ca	5d		 pop	 rbp
  000cb	c3		 ret	 0
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\istream
;	COMDAT ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
tv88 = 192
tv73 = 192
tv95 = 200
this$ = 240
_Istr$ = 248
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT

; 93   : 			{	// lock the stream buffer, if there

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 92   : 			: _Myistr(_Istr)

  0002f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _Istr$[rbp]
  0003d	48 89 08	 mov	 QWORD PTR [rax], rcx

; 94   : 			if (_Myistr.rdbuf() != 0)

  00040	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00047	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004a	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv73[rbp], rax
  00051	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv73[rbp]
  00058	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0005b	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0005f	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv73[rbp]
  00066	48 03 c8	 add	 rcx, rax
  00069	48 8b c1	 mov	 rax, rcx
  0006c	48 8b c8	 mov	 rcx, rax
  0006f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00075	48 85 c0	 test	 rax, rax
  00078	74 50		 je	 SHORT $LN2@Sentry_bas

; 95   : 				_Myistr.rdbuf()->_Lock();

  0007a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00081	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00084	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv88[rbp], rax
  0008b	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv88[rbp]
  00092	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00095	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00099	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv88[rbp]
  000a0	48 03 c8	 add	 rcx, rax
  000a3	48 8b c1	 mov	 rax, rcx
  000a6	48 8b c8	 mov	 rcx, rax
  000a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  000af	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv95[rbp], rax
  000b6	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR tv95[rbp]
  000bd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c0	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR tv95[rbp]
  000c7	ff 50 08	 call	 QWORD PTR [rax+8]
$LN2@Sentry_bas:

; 96   : 			}

  000ca	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000d1	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  000d8	5f		 pop	 rdi
  000d9	5d		 pop	 rbp
  000da	c3		 ret	 0
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_f3a66ab6a0570788f31503db83886f49>@@_KPEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_f3a66ab6a0570788f31503db83886f49>@@_KPEBD2@Z
_TEXT	SEGMENT
_My_data$ = 8
_Old_size$ = 40
_New_size$ = 72
_Old_capacity$ = 104
_New_capacity$ = 136
_Al$ = 168
_New_ptr$ = 200
_Raw_new$ = 232
_Old_ptr$4 = 264
__$ArrayPad$ = 472
this$ = 512
_Size_increase$ = 520
_Fn$ = 528
<_Args_0>$ = 536
<_Args_1>$ = 544
<_Args_2>$ = 552
??$_Reallocate_grow_by@V<lambda_f3a66ab6a0570788f31503db83886f49>@@_KPEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_f3a66ab6a0570788f31503db83886f49>@@_KPEBD2@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_f3a66ab6a0570788f31503db83886f49>,unsigned __int64,char const * __ptr64,unsigned __int64>, COMDAT

; 3641 : 		{	// reallocate to increase size by _Size_increase elements, new buffer prepared by

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 28 02
	00 00		 sub	 rsp, 552		; 00000228H
  0001d	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 8a 00 00 00	 mov	 ecx, 138		; 0000008aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR [rsp+584]
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00040	48 33 c5	 xor	 rax, rbp
  00043	48 89 85 d8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 3642 : 			// _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 3643 : 		auto& _My_data = this->_Get_data();

  0004a	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00051	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00056	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 3644 : 		const size_type _Old_size = _My_data._Mysize;

  0005a	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0005e	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00062	48 89 45 28	 mov	 QWORD PTR _Old_size$[rbp], rax

; 3645 : 		if (max_size() - _Old_size < _Size_increase)

  00066	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006d	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00072	48 2b 45 28	 sub	 rax, QWORD PTR _Old_size$[rbp]
  00076	48 3b 85 08 02
	00 00		 cmp	 rax, QWORD PTR _Size_increase$[rbp]
  0007d	73 05		 jae	 SHORT $LN2@Reallocate

; 3646 : 			{
; 3647 : 			_Xlen();	// result too long

  0007f	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 3648 : 			}
; 3649 : 
; 3650 : 		const size_type _New_size = _Old_size + _Size_increase;

  00084	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR _Size_increase$[rbp]
  0008b	48 8b 4d 28	 mov	 rcx, QWORD PTR _Old_size$[rbp]
  0008f	48 03 c8	 add	 rcx, rax
  00092	48 8b c1	 mov	 rax, rcx
  00095	48 89 45 48	 mov	 QWORD PTR _New_size$[rbp], rax

; 3651 : 		const size_type _Old_capacity = _My_data._Myres;

  00099	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0009d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000a1	48 89 45 68	 mov	 QWORD PTR _Old_capacity$[rbp], rax

; 3652 : 		const size_type _New_capacity = _Calculate_growth(_New_size);

  000a5	48 8b 55 48	 mov	 rdx, QWORD PTR _New_size$[rbp]
  000a9	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b0	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  000b5	48 89 85 88 00
	00 00		 mov	 QWORD PTR _New_capacity$[rbp], rax

; 3653 : 		auto& _Al = this->_Getal();

  000bc	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c3	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  000c8	48 89 85 a8 00
	00 00		 mov	 QWORD PTR _Al$[rbp], rax

; 3654 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  000cf	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR _New_capacity$[rbp]
  000d6	48 83 c0 01	 add	 rax, 1
  000da	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  000e1	48 0f 42 c1	 cmovb	 rax, rcx
  000e5	48 8b d0	 mov	 rdx, rax
  000e8	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  000ef	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ; std::allocator<char>::allocate
  000f4	48 89 85 c8 00
	00 00		 mov	 QWORD PTR _New_ptr$[rbp], rax

; 3655 : 		_My_data._Orphan_all();

  000fb	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  000ff	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 3656 : 		_My_data._Mysize = _New_size;

  00104	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00108	48 8b 4d 48	 mov	 rcx, QWORD PTR _New_size$[rbp]
  0010c	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 3657 : 		_My_data._Myres = _New_capacity;

  00110	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00114	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _New_capacity$[rbp]
  0011b	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 3658 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  0011f	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00126	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  0012b	48 89 85 e8 00
	00 00		 mov	 QWORD PTR _Raw_new$[rbp], rax

; 3659 : 		if (this->_BUF_SIZE <= _Old_capacity)

  00132	48 83 7d 68 10	 cmp	 QWORD PTR _Old_capacity$[rbp], 16
  00137	0f 82 87 00 00
	00		 jb	 $LN3@Reallocate

; 3660 : 			{
; 3661 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  0013d	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00141	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00145	48 89 85 08 01
	00 00		 mov	 QWORD PTR _Old_ptr$4[rbp], rax

; 3662 : 			_Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

  0014c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Old_ptr$4[rbp]
  00153	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00158	48 8b 8d 28 02
	00 00		 mov	 rcx, QWORD PTR <_Args_2>$[rbp]
  0015f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00164	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR <_Args_1>$[rbp]
  0016b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00170	48 8b 8d 18 02
	00 00		 mov	 rcx, QWORD PTR <_Args_0>$[rbp]
  00177	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0017c	4c 8b 4d 28	 mov	 r9, QWORD PTR _Old_size$[rbp]
  00180	4c 8b c0	 mov	 r8, rax
  00183	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Raw_new$[rbp]
  0018a	48 8d 8d 10 02
	00 00		 lea	 rcx, QWORD PTR _Fn$[rbp]
  00191	e8 00 00 00 00	 call	 ??R<lambda_f3a66ab6a0570788f31503db83886f49>@@QEBA@QEADQEBD_K212@Z ; <lambda_f3a66ab6a0570788f31503db83886f49>::operator()

; 3663 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00196	48 8b 45 68	 mov	 rax, QWORD PTR _Old_capacity$[rbp]
  0019a	48 ff c0	 inc	 rax
  0019d	4c 8b c0	 mov	 r8, rax
  001a0	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Old_ptr$4[rbp]
  001a7	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  001ae	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate

; 3664 : 			_My_data._Bx._Ptr = _New_ptr;

  001b3	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  001b7	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  001be	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 3665 : 			}
; 3666 : 		else

  001c2	eb 6c		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 3667 : 			{
; 3668 : 			_Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

  001c4	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  001c8	48 83 c0 08	 add	 rax, 8
  001cc	48 8b 8d 28 02
	00 00		 mov	 rcx, QWORD PTR <_Args_2>$[rbp]
  001d3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001d8	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR <_Args_1>$[rbp]
  001df	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001e4	48 8b 8d 18 02
	00 00		 mov	 rcx, QWORD PTR <_Args_0>$[rbp]
  001eb	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  001f0	4c 8b 4d 28	 mov	 r9, QWORD PTR _Old_size$[rbp]
  001f4	4c 8b c0	 mov	 r8, rax
  001f7	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Raw_new$[rbp]
  001fe	48 8d 8d 10 02
	00 00		 lea	 rcx, QWORD PTR _Fn$[rbp]
  00205	e8 00 00 00 00	 call	 ??R<lambda_f3a66ab6a0570788f31503db83886f49>@@QEBA@QEADQEBD_K212@Z ; <lambda_f3a66ab6a0570788f31503db83886f49>::operator()

; 3669 : 			_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_ptr);

  0020a	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0020e	48 83 c0 08	 add	 rax, 8
  00212	48 8b c8	 mov	 rcx, rax
  00215	e8 00 00 00 00	 call	 ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ; std::addressof<char * __ptr64>
  0021a	4c 8d 85 c8 00
	00 00		 lea	 r8, QWORD PTR _New_ptr$[rbp]
  00221	48 8b d0	 mov	 rdx, rax
  00224	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  0022b	e8 00 00 00 00	 call	 ??$construct@PEADAEBQEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEADAEBQEAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char * __ptr64,char * __ptr64 const & __ptr64>
$LN4@Reallocate:

; 3670 : 			}
; 3671 : 
; 3672 : 		return (*this);

  00230	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
$LN5@Reallocate:

; 3673 : 		}

  00237	48 8b f8	 mov	 rdi, rax
  0023a	48 8d 4d c0	 lea	 rcx, QWORD PTR [rbp-64]
  0023e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Reallocate_grow_by@V<lambda_f3a66ab6a0570788f31503db83886f49>@@_KPEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_f3a66ab6a0570788f31503db83886f49>@@_KPEBD2@Z$rtcFrameData
  00245	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0024a	48 8b c7	 mov	 rax, rdi
  0024d	48 8b 8d d8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00254	48 33 cd	 xor	 rcx, rbp
  00257	e8 00 00 00 00	 call	 __security_check_cookie
  0025c	48 8d a5 e8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+488]
  00263	5f		 pop	 rdi
  00264	5d		 pop	 rbp
  00265	c3		 ret	 0
??$_Reallocate_grow_by@V<lambda_f3a66ab6a0570788f31503db83886f49>@@_KPEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_f3a66ab6a0570788f31503db83886f49>@@_KPEBD2@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_f3a66ab6a0570788f31503db83886f49>,unsigned __int64,char const * __ptr64,unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??R<lambda_f3a66ab6a0570788f31503db83886f49>@@QEBA@QEADQEBD_K212@Z
_TEXT	SEGMENT
tv78 = 192
this$ = 240
_New_ptr$ = 248
_Old_ptr$ = 256
_Old_size$ = 264
_Off$ = 272
_Ptr$ = 280
_Count$ = 288
??R<lambda_f3a66ab6a0570788f31503db83886f49>@@QEBA@QEADQEBD_K212@Z PROC ; <lambda_f3a66ab6a0570788f31503db83886f49>::operator(), COMDAT

; 2546 : 				const size_type _Off, const _Elem * const _Ptr, const size_type _Count) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 2547 : 			_Traits::copy(_New_ptr, _Old_ptr, _Off);

  00039	4c 8b 85 10 01
	00 00		 mov	 r8, QWORD PTR _Off$[rbp]
  00040	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR _Old_ptr$[rbp]
  00047	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  0004e	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z ; std::char_traits<char>::copy

; 2548 : 			_Traits::copy(_New_ptr + _Off, _Ptr, _Count);

  00053	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR _Off$[rbp]
  0005a	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00061	48 03 c8	 add	 rcx, rax
  00064	48 8b c1	 mov	 rax, rcx
  00067	4c 8b 85 20 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  0006e	48 8b 95 18 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00075	48 8b c8	 mov	 rcx, rax
  00078	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z ; std::char_traits<char>::copy

; 2549 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  0007d	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR _Off$[rbp]
  00084	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Old_size$[rbp]
  0008b	48 2b c8	 sub	 rcx, rax
  0008e	48 8b c1	 mov	 rax, rcx
  00091	48 ff c0	 inc	 rax
  00094	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR _Off$[rbp]
  0009b	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR _Old_ptr$[rbp]
  000a2	48 03 d1	 add	 rdx, rcx
  000a5	48 8b ca	 mov	 rcx, rdx
  000a8	48 8b 95 10 01
	00 00		 mov	 rdx, QWORD PTR _Off$[rbp]
  000af	4c 8b 85 f8 00
	00 00		 mov	 r8, QWORD PTR _New_ptr$[rbp]
  000b6	4c 03 c2	 add	 r8, rdx
  000b9	49 8b d0	 mov	 rdx, r8
  000bc	48 03 95 20 01
	00 00		 add	 rdx, QWORD PTR _Count$[rbp]
  000c3	48 89 95 c0 00
	00 00		 mov	 QWORD PTR tv78[rbp], rdx
  000ca	4c 8b c0	 mov	 r8, rax
  000cd	48 8b d1	 mov	 rdx, rcx
  000d0	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv78[rbp]
  000d7	48 8b c8	 mov	 rcx, rax
  000da	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z ; std::char_traits<char>::copy

; 2550 : 			}, _Off, _Ptr, _Count));

  000df	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  000e6	5f		 pop	 rdi
  000e7	5d		 pop	 rbp
  000e8	c3		 ret	 0
??R<lambda_f3a66ab6a0570788f31503db83886f49>@@QEBA@QEADQEBD_K212@Z ENDP ; <lambda_f3a66ab6a0570788f31503db83886f49>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@$$V@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@@Z
_TEXT	SEGMENT
_My_data$ = 8
_Old_size$ = 40
_New_size$ = 72
_Old_capacity$ = 104
_New_capacity$ = 136
_Al$ = 168
_New_ptr$ = 200
_Raw_new$ = 232
_Old_ptr$4 = 264
__$ArrayPad$ = 472
this$ = 512
_Size_increase$ = 520
_Fn$ = 528
??$_Reallocate_grow_by@V<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@$$V@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_9013ee9e23efe4882b67eff5b0ecf103> >, COMDAT

; 3641 : 		{	// reallocate to increase size by _Size_increase elements, new buffer prepared by

  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 02
	00 00		 sub	 rsp, 520		; 00000208H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 82 00 00 00	 mov	 ecx, 130		; 00000082H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	02 00 00	 mov	 rcx, QWORD PTR [rsp+552]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c5	 xor	 rax, rbp
  0003e	48 89 85 d8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 3642 : 			// _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 3643 : 		auto& _My_data = this->_Get_data();

  00045	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004c	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00051	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 3644 : 		const size_type _Old_size = _My_data._Mysize;

  00055	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00059	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0005d	48 89 45 28	 mov	 QWORD PTR _Old_size$[rbp], rax

; 3645 : 		if (max_size() - _Old_size < _Size_increase)

  00061	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00068	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  0006d	48 2b 45 28	 sub	 rax, QWORD PTR _Old_size$[rbp]
  00071	48 3b 85 08 02
	00 00		 cmp	 rax, QWORD PTR _Size_increase$[rbp]
  00078	73 05		 jae	 SHORT $LN2@Reallocate

; 3646 : 			{
; 3647 : 			_Xlen();	// result too long

  0007a	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 3648 : 			}
; 3649 : 
; 3650 : 		const size_type _New_size = _Old_size + _Size_increase;

  0007f	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR _Size_increase$[rbp]
  00086	48 8b 4d 28	 mov	 rcx, QWORD PTR _Old_size$[rbp]
  0008a	48 03 c8	 add	 rcx, rax
  0008d	48 8b c1	 mov	 rax, rcx
  00090	48 89 45 48	 mov	 QWORD PTR _New_size$[rbp], rax

; 3651 : 		const size_type _Old_capacity = _My_data._Myres;

  00094	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00098	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0009c	48 89 45 68	 mov	 QWORD PTR _Old_capacity$[rbp], rax

; 3652 : 		const size_type _New_capacity = _Calculate_growth(_New_size);

  000a0	48 8b 55 48	 mov	 rdx, QWORD PTR _New_size$[rbp]
  000a4	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ab	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  000b0	48 89 85 88 00
	00 00		 mov	 QWORD PTR _New_capacity$[rbp], rax

; 3653 : 		auto& _Al = this->_Getal();

  000b7	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000be	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  000c3	48 89 85 a8 00
	00 00		 mov	 QWORD PTR _Al$[rbp], rax

; 3654 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  000ca	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR _New_capacity$[rbp]
  000d1	48 83 c0 01	 add	 rax, 1
  000d5	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  000dc	48 0f 42 c1	 cmovb	 rax, rcx
  000e0	48 8b d0	 mov	 rdx, rax
  000e3	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  000ea	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ; std::allocator<char>::allocate
  000ef	48 89 85 c8 00
	00 00		 mov	 QWORD PTR _New_ptr$[rbp], rax

; 3655 : 		_My_data._Orphan_all();

  000f6	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  000fa	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 3656 : 		_My_data._Mysize = _New_size;

  000ff	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00103	48 8b 4d 48	 mov	 rcx, QWORD PTR _New_size$[rbp]
  00107	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 3657 : 		_My_data._Myres = _New_capacity;

  0010b	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0010f	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _New_capacity$[rbp]
  00116	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 3658 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  0011a	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00121	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00126	48 89 85 e8 00
	00 00		 mov	 QWORD PTR _Raw_new$[rbp], rax

; 3659 : 		if (this->_BUF_SIZE <= _Old_capacity)

  0012d	48 83 7d 68 10	 cmp	 QWORD PTR _Old_capacity$[rbp], 16
  00132	72 63		 jb	 SHORT $LN3@Reallocate

; 3660 : 			{
; 3661 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  00134	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00138	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0013c	48 89 85 08 01
	00 00		 mov	 QWORD PTR _Old_ptr$4[rbp], rax

; 3662 : 			_Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

  00143	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Old_ptr$4[rbp]
  0014a	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  0014f	4c 8b 4d 28	 mov	 r9, QWORD PTR _Old_size$[rbp]
  00153	4c 8b c0	 mov	 r8, rax
  00156	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Raw_new$[rbp]
  0015d	48 8d 8d 10 02
	00 00		 lea	 rcx, QWORD PTR _Fn$[rbp]
  00164	e8 00 00 00 00	 call	 ??R<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@QEBA@QEADQEBD_K@Z ; <lambda_9013ee9e23efe4882b67eff5b0ecf103>::operator()

; 3663 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00169	48 8b 45 68	 mov	 rax, QWORD PTR _Old_capacity$[rbp]
  0016d	48 ff c0	 inc	 rax
  00170	4c 8b c0	 mov	 r8, rax
  00173	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Old_ptr$4[rbp]
  0017a	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00181	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate

; 3664 : 			_My_data._Bx._Ptr = _New_ptr;

  00186	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0018a	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00191	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 3665 : 			}
; 3666 : 		else

  00195	eb 48		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 3667 : 			{
; 3668 : 			_Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

  00197	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0019b	48 83 c0 08	 add	 rax, 8
  0019f	4c 8b 4d 28	 mov	 r9, QWORD PTR _Old_size$[rbp]
  001a3	4c 8b c0	 mov	 r8, rax
  001a6	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Raw_new$[rbp]
  001ad	48 8d 8d 10 02
	00 00		 lea	 rcx, QWORD PTR _Fn$[rbp]
  001b4	e8 00 00 00 00	 call	 ??R<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@QEBA@QEADQEBD_K@Z ; <lambda_9013ee9e23efe4882b67eff5b0ecf103>::operator()

; 3669 : 			_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_ptr);

  001b9	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  001bd	48 83 c0 08	 add	 rax, 8
  001c1	48 8b c8	 mov	 rcx, rax
  001c4	e8 00 00 00 00	 call	 ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ; std::addressof<char * __ptr64>
  001c9	4c 8d 85 c8 00
	00 00		 lea	 r8, QWORD PTR _New_ptr$[rbp]
  001d0	48 8b d0	 mov	 rdx, rax
  001d3	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  001da	e8 00 00 00 00	 call	 ??$construct@PEADAEBQEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEADAEBQEAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char * __ptr64,char * __ptr64 const & __ptr64>
$LN4@Reallocate:

; 3670 : 			}
; 3671 : 
; 3672 : 		return (*this);

  001df	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
$LN5@Reallocate:

; 3673 : 		}

  001e6	48 8b f8	 mov	 rdi, rax
  001e9	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  001ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Reallocate_grow_by@V<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@$$V@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@@Z$rtcFrameData
  001f4	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001f9	48 8b c7	 mov	 rax, rdi
  001fc	48 8b 8d d8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00203	48 33 cd	 xor	 rcx, rbp
  00206	e8 00 00 00 00	 call	 __security_check_cookie
  0020b	48 8d a5 e8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+488]
  00212	5f		 pop	 rdi
  00213	5d		 pop	 rbp
  00214	c3		 ret	 0
??$_Reallocate_grow_by@V<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@$$V@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_9013ee9e23efe4882b67eff5b0ecf103> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??R<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@QEBA@QEADQEBD_K@Z
_TEXT	SEGMENT
this$ = 224
_New_ptr$ = 232
_Old_ptr$ = 240
_Old_size$ = 248
??R<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@QEBA@QEADQEBD_K@Z PROC ; <lambda_9013ee9e23efe4882b67eff5b0ecf103>::operator(), COMDAT

; 3112 : 				[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 3113 : 				_Traits::copy(_New_ptr, _Old_ptr, _Old_size + 1);

  00039	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR _Old_size$[rbp]
  00040	48 ff c0	 inc	 rax
  00043	4c 8b c0	 mov	 r8, rax
  00046	48 8b 95 f0 00
	00 00		 mov	 rdx, QWORD PTR _Old_ptr$[rbp]
  0004d	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00054	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z ; std::char_traits<char>::copy

; 3114 : 				});

  00059	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??R<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@QEBA@QEADQEBD_K@Z ENDP ; <lambda_9013ee9e23efe4882b67eff5b0ecf103>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQEBD_K01@Z
_TEXT	SEGMENT
tv70 = 192
_Left$ = 240
_Left_size$ = 248
_Right$ = 256
_Right_size$ = 264
??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQEBD_K01@Z PROC ; std::_Traits_equal<std::char_traits<char> >, COMDAT

; 24   : 	{	// compare [_Left, _Left + _Left_size) to [_Right, _Right + _Right_size) for equality using _Traits

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 25   : 	return (_Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0);

  00039	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Right_size$[rbp]
  00040	48 39 85 f8 00
	00 00		 cmp	 QWORD PTR _Left_size$[rbp], rax
  00047	75 2a		 jne	 SHORT $LN3@Traits_equ
  00049	4c 8b 85 f8 00
	00 00		 mov	 r8, QWORD PTR _Left_size$[rbp]
  00050	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR _Right$[rbp]
  00057	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR _Left$[rbp]
  0005e	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHQEBD0_K@Z ; std::char_traits<char>::compare
  00063	85 c0		 test	 eax, eax
  00065	75 0c		 jne	 SHORT $LN3@Traits_equ
  00067	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv70[rbp], 1
  00071	eb 0a		 jmp	 SHORT $LN4@Traits_equ
$LN3@Traits_equ:
  00073	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv70[rbp], 0
$LN4@Traits_equ:
  0007d	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv70[rbp]

; 26   : 	}

  00084	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0008b	5f		 pop	 rdi
  0008c	5d		 pop	 rbp
  0008d	c3		 ret	 0
??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQEBD_K01@Z ENDP ; std::_Traits_equal<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\type_traits
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 224
??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT

; 1591 : 	{	// forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 1592 : 	return (static_cast<_Ty&&>(_Arg));

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Arg$[rbp]

; 1593 : 	}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\type_traits
;	COMDAT ??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z
_TEXT	SEGMENT
_Arg$ = 224
??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z PROC		; std::forward<char * __ptr64 const & __ptr64>, COMDAT

; 1591 : 	{	// forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 1592 : 	return (static_cast<_Ty&&>(_Arg));

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Arg$[rbp]

; 1593 : 	}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z ENDP		; std::forward<char * __ptr64 const & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$_Pocca@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@AEBV10@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
__formal$ = 240
??$_Pocca@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@AEBV10@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Pocca<std::allocator<char> >, COMDAT

; 1028 : 	{	// (don't) propagate on container copy assignment

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00018	48 8b ec	 mov	 rbp, rsp
  0001b	48 8b fc	 mov	 rdi, rsp
  0001e	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 1029 : 	}

  00032	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00039	5f		 pop	 rdi
  0003a	5d		 pop	 rbp
  0003b	c3		 ret	 0
??$_Pocca@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@AEBV10@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Pocca<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
_Left$ = 224
_Right$ = 232
__formal$ = 240
??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0U?$integral_constant@_N$00@0@@Z PROC ; std::_Pocma<std::allocator<char> >, COMDAT

; 1041 : 	{	// propagate on container move assignment

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 1042 : 	_Left = _STD move(_Right);

  00034	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  0003b	e8 00 00 00 00	 call	 ??$move@AEAV?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z ; std::move<std::allocator<char> & __ptr64>

; 1043 : 	}

  00040	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00047	5f		 pop	 rdi
  00048	5d		 pop	 rbp
  00049	c3		 ret	 0
??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0U?$integral_constant@_N$00@0@@Z ENDP ; std::_Pocma<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z
_TEXT	SEGMENT
this$ = 224
__formal$ = 232
_Val1$ = 240
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >, COMDAT

; 312  : 		{	// construct from forwarded values

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 310  : 		: _Ty1(_STD forward<_Other1>(_Val1)),

  00033	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR _Val1$[rbp]
  0003a	e8 00 00 00 00	 call	 ??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z ; std::forward<std::allocator<char> >

; 311  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

  0003f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00046	48 8b c8	 mov	 rcx, rax
  00049	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 313  : 		}

  0004e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00055	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005c	5f		 pop	 rdi
  0005d	5d		 pop	 rbp
  0005e	c3		 ret	 0
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\type_traits
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 224
??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 1591 : 	{	// forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 1592 : 	return (static_cast<_Ty&&>(_Arg));

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Arg$[rbp]

; 1593 : 	}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\string
;	COMDAT ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
_TEXT	SEGMENT
_State$ = 4
_Changed$ = 36
_Ok$ = 72
_Metadelim$6 = 116
_Meta$7 = 148
$T8 = 372
$T9 = 408
$T10 = 440
tv207 = 456
tv205 = 456
tv165 = 456
tv65 = 456
tv206 = 464
tv204 = 464
__$ArrayPad$ = 472
_Istr$ = 512
_Str$ = 520
_Delim$ = 528
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z PROC ; std::getline<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 75   : 	{	// get characters into string, discard delimiter

$LN21:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 02
	00 00		 sub	 rsp, 520		; 00000208H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 82 00 00 00	 mov	 ecx, 130		; 00000082H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	02 00 00	 mov	 rcx, QWORD PTR [rsp+552]
  00034	48 c7 85 b8 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T10[rbp], -2
  0003f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00046	48 33 c5	 xor	 rax, rbp
  00049	48 89 85 d8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 76   : 	typedef basic_istream<_Elem, _Traits> _Myis;
; 77   : 
; 78   : 	ios_base::iostate _State = ios_base::goodbit;

  00050	c7 45 04 00 00
	00 00		 mov	 DWORD PTR _State$[rbp], 0

; 79   : 	bool _Changed = false;

  00057	c6 45 24 00	 mov	 BYTE PTR _Changed$[rbp], 0

; 80   : 	const typename _Myis::sentry _Ok(_Istr, true);

  0005b	41 b0 01	 mov	 r8b, 1
  0005e	48 8b 95 00 02
	00 00		 mov	 rdx, QWORD PTR _Istr$[rbp]
  00065	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00069	e8 00 00 00 00	 call	 ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
  0006e	90		 npad	 1

; 81   : 
; 82   : 	if (_Ok)

  0006f	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00073	e8 00 00 00 00	 call	 ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
  00078	0f b6 c0	 movzx	 eax, al
  0007b	85 c0		 test	 eax, eax
  0007d	0f 84 a0 01 00
	00		 je	 $LN5@getline

; 83   : 		{	// state okay, extract characters
; 84   : 		_TRY_IO_BEGIN
; 85   : 		_Str.erase();

  00083	33 d2		 xor	 edx, edx
  00085	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR _Str$[rbp]
  0008c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 86   : 		const typename _Traits::int_type _Metadelim =
; 87   : 			_Traits::to_int_type(_Delim);

  00091	48 8d 8d 10 02
	00 00		 lea	 rcx, QWORD PTR _Delim$[rbp]
  00098	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHAEBD@Z ; std::char_traits<char>::to_int_type
  0009d	89 45 74	 mov	 DWORD PTR _Metadelim$6[rbp], eax

; 88   : 		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  000a0	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR _Istr$[rbp]
  000a7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000aa	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000ae	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR _Istr$[rbp]
  000b5	48 03 c8	 add	 rcx, rax
  000b8	48 8b c1	 mov	 rax, rcx
  000bb	48 8b c8	 mov	 rcx, rax
  000be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  000c4	48 89 85 c8 01
	00 00		 mov	 QWORD PTR tv65[rbp], rax
  000cb	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR tv65[rbp]
  000d2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ
  000d8	89 85 d0 01 00
	00		 mov	 DWORD PTR tv204[rbp], eax
  000de	8b 85 d0 01 00
	00		 mov	 eax, DWORD PTR tv204[rbp]
  000e4	89 85 94 00 00
	00		 mov	 DWORD PTR _Meta$7[rbp], eax
  000ea	eb 4a		 jmp	 SHORT $LN4@getline
$LN2@getline:

; 89   : 
; 90   : 		for (; ; _Meta = _Istr.rdbuf()->snextc())

  000ec	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR _Istr$[rbp]
  000f3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f6	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000fa	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR _Istr$[rbp]
  00101	48 03 c8	 add	 rcx, rax
  00104	48 8b c1	 mov	 rax, rcx
  00107	48 8b c8	 mov	 rcx, rax
  0010a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00110	48 89 85 c8 01
	00 00		 mov	 QWORD PTR tv205[rbp], rax
  00117	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR tv205[rbp]
  0011e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ
  00124	89 85 d0 01 00
	00		 mov	 DWORD PTR tv206[rbp], eax
  0012a	8b 85 d0 01 00
	00		 mov	 eax, DWORD PTR tv206[rbp]
  00130	89 85 94 00 00
	00		 mov	 DWORD PTR _Meta$7[rbp], eax
$LN4@getline:

; 91   : 			if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  00136	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0013b	89 85 74 01 00
	00		 mov	 DWORD PTR $T8[rbp], eax
  00141	48 8d 95 94 00
	00 00		 lea	 rdx, QWORD PTR _Meta$7[rbp]
  00148	48 8d 8d 74 01
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  0014f	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  00154	0f b6 c0	 movzx	 eax, al
  00157	85 c0		 test	 eax, eax
  00159	74 13		 je	 SHORT $LN7@getline

; 92   : 				{	// end of file, quit
; 93   : 				_State |= ios_base::eofbit;

  0015b	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  0015e	83 c8 01	 or	 eax, 1
  00161	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 94   : 				break;

  00164	e9 b8 00 00 00	 jmp	 $LN3@getline
  00169	e9 ae 00 00 00	 jmp	 $LN8@getline
$LN7@getline:

; 95   : 				}
; 96   : 			else if (_Traits::eq_int_type(_Meta, _Metadelim))

  0016e	48 8d 55 74	 lea	 rdx, QWORD PTR _Metadelim$6[rbp]
  00172	48 8d 8d 94 00
	00 00		 lea	 rcx, QWORD PTR _Meta$7[rbp]
  00179	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  0017e	0f b6 c0	 movzx	 eax, al
  00181	85 c0		 test	 eax, eax
  00183	74 40		 je	 SHORT $LN9@getline

; 97   : 				{	// got a delimiter, discard it and quit
; 98   : 				_Changed = true;

  00185	c6 45 24 01	 mov	 BYTE PTR _Changed$[rbp], 1

; 99   : 				_Istr.rdbuf()->sbumpc();

  00189	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR _Istr$[rbp]
  00190	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00193	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00197	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR _Istr$[rbp]
  0019e	48 03 c8	 add	 rcx, rax
  001a1	48 8b c1	 mov	 rax, rcx
  001a4	48 8b c8	 mov	 rcx, rax
  001a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001ad	48 89 85 c8 01
	00 00		 mov	 QWORD PTR tv207[rbp], rax
  001b4	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR tv207[rbp]
  001bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ

; 100  : 				break;

  001c1	eb 5e		 jmp	 SHORT $LN3@getline
  001c3	eb 57		 jmp	 SHORT $LN8@getline
$LN9@getline:

; 101  : 				}
; 102  : 			else if (_Str.max_size() <= _Str.size())

  001c5	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR _Str$[rbp]
  001cc	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  001d1	48 89 85 c8 01
	00 00		 mov	 QWORD PTR tv165[rbp], rax
  001d8	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR _Str$[rbp]
  001df	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  001e4	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR tv165[rbp]
  001eb	48 3b c1	 cmp	 rax, rcx
  001ee	77 0d		 ja	 SHORT $LN11@getline

; 103  : 				{	// string too large, quit
; 104  : 				_State |= ios_base::failbit;

  001f0	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  001f3	83 c8 02	 or	 eax, 2
  001f6	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 105  : 				break;

  001f9	eb 26		 jmp	 SHORT $LN3@getline

; 106  : 				}
; 107  : 			else

  001fb	eb 1f		 jmp	 SHORT $LN8@getline
$LN11@getline:

; 108  : 				{	// got a character, add it to string
; 109  : 				_Str += _Traits::to_char_type(_Meta);

  001fd	48 8d 8d 94 00
	00 00		 lea	 rcx, QWORD PTR _Meta$7[rbp]
  00204	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADAEBH@Z ; std::char_traits<char>::to_char_type
  00209	0f b6 d0	 movzx	 edx, al
  0020c	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR _Str$[rbp]
  00213	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 110  : 				_Changed = true;

  00218	c6 45 24 01	 mov	 BYTE PTR _Changed$[rbp], 1
$LN8@getline:

; 111  : 				}

  0021c	e9 cb fe ff ff	 jmp	 $LN2@getline
$LN3@getline:
  00221	eb 00		 jmp	 SHORT $LN5@getline
$LN19@getline:
$LN5@getline:

; 112  : 		_CATCH_IO_(_Istr)
; 113  : 		}
; 114  : 
; 115  : 	if (!_Changed)

  00223	0f b6 45 24	 movzx	 eax, BYTE PTR _Changed$[rbp]
  00227	85 c0		 test	 eax, eax
  00229	75 09		 jne	 SHORT $LN13@getline

; 116  : 		_State |= ios_base::failbit;

  0022b	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  0022e	83 c8 02	 or	 eax, 2
  00231	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN13@getline:

; 117  : 	_Istr.setstate(_State);

  00234	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR _Istr$[rbp]
  0023b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0023e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00242	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR _Istr$[rbp]
  00249	48 03 c8	 add	 rcx, rax
  0024c	48 8b c1	 mov	 rax, rcx
  0024f	45 33 c0	 xor	 r8d, r8d
  00252	8b 55 04	 mov	 edx, DWORD PTR _State$[rbp]
  00255	48 8b c8	 mov	 rcx, rax
  00258	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z

; 118  : 	return (_Istr);

  0025e	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR _Istr$[rbp]
  00265	48 89 85 98 01
	00 00		 mov	 QWORD PTR $T9[rbp], rax
  0026c	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00270	e8 00 00 00 00	 call	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ
  00275	48 8b 85 98 01
	00 00		 mov	 rax, QWORD PTR $T9[rbp]

; 119  : 	}

  0027c	48 8b f8	 mov	 rdi, rax
  0027f	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00283	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$rtcFrameData
  0028a	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0028f	48 8b c7	 mov	 rax, rdi
  00292	48 8b 8d d8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00299	48 33 cd	 xor	 rcx, rbp
  0029c	e8 00 00 00 00	 call	 __security_check_cookie
  002a1	48 8d a5 e8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+488]
  002a8	5f		 pop	 rdi
  002a9	5d		 pop	 rbp
  002aa	c3		 ret	 0
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z ENDP ; std::getline<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Changed$ = 36
_Ok$ = 72
_Metadelim$6 = 116
_Meta$7 = 148
$T8 = 372
$T9 = 408
$T10 = 440
tv207 = 456
tv205 = 456
tv165 = 456
tv65 = 456
tv206 = 464
tv204 = 464
__$ArrayPad$ = 472
_Istr$ = 512
_Str$ = 520
_Delim$ = 528
?dtor$0@?0???$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z@4HA PROC ; `std::getline<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z@4HA ENDP ; `std::getline<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
_State$ = 4
_Changed$ = 36
_Ok$ = 72
_Metadelim$6 = 116
_Meta$7 = 148
$T8 = 372
$T9 = 408
$T10 = 440
tv207 = 456
tv205 = 456
tv165 = 456
tv65 = 456
tv206 = 464
tv204 = 464
__$ArrayPad$ = 472
_Istr$ = 512
_Str$ = 520
_Delim$ = 528
?catch$1@?0???$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z@4HA PROC ; `std::getline<char,std::char_traits<char>,std::allocator<char> >'::`1'::catch$1

; 112  : 		_CATCH_IO_(_Istr)

  00024	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00029	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002e	55		 push	 rbp
  0002f	57		 push	 rdi
  00030	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00034	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$0:
  00038	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR _Istr$[rbp]
  0003f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00042	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00046	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR _Istr$[rbp]
  0004d	48 03 c8	 add	 rcx, rax
  00050	48 8b c1	 mov	 rax, rcx
  00053	41 b0 01	 mov	 r8b, 1
  00056	ba 04 00 00 00	 mov	 edx, 4
  0005b	48 8b c8	 mov	 rcx, rax
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00064	90		 npad	 1
  00065	48 8d 05 00 00
	00 00		 lea	 rax, $LN19@catch$1
  0006c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00070	5f		 pop	 rdi
  00071	5d		 pop	 rbp
  00072	c3		 ret	 0
  00073	cc		 int	 3
?catch$1@?0???$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z@4HA ENDP ; `std::getline<char,std::char_traits<char>,std::allocator<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Changed$ = 36
_Ok$ = 72
_Metadelim$6 = 116
_Meta$7 = 148
$T8 = 372
$T9 = 408
$T10 = 440
tv207 = 456
tv205 = 456
tv165 = 456
tv65 = 456
tv206 = 464
tv204 = 464
__$ArrayPad$ = 472
_Istr$ = 512
_Str$ = 520
_Delim$ = 528
?dtor$0@?0???$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z@4HA PROC ; `std::getline<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z@4HA ENDP ; `std::getline<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Changed$ = 36
_Ok$ = 72
_Metadelim$6 = 116
_Meta$7 = 148
$T8 = 372
$T9 = 408
$T10 = 440
tv207 = 456
tv205 = 456
tv165 = 456
tv65 = 456
tv206 = 464
tv204 = 464
__$ArrayPad$ = 472
_Istr$ = 512
_Str$ = 520
_Delim$ = 528
?catch$1@?0???$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z@4HA PROC ; `std::getline<char,std::char_traits<char>,std::allocator<char> >'::`1'::catch$1

; 112  : 		_CATCH_IO_(_Istr)

  00024	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00029	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002e	55		 push	 rbp
  0002f	57		 push	 rdi
  00030	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00034	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$0:
  00038	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR _Istr$[rbp]
  0003f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00042	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00046	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR _Istr$[rbp]
  0004d	48 03 c8	 add	 rcx, rax
  00050	48 8b c1	 mov	 rax, rcx
  00053	41 b0 01	 mov	 r8b, 1
  00056	ba 04 00 00 00	 mov	 edx, 4
  0005b	48 8b c8	 mov	 rcx, rax
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00064	90		 npad	 1
  00065	48 8d 05 00 00
	00 00		 lea	 rax, $LN19@catch$1
  0006c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00070	5f		 pop	 rdi
  00071	5d		 pop	 rbp
  00072	c3		 ret	 0
  00073	cc		 int	 3
?catch$1@?0???$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z@4HA ENDP ; `std::getline<char,std::char_traits<char>,std::allocator<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ??$_Eval@Vrandom_device@std@@@?$uniform_int@H@std@@AEBAHAEAVrandom_device@1@HH@Z
_TEXT	SEGMENT
_Rng$ = 8
_Umin$ = 52
_Umax$ = 84
_Uret$ = 116
__$ArrayPad$ = 328
this$ = 368
_Eng$ = 376
_Min$ = 384
_Max$ = 392
??$_Eval@Vrandom_device@std@@@?$uniform_int@H@std@@AEBAHAEAVrandom_device@1@HH@Z PROC ; std::uniform_int<int>::_Eval<std::random_device>, COMDAT

; 2352 : 		{	// compute next value in range [_Min, _Max]

$LN5:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 5e 00 00 00	 mov	 ecx, 94			; 0000005eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR [rsp+408]
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00040	48 33 c5	 xor	 rax, rbp
  00043	48 89 85 48 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 2353 : 		_Rng_from_urng<_Uty, _Engine> _Rng(_Eng);

  0004a	48 8b 95 78 01
	00 00		 mov	 rdx, QWORD PTR _Eng$[rbp]
  00051	48 8d 4d 08	 lea	 rcx, QWORD PTR _Rng$[rbp]
  00055	e8 00 00 00 00	 call	 ??0?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAA@AEAVrandom_device@1@@Z ; std::_Rng_from_urng<unsigned int,std::random_device>::_Rng_from_urng<unsigned int,std::random_device>

; 2354 : 
; 2355 : 		const _Uty _Umin = _Adjust(_Uty(_Min));

  0005a	8b 8d 80 01 00
	00		 mov	 ecx, DWORD PTR _Min$[rbp]
  00060	e8 00 00 00 00	 call	 ?_Adjust@?$uniform_int@H@std@@CAII@Z ; std::uniform_int<int>::_Adjust
  00065	89 45 34	 mov	 DWORD PTR _Umin$[rbp], eax

; 2356 : 		const _Uty _Umax = _Adjust(_Uty(_Max));

  00068	8b 8d 88 01 00
	00		 mov	 ecx, DWORD PTR _Max$[rbp]
  0006e	e8 00 00 00 00	 call	 ?_Adjust@?$uniform_int@H@std@@CAII@Z ; std::uniform_int<int>::_Adjust
  00073	89 45 54	 mov	 DWORD PTR _Umax$[rbp], eax

; 2357 : 
; 2358 : 		_Uty _Uret = 0;

  00076	c7 45 74 00 00
	00 00		 mov	 DWORD PTR _Uret$[rbp], 0

; 2359 : 
; 2360 : 		if (_Umax - _Umin == _Uty(-1))

  0007d	8b 45 34	 mov	 eax, DWORD PTR _Umin$[rbp]
  00080	8b 4d 54	 mov	 ecx, DWORD PTR _Umax$[rbp]
  00083	2b c8		 sub	 ecx, eax
  00085	8b c1		 mov	 eax, ecx
  00087	83 f8 ff	 cmp	 eax, -1			; ffffffffH
  0008a	75 0e		 jne	 SHORT $LN2@Eval

; 2361 : 			_Uret = static_cast<_Uty>(_Rng._Get_all_bits());

  0008c	48 8d 4d 08	 lea	 rcx, QWORD PTR _Rng$[rbp]
  00090	e8 00 00 00 00	 call	 ?_Get_all_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAIXZ ; std::_Rng_from_urng<unsigned int,std::random_device>::_Get_all_bits
  00095	89 45 74	 mov	 DWORD PTR _Uret$[rbp], eax

; 2362 : 		else

  00098	eb 1a		 jmp	 SHORT $LN3@Eval
$LN2@Eval:

; 2363 : 			_Uret = static_cast<_Uty>(_Rng(_Umax - _Umin + 1));

  0009a	8b 45 34	 mov	 eax, DWORD PTR _Umin$[rbp]
  0009d	8b 4d 54	 mov	 ecx, DWORD PTR _Umax$[rbp]
  000a0	2b c8		 sub	 ecx, eax
  000a2	8b c1		 mov	 eax, ecx
  000a4	ff c0		 inc	 eax
  000a6	8b d0		 mov	 edx, eax
  000a8	48 8d 4d 08	 lea	 rcx, QWORD PTR _Rng$[rbp]
  000ac	e8 00 00 00 00	 call	 ??R?$_Rng_from_urng@IVrandom_device@std@@@std@@QEAAII@Z ; std::_Rng_from_urng<unsigned int,std::random_device>::operator()
  000b1	89 45 74	 mov	 DWORD PTR _Uret$[rbp], eax
$LN3@Eval:

; 2364 : 
; 2365 : 		return (_Ty(_Adjust(_Uret + _Umin)));

  000b4	8b 45 34	 mov	 eax, DWORD PTR _Umin$[rbp]
  000b7	8b 4d 74	 mov	 ecx, DWORD PTR _Uret$[rbp]
  000ba	03 c8		 add	 ecx, eax
  000bc	8b c1		 mov	 eax, ecx
  000be	8b c8		 mov	 ecx, eax
  000c0	e8 00 00 00 00	 call	 ?_Adjust@?$uniform_int@H@std@@CAII@Z ; std::uniform_int<int>::_Adjust

; 2366 : 		}

  000c5	48 8b f8	 mov	 rdi, rax
  000c8	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Eval@Vrandom_device@std@@@?$uniform_int@H@std@@AEBAHAEAVrandom_device@1@HH@Z$rtcFrameData
  000d3	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000d8	48 8b c7	 mov	 rax, rdi
  000db	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000e2	48 33 cd	 xor	 rcx, rbp
  000e5	e8 00 00 00 00	 call	 __security_check_cookie
  000ea	48 8d a5 58 01
	00 00		 lea	 rsp, QWORD PTR [rbp+344]
  000f1	5f		 pop	 rdi
  000f2	5d		 pop	 rbp
  000f3	c3		 ret	 0
??$_Eval@Vrandom_device@std@@@?$uniform_int@H@std@@AEBAHAEAVrandom_device@1@HH@Z ENDP ; std::uniform_int<int>::_Eval<std::random_device>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\type_traits
;	COMDAT ??$move@AEAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 224
??$move@AEAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@@Z PROC ; std::move<std::basic_istream<char,std::char_traits<char> > & __ptr64>, COMDAT

; 1606 : 	{	// forward _Arg as movable

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 1607 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Arg$[rbp]

; 1608 : 	}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??$move@AEAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@@Z ENDP ; std::move<std::basic_istream<char,std::char_traits<char> > & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring_insert.h
;	COMDAT ??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
_TEXT	SEGMENT
_State$ = 4
_Pad$ = 40
_Ok$ = 72
$T4 = 308
$T5 = 340
$T6 = 372
$T7 = 404
$T8 = 440
$T9 = 472
tv296 = 484
tv291 = 484
tv137 = 484
tv297 = 488
tv294 = 488
tv292 = 488
tv135 = 488
tv298 = 496
tv295 = 496
tv293 = 496
__$ArrayPad$ = 504
_Ostr$ = 544
_Data$ = 552
_Size$ = 560
??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z PROC ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>, COMDAT

; 24   : 	{	// insert a character-type sequence into _Ostr as if through a basic_string copy

$LN25:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 28 02
	00 00		 sub	 rsp, 552		; 00000228H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 8a 00 00 00	 mov	 ecx, 138		; 0000008aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR [rsp+584]
  00034	48 c7 85 d8 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T9[rbp], -2
  0003f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00046	48 33 c5	 xor	 rax, rbp
  00049	48 89 85 f8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 25   : 	ios_base::iostate _State = ios_base::goodbit;

  00050	c7 45 04 00 00
	00 00		 mov	 DWORD PTR _State$[rbp], 0

; 26   : 	_SizeT _Pad = _Ostr.width() <= 0 || static_cast<_SizeT>(_Ostr.width()) <= _Size

  00057	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0005e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00061	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00065	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0006c	48 03 c8	 add	 rcx, rax
  0006f	48 8b c1	 mov	 rax, rcx
  00072	48 8b c8	 mov	 rcx, rax
  00075	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  0007b	48 85 c0	 test	 rax, rax
  0007e	7e 61		 jle	 SHORT $LN17@Insert_str
  00080	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00087	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0008a	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0008e	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00095	48 03 c8	 add	 rcx, rax
  00098	48 8b c1	 mov	 rax, rcx
  0009b	48 8b c8	 mov	 rcx, rax
  0009e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000a4	48 3b 85 30 02
	00 00		 cmp	 rax, QWORD PTR _Size$[rbp]
  000ab	76 34		 jbe	 SHORT $LN17@Insert_str
  000ad	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000b4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000b7	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000bb	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000c2	48 03 c8	 add	 rcx, rax
  000c5	48 8b c1	 mov	 rax, rcx
  000c8	48 8b c8	 mov	 rcx, rax
  000cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000d1	48 2b 85 30 02
	00 00		 sub	 rax, QWORD PTR _Size$[rbp]
  000d8	48 89 85 e8 01
	00 00		 mov	 QWORD PTR tv135[rbp], rax
  000df	eb 0b		 jmp	 SHORT $LN18@Insert_str
$LN17@Insert_str:
  000e1	48 c7 85 e8 01
	00 00 00 00 00
	00		 mov	 QWORD PTR tv135[rbp], 0
$LN18@Insert_str:
  000ec	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR tv135[rbp]
  000f3	48 89 45 28	 mov	 QWORD PTR _Pad$[rbp], rax

; 27   : 		? 0 : static_cast<_SizeT>(_Ostr.width()) - _Size;
; 28   : 	const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

  000f7	48 8b 95 20 02
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  000fe	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00102	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00107	90		 npad	 1

; 29   : 
; 30   : 	if (!_Ok)

  00108	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  0010c	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00111	0f b6 c0	 movzx	 eax, al
  00114	85 c0		 test	 eax, eax
  00116	75 0e		 jne	 SHORT $LN8@Insert_str

; 31   : 		_State |= ios_base::badbit;

  00118	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  0011b	83 c8 04	 or	 eax, 4
  0011e	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 32   : 	else

  00121	e9 68 02 00 00	 jmp	 $LN9@Insert_str
$LN8@Insert_str:

; 33   : 		{	// state okay, insert characters
; 34   : 		_TRY_IO_BEGIN
; 35   : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  00126	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0012d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00130	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00134	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0013b	48 03 c8	 add	 rcx, rax
  0013e	48 8b c1	 mov	 rax, rcx
  00141	48 8b c8	 mov	 rcx, rax
  00144	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flags@ios_base@std@@QEBAHXZ
  0014a	89 85 e4 01 00
	00		 mov	 DWORD PTR tv137[rbp], eax
  00150	8b 85 e4 01 00
	00		 mov	 eax, DWORD PTR tv137[rbp]
  00156	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  0015b	83 f8 40	 cmp	 eax, 64			; 00000040H
  0015e	0f 84 c8 00 00
	00		 je	 $LN11@Insert_str

; 36   : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00164	eb 0b		 jmp	 SHORT $LN4@Insert_str
$LN2@Insert_str:
  00166	48 8b 45 28	 mov	 rax, QWORD PTR _Pad$[rbp]
  0016a	48 ff c8	 dec	 rax
  0016d	48 89 45 28	 mov	 QWORD PTR _Pad$[rbp], rax
$LN4@Insert_str:
  00171	48 83 7d 28 00	 cmp	 QWORD PTR _Pad$[rbp], 0
  00176	0f 86 b0 00 00
	00		 jbe	 $LN11@Insert_str

; 37   : 				if (_Traits::eq_int_type(_Traits::eof(),

  0017c	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00183	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00186	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0018a	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00191	48 03 c8	 add	 rcx, rax
  00194	48 8b c1	 mov	 rax, rcx
  00197	48 8b c8	 mov	 rcx, rax
  0019a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  001a0	88 85 e4 01 00
	00		 mov	 BYTE PTR tv291[rbp], al
  001a6	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  001ad	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001b0	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  001b4	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  001bb	48 03 c8	 add	 rcx, rax
  001be	48 8b c1	 mov	 rax, rcx
  001c1	48 8b c8	 mov	 rcx, rax
  001c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001ca	48 89 85 e8 01
	00 00		 mov	 QWORD PTR tv292[rbp], rax
  001d1	0f b6 95 e4 01
	00 00		 movzx	 edx, BYTE PTR tv291[rbp]
  001d8	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR tv292[rbp]
  001df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  001e5	89 85 f0 01 00
	00		 mov	 DWORD PTR tv293[rbp], eax
  001eb	8b 85 f0 01 00
	00		 mov	 eax, DWORD PTR tv293[rbp]
  001f1	89 85 34 01 00
	00		 mov	 DWORD PTR $T4[rbp], eax
  001f7	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  001fc	89 85 54 01 00
	00		 mov	 DWORD PTR $T5[rbp], eax
  00202	48 8d 95 34 01
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  00209	48 8d 8d 54 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00210	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  00215	0f b6 c0	 movzx	 eax, al
  00218	85 c0		 test	 eax, eax
  0021a	74 0b		 je	 SHORT $LN12@Insert_str

; 38   : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 39   : 					{	// insertion failed, quit
; 40   : 					_State |= ios_base::badbit;

  0021c	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  0021f	83 c8 04	 or	 eax, 4
  00222	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 41   : 					break;

  00225	eb 05		 jmp	 SHORT $LN11@Insert_str
$LN12@Insert_str:

; 42   : 					}
; 43   : 
; 44   : 		if (_State == ios_base::goodbit

  00227	e9 3a ff ff ff	 jmp	 $LN2@Insert_str
$LN11@Insert_str:

; 45   : 			&& _Ostr.rdbuf()->sputn(_Data, (streamsize)_Size)

  0022c	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  00230	75 6b		 jne	 SHORT $LN13@Insert_str
  00232	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00239	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0023c	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00240	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00247	48 03 c8	 add	 rcx, rax
  0024a	48 8b c1	 mov	 rax, rcx
  0024d	48 8b c8	 mov	 rcx, rax
  00250	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00256	48 89 85 e8 01
	00 00		 mov	 QWORD PTR tv294[rbp], rax
  0025d	4c 8b 85 30 02
	00 00		 mov	 r8, QWORD PTR _Size$[rbp]
  00264	48 8b 95 28 02
	00 00		 mov	 rdx, QWORD PTR _Data$[rbp]
  0026b	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR tv294[rbp]
  00272	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z
  00278	48 89 85 f0 01
	00 00		 mov	 QWORD PTR tv295[rbp], rax
  0027f	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Size$[rbp]
  00286	48 39 85 f0 01
	00 00		 cmp	 QWORD PTR tv295[rbp], rax
  0028d	74 0e		 je	 SHORT $LN13@Insert_str

; 46   : 				!= (streamsize)_Size)
; 47   : 				_State |= ios_base::badbit;

  0028f	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00292	83 c8 04	 or	 eax, 4
  00295	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 48   : 		else

  00298	e9 c8 00 00 00	 jmp	 $LN14@Insert_str
$LN13@Insert_str:

; 49   : 			for (; 0 < _Pad; --_Pad)	// pad on right

  0029d	eb 0b		 jmp	 SHORT $LN7@Insert_str
$LN5@Insert_str:
  0029f	48 8b 45 28	 mov	 rax, QWORD PTR _Pad$[rbp]
  002a3	48 ff c8	 dec	 rax
  002a6	48 89 45 28	 mov	 QWORD PTR _Pad$[rbp], rax
$LN7@Insert_str:
  002aa	48 83 7d 28 00	 cmp	 QWORD PTR _Pad$[rbp], 0
  002af	0f 86 b0 00 00
	00		 jbe	 $LN14@Insert_str

; 50   : 				if (_Traits::eq_int_type(_Traits::eof(),

  002b5	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  002bc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002bf	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002c3	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  002ca	48 03 c8	 add	 rcx, rax
  002cd	48 8b c1	 mov	 rax, rcx
  002d0	48 8b c8	 mov	 rcx, rax
  002d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  002d9	88 85 e4 01 00
	00		 mov	 BYTE PTR tv296[rbp], al
  002df	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  002e6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002e9	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002ed	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  002f4	48 03 c8	 add	 rcx, rax
  002f7	48 8b c1	 mov	 rax, rcx
  002fa	48 8b c8	 mov	 rcx, rax
  002fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00303	48 89 85 e8 01
	00 00		 mov	 QWORD PTR tv297[rbp], rax
  0030a	0f b6 95 e4 01
	00 00		 movzx	 edx, BYTE PTR tv296[rbp]
  00311	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR tv297[rbp]
  00318	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  0031e	89 85 f0 01 00
	00		 mov	 DWORD PTR tv298[rbp], eax
  00324	8b 85 f0 01 00
	00		 mov	 eax, DWORD PTR tv298[rbp]
  0032a	89 85 74 01 00
	00		 mov	 DWORD PTR $T6[rbp], eax
  00330	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00335	89 85 94 01 00
	00		 mov	 DWORD PTR $T7[rbp], eax
  0033b	48 8d 95 74 01
	00 00		 lea	 rdx, QWORD PTR $T6[rbp]
  00342	48 8d 8d 94 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00349	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  0034e	0f b6 c0	 movzx	 eax, al
  00351	85 c0		 test	 eax, eax
  00353	74 0b		 je	 SHORT $LN15@Insert_str

; 51   : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 52   : 					{	// insertion failed, quit
; 53   : 					_State |= ios_base::badbit;

  00355	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00358	83 c8 04	 or	 eax, 4
  0035b	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 54   : 					break;

  0035e	eb 05		 jmp	 SHORT $LN14@Insert_str
$LN15@Insert_str:

; 55   : 					}

  00360	e9 3a ff ff ff	 jmp	 $LN5@Insert_str
$LN14@Insert_str:

; 56   : 		_Ostr.width(0);

  00365	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0036c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0036f	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00373	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0037a	48 03 c8	 add	 rcx, rax
  0037d	48 8b c1	 mov	 rax, rcx
  00380	33 d2		 xor	 edx, edx
  00382	48 8b c8	 mov	 rcx, rax
  00385	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEAA_J_J@Z
  0038b	90		 npad	 1
  0038c	eb 00		 jmp	 SHORT $LN9@Insert_str
$LN23@Insert_str:
$LN9@Insert_str:

; 57   : 		_CATCH_IO_(_Ostr)
; 58   : 		}
; 59   : 
; 60   : 	_Ostr.setstate(_State);

  0038e	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00395	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00398	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0039c	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  003a3	48 03 c8	 add	 rcx, rax
  003a6	48 8b c1	 mov	 rax, rcx
  003a9	45 33 c0	 xor	 r8d, r8d
  003ac	8b 55 04	 mov	 edx, DWORD PTR _State$[rbp]
  003af	48 8b c8	 mov	 rcx, rax
  003b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z

; 61   : 	return (_Ostr);

  003b8	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  003bf	48 89 85 b8 01
	00 00		 mov	 QWORD PTR $T8[rbp], rax
  003c6	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  003ca	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  003cf	48 8b 85 b8 01
	00 00		 mov	 rax, QWORD PTR $T8[rbp]

; 62   : 	}

  003d6	48 8b f8	 mov	 rdi, rax
  003d9	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  003dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$rtcFrameData
  003e4	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  003e9	48 8b c7	 mov	 rax, rdi
  003ec	48 8b 8d f8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  003f3	48 33 cd	 xor	 rcx, rbp
  003f6	e8 00 00 00 00	 call	 __security_check_cookie
  003fb	48 8d a5 08 02
	00 00		 lea	 rsp, QWORD PTR [rbp+520]
  00402	5f		 pop	 rdi
  00403	5d		 pop	 rbp
  00404	c3		 ret	 0
??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z ENDP ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Pad$ = 40
_Ok$ = 72
$T4 = 308
$T5 = 340
$T6 = 372
$T7 = 404
$T8 = 440
$T9 = 472
tv296 = 484
tv291 = 484
tv137 = 484
tv297 = 488
tv294 = 488
tv292 = 488
tv135 = 488
tv298 = 496
tv295 = 496
tv293 = 496
__$ArrayPad$ = 504
_Ostr$ = 544
_Data$ = 552
_Size$ = 560
?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA PROC ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA ENDP ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::dtor$0
_State$ = 4
_Pad$ = 40
_Ok$ = 72
$T4 = 308
$T5 = 340
$T6 = 372
$T7 = 404
$T8 = 440
$T9 = 472
tv296 = 484
tv291 = 484
tv137 = 484
tv297 = 488
tv294 = 488
tv292 = 488
tv135 = 488
tv298 = 496
tv295 = 496
tv293 = 496
__$ArrayPad$ = 504
_Ostr$ = 544
_Data$ = 552
_Size$ = 560
?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA PROC ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::catch$1

; 57   : 		_CATCH_IO_(_Ostr)

  00024	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00029	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002e	55		 push	 rbp
  0002f	57		 push	 rdi
  00030	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00034	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$0:
  00038	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0003f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00042	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00046	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0004d	48 03 c8	 add	 rcx, rax
  00050	48 8b c1	 mov	 rax, rcx
  00053	41 b0 01	 mov	 r8b, 1
  00056	ba 04 00 00 00	 mov	 edx, 4
  0005b	48 8b c8	 mov	 rcx, rax
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00064	90		 npad	 1
  00065	48 8d 05 00 00
	00 00		 lea	 rax, $LN23@catch$1
  0006c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00070	5f		 pop	 rdi
  00071	5d		 pop	 rbp
  00072	c3		 ret	 0
  00073	cc		 int	 3
?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA ENDP ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Pad$ = 40
_Ok$ = 72
$T4 = 308
$T5 = 340
$T6 = 372
$T7 = 404
$T8 = 440
$T9 = 472
tv296 = 484
tv291 = 484
tv137 = 484
tv297 = 488
tv294 = 488
tv292 = 488
tv135 = 488
tv298 = 496
tv295 = 496
tv293 = 496
__$ArrayPad$ = 504
_Ostr$ = 544
_Data$ = 552
_Size$ = 560
?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA PROC ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA ENDP ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Pad$ = 40
_Ok$ = 72
$T4 = 308
$T5 = 340
$T6 = 372
$T7 = 404
$T8 = 440
$T9 = 472
tv296 = 484
tv291 = 484
tv137 = 484
tv297 = 488
tv294 = 488
tv292 = 488
tv135 = 488
tv298 = 496
tv295 = 496
tv293 = 496
__$ArrayPad$ = 504
_Ostr$ = 544
_Data$ = 552
_Size$ = 560
?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA PROC ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::catch$1

; 57   : 		_CATCH_IO_(_Ostr)

  00024	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00029	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002e	55		 push	 rbp
  0002f	57		 push	 rdi
  00030	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00034	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$0:
  00038	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0003f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00042	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00046	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0004d	48 03 c8	 add	 rcx, rax
  00050	48 8b c1	 mov	 rax, rcx
  00053	41 b0 01	 mov	 r8b, 1
  00056	ba 04 00 00 00	 mov	 edx, 4
  0005b	48 8b c8	 mov	 rcx, rax
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00064	90		 npad	 1
  00065	48 8d 05 00 00
	00 00		 lea	 rax, $LN23@catch$1
  0006c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00070	5f		 pop	 rdi
  00071	5d		 pop	 rbp
  00072	c3		 ret	 0
  00073	cc		 int	 3
?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA ENDP ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z
_TEXT	SEGMENT
this$ = 224
__formal$ = 232
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>, COMDAT

; 936  : 		{	// construct from a related allocator (do nothing)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 937  : 		}

  0002d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00034	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003b	5f		 pop	 rdi
  0003c	5d		 pop	 rbp
  0003d	c3		 ret	 0
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstddef
;	COMDAT ??$_Unfancy@$$CBD@std@@YAPEBDPEBD@Z
_TEXT	SEGMENT
_Ptr$ = 224
??$_Unfancy@$$CBD@std@@YAPEBDPEBD@Z PROC		; std::_Unfancy<char const >, COMDAT

; 264  : 	{	// do nothing for plain pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 265  : 	return (_Ptr);

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]

; 266  : 	}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??$_Unfancy@$$CBD@std@@YAPEBDPEBD@Z ENDP		; std::_Unfancy<char const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@$$QEAU31@@Z
_TEXT	SEGMENT
$T1 = 200
__formal$ = 256
_Ptr$ = 264
<_Args_0>$ = 272
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@$$QEAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT

; 854  : 		{	// construct _Objty(_Types...) at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 81 ec 00 01
	00 00		 sub	 rsp, 256		; 00000100H
  00019	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001e	48 8b fc	 mov	 rdi, rsp
  00021	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 855  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00035	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  0003c	b9 10 00 00 00	 mov	 ecx, 16
  00041	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  00046	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  0004d	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR <_Args_0>$[rbp]
  00054	e8 00 00 00 00	 call	 ??$forward@U_Container_proxy@std@@@std@@YA$$QEAU_Container_proxy@0@AEAU10@@Z ; std::forward<std::_Container_proxy>
  00059	48 8b bd c8 00
	00 00		 mov	 rdi, QWORD PTR $T1[rbp]
  00060	48 8b f0	 mov	 rsi, rax
  00063	b9 10 00 00 00	 mov	 ecx, 16
  00068	f3 a4		 rep movsb

; 856  : 			_Objty(_STD forward<_Types>(_Args)...);
; 857  : 		}

  0006a	48 8d a5 e0 00
	00 00		 lea	 rsp, QWORD PTR [rbp+224]
  00071	5f		 pop	 rdi
  00072	5e		 pop	 rsi
  00073	5d		 pop	 rbp
  00074	c3		 ret	 0
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@$$QEAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
_TEXT	SEGMENT
_Ptr$ = 224
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 264  : 	{	// do nothing for plain pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 265  : 	return (_Ptr);

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]

; 266  : 	}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 224
_Ptr$ = 232
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>, COMDAT

; 1220 : 	{	// deallocate a plain pointer using an allocator, non-fancy pointers special case

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 1221 : 	allocator_traits<_Alloc>::deallocate(_Al, _Ptr, 1);

  0002f	41 b8 01 00 00
	00		 mov	 r8d, 1
  00035	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  0003c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00043	e8 00 00 00 00	 call	 ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate

; 1222 : 	}

  00048	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@@Z
_TEXT	SEGMENT
__formal$ = 224
_Ptr$ = 232
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT

; 861  : 		{	// destroy object at _Ptr

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 862  : 		_Ptr->~_Uty();
; 863  : 		}

  0002d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00034	5f		 pop	 rdi
  00035	5d		 pop	 rbp
  00036	c3		 ret	 0
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
__formal$ = 224
_Ptr$ = 232
_Count$ = 240
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 847  : 		{	// deallocate _Count elements at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 848  : 		_Deallocate(_Ptr, _Count, sizeof(value_type));

  00034	41 b8 10 00 00
	00		 mov	 r8d, 16
  0003a	48 8b 95 f0 00
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  00041	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00048	e8 00 00 00 00	 call	 ?_Deallocate@std@@YAXPEAX_K1@Z ; std::_Deallocate

; 849  : 		}

  0004d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00054	5f		 pop	 rdi
  00055	5d		 pop	 rbp
  00056	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
this$ = 224
_Count$ = 232
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT

; 945  : 		{	// allocate array of _Count elements

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 946  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof(_Ty))));

  0002f	41 b0 01	 mov	 r8b, 1
  00032	ba 10 00 00 00	 mov	 edx, 16
  00037	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0003e	e8 00 00 00 00	 call	 ?_Allocate@std@@YAPEAX_K0_N@Z ; std::_Allocate

; 947  : 		}

  00043	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$construct@PEADAEBQEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEADAEBQEAD@Z
_TEXT	SEGMENT
$T1 = 200
__formal$ = 256
_Ptr$ = 264
<_Args_0>$ = 272
??$construct@PEADAEBQEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEADAEBQEAD@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::construct<char * __ptr64,char * __ptr64 const & __ptr64>, COMDAT

; 854  : 		{	// construct _Objty(_Types...) at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 855  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00034	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  0003b	b9 08 00 00 00	 mov	 ecx, 8
  00040	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  00045	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  0004c	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR <_Args_0>$[rbp]
  00053	e8 00 00 00 00	 call	 ??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z ; std::forward<char * __ptr64 const & __ptr64>
  00058	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR $T1[rbp]
  0005f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00062	48 89 01	 mov	 QWORD PTR [rcx], rax

; 856  : 			_Objty(_STD forward<_Types>(_Args)...);
; 857  : 		}

  00065	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006c	5f		 pop	 rdi
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
??$construct@PEADAEBQEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEADAEBQEAD@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::construct<char * __ptr64,char * __ptr64 const & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@Z
_TEXT	SEGMENT
_My_data$ = 8
_Old_size$ = 40
_New_size$ = 72
_Old_capacity$ = 104
_New_capacity$ = 136
_Al$ = 168
_New_ptr$ = 200
_Raw_new$ = 232
_Old_ptr$4 = 264
__$ArrayPad$ = 472
this$ = 512
_Size_increase$ = 520
_Fn$ = 528
<_Args_0>$ = 536
<_Args_1>$ = 544
??$_Reallocate_grow_by@V<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_65e615be2a453ca0576c979606f46740>,char const * __ptr64,unsigned __int64>, COMDAT

; 3641 : 		{	// reallocate to increase size by _Size_increase elements, new buffer prepared by

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 18 02
	00 00		 sub	 rsp, 536		; 00000218H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 86 00 00 00	 mov	 ecx, 134		; 00000086H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR [rsp+568]
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00040	48 33 c5	 xor	 rax, rbp
  00043	48 89 85 d8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 3642 : 			// _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 3643 : 		auto& _My_data = this->_Get_data();

  0004a	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00051	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00056	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 3644 : 		const size_type _Old_size = _My_data._Mysize;

  0005a	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0005e	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00062	48 89 45 28	 mov	 QWORD PTR _Old_size$[rbp], rax

; 3645 : 		if (max_size() - _Old_size < _Size_increase)

  00066	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006d	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00072	48 2b 45 28	 sub	 rax, QWORD PTR _Old_size$[rbp]
  00076	48 3b 85 08 02
	00 00		 cmp	 rax, QWORD PTR _Size_increase$[rbp]
  0007d	73 05		 jae	 SHORT $LN2@Reallocate

; 3646 : 			{
; 3647 : 			_Xlen();	// result too long

  0007f	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 3648 : 			}
; 3649 : 
; 3650 : 		const size_type _New_size = _Old_size + _Size_increase;

  00084	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR _Size_increase$[rbp]
  0008b	48 8b 4d 28	 mov	 rcx, QWORD PTR _Old_size$[rbp]
  0008f	48 03 c8	 add	 rcx, rax
  00092	48 8b c1	 mov	 rax, rcx
  00095	48 89 45 48	 mov	 QWORD PTR _New_size$[rbp], rax

; 3651 : 		const size_type _Old_capacity = _My_data._Myres;

  00099	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0009d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000a1	48 89 45 68	 mov	 QWORD PTR _Old_capacity$[rbp], rax

; 3652 : 		const size_type _New_capacity = _Calculate_growth(_New_size);

  000a5	48 8b 55 48	 mov	 rdx, QWORD PTR _New_size$[rbp]
  000a9	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b0	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  000b5	48 89 85 88 00
	00 00		 mov	 QWORD PTR _New_capacity$[rbp], rax

; 3653 : 		auto& _Al = this->_Getal();

  000bc	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c3	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  000c8	48 89 85 a8 00
	00 00		 mov	 QWORD PTR _Al$[rbp], rax

; 3654 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  000cf	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR _New_capacity$[rbp]
  000d6	48 83 c0 01	 add	 rax, 1
  000da	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  000e1	48 0f 42 c1	 cmovb	 rax, rcx
  000e5	48 8b d0	 mov	 rdx, rax
  000e8	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  000ef	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ; std::allocator<char>::allocate
  000f4	48 89 85 c8 00
	00 00		 mov	 QWORD PTR _New_ptr$[rbp], rax

; 3655 : 		_My_data._Orphan_all();

  000fb	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  000ff	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 3656 : 		_My_data._Mysize = _New_size;

  00104	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00108	48 8b 4d 48	 mov	 rcx, QWORD PTR _New_size$[rbp]
  0010c	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 3657 : 		_My_data._Myres = _New_capacity;

  00110	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00114	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _New_capacity$[rbp]
  0011b	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 3658 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  0011f	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00126	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  0012b	48 89 85 e8 00
	00 00		 mov	 QWORD PTR _Raw_new$[rbp], rax

; 3659 : 		if (this->_BUF_SIZE <= _Old_capacity)

  00132	48 83 7d 68 10	 cmp	 QWORD PTR _Old_capacity$[rbp], 16
  00137	72 7b		 jb	 SHORT $LN3@Reallocate

; 3660 : 			{
; 3661 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  00139	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0013d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00141	48 89 85 08 01
	00 00		 mov	 QWORD PTR _Old_ptr$4[rbp], rax

; 3662 : 			_Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

  00148	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Old_ptr$4[rbp]
  0014f	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00154	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR <_Args_1>$[rbp]
  0015b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00160	48 8b 8d 18 02
	00 00		 mov	 rcx, QWORD PTR <_Args_0>$[rbp]
  00167	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0016c	4c 8b 4d 28	 mov	 r9, QWORD PTR _Old_size$[rbp]
  00170	4c 8b c0	 mov	 r8, rax
  00173	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Raw_new$[rbp]
  0017a	48 8d 8d 10 02
	00 00		 lea	 rcx, QWORD PTR _Fn$[rbp]
  00181	e8 00 00 00 00	 call	 ??R<lambda_65e615be2a453ca0576c979606f46740>@@QEBA@QEADQEBD_K12@Z ; <lambda_65e615be2a453ca0576c979606f46740>::operator()

; 3663 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00186	48 8b 45 68	 mov	 rax, QWORD PTR _Old_capacity$[rbp]
  0018a	48 ff c0	 inc	 rax
  0018d	4c 8b c0	 mov	 r8, rax
  00190	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Old_ptr$4[rbp]
  00197	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  0019e	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate

; 3664 : 			_My_data._Bx._Ptr = _New_ptr;

  001a3	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  001a7	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  001ae	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 3665 : 			}
; 3666 : 		else

  001b2	eb 60		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 3667 : 			{
; 3668 : 			_Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

  001b4	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  001b8	48 83 c0 08	 add	 rax, 8
  001bc	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR <_Args_1>$[rbp]
  001c3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001c8	48 8b 8d 18 02
	00 00		 mov	 rcx, QWORD PTR <_Args_0>$[rbp]
  001cf	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  001d4	4c 8b 4d 28	 mov	 r9, QWORD PTR _Old_size$[rbp]
  001d8	4c 8b c0	 mov	 r8, rax
  001db	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Raw_new$[rbp]
  001e2	48 8d 8d 10 02
	00 00		 lea	 rcx, QWORD PTR _Fn$[rbp]
  001e9	e8 00 00 00 00	 call	 ??R<lambda_65e615be2a453ca0576c979606f46740>@@QEBA@QEADQEBD_K12@Z ; <lambda_65e615be2a453ca0576c979606f46740>::operator()

; 3669 : 			_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_ptr);

  001ee	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  001f2	48 83 c0 08	 add	 rax, 8
  001f6	48 8b c8	 mov	 rcx, rax
  001f9	e8 00 00 00 00	 call	 ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ; std::addressof<char * __ptr64>
  001fe	4c 8d 85 c8 00
	00 00		 lea	 r8, QWORD PTR _New_ptr$[rbp]
  00205	48 8b d0	 mov	 rdx, rax
  00208	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  0020f	e8 00 00 00 00	 call	 ??$construct@PEADAEBQEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEADAEBQEAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char * __ptr64,char * __ptr64 const & __ptr64>
$LN4@Reallocate:

; 3670 : 			}
; 3671 : 
; 3672 : 		return (*this);

  00214	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
$LN5@Reallocate:

; 3673 : 		}

  0021b	48 8b f8	 mov	 rdi, rax
  0021e	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00222	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Reallocate_grow_by@V<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@Z$rtcFrameData
  00229	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0022e	48 8b c7	 mov	 rax, rdi
  00231	48 8b 8d d8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00238	48 33 cd	 xor	 rcx, rbp
  0023b	e8 00 00 00 00	 call	 __security_check_cookie
  00240	48 8d a5 e8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+488]
  00247	5f		 pop	 rdi
  00248	5d		 pop	 rbp
  00249	c3		 ret	 0
??$_Reallocate_grow_by@V<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_65e615be2a453ca0576c979606f46740>,char const * __ptr64,unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??R<lambda_65e615be2a453ca0576c979606f46740>@@QEBA@QEADQEBD_K12@Z
_TEXT	SEGMENT
$T1 = 196
this$ = 256
_New_ptr$ = 264
_Old_ptr$ = 272
_Old_size$ = 280
_Ptr$ = 288
_Count$ = 296
??R<lambda_65e615be2a453ca0576c979606f46740>@@QEBA@QEADQEBD_K12@Z PROC ; <lambda_65e615be2a453ca0576c979606f46740>::operator(), COMDAT

; 2362 : 				const _Elem * const _Ptr, const size_type _Count) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 2363 : 			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);

  00039	4c 8b 85 18 01
	00 00		 mov	 r8, QWORD PTR _Old_size$[rbp]
  00040	48 8b 95 10 01
	00 00		 mov	 rdx, QWORD PTR _Old_ptr$[rbp]
  00047	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  0004e	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z ; std::char_traits<char>::copy

; 2364 : 			_Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);

  00053	48 8b 85 18 01
	00 00		 mov	 rax, QWORD PTR _Old_size$[rbp]
  0005a	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00061	48 03 c8	 add	 rcx, rax
  00064	48 8b c1	 mov	 rax, rcx
  00067	4c 8b 85 28 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  0006e	48 8b 95 20 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00075	48 8b c8	 mov	 rcx, rax
  00078	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z ; std::char_traits<char>::copy

; 2365 : 			_Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0007d	c6 85 c4 00 00
	00 00		 mov	 BYTE PTR $T1[rbp], 0
  00084	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  0008b	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR _Old_size$[rbp]
  00092	48 03 c8	 add	 rcx, rax
  00095	48 8b c1	 mov	 rax, rcx
  00098	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  0009f	48 03 c8	 add	 rcx, rax
  000a2	48 8b c1	 mov	 rax, rcx
  000a5	48 8d 95 c4 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  000ac	48 8b c8	 mov	 rcx, rax
  000af	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAEADAEBD@Z ; std::char_traits<char>::assign

; 2366 : 			}, _Ptr, _Count));

  000b4	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000bb	5f		 pop	 rdi
  000bc	5d		 pop	 rbp
  000bd	c3		 ret	 0
??R<lambda_65e615be2a453ca0576c979606f46740>@@QEBA@QEADQEBD_K12@Z ENDP ; <lambda_65e615be2a453ca0576c979606f46740>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@Z
_TEXT	SEGMENT
_My_data$ = 8
_Old_size$ = 40
_New_size$ = 72
_Old_capacity$ = 104
_New_capacity$ = 136
_Al$ = 168
_New_ptr$ = 200
_Raw_new$ = 232
_Old_ptr$4 = 264
__$ArrayPad$ = 472
this$ = 512
_Size_increase$ = 520
_Fn$ = 528
<_Args_0>$ = 536
<_Args_1>$ = 544
??$_Reallocate_grow_by@V<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_e1befb086ad3257e3f042a63030725f7>,unsigned __int64,char>, COMDAT

; 3641 : 		{	// reallocate to increase size by _Size_increase elements, new buffer prepared by

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 18 02
	00 00		 sub	 rsp, 536		; 00000218H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 86 00 00 00	 mov	 ecx, 134		; 00000086H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR [rsp+568]
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00040	48 33 c5	 xor	 rax, rbp
  00043	48 89 85 d8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 3642 : 			// _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 3643 : 		auto& _My_data = this->_Get_data();

  0004a	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00051	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00056	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 3644 : 		const size_type _Old_size = _My_data._Mysize;

  0005a	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0005e	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00062	48 89 45 28	 mov	 QWORD PTR _Old_size$[rbp], rax

; 3645 : 		if (max_size() - _Old_size < _Size_increase)

  00066	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006d	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00072	48 2b 45 28	 sub	 rax, QWORD PTR _Old_size$[rbp]
  00076	48 3b 85 08 02
	00 00		 cmp	 rax, QWORD PTR _Size_increase$[rbp]
  0007d	73 05		 jae	 SHORT $LN2@Reallocate

; 3646 : 			{
; 3647 : 			_Xlen();	// result too long

  0007f	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 3648 : 			}
; 3649 : 
; 3650 : 		const size_type _New_size = _Old_size + _Size_increase;

  00084	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR _Size_increase$[rbp]
  0008b	48 8b 4d 28	 mov	 rcx, QWORD PTR _Old_size$[rbp]
  0008f	48 03 c8	 add	 rcx, rax
  00092	48 8b c1	 mov	 rax, rcx
  00095	48 89 45 48	 mov	 QWORD PTR _New_size$[rbp], rax

; 3651 : 		const size_type _Old_capacity = _My_data._Myres;

  00099	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0009d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000a1	48 89 45 68	 mov	 QWORD PTR _Old_capacity$[rbp], rax

; 3652 : 		const size_type _New_capacity = _Calculate_growth(_New_size);

  000a5	48 8b 55 48	 mov	 rdx, QWORD PTR _New_size$[rbp]
  000a9	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b0	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  000b5	48 89 85 88 00
	00 00		 mov	 QWORD PTR _New_capacity$[rbp], rax

; 3653 : 		auto& _Al = this->_Getal();

  000bc	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c3	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  000c8	48 89 85 a8 00
	00 00		 mov	 QWORD PTR _Al$[rbp], rax

; 3654 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  000cf	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR _New_capacity$[rbp]
  000d6	48 83 c0 01	 add	 rax, 1
  000da	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  000e1	48 0f 42 c1	 cmovb	 rax, rcx
  000e5	48 8b d0	 mov	 rdx, rax
  000e8	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  000ef	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ; std::allocator<char>::allocate
  000f4	48 89 85 c8 00
	00 00		 mov	 QWORD PTR _New_ptr$[rbp], rax

; 3655 : 		_My_data._Orphan_all();

  000fb	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  000ff	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 3656 : 		_My_data._Mysize = _New_size;

  00104	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00108	48 8b 4d 48	 mov	 rcx, QWORD PTR _New_size$[rbp]
  0010c	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 3657 : 		_My_data._Myres = _New_capacity;

  00110	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00114	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _New_capacity$[rbp]
  0011b	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 3658 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  0011f	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00126	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  0012b	48 89 85 e8 00
	00 00		 mov	 QWORD PTR _Raw_new$[rbp], rax

; 3659 : 		if (this->_BUF_SIZE <= _Old_capacity)

  00132	48 83 7d 68 10	 cmp	 QWORD PTR _Old_capacity$[rbp], 16
  00137	72 7a		 jb	 SHORT $LN3@Reallocate

; 3660 : 			{
; 3661 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  00139	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0013d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00141	48 89 85 08 01
	00 00		 mov	 QWORD PTR _Old_ptr$4[rbp], rax

; 3662 : 			_Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

  00148	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Old_ptr$4[rbp]
  0014f	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00154	0f b6 8d 20 02
	00 00		 movzx	 ecx, BYTE PTR <_Args_1>$[rbp]
  0015b	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0015f	48 8b 8d 18 02
	00 00		 mov	 rcx, QWORD PTR <_Args_0>$[rbp]
  00166	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0016b	4c 8b 4d 28	 mov	 r9, QWORD PTR _Old_size$[rbp]
  0016f	4c 8b c0	 mov	 r8, rax
  00172	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Raw_new$[rbp]
  00179	48 8d 8d 10 02
	00 00		 lea	 rcx, QWORD PTR _Fn$[rbp]
  00180	e8 00 00 00 00	 call	 ??R<lambda_e1befb086ad3257e3f042a63030725f7>@@QEBA@QEADQEBD_K2D@Z ; <lambda_e1befb086ad3257e3f042a63030725f7>::operator()

; 3663 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00185	48 8b 45 68	 mov	 rax, QWORD PTR _Old_capacity$[rbp]
  00189	48 ff c0	 inc	 rax
  0018c	4c 8b c0	 mov	 r8, rax
  0018f	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Old_ptr$4[rbp]
  00196	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  0019d	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate

; 3664 : 			_My_data._Bx._Ptr = _New_ptr;

  001a2	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  001a6	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  001ad	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 3665 : 			}
; 3666 : 		else

  001b1	eb 5f		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 3667 : 			{
; 3668 : 			_Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

  001b3	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  001b7	48 83 c0 08	 add	 rax, 8
  001bb	0f b6 8d 20 02
	00 00		 movzx	 ecx, BYTE PTR <_Args_1>$[rbp]
  001c2	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  001c6	48 8b 8d 18 02
	00 00		 mov	 rcx, QWORD PTR <_Args_0>$[rbp]
  001cd	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  001d2	4c 8b 4d 28	 mov	 r9, QWORD PTR _Old_size$[rbp]
  001d6	4c 8b c0	 mov	 r8, rax
  001d9	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Raw_new$[rbp]
  001e0	48 8d 8d 10 02
	00 00		 lea	 rcx, QWORD PTR _Fn$[rbp]
  001e7	e8 00 00 00 00	 call	 ??R<lambda_e1befb086ad3257e3f042a63030725f7>@@QEBA@QEADQEBD_K2D@Z ; <lambda_e1befb086ad3257e3f042a63030725f7>::operator()

; 3669 : 			_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_ptr);

  001ec	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  001f0	48 83 c0 08	 add	 rax, 8
  001f4	48 8b c8	 mov	 rcx, rax
  001f7	e8 00 00 00 00	 call	 ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ; std::addressof<char * __ptr64>
  001fc	4c 8d 85 c8 00
	00 00		 lea	 r8, QWORD PTR _New_ptr$[rbp]
  00203	48 8b d0	 mov	 rdx, rax
  00206	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  0020d	e8 00 00 00 00	 call	 ??$construct@PEADAEBQEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEADAEBQEAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char * __ptr64,char * __ptr64 const & __ptr64>
$LN4@Reallocate:

; 3670 : 			}
; 3671 : 
; 3672 : 		return (*this);

  00212	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
$LN5@Reallocate:

; 3673 : 		}

  00219	48 8b f8	 mov	 rdi, rax
  0021c	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00220	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Reallocate_grow_by@V<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@Z$rtcFrameData
  00227	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0022c	48 8b c7	 mov	 rax, rdi
  0022f	48 8b 8d d8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00236	48 33 cd	 xor	 rcx, rbp
  00239	e8 00 00 00 00	 call	 __security_check_cookie
  0023e	48 8d a5 e8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+488]
  00245	5f		 pop	 rdi
  00246	5d		 pop	 rbp
  00247	c3		 ret	 0
??$_Reallocate_grow_by@V<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_e1befb086ad3257e3f042a63030725f7>,unsigned __int64,char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??R<lambda_e1befb086ad3257e3f042a63030725f7>@@QEBA@QEADQEBD_K2D@Z
_TEXT	SEGMENT
$T1 = 196
this$ = 256
_New_ptr$ = 264
_Old_ptr$ = 272
_Old_size$ = 280
_Count$ = 288
_Ch$ = 296
??R<lambda_e1befb086ad3257e3f042a63030725f7>@@QEBA@QEADQEBD_K2D@Z PROC ; <lambda_e1befb086ad3257e3f042a63030725f7>::operator(), COMDAT

; 2389 : 				const size_type _Count, const _Elem _Ch) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 2390 : 			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);

  00039	4c 8b 85 18 01
	00 00		 mov	 r8, QWORD PTR _Old_size$[rbp]
  00040	48 8b 95 10 01
	00 00		 mov	 rdx, QWORD PTR _Old_ptr$[rbp]
  00047	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  0004e	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z ; std::char_traits<char>::copy

; 2391 : 			_Traits::assign(_New_ptr + _Old_size, _Count, _Ch);

  00053	48 8b 85 18 01
	00 00		 mov	 rax, QWORD PTR _Old_size$[rbp]
  0005a	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00061	48 03 c8	 add	 rcx, rax
  00064	48 8b c1	 mov	 rax, rcx
  00067	44 0f b6 85 28
	01 00 00	 movzx	 r8d, BYTE PTR _Ch$[rbp]
  0006f	48 8b 95 20 01
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  00076	48 8b c8	 mov	 rcx, rax
  00079	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAPEADQEAD_KD@Z ; std::char_traits<char>::assign

; 2392 : 			_Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0007e	c6 85 c4 00 00
	00 00		 mov	 BYTE PTR $T1[rbp], 0
  00085	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  0008c	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR _Old_size$[rbp]
  00093	48 03 c8	 add	 rcx, rax
  00096	48 8b c1	 mov	 rax, rcx
  00099	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  000a0	48 03 c8	 add	 rcx, rax
  000a3	48 8b c1	 mov	 rax, rcx
  000a6	48 8d 95 c4 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  000ad	48 8b c8	 mov	 rcx, rax
  000b0	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAEADAEBD@Z ; std::char_traits<char>::assign

; 2393 : 			}, _Count, _Ch));

  000b5	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000bc	5f		 pop	 rdi
  000bd	5d		 pop	 rbp
  000be	c3		 ret	 0
??R<lambda_e1befb086ad3257e3f042a63030725f7>@@QEBA@QEADQEBD_K2D@Z ENDP ; <lambda_e1befb086ad3257e3f042a63030725f7>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z
_TEXT	SEGMENT
_My_data$ = 8
_Old_capacity$ = 40
_New_capacity$ = 72
_Al$ = 104
_New_ptr$ = 136
__$ArrayPad$ = 344
this$ = 384
_New_size$ = 392
_Fn$ = 400
<_Args_0>$ = 408
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const * __ptr64>, COMDAT

; 3609 : 		{	// reallocate to store exactly _New_size elements, new buffer prepared by

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00040	48 33 c5	 xor	 rax, rbp
  00043	48 89 85 58 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 3610 : 			// _Fn(_New_ptr, _New_size, _Args...)
; 3611 : 		if (_New_size > max_size())

  0004a	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00051	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00056	48 39 85 88 01
	00 00		 cmp	 QWORD PTR _New_size$[rbp], rax
  0005d	76 05		 jbe	 SHORT $LN2@Reallocate

; 3612 : 			{
; 3613 : 			_Xlen();	// result too long

  0005f	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 3614 : 			}
; 3615 : 
; 3616 : 		auto& _My_data = this->_Get_data();

  00064	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006b	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00070	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 3617 : 		const size_type _Old_capacity = _My_data._Myres;

  00074	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00078	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0007c	48 89 45 28	 mov	 QWORD PTR _Old_capacity$[rbp], rax

; 3618 : 		const size_type _New_capacity = _Calculate_growth(_New_size);

  00080	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR _New_size$[rbp]
  00087	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008e	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  00093	48 89 45 48	 mov	 QWORD PTR _New_capacity$[rbp], rax

; 3619 : 		auto& _Al = this->_Getal();

  00097	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009e	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  000a3	48 89 45 68	 mov	 QWORD PTR _Al$[rbp], rax

; 3620 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  000a7	48 8b 45 48	 mov	 rax, QWORD PTR _New_capacity$[rbp]
  000ab	48 83 c0 01	 add	 rax, 1
  000af	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  000b6	48 0f 42 c1	 cmovb	 rax, rcx
  000ba	48 8b d0	 mov	 rdx, rax
  000bd	48 8b 4d 68	 mov	 rcx, QWORD PTR _Al$[rbp]
  000c1	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ; std::allocator<char>::allocate
  000c6	48 89 85 88 00
	00 00		 mov	 QWORD PTR _New_ptr$[rbp], rax

; 3621 : 		_My_data._Orphan_all();

  000cd	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  000d1	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 3622 : 		_My_data._Mysize = _New_size;

  000d6	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000da	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR _New_size$[rbp]
  000e1	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 3623 : 		_My_data._Myres = _New_capacity;

  000e5	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000e9	48 8b 4d 48	 mov	 rcx, QWORD PTR _New_capacity$[rbp]
  000ed	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 3624 : 		_Fn(_Unfancy(_New_ptr), _New_size, _Args...);

  000f1	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  000f8	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  000fd	4c 8b 8d 98 01
	00 00		 mov	 r9, QWORD PTR <_Args_0>$[rbp]
  00104	4c 8b 85 88 01
	00 00		 mov	 r8, QWORD PTR _New_size$[rbp]
  0010b	48 8b d0	 mov	 rdx, rax
  0010e	48 8d 8d 90 01
	00 00		 lea	 rcx, QWORD PTR _Fn$[rbp]
  00115	e8 00 00 00 00	 call	 ??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z ; <lambda_66f57f934f28d61049862f64df852ff0>::operator()

; 3625 : 		if (this->_BUF_SIZE <= _Old_capacity)

  0011a	48 83 7d 28 10	 cmp	 QWORD PTR _Old_capacity$[rbp], 16
  0011f	72 2c		 jb	 SHORT $LN3@Reallocate

; 3626 : 			{
; 3627 : 			_Al.deallocate(_My_data._Bx._Ptr, _Old_capacity + 1);

  00121	48 8b 45 28	 mov	 rax, QWORD PTR _Old_capacity$[rbp]
  00125	48 ff c0	 inc	 rax
  00128	4c 8b c0	 mov	 r8, rax
  0012b	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0012f	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00133	48 8b 4d 68	 mov	 rcx, QWORD PTR _Al$[rbp]
  00137	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate

; 3628 : 			_My_data._Bx._Ptr = _New_ptr;

  0013c	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00140	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00147	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 3629 : 			}
; 3630 : 		else

  0014b	eb 23		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 3631 : 			{
; 3632 : 			_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_ptr);

  0014d	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00151	48 83 c0 08	 add	 rax, 8
  00155	48 8b c8	 mov	 rcx, rax
  00158	e8 00 00 00 00	 call	 ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ; std::addressof<char * __ptr64>
  0015d	4c 8d 85 88 00
	00 00		 lea	 r8, QWORD PTR _New_ptr$[rbp]
  00164	48 8b d0	 mov	 rdx, rax
  00167	48 8b 4d 68	 mov	 rcx, QWORD PTR _Al$[rbp]
  0016b	e8 00 00 00 00	 call	 ??$construct@PEADAEBQEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEADAEBQEAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char * __ptr64,char * __ptr64 const & __ptr64>
$LN4@Reallocate:

; 3633 : 			}
; 3634 : 
; 3635 : 		return (*this);

  00170	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
$LN5@Reallocate:

; 3636 : 		}

  00177	48 8b f8	 mov	 rdi, rax
  0017a	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0017e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcFrameData
  00185	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0018a	48 8b c7	 mov	 rax, rdi
  0018d	48 8b 8d 58 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00194	48 33 cd	 xor	 rcx, rbp
  00197	e8 00 00 00 00	 call	 __security_check_cookie
  0019c	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  001a3	5f		 pop	 rdi
  001a4	5d		 pop	 rbp
  001a5	c3		 ret	 0
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z
_TEXT	SEGMENT
$T1 = 196
this$ = 256
_New_ptr$ = 264
_Count$ = 272
_Ptr$ = 280
??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z PROC ; <lambda_66f57f934f28d61049862f64df852ff0>::operator(), COMDAT

; 2444 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 2445 : 			_Traits::copy(_New_ptr, _Ptr, _Count);

  00039	4c 8b 85 10 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00040	48 8b 95 18 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00047	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  0004e	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z ; std::char_traits<char>::copy

; 2446 : 			_Traits::assign(_New_ptr[_Count], _Elem());

  00053	c6 85 c4 00 00
	00 00		 mov	 BYTE PTR $T1[rbp], 0
  0005a	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00061	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00068	48 03 c8	 add	 rcx, rax
  0006b	48 8b c1	 mov	 rax, rcx
  0006e	48 8d 95 c4 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  00075	48 8b c8	 mov	 rcx, rax
  00078	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAEADAEBD@Z ; std::char_traits<char>::assign

; 2447 : 			}, _Ptr));

  0007d	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00084	5f		 pop	 rdi
  00085	5d		 pop	 rbp
  00086	c3		 ret	 0
??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z ENDP ; <lambda_66f57f934f28d61049862f64df852ff0>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z
_TEXT	SEGMENT
_My_data$ = 8
_Old_capacity$ = 40
_New_capacity$ = 72
_Al$ = 104
_New_ptr$ = 136
__$ArrayPad$ = 344
this$ = 384
_New_size$ = 392
_Fn$ = 400
<_Args_0>$ = 408
??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>,char>, COMDAT

; 3609 : 		{	// reallocate to store exactly _New_size elements, new buffer prepared by

  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00040	48 33 c5	 xor	 rax, rbp
  00043	48 89 85 58 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 3610 : 			// _Fn(_New_ptr, _New_size, _Args...)
; 3611 : 		if (_New_size > max_size())

  0004a	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00051	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00056	48 39 85 88 01
	00 00		 cmp	 QWORD PTR _New_size$[rbp], rax
  0005d	76 05		 jbe	 SHORT $LN2@Reallocate

; 3612 : 			{
; 3613 : 			_Xlen();	// result too long

  0005f	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 3614 : 			}
; 3615 : 
; 3616 : 		auto& _My_data = this->_Get_data();

  00064	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006b	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00070	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 3617 : 		const size_type _Old_capacity = _My_data._Myres;

  00074	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00078	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0007c	48 89 45 28	 mov	 QWORD PTR _Old_capacity$[rbp], rax

; 3618 : 		const size_type _New_capacity = _Calculate_growth(_New_size);

  00080	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR _New_size$[rbp]
  00087	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008e	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  00093	48 89 45 48	 mov	 QWORD PTR _New_capacity$[rbp], rax

; 3619 : 		auto& _Al = this->_Getal();

  00097	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009e	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  000a3	48 89 45 68	 mov	 QWORD PTR _Al$[rbp], rax

; 3620 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  000a7	48 8b 45 48	 mov	 rax, QWORD PTR _New_capacity$[rbp]
  000ab	48 83 c0 01	 add	 rax, 1
  000af	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  000b6	48 0f 42 c1	 cmovb	 rax, rcx
  000ba	48 8b d0	 mov	 rdx, rax
  000bd	48 8b 4d 68	 mov	 rcx, QWORD PTR _Al$[rbp]
  000c1	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ; std::allocator<char>::allocate
  000c6	48 89 85 88 00
	00 00		 mov	 QWORD PTR _New_ptr$[rbp], rax

; 3621 : 		_My_data._Orphan_all();

  000cd	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  000d1	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 3622 : 		_My_data._Mysize = _New_size;

  000d6	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000da	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR _New_size$[rbp]
  000e1	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 3623 : 		_My_data._Myres = _New_capacity;

  000e5	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000e9	48 8b 4d 48	 mov	 rcx, QWORD PTR _New_capacity$[rbp]
  000ed	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 3624 : 		_Fn(_Unfancy(_New_ptr), _New_size, _Args...);

  000f1	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  000f8	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  000fd	44 0f b6 8d 98
	01 00 00	 movzx	 r9d, BYTE PTR <_Args_0>$[rbp]
  00105	4c 8b 85 88 01
	00 00		 mov	 r8, QWORD PTR _New_size$[rbp]
  0010c	48 8b d0	 mov	 rdx, rax
  0010f	48 8d 8d 90 01
	00 00		 lea	 rcx, QWORD PTR _Fn$[rbp]
  00116	e8 00 00 00 00	 call	 ??R<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@QEBA@QEAD_KD@Z ; <lambda_138c3d7c38c85abb84c7fc7bfe5747b7>::operator()

; 3625 : 		if (this->_BUF_SIZE <= _Old_capacity)

  0011b	48 83 7d 28 10	 cmp	 QWORD PTR _Old_capacity$[rbp], 16
  00120	72 2c		 jb	 SHORT $LN3@Reallocate

; 3626 : 			{
; 3627 : 			_Al.deallocate(_My_data._Bx._Ptr, _Old_capacity + 1);

  00122	48 8b 45 28	 mov	 rax, QWORD PTR _Old_capacity$[rbp]
  00126	48 ff c0	 inc	 rax
  00129	4c 8b c0	 mov	 r8, rax
  0012c	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00130	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00134	48 8b 4d 68	 mov	 rcx, QWORD PTR _Al$[rbp]
  00138	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate

; 3628 : 			_My_data._Bx._Ptr = _New_ptr;

  0013d	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00141	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00148	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 3629 : 			}
; 3630 : 		else

  0014c	eb 23		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 3631 : 			{
; 3632 : 			_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_ptr);

  0014e	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00152	48 83 c0 08	 add	 rax, 8
  00156	48 8b c8	 mov	 rcx, rax
  00159	e8 00 00 00 00	 call	 ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ; std::addressof<char * __ptr64>
  0015e	4c 8d 85 88 00
	00 00		 lea	 r8, QWORD PTR _New_ptr$[rbp]
  00165	48 8b d0	 mov	 rdx, rax
  00168	48 8b 4d 68	 mov	 rcx, QWORD PTR _Al$[rbp]
  0016c	e8 00 00 00 00	 call	 ??$construct@PEADAEBQEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEADAEBQEAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char * __ptr64,char * __ptr64 const & __ptr64>
$LN4@Reallocate:

; 3633 : 			}
; 3634 : 
; 3635 : 		return (*this);

  00171	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
$LN5@Reallocate:

; 3636 : 		}

  00178	48 8b f8	 mov	 rdi, rax
  0017b	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0017f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z$rtcFrameData
  00186	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0018b	48 8b c7	 mov	 rax, rdi
  0018e	48 8b 8d 58 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00195	48 33 cd	 xor	 rcx, rbp
  00198	e8 00 00 00 00	 call	 __security_check_cookie
  0019d	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  001a4	5f		 pop	 rdi
  001a5	5d		 pop	 rbp
  001a6	c3		 ret	 0
??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>,char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??R<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@QEBA@QEAD_KD@Z
_TEXT	SEGMENT
$T1 = 196
this$ = 256
_New_ptr$ = 264
_Count$ = 272
_Ch$ = 280
??R<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@QEBA@QEAD_KD@Z PROC ; <lambda_138c3d7c38c85abb84c7fc7bfe5747b7>::operator(), COMDAT

; 2467 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem _Ch) {

  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 2468 : 			_Traits::assign(_New_ptr, _Count, _Ch);

  00039	44 0f b6 85 18
	01 00 00	 movzx	 r8d, BYTE PTR _Ch$[rbp]
  00041	48 8b 95 10 01
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  00048	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  0004f	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAPEADQEAD_KD@Z ; std::char_traits<char>::assign

; 2469 : 			_Traits::assign(_New_ptr[_Count], _Elem());

  00054	c6 85 c4 00 00
	00 00		 mov	 BYTE PTR $T1[rbp], 0
  0005b	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00062	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00069	48 03 c8	 add	 rcx, rax
  0006c	48 8b c1	 mov	 rax, rcx
  0006f	48 8d 95 c4 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  00076	48 8b c8	 mov	 rcx, rax
  00079	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAEADAEBD@Z ; std::char_traits<char>::assign

; 2470 : 			}, _Ch));

  0007e	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00085	5f		 pop	 rdi
  00086	5d		 pop	 rbp
  00087	c3		 ret	 0
??R<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@QEBA@QEAD_KD@Z ENDP ; <lambda_138c3d7c38c85abb84c7fc7bfe5747b7>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$_Refancy@PEAD$0A@@std@@YAPEADPEAD@Z
_TEXT	SEGMENT
_Ptr$ = 224
??$_Refancy@PEAD$0A@@std@@YAPEADPEAD@Z PROC		; std::_Refancy<char * __ptr64,0>, COMDAT

; 343  : 	{	// do nothing for plain pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 344  : 	return (_Ptr);

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]

; 345  : 	}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??$_Refancy@PEAD$0A@@std@@YAPEADPEAD@Z ENDP		; std::_Refancy<char * __ptr64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstddef
;	COMDAT ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Val$ = 224
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<char> > >, COMDAT

; 248  : 	{	// return address of _Val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 249  : 	return (__builtin_addressof(_Val));

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]

; 250  : 	}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z
_TEXT	SEGMENT
_My_data$ = 8
_Old_size$ = 40
_New_size$ = 72
_Old_capacity$ = 104
_New_capacity$ = 136
_Al$ = 168
_New_ptr$ = 200
_Raw_new$ = 232
_Old_ptr$4 = 264
__$ArrayPad$ = 472
this$ = 512
_Size_increase$ = 520
_Fn$ = 528
<_Args_0>$ = 536
??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_319d5e083f45f90dcdce5dce53cbb275>,char>, COMDAT

; 3641 : 		{	// reallocate to increase size by _Size_increase elements, new buffer prepared by

  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 18 02
	00 00		 sub	 rsp, 536		; 00000218H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 86 00 00 00	 mov	 ecx, 134		; 00000086H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR [rsp+568]
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00040	48 33 c5	 xor	 rax, rbp
  00043	48 89 85 d8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 3642 : 			// _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 3643 : 		auto& _My_data = this->_Get_data();

  0004a	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00051	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00056	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 3644 : 		const size_type _Old_size = _My_data._Mysize;

  0005a	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0005e	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00062	48 89 45 28	 mov	 QWORD PTR _Old_size$[rbp], rax

; 3645 : 		if (max_size() - _Old_size < _Size_increase)

  00066	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006d	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00072	48 2b 45 28	 sub	 rax, QWORD PTR _Old_size$[rbp]
  00076	48 3b 85 08 02
	00 00		 cmp	 rax, QWORD PTR _Size_increase$[rbp]
  0007d	73 05		 jae	 SHORT $LN2@Reallocate

; 3646 : 			{
; 3647 : 			_Xlen();	// result too long

  0007f	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 3648 : 			}
; 3649 : 
; 3650 : 		const size_type _New_size = _Old_size + _Size_increase;

  00084	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR _Size_increase$[rbp]
  0008b	48 8b 4d 28	 mov	 rcx, QWORD PTR _Old_size$[rbp]
  0008f	48 03 c8	 add	 rcx, rax
  00092	48 8b c1	 mov	 rax, rcx
  00095	48 89 45 48	 mov	 QWORD PTR _New_size$[rbp], rax

; 3651 : 		const size_type _Old_capacity = _My_data._Myres;

  00099	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0009d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000a1	48 89 45 68	 mov	 QWORD PTR _Old_capacity$[rbp], rax

; 3652 : 		const size_type _New_capacity = _Calculate_growth(_New_size);

  000a5	48 8b 55 48	 mov	 rdx, QWORD PTR _New_size$[rbp]
  000a9	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b0	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  000b5	48 89 85 88 00
	00 00		 mov	 QWORD PTR _New_capacity$[rbp], rax

; 3653 : 		auto& _Al = this->_Getal();

  000bc	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c3	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  000c8	48 89 85 a8 00
	00 00		 mov	 QWORD PTR _Al$[rbp], rax

; 3654 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  000cf	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR _New_capacity$[rbp]
  000d6	48 83 c0 01	 add	 rax, 1
  000da	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  000e1	48 0f 42 c1	 cmovb	 rax, rcx
  000e5	48 8b d0	 mov	 rdx, rax
  000e8	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  000ef	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ; std::allocator<char>::allocate
  000f4	48 89 85 c8 00
	00 00		 mov	 QWORD PTR _New_ptr$[rbp], rax

; 3655 : 		_My_data._Orphan_all();

  000fb	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  000ff	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 3656 : 		_My_data._Mysize = _New_size;

  00104	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00108	48 8b 4d 48	 mov	 rcx, QWORD PTR _New_size$[rbp]
  0010c	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 3657 : 		_My_data._Myres = _New_capacity;

  00110	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00114	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _New_capacity$[rbp]
  0011b	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 3658 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  0011f	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00126	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  0012b	48 89 85 e8 00
	00 00		 mov	 QWORD PTR _Raw_new$[rbp], rax

; 3659 : 		if (this->_BUF_SIZE <= _Old_capacity)

  00132	48 83 7d 68 10	 cmp	 QWORD PTR _Old_capacity$[rbp], 16
  00137	72 6e		 jb	 SHORT $LN3@Reallocate

; 3660 : 			{
; 3661 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  00139	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0013d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00141	48 89 85 08 01
	00 00		 mov	 QWORD PTR _Old_ptr$4[rbp], rax

; 3662 : 			_Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

  00148	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Old_ptr$4[rbp]
  0014f	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00154	0f b6 8d 18 02
	00 00		 movzx	 ecx, BYTE PTR <_Args_0>$[rbp]
  0015b	88 4c 24 20	 mov	 BYTE PTR [rsp+32], cl
  0015f	4c 8b 4d 28	 mov	 r9, QWORD PTR _Old_size$[rbp]
  00163	4c 8b c0	 mov	 r8, rax
  00166	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Raw_new$[rbp]
  0016d	48 8d 8d 10 02
	00 00		 lea	 rcx, QWORD PTR _Fn$[rbp]
  00174	e8 00 00 00 00	 call	 ??R<lambda_319d5e083f45f90dcdce5dce53cbb275>@@QEBA@QEADQEBD_KD@Z ; <lambda_319d5e083f45f90dcdce5dce53cbb275>::operator()

; 3663 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00179	48 8b 45 68	 mov	 rax, QWORD PTR _Old_capacity$[rbp]
  0017d	48 ff c0	 inc	 rax
  00180	4c 8b c0	 mov	 r8, rax
  00183	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Old_ptr$4[rbp]
  0018a	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00191	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate

; 3664 : 			_My_data._Bx._Ptr = _New_ptr;

  00196	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0019a	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  001a1	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 3665 : 			}
; 3666 : 		else

  001a5	eb 53		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 3667 : 			{
; 3668 : 			_Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

  001a7	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  001ab	48 83 c0 08	 add	 rax, 8
  001af	0f b6 8d 18 02
	00 00		 movzx	 ecx, BYTE PTR <_Args_0>$[rbp]
  001b6	88 4c 24 20	 mov	 BYTE PTR [rsp+32], cl
  001ba	4c 8b 4d 28	 mov	 r9, QWORD PTR _Old_size$[rbp]
  001be	4c 8b c0	 mov	 r8, rax
  001c1	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Raw_new$[rbp]
  001c8	48 8d 8d 10 02
	00 00		 lea	 rcx, QWORD PTR _Fn$[rbp]
  001cf	e8 00 00 00 00	 call	 ??R<lambda_319d5e083f45f90dcdce5dce53cbb275>@@QEBA@QEADQEBD_KD@Z ; <lambda_319d5e083f45f90dcdce5dce53cbb275>::operator()

; 3669 : 			_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_ptr);

  001d4	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  001d8	48 83 c0 08	 add	 rax, 8
  001dc	48 8b c8	 mov	 rcx, rax
  001df	e8 00 00 00 00	 call	 ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ; std::addressof<char * __ptr64>
  001e4	4c 8d 85 c8 00
	00 00		 lea	 r8, QWORD PTR _New_ptr$[rbp]
  001eb	48 8b d0	 mov	 rdx, rax
  001ee	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  001f5	e8 00 00 00 00	 call	 ??$construct@PEADAEBQEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEADAEBQEAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char * __ptr64,char * __ptr64 const & __ptr64>
$LN4@Reallocate:

; 3670 : 			}
; 3671 : 
; 3672 : 		return (*this);

  001fa	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
$LN5@Reallocate:

; 3673 : 		}

  00201	48 8b f8	 mov	 rdi, rax
  00204	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00208	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z$rtcFrameData
  0020f	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00214	48 8b c7	 mov	 rax, rdi
  00217	48 8b 8d d8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0021e	48 33 cd	 xor	 rcx, rbp
  00221	e8 00 00 00 00	 call	 __security_check_cookie
  00226	48 8d a5 e8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+488]
  0022d	5f		 pop	 rdi
  0022e	5d		 pop	 rbp
  0022f	c3		 ret	 0
??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_319d5e083f45f90dcdce5dce53cbb275>,char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??R<lambda_319d5e083f45f90dcdce5dce53cbb275>@@QEBA@QEADQEBD_KD@Z
_TEXT	SEGMENT
$T1 = 196
this$ = 256
_New_ptr$ = 264
_Old_ptr$ = 272
_Old_size$ = 280
_Ch$ = 288
??R<lambda_319d5e083f45f90dcdce5dce53cbb275>@@QEBA@QEADQEBD_KD@Z PROC ; <lambda_319d5e083f45f90dcdce5dce53cbb275>::operator(), COMDAT

; 3003 : 				const _Elem _Ch) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 3004 : 			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);

  00039	4c 8b 85 18 01
	00 00		 mov	 r8, QWORD PTR _Old_size$[rbp]
  00040	48 8b 95 10 01
	00 00		 mov	 rdx, QWORD PTR _Old_ptr$[rbp]
  00047	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  0004e	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z ; std::char_traits<char>::copy

; 3005 : 			_Traits::assign(_New_ptr[_Old_size], _Ch);

  00053	48 8b 85 18 01
	00 00		 mov	 rax, QWORD PTR _Old_size$[rbp]
  0005a	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00061	48 03 c8	 add	 rcx, rax
  00064	48 8b c1	 mov	 rax, rcx
  00067	48 8d 95 20 01
	00 00		 lea	 rdx, QWORD PTR _Ch$[rbp]
  0006e	48 8b c8	 mov	 rcx, rax
  00071	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAEADAEBD@Z ; std::char_traits<char>::assign

; 3006 : 			_Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  00076	c6 85 c4 00 00
	00 00		 mov	 BYTE PTR $T1[rbp], 0
  0007d	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _New_ptr$[rbp]
  00084	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR _Old_size$[rbp]
  0008b	48 8d 44 08 01	 lea	 rax, QWORD PTR [rax+rcx+1]
  00090	48 8d 95 c4 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  00097	48 8b c8	 mov	 rcx, rax
  0009a	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAEADAEBD@Z ; std::char_traits<char>::assign

; 3007 : 			}, _Ch);

  0009f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000a6	5f		 pop	 rdi
  000a7	5d		 pop	 rbp
  000a8	c3		 ret	 0
??R<lambda_319d5e083f45f90dcdce5dce53cbb275>@@QEBA@QEADQEBD_KD@Z ENDP ; <lambda_319d5e083f45f90dcdce5dce53cbb275>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\utility
;	COMDAT ??$_Max_value@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 200
tv65 = 216
_Left$ = 256
_Right$ = 264
??$_Max_value@_K@std@@YAAEB_KAEB_K0@Z PROC		; std::_Max_value<unsigned __int64>, COMDAT

; 31   : 	{	// return larger of _Left and _Right

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 32   : 	return (_Left < _Right ? _Right : _Left);

  0002d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  00034	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  0003b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0003e	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00041	73 10		 jae	 SHORT $LN3@Max_value
  00043	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  0004a	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
  00051	eb 0e		 jmp	 SHORT $LN4@Max_value
$LN3@Max_value:
  00053	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  0005a	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
$LN4@Max_value:
  00061	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv65[rbp]
  00068	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  0006f	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]

; 33   : 	}

  00076	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007d	5f		 pop	 rdi
  0007e	5d		 pop	 rbp
  0007f	c3		 ret	 0
??$_Max_value@_K@std@@YAAEB_KAEB_K0@Z ENDP		; std::_Max_value<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$destroy@PEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEAD@Z
_TEXT	SEGMENT
__formal$ = 224
_Ptr$ = 232
??$destroy@PEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEAD@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char * __ptr64>, COMDAT

; 861  : 		{	// destroy object at _Ptr

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 862  : 		_Ptr->~_Uty();
; 863  : 		}

  0002d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00034	5f		 pop	 rdi
  00035	5d		 pop	 rbp
  00036	c3		 ret	 0
??$destroy@PEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEAD@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstddef
;	COMDAT ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z
_TEXT	SEGMENT
_Val$ = 224
??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z PROC		; std::addressof<char * __ptr64>, COMDAT

; 248  : 	{	// return address of _Val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 249  : 	return (__builtin_addressof(_Val));

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]

; 250  : 	}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ENDP		; std::addressof<char * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 224
__formal$ = 232
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT

; 303  : 		{	// construct from forwarded values

$LN4:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 302  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QEAA@XZ ; std::allocator<char>::allocator<char>
  0003a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00041	48 8b c8	 mov	 rcx, rax
  00044	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 304  : 		}

  00049	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00050	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00057	5f		 pop	 rdi
  00058	5d		 pop	 rbp
  00059	c3		 ret	 0
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$_Pocca@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@AEBV10@@Z
_TEXT	SEGMENT
_Tag$ = 4
_Left$ = 256
_Right$ = 264
??$_Pocca@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@AEBV10@@Z PROC ; std::_Pocca<std::allocator<char> >, COMDAT

; 1033 : 	{	// (maybe) propagate on container copy assignment

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 1034 : 	typename allocator_traits<_Alloc>::propagate_on_container_copy_assignment _Tag;
; 1035 : 	_Pocca(_Left, _Right, _Tag);

  0002f	44 0f b6 45 04	 movzx	 r8d, BYTE PTR _Tag$[rbp]
  00034	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Right$[rbp]
  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Left$[rbp]
  00042	e8 00 00 00 00	 call	 ??$_Pocca@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@AEBV10@U?$integral_constant@_N$0A@@0@@Z ; std::_Pocca<std::allocator<char> >

; 1036 : 	}

  00047	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0004b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Pocca@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@AEBV10@@Z$rtcFrameData
  00052	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00057	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005e	5f		 pop	 rdi
  0005f	5d		 pop	 rbp
  00060	c3		 ret	 0
??$_Pocca@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@AEBV10@@Z ENDP ; std::_Pocca<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0@Z
_TEXT	SEGMENT
_Tag$ = 4
_Left$ = 256
_Right$ = 264
??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0@Z PROC ; std::_Pocma<std::allocator<char> >, COMDAT

; 1052 : 	{	// (maybe) propagate on container move assignment

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 1053 : 	typename allocator_traits<_Alloc>::propagate_on_container_move_assignment _Tag;
; 1054 : 	_Pocma(_Left, _Right, _Tag);

  0002f	44 0f b6 45 04	 movzx	 r8d, BYTE PTR _Tag$[rbp]
  00034	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Right$[rbp]
  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Left$[rbp]
  00042	e8 00 00 00 00	 call	 ??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0U?$integral_constant@_N$00@0@@Z ; std::_Pocma<std::allocator<char> >

; 1055 : 	}

  00047	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0004b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0@Z$rtcFrameData
  00052	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00057	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005e	5f		 pop	 rdi
  0005f	5d		 pop	 rbp
  00060	c3		 ret	 0
??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0@Z ENDP ; std::_Pocma<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPEADAEAD@Z
_TEXT	SEGMENT
_Val$ = 224
??$addressof@D@std@@YAPEADAEAD@Z PROC			; std::addressof<char>, COMDAT

; 248  : 	{	// return address of _Val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 249  : 	return (__builtin_addressof(_Val));

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]

; 250  : 	}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??$addressof@D@std@@YAPEADAEAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT

; 140  : 			{	// test if stream state okay

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 141  : 			return (_Ok);

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]

; 142  : 			}

  00033	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003a	5f		 pop	 rdi
  0003b	5d		 pop	 rbp
  0003c	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT

; 129  : 			{	// destroy the object

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2

; 130  :  #if _HAS_EXCEPTIONS
; 131  : 			if (!_STD uncaught_exception())

  00035	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  0003a	90		 npad	 1
  0003b	0f b6 c0	 movzx	 eax, al
  0003e	85 c0		 test	 eax, eax
  00040	75 11		 jne	 SHORT $LN2@sentry

; 132  : 				this->_Myostr._Osfx();

  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0004c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  00052	90		 npad	 1
$LN2@sentry:

; 133  : 
; 134  :  #else /* _HAS_EXCEPTIONS */
; 135  : 			this->_Myostr._Osfx();
; 136  :  #endif /* _HAS_EXCEPTIONS */
; 137  : 			}

  00053	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005a	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  0005f	90		 npad	 1
  00060	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00067	5f		 pop	 rdi
  00068	5d		 pop	 rbp
  00069	c3		 ret	 0
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
_Ostr$ = 264
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT

; 122  : 			{	// construct locking and testing stream

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2

; 121  : 			: _Sentry_base(_Ostr)

  0003a	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  00041	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00048	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  0004d	90		 npad	 1

; 123  : 			if (_Ostr.good() && _Ostr.tie() != 0 && _Ostr.tie() != &_Ostr)

  0004e	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00055	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00058	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0005c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00063	48 03 c8	 add	 rcx, rax
  00066	48 8b c1	 mov	 rax, rcx
  00069	48 8b c8	 mov	 rcx, rax
  0006c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?good@ios_base@std@@QEBA_NXZ
  00072	0f b6 c0	 movzx	 eax, al
  00075	85 c0		 test	 eax, eax
  00077	0f 84 83 00 00
	00		 je	 $LN2@sentry
  0007d	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00084	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00087	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0008b	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00092	48 03 c8	 add	 rcx, rax
  00095	48 8b c1	 mov	 rax, rcx
  00098	48 8b c8	 mov	 rcx, rax
  0009b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000a1	48 85 c0	 test	 rax, rax
  000a4	74 5a		 je	 SHORT $LN2@sentry
  000a6	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000ad	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000b0	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000b4	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000bb	48 03 c8	 add	 rcx, rax
  000be	48 8b c1	 mov	 rax, rcx
  000c1	48 8b c8	 mov	 rcx, rax
  000c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000ca	48 3b 85 08 01
	00 00		 cmp	 rax, QWORD PTR _Ostr$[rbp]
  000d1	74 2d		 je	 SHORT $LN2@sentry

; 124  : 				_Ostr.tie()->flush();

  000d3	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000da	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000dd	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000e1	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000e8	48 03 c8	 add	 rcx, rax
  000eb	48 8b c1	 mov	 rax, rcx
  000ee	48 8b c8	 mov	 rcx, rax
  000f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000f7	48 8b c8	 mov	 rcx, rax
  000fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ
$LN2@sentry:

; 125  : 			_Ok = _Ostr.good();	// store test only after flushing tie

  00100	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00107	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0010a	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0010e	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00115	48 03 c8	 add	 rcx, rax
  00118	48 8b c1	 mov	 rax, rcx
  0011b	48 8b c8	 mov	 rcx, rax
  0011e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?good@ios_base@std@@QEBA_NXZ
  00124	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0012b	88 41 08	 mov	 BYTE PTR [rcx+8], al

; 126  : 			}

  0012e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00135	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0013c	5f		 pop	 rdi
  0013d	5d		 pop	 rbp
  0013e	c3		 ret	 0
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
_Ostr$ = 264
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
_Ostr$ = 264
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
tv87 = 216
tv72 = 216
tv94 = 224
this$ = 272
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT

; 105  : 			{	// destroy after unlocking

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR [rsp+312]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2

; 106  : 			if (_Myostr.rdbuf() != 0)

  00035	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003f	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv72[rbp], rax
  00046	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv72[rbp]
  0004d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00050	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00054	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv72[rbp]
  0005b	48 03 c8	 add	 rcx, rax
  0005e	48 8b c1	 mov	 rax, rcx
  00061	48 8b c8	 mov	 rcx, rax
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0006a	90		 npad	 1
  0006b	48 85 c0	 test	 rax, rax
  0006e	74 52		 je	 SHORT $LN2@Sentry_bas

; 107  : 				_Myostr.rdbuf()->_Unlock();

  00070	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00077	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007a	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv87[rbp], rax
  00081	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv87[rbp]
  00088	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0008b	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0008f	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv87[rbp]
  00096	48 03 c8	 add	 rcx, rax
  00099	48 8b c1	 mov	 rax, rcx
  0009c	48 8b c8	 mov	 rcx, rax
  0009f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  000a5	90		 npad	 1
  000a6	48 89 85 e0 00
	00 00		 mov	 QWORD PTR tv94[rbp], rax
  000ad	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR tv94[rbp]
  000b4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000b7	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR tv94[rbp]
  000be	ff 50 10	 call	 QWORD PTR [rax+16]
  000c1	90		 npad	 1
$LN2@Sentry_bas:

; 108  : 			}

  000c2	48 8d a5 f8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+248]
  000c9	5f		 pop	 rdi
  000ca	5d		 pop	 rbp
  000cb	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
tv88 = 192
tv73 = 192
tv95 = 200
this$ = 240
_Ostr$ = 248
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT

; 99   : 			{	// lock the stream buffer, if there

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 98   : 			: _Myostr(_Ostr)

  0002f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0003d	48 89 08	 mov	 QWORD PTR [rax], rcx

; 100  : 			if (_Myostr.rdbuf() != 0)

  00040	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00047	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004a	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv73[rbp], rax
  00051	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv73[rbp]
  00058	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0005b	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0005f	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv73[rbp]
  00066	48 03 c8	 add	 rcx, rax
  00069	48 8b c1	 mov	 rax, rcx
  0006c	48 8b c8	 mov	 rcx, rax
  0006f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00075	48 85 c0	 test	 rax, rax
  00078	74 50		 je	 SHORT $LN2@Sentry_bas

; 101  : 				_Myostr.rdbuf()->_Lock();

  0007a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00081	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00084	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv88[rbp], rax
  0008b	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv88[rbp]
  00092	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00095	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00099	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv88[rbp]
  000a0	48 03 c8	 add	 rcx, rax
  000a3	48 8b c1	 mov	 rax, rcx
  000a6	48 8b c8	 mov	 rcx, rax
  000a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  000af	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv95[rbp], rax
  000b6	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR tv95[rbp]
  000bd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c0	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR tv95[rbp]
  000c7	ff 50 08	 call	 QWORD PTR [rax+8]
$LN2@Sentry_bas:

; 102  : 			}

  000ca	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000d1	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  000d8	5f		 pop	 rdi
  000d9	5d		 pop	 rbp
  000da	c3		 ret	 0
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z
_TEXT	SEGMENT
_Val$ = 224
?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z PROC ; std::pointer_traits<char * __ptr64>::pointer_to, COMDAT

; 322  : 		{	// convert raw reference to pointer

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 323  : 		return (_STD addressof(_Val));

  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Val$[rbp]
  00031	e8 00 00 00 00	 call	 ??$addressof@D@std@@YAPEADAEAD@Z ; std::addressof<char>

; 324  : 		}

  00036	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003d	5f		 pop	 rdi
  0003e	5d		 pop	 rbp
  0003f	c3		 ret	 0
?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z ENDP ; std::pointer_traits<char * __ptr64>::pointer_to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::~_String_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	e8 00 00 00 00	 call	 ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  00036	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003d	5f		 pop	 rdi
  0003e	5d		 pop	 rbp
  0003f	c3		 ret	 0
??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::~_String_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ
_TEXT	SEGMENT
this$ = 224
??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*, COMDAT

; 1432 : 		{	// return designated object

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 1433 : 		return ((reference)**(_Mybase *)this);

  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	e8 00 00 00 00	 call	 ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEBDXZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*

; 1434 : 		}

  00036	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003d	5f		 pop	 rdi
  0003e	5d		 pop	 rbp
  0003f	c3		 ret	 0
??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEADPEBU_Container_base12@1@@Z
_TEXT	SEGMENT
this$ = 224
_Parg$ = 232
_Pstring$ = 240
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEADPEBU_Container_base12@1@@Z PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT

; 1426 : 		{	// construct with pointer _Parg

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 1425 : 		: _Mybase(_Parg, _Pstring)

  00034	4c 8b 85 f0 00
	00 00		 mov	 r8, QWORD PTR _Pstring$[rbp]
  0003b	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Parg$[rbp]
  00042	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEBDPEBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >

; 1427 : 		}

  0004e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00055	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005c	5f		 pop	 rdi
  0005d	5d		 pop	 rbp
  0005e	c3		 ret	 0
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEADPEBU_Container_base12@1@@Z ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xlocale
;	COMDAT ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z
_TEXT	SEGMENT
_Lock$5 = 4
_Psave$6 = 40
_Id$7 = 72
_Pf$8 = 104
_Pfmod$9 = 136
$T10 = 360
$T11 = 408
$T12 = 440
__$ArrayPad$ = 456
_Loc$ = 496
??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z PROC ; std::use_facet<std::codecvt<char,char,_Mbstatet> >, COMDAT

; 505  : 	{	// get facet reference from locale

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 01
	00 00		 sub	 rsp, 504		; 000001f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 7e 00 00 00	 mov	 ecx, 126		; 0000007eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR [rsp+536]
  0002a	48 c7 85 b8 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T12[rbp], -2
  00035	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003c	48 33 c5	 xor	 rax, rbp
  0003f	48 89 85 c8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 506  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00046	33 d2		 xor	 edx, edx
  00048	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$5[rbp]
  0004c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
  00052	90		 npad	 1

; 507  : 		const locale::facet *_Psave =
; 508  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  00053	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PEBVfacet@locale@2@EB ; std::_Facetptr<std::codecvt<char,char,_Mbstatet> >::_Psave
  0005a	48 89 45 28	 mov	 QWORD PTR _Psave$6[rbp], rax

; 509  : 
; 510  : 		size_t _Id = _Facet::id;

  0005e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A
  00065	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??Bid@locale@std@@QEAA_KXZ
  0006b	48 89 45 48	 mov	 QWORD PTR _Id$7[rbp], rax

; 511  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  0006f	48 8b 55 48	 mov	 rdx, QWORD PTR _Id$7[rbp]
  00073	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR _Loc$[rbp]
  0007a	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z ; std::locale::_Getfacet
  0007f	48 89 45 68	 mov	 QWORD PTR _Pf$8[rbp], rax

; 512  : 
; 513  : 		if (_Pf != 0)

  00083	48 83 7d 68 00	 cmp	 QWORD PTR _Pf$8[rbp], 0
  00088	74 05		 je	 SHORT $LN2@use_facet
  0008a	e9 88 00 00 00	 jmp	 $LN3@use_facet
$LN2@use_facet:

; 514  : 			;	// got facet from locale
; 515  : 		else if (_Psave != 0)

  0008f	48 83 7d 28 00	 cmp	 QWORD PTR _Psave$6[rbp], 0
  00094	74 0a		 je	 SHORT $LN4@use_facet

; 516  : 			_Pf = _Psave;	// lazy facet already allocated

  00096	48 8b 45 28	 mov	 rax, QWORD PTR _Psave$6[rbp]
  0009a	48 89 45 68	 mov	 QWORD PTR _Pf$8[rbp], rax
  0009e	eb 77		 jmp	 SHORT $LN3@use_facet
$LN4@use_facet:

; 517  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000a0	48 8b 95 f0 01
	00 00		 mov	 rdx, QWORD PTR _Loc$[rbp]
  000a7	48 8d 4d 28	 lea	 rcx, QWORD PTR _Psave$6[rbp]
  000ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
  000b1	48 83 f8 ff	 cmp	 rax, -1
  000b5	75 22		 jne	 SHORT $LN6@use_facet

; 518  : 
; 519  :  #if _HAS_EXCEPTIONS
; 520  : 
; 521  : 			_THROW(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000b7	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  000be	e8 00 00 00 00	 call	 ??0bad_cast@std@@QEAA@XZ ; std::bad_cast::bad_cast
  000c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVbad_cast@std@@
  000ca	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  000d1	e8 00 00 00 00	 call	 _CxxThrowException
  000d6	90		 npad	 1

; 522  : 
; 523  :  #else /* _HAS_EXCEPTIONS */
; 524  : 			abort();	// lazy disallowed
; 525  :  #endif /* _HAS_EXCEPTIONS */
; 526  : 
; 527  : 		else

  000d7	eb 3e		 jmp	 SHORT $LN3@use_facet
$LN6@use_facet:

; 528  : 			{	// queue up lazy facet for destruction
; 529  : 			_Pf = _Psave;

  000d9	48 8b 45 28	 mov	 rax, QWORD PTR _Psave$6[rbp]
  000dd	48 89 45 68	 mov	 QWORD PTR _Pf$8[rbp], rax

; 530  : 			_Facetptr<_Facet>::_Psave = _Psave;

  000e1	48 8b 45 28	 mov	 rax, QWORD PTR _Psave$6[rbp]
  000e5	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PEBVfacet@locale@2@EB, rax ; std::_Facetptr<std::codecvt<char,char,_Mbstatet> >::_Psave

; 531  : 
; 532  : 			locale::facet *_Pfmod = (_Facet *)_Psave;

  000ec	48 8b 45 28	 mov	 rax, QWORD PTR _Psave$6[rbp]
  000f0	48 89 85 88 00
	00 00		 mov	 QWORD PTR _Pfmod$9[rbp], rax

; 533  : 			_Pfmod->_Incref();

  000f7	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR _Pfmod$9[rbp]
  000fe	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00101	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _Pfmod$9[rbp]
  00108	ff 50 08	 call	 QWORD PTR [rax+8]

; 534  : 
; 535  :  #if defined(_M_CEE)
; 536  : 			_Facet_Register_m(_Pfmod);
; 537  : 
; 538  :  #else /* defined(_M_CEE) */
; 539  : 			_Facet_Register(_Pfmod);

  0010b	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _Pfmod$9[rbp]
  00112	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPEAV_Facet_base@1@@Z ; std::_Facet_Register
$LN3@use_facet:

; 540  :  #endif /* defined(_M_CEE) */
; 541  : 			}
; 542  : 
; 543  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00117	48 8b 45 68	 mov	 rax, QWORD PTR _Pf$8[rbp]
  0011b	48 89 85 98 01
	00 00		 mov	 QWORD PTR $T11[rbp], rax
  00122	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$5[rbp]
  00126	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0012c	48 8b 85 98 01
	00 00		 mov	 rax, QWORD PTR $T11[rbp]

; 544  : 	_END_LOCK()
; 545  : 	}	// end of use_facet body

  00133	48 8b f8	 mov	 rdi, rax
  00136	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0013a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z$rtcFrameData
  00141	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00146	48 8b c7	 mov	 rax, rdi
  00149	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00150	48 33 cd	 xor	 rcx, rbp
  00153	e8 00 00 00 00	 call	 __security_check_cookie
  00158	48 8d a5 d8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+472]
  0015f	5f		 pop	 rdi
  00160	5d		 pop	 rbp
  00161	c3		 ret	 0
$LN10@use_facet:
??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z ENDP ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Lock$5 = 4
_Psave$6 = 40
_Id$7 = 72
_Pf$8 = 104
_Pfmod$9 = 136
$T10 = 360
$T11 = 408
$T12 = 440
__$ArrayPad$ = 456
_Loc$ = 496
?dtor$0@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA PROC ; `std::use_facet<std::codecvt<char,char,_Mbstatet> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$5[rbp]
  00018	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	5f		 pop	 rdi
  00023	5d		 pop	 rbp
  00024	c3		 ret	 0
?dtor$0@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA ENDP ; `std::use_facet<std::codecvt<char,char,_Mbstatet> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_Lock$5 = 4
_Psave$6 = 40
_Id$7 = 72
_Pf$8 = 104
_Pfmod$9 = 136
$T10 = 360
$T11 = 408
$T12 = 440
__$ArrayPad$ = 456
_Loc$ = 496
?dtor$0@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA PROC ; `std::use_facet<std::codecvt<char,char,_Mbstatet> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$5[rbp]
  00018	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	5f		 pop	 rdi
  00023	5d		 pop	 rbp
  00024	c3		 ret	 0
?dtor$0@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA ENDP ; `std::use_facet<std::codecvt<char,char,_Mbstatet> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ
_TEXT	SEGMENT
this$ = 224
??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ PROC		; std::fpos<_Mbstatet>::operator __int64, COMDAT

; 65   : 		{	// return offset

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 66   : 		return (_Myoff + _Fpos);

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00032	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00039	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]

; 67   : 		}

  0003d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00044	5f		 pop	 rdi
  00045	5d		 pop	 rbp
  00046	c3		 ret	 0
??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ ENDP		; std::fpos<_Mbstatet>::operator __int64
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ?seekpos@?$fpos@U_Mbstatet@@@std@@QEBA_JXZ
_TEXT	SEGMENT
this$ = 224
?seekpos@?$fpos@U_Mbstatet@@@std@@QEBA_JXZ PROC		; std::fpos<_Mbstatet>::seekpos, COMDAT

; 60   : 		{	// return C file position

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 61   : 		return (_Fpos);

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]

; 62   : 		}

  00033	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003a	5f		 pop	 rdi
  0003b	5d		 pop	 rbp
  0003c	c3		 ret	 0
?seekpos@?$fpos@U_Mbstatet@@@std@@QEBA_JXZ ENDP		; std::fpos<_Mbstatet>::seekpos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ?state@?$fpos@U_Mbstatet@@@std@@QEBA?AU_Mbstatet@@XZ
_TEXT	SEGMENT
this$ = 224
__$ReturnUdt$ = 232
?state@?$fpos@U_Mbstatet@@@std@@QEBA?AU_Mbstatet@@XZ PROC ; std::fpos<_Mbstatet>::state, COMDAT

; 50   : 		{	// return conversion state

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 51   : 		return (_Mystate);

  0002d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00034	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00038	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  0003f	48 89 01	 mov	 QWORD PTR [rcx], rax
  00042	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 52   : 		}

  00049	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
?state@?$fpos@U_Mbstatet@@@std@@QEBA?AU_Mbstatet@@XZ ENDP ; std::fpos<_Mbstatet>::state
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ??0?$fpos@U_Mbstatet@@@std@@QEAA@U_Mbstatet@@_J@Z
_TEXT	SEGMENT
this$ = 224
_State$ = 232
_Fileposition$ = 240
??0?$fpos@U_Mbstatet@@@std@@QEAA@U_Mbstatet@@_J@Z PROC	; std::fpos<_Mbstatet>::fpos<_Mbstatet>, COMDAT

; 46   : 		{	// construct with conversion state and C file position

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00018	48 8b ec	 mov	 rbp, rsp
  0001b	48 8b fc	 mov	 rdi, rsp
  0001e	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 45   : 		: _Myoff(0), _Fpos(_Fileposition), _Mystate(_State)

  00032	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00039	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00040	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00047	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR _Fileposition$[rbp]
  0004e	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _State$[rbp]
  00060	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 47   : 		}

  00064	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00072	5f		 pop	 rdi
  00073	5d		 pop	 rbp
  00074	c3		 ret	 0
??0?$fpos@U_Mbstatet@@@std@@QEAA@U_Mbstatet@@_J@Z ENDP	; std::fpos<_Mbstatet>::fpos<_Mbstatet>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z
_TEXT	SEGMENT
this$ = 224
_Off$ = 232
??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z PROC		; std::fpos<_Mbstatet>::fpos<_Mbstatet>, COMDAT

; 41   : 		{	// construct with stream offset

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 40   : 		: _Myoff(_Off), _Fpos(0), _Mystate()

  0002d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00034	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Off$[rbp]
  0003b	48 89 08	 mov	 QWORD PTR [rax], rcx
  0003e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00045	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  0004d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00054	48 83 c0 10	 add	 rax, 16
  00058	48 8b f8	 mov	 rdi, rax
  0005b	33 c0		 xor	 eax, eax
  0005d	b9 08 00 00 00	 mov	 ecx, 8
  00062	f3 aa		 rep stosb

; 42   : 		}

  00064	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00072	5f		 pop	 rdi
  00073	5d		 pop	 rbp
  00074	c3		 ret	 0
??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ENDP		; std::fpos<_Mbstatet>::fpos<_Mbstatet>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
_Al$ = 296
??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>, COMDAT

; 1735 : 		{	// construct allocator from _Al

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002f	48 c7 85 e8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T2[rbp], -2

; 1733 : 		: _Mypair(_One_then_variadic_args_t(),

  0003a	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00041	e8 00 00 00 00	 call	 ??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z ; std::forward<std::allocator<char> >
  00046	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004d	4c 8b c0	 mov	 r8, rax
  00050	0f b6 95 c4 00
	00 00		 movzx	 edx, BYTE PTR $T1[rbp]
  00057	e8 00 00 00 00	 call	 ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
  0005c	90		 npad	 1

; 1736 : 		_Alloc_proxy();

  0005d	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00064	e8 00 00 00 00	 call	 ?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
  00069	90		 npad	 1

; 1737 : 		}

  0006a	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00071	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00078	5f		 pop	 rdi
  00079	5d		 pop	 rbp
  0007a	c3		 ret	 0
??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
_Al$ = 296
?dtor$0@?0???$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z@4HA PROC ; `std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z@4HA ENDP ; `std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
_Al$ = 296
?dtor$0@?0???$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z@4HA PROC ; `std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z@4HA ENDP ; `std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\type_traits
;	COMDAT ??$move@AEAV?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 224
??$move@AEAV?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z PROC ; std::move<std::allocator<char> & __ptr64>, COMDAT

; 1606 : 	{	// forward _Arg as movable

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 1607 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Arg$[rbp]

; 1608 : 	}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??$move@AEAV?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z ENDP ; std::move<std::allocator<char> & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\type_traits
;	COMDAT ??$move@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 224
??$move@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z PROC ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > & __ptr64>, COMDAT

; 1606 : 	{	// forward _Arg as movable

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 1607 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Arg$[rbp]

; 1608 : 	}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??$move@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z ENDP ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstddef
;	COMDAT ??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z
_TEXT	SEGMENT
_Val$ = 224
??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z PROC ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 248  : 	{	// return address of _Val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 249  : 	return (__builtin_addressof(_Val));

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]

; 250  : 	}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z ENDP ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$?9DD@std@@YA_NAEBV?$allocator@D@0@0@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
??$?9DD@std@@YA_NAEBV?$allocator@D@0@0@Z PROC		; std::operator!=<char,char>, COMDAT

; 1015 : 	{	// test for allocator inequality

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 1016 : 	return (false);

  0002d	32 c0		 xor	 al, al

; 1017 : 	}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??$?9DD@std@@YA_NAEBV?$allocator@D@0@0@Z ENDP		; std::operator!=<char,char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstddef
;	COMDAT ??$addressof@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@@Z
_TEXT	SEGMENT
_Val$ = 224
??$addressof@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@@Z PROC ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const >, COMDAT

; 248  : 	{	// return address of _Val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 249  : 	return (__builtin_addressof(_Val));

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]

; 250  : 	}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??$addressof@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@@Z ENDP ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPEADPEAD@Z
_TEXT	SEGMENT
_Ptr$ = 224
??$_Unfancy@D@std@@YAPEADPEAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 264  : 	{	// do nothing for plain pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 265  : 	return (_Ptr);

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]

; 266  : 	}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??$_Unfancy@D@std@@YAPEADPEAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\utility
;	COMDAT ??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 200
tv65 = 216
_Left$ = 256
_Right$ = 264
??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z PROC		; std::_Min_value<unsigned __int64>, COMDAT

; 22   : 	{	// return smaller of _Left and _Right

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 23   : 	return (_Right < _Left ? _Right : _Left);

  0002d	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  00034	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Left$[rbp]
  0003b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0003e	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00041	73 10		 jae	 SHORT $LN3@Min_value
  00043	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  0004a	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
  00051	eb 0e		 jmp	 SHORT $LN4@Min_value
$LN3@Min_value:
  00053	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  0005a	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
$LN4@Min_value:
  00061	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv65[rbp]
  00068	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  0006f	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]

; 24   : 	}

  00076	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007d	5f		 pop	 rdi
  0007e	5d		 pop	 rbp
  0007f	c3		 ret	 0
??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z ENDP		; std::_Min_value<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??$_Traits_find@U?$char_traits@D@std@@@std@@YA_KQEBD_K101@Z
_TEXT	SEGMENT
_Possible_matches_end$ = 8
_Match_try$1 = 40
_Haystack$ = 288
_Hay_size$ = 296
_Start_at$ = 304
_Needle$ = 312
_Needle_size$ = 320
??$_Traits_find@U?$char_traits@D@std@@@std@@YA_KQEBD_K101@Z PROC ; std::_Traits_find<std::char_traits<char> >, COMDAT

; 56   : 	{	// search [_Haystack, _Haystack + _Hay_size) for [_Needle, _Needle + _Needle_size), at/after _Start_at

$LN11:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]

; 57   : 	if (_Needle_size > _Hay_size || _Start_at > _Hay_size - _Needle_size)

  00039	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR _Hay_size$[rbp]
  00040	48 39 85 40 01
	00 00		 cmp	 QWORD PTR _Needle_size$[rbp], rax
  00047	77 1d		 ja	 SHORT $LN6@Traits_fin
  00049	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR _Needle_size$[rbp]
  00050	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Hay_size$[rbp]
  00057	48 2b c8	 sub	 rcx, rax
  0005a	48 8b c1	 mov	 rax, rcx
  0005d	48 39 85 30 01
	00 00		 cmp	 QWORD PTR _Start_at$[rbp], rax
  00064	76 0c		 jbe	 SHORT $LN5@Traits_fin
$LN6@Traits_fin:

; 58   : 		{	// xpos cannot exist, report failure
; 59   : 			// N4659 24.3.2.7.2 [string.find]/1 says:
; 60   : 			// 1. _Start_at <= xpos
; 61   : 			// 2. xpos + _Needle_size <= _Hay_size;
; 62   : 			// therefore:
; 63   : 			// 3. _Needle_size <= _Hay_size (by 2) (checked above)
; 64   : 			// 4. _Start_at + _Needle_size <= _Hay_size (substitute 1 into 2)
; 65   : 			// 5. _Start_at <= _Hay_size - _Needle_size (4, move _Needle_size to other side) (also checked above)
; 66   : 		return (static_cast<size_t>(-1));

  00066	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  0006d	e9 c4 00 00 00	 jmp	 $LN1@Traits_fin
$LN5@Traits_fin:

; 67   : 		}
; 68   : 
; 69   : 	if (_Needle_size == 0)

  00072	48 83 bd 40 01
	00 00 00	 cmp	 QWORD PTR _Needle_size$[rbp], 0
  0007a	75 0c		 jne	 SHORT $LN7@Traits_fin

; 70   : 		{	// empty string always matches if xpos is possible
; 71   : 		return (_Start_at);

  0007c	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR _Start_at$[rbp]
  00083	e9 ae 00 00 00	 jmp	 $LN1@Traits_fin
$LN7@Traits_fin:

; 72   : 		}
; 73   : 
; 74   : 	const auto _Possible_matches_end = _Haystack + (_Hay_size - _Needle_size) + 1;

  00088	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR _Needle_size$[rbp]
  0008f	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Hay_size$[rbp]
  00096	48 2b c8	 sub	 rcx, rax
  00099	48 8b c1	 mov	 rax, rcx
  0009c	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR _Haystack$[rbp]
  000a3	48 8d 44 01 01	 lea	 rax, QWORD PTR [rcx+rax+1]
  000a8	48 89 45 08	 mov	 QWORD PTR _Possible_matches_end$[rbp], rax

; 75   : 	for (auto _Match_try = _Haystack + _Start_at; ; ++_Match_try)

  000ac	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR _Start_at$[rbp]
  000b3	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR _Haystack$[rbp]
  000ba	48 03 c8	 add	 rcx, rax
  000bd	48 8b c1	 mov	 rax, rcx
  000c0	48 89 45 28	 mov	 QWORD PTR _Match_try$1[rbp], rax
  000c4	eb 0b		 jmp	 SHORT $LN4@Traits_fin
$LN2@Traits_fin:
  000c6	48 8b 45 28	 mov	 rax, QWORD PTR _Match_try$1[rbp]
  000ca	48 ff c0	 inc	 rax
  000cd	48 89 45 28	 mov	 QWORD PTR _Match_try$1[rbp], rax
$LN4@Traits_fin:

; 76   : 		{
; 77   : 		_Match_try = _Traits::find(_Match_try, _Possible_matches_end - _Match_try, *_Needle);

  000d1	48 8b 45 28	 mov	 rax, QWORD PTR _Match_try$1[rbp]
  000d5	48 8b 4d 08	 mov	 rcx, QWORD PTR _Possible_matches_end$[rbp]
  000d9	48 2b c8	 sub	 rcx, rax
  000dc	48 8b c1	 mov	 rax, rcx
  000df	4c 8b 85 38 01
	00 00		 mov	 r8, QWORD PTR _Needle$[rbp]
  000e6	48 8b d0	 mov	 rdx, rax
  000e9	48 8b 4d 28	 mov	 rcx, QWORD PTR _Match_try$1[rbp]
  000ed	e8 00 00 00 00	 call	 ?find@?$char_traits@D@std@@SAPEBDQEBD_KAEBD@Z ; std::char_traits<char>::find
  000f2	48 89 45 28	 mov	 QWORD PTR _Match_try$1[rbp], rax

; 78   : 		if (!_Match_try)

  000f6	48 83 7d 28 00	 cmp	 QWORD PTR _Match_try$1[rbp], 0
  000fb	75 09		 jne	 SHORT $LN8@Traits_fin

; 79   : 			{	// didn't find first character; report failure
; 80   : 			return (static_cast<size_t>(-1));

  000fd	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  00104	eb 30		 jmp	 SHORT $LN1@Traits_fin
$LN8@Traits_fin:

; 81   : 			}
; 82   : 
; 83   : 		if (_Traits::compare(_Match_try, _Needle, _Needle_size) == 0)

  00106	4c 8b 85 40 01
	00 00		 mov	 r8, QWORD PTR _Needle_size$[rbp]
  0010d	48 8b 95 38 01
	00 00		 mov	 rdx, QWORD PTR _Needle$[rbp]
  00114	48 8b 4d 28	 mov	 rcx, QWORD PTR _Match_try$1[rbp]
  00118	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHQEBD0_K@Z ; std::char_traits<char>::compare
  0011d	85 c0		 test	 eax, eax
  0011f	75 13		 jne	 SHORT $LN9@Traits_fin

; 84   : 			{	// found match
; 85   : 			return (_Match_try - _Haystack);

  00121	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR _Haystack$[rbp]
  00128	48 8b 4d 28	 mov	 rcx, QWORD PTR _Match_try$1[rbp]
  0012c	48 2b c8	 sub	 rcx, rax
  0012f	48 8b c1	 mov	 rax, rcx
  00132	eb 02		 jmp	 SHORT $LN1@Traits_fin
$LN9@Traits_fin:

; 86   : 			}
; 87   : 		}

  00134	eb 90		 jmp	 SHORT $LN2@Traits_fin
$LN1@Traits_fin:

; 88   : 	}

  00136	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0013d	5f		 pop	 rdi
  0013e	5d		 pop	 rbp
  0013f	c3		 ret	 0
??$_Traits_find@U?$char_traits@D@std@@@std@@YA_KQEBD_K101@Z ENDP ; std::_Traits_find<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\string
;	COMDAT ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
tv72 = 192
_Istr$ = 240
_Str$ = 248
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::getline<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 158  : 	{	// get characters into string, discard newline

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 159  : 	return (getline(_STD move(_Istr), _Str, _Istr.widen('\n')));

  0002f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Istr$[rbp]
  00036	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00039	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0003d	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR _Istr$[rbp]
  00044	48 03 c8	 add	 rcx, rax
  00047	48 8b c1	 mov	 rax, rcx
  0004a	b2 0a		 mov	 dl, 10
  0004c	48 8b c8	 mov	 rcx, rax
  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z
  00055	88 85 c0 00 00
	00		 mov	 BYTE PTR tv72[rbp], al
  0005b	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR _Istr$[rbp]
  00062	e8 00 00 00 00	 call	 ??$move@AEAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::move<std::basic_istream<char,std::char_traits<char> > & __ptr64>
  00067	0f b6 8d c0 00
	00 00		 movzx	 ecx, BYTE PTR tv72[rbp]
  0006e	44 0f b6 c1	 movzx	 r8d, cl
  00072	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR _Str$[rbp]
  00079	48 8b c8	 mov	 rcx, rax
  0007c	e8 00 00 00 00	 call	 ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >

; 160  : 	}

  00081	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00088	5f		 pop	 rdi
  00089	5d		 pop	 rbp
  0008a	c3		 ret	 0
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::getline<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@$$QEAV10@@Z
_TEXT	SEGMENT
$T1 = 196
__$ReturnUdt$ = 256
_Left$ = 264
_Right$ = 272
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@$$QEAV10@@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 3829 : 	{	// return string + string

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00034	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR $T1[rbp], 0

; 3830 : 	return (_STD move(_Right.insert(0, _Left)));

  0003e	4c 8b 85 08 01
	00 00		 mov	 r8, QWORD PTR _Left$[rbp]
  00045	33 d2		 xor	 edx, edx
  00047	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  0004e	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KAEBV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
  00053	48 8b c8	 mov	 rcx, rax
  00056	e8 00 00 00 00	 call	 ??$move@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > & __ptr64>
  0005b	48 8b d0	 mov	 rdx, rax
  0005e	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00065	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0006a	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  00070	83 c8 01	 or	 eax, 1
  00073	89 85 c4 00 00
	00		 mov	 DWORD PTR $T1[rbp], eax
  00079	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 3831 : 	}

  00080	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00087	5f		 pop	 rdi
  00088	5d		 pop	 rbp
  00089	c3		 ret	 0
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@$$QEAV10@@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor', COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 05 98 00 00
	00		 add	 rax, 152		; 00000098H
  00037	48 8b c8	 mov	 rcx, rax
  0003a	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  0003f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00046	48 05 98 00 00
	00		 add	 rax, 152		; 00000098H
  0004c	48 8b c8	 mov	 rcx, rax
  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ
  00055	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005c	5f		 pop	 rdi
  0005d	5d		 pop	 rbp
  0005e	c3		 ret	 0
??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	48 2d 98 00 00
	00		 sub	 rax, 152		; 00000098H
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  00043	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00049	83 e0 01	 and	 eax, 1
  0004c	85 c0		 test	 eax, eax
  0004e	74 1a		 je	 SHORT $LN2@scalar
  00050	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00057	48 2d 98 00 00
	00		 sub	 rax, 152		; 00000098H
  0005d	ba f8 00 00 00	 mov	 edx, 248		; 000000f8H
  00062	48 8b c8	 mov	 rcx, rax
  00065	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  0006a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00071	48 2d 98 00 00
	00		 sub	 rax, 152		; 00000098H
  00077	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0007e	5f		 pop	 rdi
  0007f	5d		 pop	 rbp
  00080	c3		 ret	 0
??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__autoclassinit2@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z
_TEXT	SEGMENT
this$ = 224
classSize$ = 232
?__autoclassinit2@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::__autoclassinit2, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  0002d	48 8b bd e0 00
	00 00		 mov	 rdi, QWORD PTR this$[rbp]
  00034	33 c0		 xor	 eax, eax
  00036	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR classSize$[rbp]
  0003d	f3 aa		 rep stosb
  0003f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00046	5f		 pop	 rdi
  00047	5d		 pop	 rbp
  00048	c3		 ret	 0
?__autoclassinit2@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  0003a	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 11		 je	 SHORT $LN2@scalar
  00047	ba 78 00 00 00	 mov	 edx, 120		; 00000078H
  0004c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\sstream
;	COMDAT ?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAHH@Z
_TEXT	SEGMENT
_State$ = 4
this$ = 256
_Mode$ = 264
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate, COMDAT

; 356  : 		{	// convert open mode to stream state bits

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8b ec	 mov	 rbp, rsp
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 357  : 		_Strstate _State = (_Strstate)0;

  0002c	c7 45 04 00 00
	00 00		 mov	 DWORD PTR _State$[rbp], 0

; 358  : 		if (!(_Mode & ios_base::in))

  00033	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  00039	83 e0 01	 and	 eax, 1
  0003c	85 c0		 test	 eax, eax
  0003e	75 09		 jne	 SHORT $LN2@Getstate

; 359  : 			_State |= _Noread;

  00040	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00043	83 c8 04	 or	 eax, 4
  00046	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN2@Getstate:

; 360  : 		if (!(_Mode & ios_base::out))

  00049	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  0004f	83 e0 02	 and	 eax, 2
  00052	85 c0		 test	 eax, eax
  00054	75 09		 jne	 SHORT $LN3@Getstate

; 361  : 			_State |= _Constant;

  00056	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00059	83 c8 02	 or	 eax, 2
  0005c	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN3@Getstate:

; 362  : 		if (_Mode & ios_base::app)

  0005f	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  00065	83 e0 08	 and	 eax, 8
  00068	85 c0		 test	 eax, eax
  0006a	74 09		 je	 SHORT $LN4@Getstate

; 363  : 			_State |= _Append;

  0006c	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  0006f	83 c8 08	 or	 eax, 8
  00072	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN4@Getstate:

; 364  : 		if (_Mode & ios_base::ate)

  00075	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  0007b	83 e0 04	 and	 eax, 4
  0007e	85 c0		 test	 eax, eax
  00080	74 09		 je	 SHORT $LN5@Getstate

; 365  : 			_State |= _Atend;

  00082	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00085	83 c8 10	 or	 eax, 16
  00088	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN5@Getstate:

; 366  : 		return (_State);

  0008b	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]

; 367  : 		}

  0008e	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00095	5f		 pop	 rdi
  00096	5d		 pop	 rbp
  00097	c3		 ret	 0
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\sstream
;	COMDAT ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ
_TEXT	SEGMENT
tv88 = 192
tv95 = 200
this$ = 240
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT

; 337  : 		{	// discard any allocated buffer and clear pointers

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 338  : 		if (_Mystate & _Allocated)

  0002a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00034	83 e0 01	 and	 eax, 1
  00037	85 c0		 test	 eax, eax
  00039	0f 84 8f 00 00
	00		 je	 $LN2@Tidy

; 339  : 			_Al.deallocate(pointer_traits<_Ptrty>::pointer_to(*_Mysb::eback()),

  0003f	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0004c	48 85 c0	 test	 rax, rax
  0004f	74 16		 je	 SHORT $LN4@Tidy
  00051	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00058	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0005e	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv88[rbp], rax
  00065	eb 14		 jmp	 SHORT $LN5@Tidy
$LN4@Tidy:
  00067	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00074	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv88[rbp], rax
$LN5@Tidy:
  0007b	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00088	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv88[rbp]
  0008f	48 2b c8	 sub	 rcx, rax
  00092	48 8b c1	 mov	 rax, rcx
  00095	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv95[rbp], rax
  0009c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000a9	48 8b c8	 mov	 rcx, rax
  000ac	e8 00 00 00 00	 call	 ?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z ; std::pointer_traits<char * __ptr64>::pointer_to
  000b1	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b8	48 83 c1 74	 add	 rcx, 116		; 00000074H
  000bc	48 8b 95 c8 00
	00 00		 mov	 rdx, QWORD PTR tv95[rbp]
  000c3	4c 8b c2	 mov	 r8, rdx
  000c6	48 8b d0	 mov	 rdx, rax
  000c9	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate
$LN2@Tidy:

; 340  : 				(_Mysb::pptr() != 0 ? _Mysb::epptr()
; 341  : 					: _Mysb::egptr()) - _Mysb::eback());
; 342  : 		_Mysb::setg(0, 0, 0);

  000ce	45 33 c9	 xor	 r9d, r9d
  000d1	45 33 c0	 xor	 r8d, r8d
  000d4	33 d2		 xor	 edx, edx
  000d6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z

; 343  : 		_Mysb::setp(0, 0);

  000e3	45 33 c0	 xor	 r8d, r8d
  000e6	33 d2		 xor	 edx, edx
  000e8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD0@Z

; 344  : 		_Seekhigh = 0;

  000f5	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000fc	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0

; 345  : 		_Mystate &= ~_Allocated;

  00104	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0010b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0010e	83 e0 fe	 and	 eax, -2
  00111	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00118	89 41 70	 mov	 DWORD PTR [rcx+112], eax

; 346  : 		}

  0011b	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00122	5f		 pop	 rdi
  00123	5d		 pop	 rbp
  00124	c3		 ret	 0
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\sstream
;	COMDAT ?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXPEBD_KH@Z
_TEXT	SEGMENT
_Pnew$1 = 8
tv142 = 216
this$ = 256
_Ptr$ = 264
_Count$ = 272
_State$ = 280
?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXPEBD_KH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init, COMDAT

; 310  : 		{	// initialize buffer to [_Ptr, _Ptr + _Count), set state

$LN9:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 311  : 		_Seekhigh = 0;

  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0

; 312  : 		_Mystate = _State;

  00048	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004f	8b 8d 18 01 00
	00		 mov	 ecx, DWORD PTR _State$[rbp]
  00055	89 48 70	 mov	 DWORD PTR [rax+112], ecx

; 313  : 
; 314  : 		if (_Count != 0
; 315  : 			&& (_Mystate & (_Noread | _Constant)) != (_Noread | _Constant))

  00058	48 83 bd 10 01
	00 00 00	 cmp	 QWORD PTR _Count$[rbp], 0
  00060	0f 84 61 01 00
	00		 je	 $LN2@Init
  00066	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00070	83 e0 06	 and	 eax, 6
  00073	83 f8 06	 cmp	 eax, 6
  00076	0f 84 4b 01 00
	00		 je	 $LN2@Init

; 316  : 			{	// finite buffer that can be read or written, set it up
; 317  : 			_Elem *_Pnew = _Unfancy(_Al.allocate(_Count));

  0007c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00083	48 83 c0 74	 add	 rax, 116		; 00000074H
  00087	48 8b 95 10 01
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ; std::allocator<char>::allocate
  00096	48 8b c8	 mov	 rcx, rax
  00099	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  0009e	48 89 45 08	 mov	 QWORD PTR _Pnew$1[rbp], rax

; 318  : 			_Traits::copy(_Pnew, _Ptr, _Count);

  000a2	4c 8b 85 10 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  000a9	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  000b0	48 8b 4d 08	 mov	 rcx, QWORD PTR _Pnew$1[rbp]
  000b4	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z ; std::char_traits<char>::copy

; 319  : 			_Seekhigh = _Pnew + _Count;

  000b9	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  000c0	48 8b 4d 08	 mov	 rcx, QWORD PTR _Pnew$1[rbp]
  000c4	48 03 c8	 add	 rcx, rax
  000c7	48 8b c1	 mov	 rax, rcx
  000ca	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d1	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 320  : 
; 321  : 			if (!(_Mystate & _Noread))

  000d5	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000dc	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000df	83 e0 04	 and	 eax, 4
  000e2	85 c0		 test	 eax, eax
  000e4	75 29		 jne	 SHORT $LN3@Init

; 322  : 				_Mysb::setg(_Pnew, _Pnew,

  000e6	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  000ed	48 8b 4d 08	 mov	 rcx, QWORD PTR _Pnew$1[rbp]
  000f1	48 03 c8	 add	 rcx, rax
  000f4	48 8b c1	 mov	 rax, rcx
  000f7	4c 8b c8	 mov	 r9, rax
  000fa	4c 8b 45 08	 mov	 r8, QWORD PTR _Pnew$1[rbp]
  000fe	48 8b 55 08	 mov	 rdx, QWORD PTR _Pnew$1[rbp]
  00102	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00109	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z
$LN3@Init:

; 323  : 					_Pnew + _Count);	// setup read buffer
; 324  : 			if (!(_Mystate & _Constant))

  0010f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00116	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00119	83 e0 02	 and	 eax, 2
  0011c	85 c0		 test	 eax, eax
  0011e	0f 85 8c 00 00
	00		 jne	 $LN4@Init

; 325  : 				{	// setup write buffer, and maybe read buffer
; 326  : 				_Mysb::setp(_Pnew,

  00124	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0012b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0012e	83 e0 18	 and	 eax, 24
  00131	85 c0		 test	 eax, eax
  00133	74 1a		 je	 SHORT $LN7@Init
  00135	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  0013c	48 8b 4d 08	 mov	 rcx, QWORD PTR _Pnew$1[rbp]
  00140	48 03 c8	 add	 rcx, rax
  00143	48 8b c1	 mov	 rax, rcx
  00146	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv142[rbp], rax
  0014d	eb 0b		 jmp	 SHORT $LN8@Init
$LN7@Init:
  0014f	48 8b 45 08	 mov	 rax, QWORD PTR _Pnew$1[rbp]
  00153	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv142[rbp], rax
$LN8@Init:
  0015a	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00161	48 8b 4d 08	 mov	 rcx, QWORD PTR _Pnew$1[rbp]
  00165	48 03 c8	 add	 rcx, rax
  00168	48 8b c1	 mov	 rax, rcx
  0016b	4c 8b c8	 mov	 r9, rax
  0016e	4c 8b 85 d8 00
	00 00		 mov	 r8, QWORD PTR tv142[rbp]
  00175	48 8b 55 08	 mov	 rdx, QWORD PTR _Pnew$1[rbp]
  00179	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00180	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z

; 327  : 					(_Mystate & (_Atend | _Append)) ? _Pnew + _Count : _Pnew,
; 328  : 					_Pnew + _Count);
; 329  : 				if (_Mysb::gptr() == 0)

  00186	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0018d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00193	48 85 c0	 test	 rax, rax
  00196	75 18		 jne	 SHORT $LN5@Init

; 330  : 					_Mysb::setg(_Pnew, 0, _Pnew);

  00198	4c 8b 4d 08	 mov	 r9, QWORD PTR _Pnew$1[rbp]
  0019c	45 33 c0	 xor	 r8d, r8d
  0019f	48 8b 55 08	 mov	 rdx, QWORD PTR _Pnew$1[rbp]
  001a3	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z
$LN5@Init:
$LN4@Init:

; 331  : 				}
; 332  : 			_Mystate |= _Allocated;

  001b0	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001b7	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001ba	83 c8 01	 or	 eax, 1
  001bd	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c4	89 41 70	 mov	 DWORD PTR [rcx+112], eax
$LN2@Init:

; 333  : 			}
; 334  : 		}

  001c7	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  001ce	5f		 pop	 rdi
  001cf	5d		 pop	 rbp
  001d0	c3		 ret	 0
?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXPEBD_KH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\sstream
;	COMDAT ?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
_TEXT	SEGMENT
_Off$ = 8
tv225 = 216
tv180 = 216
tv150 = 216
tv187 = 224
this$ = 272
__$ReturnUdt$ = 280
_Ptr$ = 288
_Mode$ = 296
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos, COMDAT

; 276  : 		{	// change position to _Pos, according to _Mode

$LN15:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR [rsp+312]

; 277  : 		streamoff _Off = (streamoff)_Ptr;

  00039	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00040	e8 00 00 00 00	 call	 ??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ ; std::fpos<_Mbstatet>::operator __int64
  00045	48 89 45 08	 mov	 QWORD PTR _Off$[rbp], rax

; 278  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  00049	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00056	48 85 c0	 test	 rax, rax
  00059	74 32		 je	 SHORT $LN2@seekpos
  0005b	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00068	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006f	48 39 41 68	 cmp	 QWORD PTR [rcx+104], rax
  00073	73 18		 jae	 SHORT $LN2@seekpos

; 279  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  00075	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00082	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00089	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
$LN2@seekpos:

; 280  : 
; 281  : 		if (_Off == _BADOFF)

  0008d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_?_BADOFF@std@@3_JB
  00094	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00097	48 39 45 08	 cmp	 QWORD PTR _Off$[rbp], rax
  0009b	75 05		 jne	 SHORT $LN3@seekpos
  0009d	e9 d7 01 00 00	 jmp	 $LN4@seekpos
$LN3@seekpos:

; 282  : 			;
; 283  : 		else if (_Mode & ios_base::in && _Mysb::gptr() != 0)

  000a2	8b 85 28 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  000a8	83 e0 01	 and	 eax, 1
  000ab	85 c0		 test	 eax, eax
  000ad	0f 84 17 01 00
	00		 je	 $LN5@seekpos
  000b3	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000c0	48 85 c0	 test	 rax, rax
  000c3	0f 84 01 01 00
	00		 je	 $LN5@seekpos

; 284  : 			{	// position within read buffer
; 285  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  000c9	48 83 7d 08 00	 cmp	 QWORD PTR _Off$[rbp], 0
  000ce	0f 8c e3 00 00
	00		 jl	 $LN7@seekpos
  000d4	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000e1	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000e8	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  000ec	48 2b c8	 sub	 rcx, rax
  000ef	48 8b c1	 mov	 rax, rcx
  000f2	48 39 45 08	 cmp	 QWORD PTR _Off$[rbp], rax
  000f6	0f 8f bb 00 00
	00		 jg	 $LN7@seekpos

; 286  : 				{	// change read position
; 287  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  000fc	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00103	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00109	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv150[rbp], rax
  00110	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00117	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0011d	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv150[rbp]
  00124	48 2b c8	 sub	 rcx, rax
  00127	48 8b c1	 mov	 rax, rcx
  0012a	48 03 45 08	 add	 rax, QWORD PTR _Off$[rbp]
  0012e	8b d0		 mov	 edx, eax
  00130	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00137	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z

; 288  : 				if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  0013d	8b 85 28 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  00143	83 e0 02	 and	 eax, 2
  00146	85 c0		 test	 eax, eax
  00148	74 6b		 je	 SHORT $LN9@seekpos
  0014a	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00151	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00157	48 85 c0	 test	 rax, rax
  0015a	74 59		 je	 SHORT $LN9@seekpos

; 289  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),

  0015c	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00163	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00169	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv180[rbp], rax
  00170	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00177	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0017d	48 89 85 e0 00
	00 00		 mov	 QWORD PTR tv187[rbp], rax
  00184	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0018b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00191	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv180[rbp]
  00198	4c 8b c9	 mov	 r9, rcx
  0019b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR tv187[rbp]
  001a2	4c 8b c1	 mov	 r8, rcx
  001a5	48 8b d0	 mov	 rdx, rax
  001a8	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z
$LN9@seekpos:

; 290  : 						_Mysb::epptr());	// change write position to match
; 291  : 				}
; 292  : 			else

  001b5	eb 0e		 jmp	 SHORT $LN8@seekpos
$LN7@seekpos:

; 293  : 				_Off = _BADOFF;

  001b7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_?_BADOFF@std@@3_JB
  001be	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001c1	48 89 45 08	 mov	 QWORD PTR _Off$[rbp], rax
$LN8@seekpos:
  001c5	e9 af 00 00 00	 jmp	 $LN6@seekpos
$LN5@seekpos:

; 294  : 			}
; 295  : 		else if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  001ca	8b 85 28 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  001d0	83 e0 02	 and	 eax, 2
  001d3	85 c0		 test	 eax, eax
  001d5	0f 84 90 00 00
	00		 je	 $LN10@seekpos
  001db	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  001e8	48 85 c0	 test	 rax, rax
  001eb	74 7e		 je	 SHORT $LN10@seekpos

; 296  : 			{	// position within write buffer
; 297  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  001ed	48 83 7d 08 00	 cmp	 QWORD PTR _Off$[rbp], 0
  001f2	7c 67		 jl	 SHORT $LN12@seekpos
  001f4	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00201	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00208	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  0020c	48 2b c8	 sub	 rcx, rax
  0020f	48 8b c1	 mov	 rax, rcx
  00212	48 39 45 08	 cmp	 QWORD PTR _Off$[rbp], rax
  00216	7f 43		 jg	 SHORT $LN12@seekpos

; 298  : 				_Mysb::pbump((int)(_Mysb::eback()

  00218	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0021f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00225	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv225[rbp], rax
  0022c	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00233	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00239	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv225[rbp]
  00240	48 2b c8	 sub	 rcx, rax
  00243	48 8b c1	 mov	 rax, rcx
  00246	48 03 45 08	 add	 rax, QWORD PTR _Off$[rbp]
  0024a	8b d0		 mov	 edx, eax
  0024c	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00253	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z

; 299  : 					- _Mysb::pptr() + _Off));	// change write position
; 300  : 			else

  00259	eb 0e		 jmp	 SHORT $LN13@seekpos
$LN12@seekpos:

; 301  : 				_Off = _BADOFF;

  0025b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_?_BADOFF@std@@3_JB
  00262	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00265	48 89 45 08	 mov	 QWORD PTR _Off$[rbp], rax
$LN13@seekpos:

; 302  : 			}
; 303  : 		else

  00269	eb 0e		 jmp	 SHORT $LN11@seekpos
$LN10@seekpos:

; 304  : 			_Off = _BADOFF;	// neither read nor write buffer selected, fail

  0026b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_?_BADOFF@std@@3_JB
  00272	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00275	48 89 45 08	 mov	 QWORD PTR _Off$[rbp], rax
$LN11@seekpos:
$LN6@seekpos:
$LN4@seekpos:

; 305  : 		return (streampos(_Off));

  00279	48 8b 55 08	 mov	 rdx, QWORD PTR _Off$[rbp]
  0027d	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00284	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  00289	48 8b 85 18 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 306  : 		}

  00290	48 8d a5 f8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+248]
  00297	5f		 pop	 rdi
  00298	5d		 pop	 rbp
  00299	c3		 ret	 0
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\sstream
;	COMDAT ?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
_TEXT	SEGMENT
tv276 = 192
tv246 = 192
tv205 = 192
tv175 = 192
tv145 = 192
tv212 = 200
this$ = 240
__$ReturnUdt$ = 248
_Off$ = 256
_Way$ = 264
_Which$ = 272
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff, COMDAT

; 227  : 		{	// change position by _Off, according to _Way, _Mode

$LN24:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 228  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  00039	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00040	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00046	48 85 c0	 test	 rax, rax
  00049	74 32		 je	 SHORT $LN2@seekoff
  0004b	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00052	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00058	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005f	48 39 41 68	 cmp	 QWORD PTR [rcx+104], rax
  00063	73 18		 jae	 SHORT $LN2@seekoff

; 229  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  00065	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00072	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00079	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
$LN2@seekoff:

; 230  : 
; 231  : 		if (_Which & ios_base::in && _Mysb::gptr() != 0)

  0007d	8b 85 10 01 00
	00		 mov	 eax, DWORD PTR _Which$[rbp]
  00083	83 e0 01	 and	 eax, 1
  00086	85 c0		 test	 eax, eax
  00088	0f 84 d4 01 00
	00		 je	 $LN3@seekoff
  0008e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00095	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0009b	48 85 c0	 test	 rax, rax
  0009e	0f 84 be 01 00
	00		 je	 $LN3@seekoff

; 232  : 			{	// position within read buffer
; 233  : 			if (_Way == ios_base::end)

  000a4	83 bd 08 01 00
	00 02		 cmp	 DWORD PTR _Way$[rbp], 2
  000ab	75 34		 jne	 SHORT $LN5@seekoff

; 234  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  000ad	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000ba	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c1	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  000c5	48 2b c8	 sub	 rcx, rax
  000c8	48 8b c1	 mov	 rax, rcx
  000cb	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Off$[rbp]
  000d2	48 03 c8	 add	 rcx, rax
  000d5	48 8b c1	 mov	 rax, rcx
  000d8	48 89 85 00 01
	00 00		 mov	 QWORD PTR _Off$[rbp], rax

; 235  : 			else if (_Way == ios_base::cur

  000df	eb 74		 jmp	 SHORT $LN6@seekoff
$LN5@seekoff:

; 236  : 				&& (_Which & ios_base::out) == 0)

  000e1	83 bd 08 01 00
	00 01		 cmp	 DWORD PTR _Way$[rbp], 1
  000e8	75 51		 jne	 SHORT $LN7@seekoff
  000ea	8b 85 10 01 00
	00		 mov	 eax, DWORD PTR _Which$[rbp]
  000f0	83 e0 02	 and	 eax, 2
  000f3	85 c0		 test	 eax, eax
  000f5	75 44		 jne	 SHORT $LN7@seekoff

; 237  : 				_Off += (off_type)(_Mysb::gptr() - _Mysb::eback());

  000f7	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00104	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv145[rbp], rax
  0010b	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00112	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00118	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv145[rbp]
  0011f	48 2b c8	 sub	 rcx, rax
  00122	48 8b c1	 mov	 rax, rcx
  00125	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Off$[rbp]
  0012c	48 03 c8	 add	 rcx, rax
  0012f	48 8b c1	 mov	 rax, rcx
  00132	48 89 85 00 01
	00 00		 mov	 QWORD PTR _Off$[rbp], rax
  00139	eb 1a		 jmp	 SHORT $LN8@seekoff
$LN7@seekoff:

; 238  : 			else if (_Way != ios_base::beg)

  0013b	83 bd 08 01 00
	00 00		 cmp	 DWORD PTR _Way$[rbp], 0
  00142	74 11		 je	 SHORT $LN9@seekoff

; 239  : 				_Off = _BADOFF;

  00144	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_?_BADOFF@std@@3_JB
  0014b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0014e	48 89 85 00 01
	00 00		 mov	 QWORD PTR _Off$[rbp], rax
$LN9@seekoff:
$LN8@seekoff:
$LN6@seekoff:

; 240  : 
; 241  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00155	48 83 bd 00 01
	00 00 00	 cmp	 QWORD PTR _Off$[rbp], 0
  0015d	0f 8c e9 00 00
	00		 jl	 $LN10@seekoff
  00163	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00170	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00177	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  0017b	48 2b c8	 sub	 rcx, rax
  0017e	48 8b c1	 mov	 rax, rcx
  00181	48 39 85 00 01
	00 00		 cmp	 QWORD PTR _Off$[rbp], rax
  00188	0f 8f be 00 00
	00		 jg	 $LN10@seekoff

; 242  : 				{	// change read position
; 243  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  0018e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00195	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0019b	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv175[rbp], rax
  001a2	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  001af	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv175[rbp]
  001b6	48 2b c8	 sub	 rcx, rax
  001b9	48 8b c1	 mov	 rax, rcx
  001bc	48 03 85 00 01
	00 00		 add	 rax, QWORD PTR _Off$[rbp]
  001c3	8b d0		 mov	 edx, eax
  001c5	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z

; 244  : 				if (_Which & ios_base::out && _Mysb::pptr() != 0)

  001d2	8b 85 10 01 00
	00		 mov	 eax, DWORD PTR _Which$[rbp]
  001d8	83 e0 02	 and	 eax, 2
  001db	85 c0		 test	 eax, eax
  001dd	74 6b		 je	 SHORT $LN12@seekoff
  001df	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  001ec	48 85 c0	 test	 rax, rax
  001ef	74 59		 je	 SHORT $LN12@seekoff

; 245  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),

  001f1	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  001fe	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv205[rbp], rax
  00205	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0020c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00212	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv212[rbp], rax
  00219	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00220	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00226	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv205[rbp]
  0022d	4c 8b c9	 mov	 r9, rcx
  00230	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR tv212[rbp]
  00237	4c 8b c1	 mov	 r8, rcx
  0023a	48 8b d0	 mov	 rdx, rax
  0023d	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00244	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z
$LN12@seekoff:

; 246  : 						_Mysb::epptr());	// change write position to match
; 247  : 				}
; 248  : 			else

  0024a	eb 11		 jmp	 SHORT $LN11@seekoff
$LN10@seekoff:

; 249  : 				_Off = _BADOFF;

  0024c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_?_BADOFF@std@@3_JB
  00253	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00256	48 89 85 00 01
	00 00		 mov	 QWORD PTR _Off$[rbp], rax
$LN11@seekoff:
  0025d	e9 70 01 00 00	 jmp	 $LN4@seekoff
$LN3@seekoff:

; 250  : 			}
; 251  : 		else if (_Which & ios_base::out && _Mysb::pptr() != 0)

  00262	8b 85 10 01 00
	00		 mov	 eax, DWORD PTR _Which$[rbp]
  00268	83 e0 02	 and	 eax, 2
  0026b	85 c0		 test	 eax, eax
  0026d	0f 84 44 01 00
	00		 je	 $LN13@seekoff
  00273	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0027a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00280	48 85 c0	 test	 rax, rax
  00283	0f 84 2e 01 00
	00		 je	 $LN13@seekoff

; 252  : 			{	// position within write buffer
; 253  : 			if (_Way == ios_base::end)

  00289	83 bd 08 01 00
	00 02		 cmp	 DWORD PTR _Way$[rbp], 2
  00290	75 34		 jne	 SHORT $LN15@seekoff

; 254  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  00292	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00299	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0029f	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002a6	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  002aa	48 2b c8	 sub	 rcx, rax
  002ad	48 8b c1	 mov	 rax, rcx
  002b0	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Off$[rbp]
  002b7	48 03 c8	 add	 rcx, rax
  002ba	48 8b c1	 mov	 rax, rcx
  002bd	48 89 85 00 01
	00 00		 mov	 QWORD PTR _Off$[rbp], rax
  002c4	eb 67		 jmp	 SHORT $LN16@seekoff
$LN15@seekoff:

; 255  : 			else if (_Way == ios_base::cur)

  002c6	83 bd 08 01 00
	00 01		 cmp	 DWORD PTR _Way$[rbp], 1
  002cd	75 44		 jne	 SHORT $LN17@seekoff

; 256  : 				_Off += (off_type)(_Mysb::pptr() - _Mysb::eback());

  002cf	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  002dc	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv246[rbp], rax
  002e3	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  002f0	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv246[rbp]
  002f7	48 2b c8	 sub	 rcx, rax
  002fa	48 8b c1	 mov	 rax, rcx
  002fd	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Off$[rbp]
  00304	48 03 c8	 add	 rcx, rax
  00307	48 8b c1	 mov	 rax, rcx
  0030a	48 89 85 00 01
	00 00		 mov	 QWORD PTR _Off$[rbp], rax
  00311	eb 1a		 jmp	 SHORT $LN18@seekoff
$LN17@seekoff:

; 257  : 			else if (_Way != ios_base::beg)

  00313	83 bd 08 01 00
	00 00		 cmp	 DWORD PTR _Way$[rbp], 0
  0031a	74 11		 je	 SHORT $LN19@seekoff

; 258  : 				_Off = _BADOFF;

  0031c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_?_BADOFF@std@@3_JB
  00323	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00326	48 89 85 00 01
	00 00		 mov	 QWORD PTR _Off$[rbp], rax
$LN19@seekoff:
$LN18@seekoff:
$LN16@seekoff:

; 259  : 
; 260  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  0032d	48 83 bd 00 01
	00 00 00	 cmp	 QWORD PTR _Off$[rbp], 0
  00335	7c 6d		 jl	 SHORT $LN20@seekoff
  00337	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0033e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00344	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0034b	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  0034f	48 2b c8	 sub	 rcx, rax
  00352	48 8b c1	 mov	 rax, rcx
  00355	48 39 85 00 01
	00 00		 cmp	 QWORD PTR _Off$[rbp], rax
  0035c	7f 46		 jg	 SHORT $LN20@seekoff

; 261  : 				_Mysb::pbump((int)(_Mysb::eback()

  0035e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00365	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0036b	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv276[rbp], rax
  00372	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00379	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0037f	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv276[rbp]
  00386	48 2b c8	 sub	 rcx, rax
  00389	48 8b c1	 mov	 rax, rcx
  0038c	48 03 85 00 01
	00 00		 add	 rax, QWORD PTR _Off$[rbp]
  00393	8b d0		 mov	 edx, eax
  00395	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0039c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z

; 262  : 					- _Mysb::pptr() + _Off));	// change write position
; 263  : 			else

  003a2	eb 11		 jmp	 SHORT $LN21@seekoff
$LN20@seekoff:

; 264  : 				_Off = _BADOFF;

  003a4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_?_BADOFF@std@@3_JB
  003ab	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003ae	48 89 85 00 01
	00 00		 mov	 QWORD PTR _Off$[rbp], rax
$LN21@seekoff:
  003b5	eb 1b		 jmp	 SHORT $LN14@seekoff
$LN13@seekoff:

; 265  : 			}
; 266  : 
; 267  : 		else if (_Off != 0)

  003b7	48 83 bd 00 01
	00 00 00	 cmp	 QWORD PTR _Off$[rbp], 0
  003bf	74 11		 je	 SHORT $LN22@seekoff

; 268  : 
; 269  : 
; 270  : 			_Off = _BADOFF;	// neither read nor write buffer selected, fail

  003c1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_?_BADOFF@std@@3_JB
  003c8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003cb	48 89 85 00 01
	00 00		 mov	 QWORD PTR _Off$[rbp], rax
$LN22@seekoff:
$LN14@seekoff:
$LN4@seekoff:

; 271  : 		return (pos_type(_Off));

  003d2	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR _Off$[rbp]
  003d9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  003e0	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  003e5	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 272  : 		}

  003ec	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  003f3	5f		 pop	 rdi
  003f4	5d		 pop	 rbp
  003f5	c3		 ret	 0
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\sstream
;	COMDAT ?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ
_TEXT	SEGMENT
tv184 = 192
tv140 = 192
tv77 = 192
this$ = 240
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow, COMDAT

; 207  : 		{	// get an element from stream, but don't point past it

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 208  : 		if (_Mysb::gptr() == 0)

  0002a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00037	48 85 c0	 test	 rax, rax
  0003a	75 0f		 jne	 SHORT $LN2@underflow

; 209  : 			return (_Traits::eof());	// no character buffer, fail

  0003c	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00041	e9 57 01 00 00	 jmp	 $LN1@underflow
  00046	e9 52 01 00 00	 jmp	 $LN3@underflow
$LN2@underflow:

; 210  : 		else if (_Mysb::gptr() < _Mysb::egptr())

  0004b	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00052	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00058	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv77[rbp], rax
  0005f	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0006c	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv77[rbp]
  00073	48 3b c8	 cmp	 rcx, rax
  00076	73 1f		 jae	 SHORT $LN4@underflow

; 211  : 			return (_Traits::to_int_type(*_Mysb::gptr()));	// return buffered

  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00085	48 8b c8	 mov	 rcx, rax
  00088	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHAEBD@Z ; std::char_traits<char>::to_int_type
  0008d	e9 0b 01 00 00	 jmp	 $LN1@underflow

; 212  : 		else if (_Mystate & _Noread || _Mysb::pptr() == 0

  00092	e9 06 01 00 00	 jmp	 $LN5@underflow
$LN4@underflow:

; 213  : 			|| (_Mysb::pptr() <= _Mysb::gptr() && _Seekhigh <= _Mysb::gptr()))

  00097	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000a1	83 e0 04	 and	 eax, 4
  000a4	85 c0		 test	 eax, eax
  000a6	75 59		 jne	 SHORT $LN8@underflow
  000a8	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000b5	48 85 c0	 test	 rax, rax
  000b8	74 47		 je	 SHORT $LN8@underflow
  000ba	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000c7	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv140[rbp], rax
  000ce	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000db	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv140[rbp]
  000e2	48 3b c8	 cmp	 rcx, rax
  000e5	77 29		 ja	 SHORT $LN6@underflow
  000e7	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000f4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fb	48 39 41 68	 cmp	 QWORD PTR [rcx+104], rax
  000ff	77 0f		 ja	 SHORT $LN6@underflow
$LN8@underflow:

; 214  : 			return (_Traits::eof());	// can't read, fail

  00101	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00106	e9 92 00 00 00	 jmp	 $LN1@underflow

; 215  : 		else

  0010b	e9 8d 00 00 00	 jmp	 $LN7@underflow
$LN6@underflow:

; 216  : 			{	// extend read buffer into written area, then return buffered
; 217  : 			if (_Seekhigh < _Mysb::pptr())

  00110	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00117	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0011d	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00124	48 39 41 68	 cmp	 QWORD PTR [rcx+104], rax
  00128	73 18		 jae	 SHORT $LN9@underflow

; 218  : 				_Seekhigh = _Mysb::pptr();

  0012a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00131	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00137	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0013e	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
$LN9@underflow:

; 219  : 			_Mysb::setg(_Mysb::eback(), _Mysb::gptr(), _Seekhigh);

  00142	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00149	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0014f	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv184[rbp], rax
  00156	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0015d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00163	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0016a	4c 8b 49 68	 mov	 r9, QWORD PTR [rcx+104]
  0016e	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv184[rbp]
  00175	4c 8b c1	 mov	 r8, rcx
  00178	48 8b d0	 mov	 rdx, rax
  0017b	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00182	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z

; 220  : 			return (_Traits::to_int_type(*_Mysb::gptr()));

  00188	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0018f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00195	48 8b c8	 mov	 rcx, rax
  00198	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHAEBD@Z ; std::char_traits<char>::to_int_type
$LN7@underflow:
$LN5@underflow:
$LN3@underflow:
$LN1@underflow:

; 221  : 			}
; 222  : 		}

  0019d	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  001a4	5f		 pop	 rdi
  001a5	5d		 pop	 rbp
  001a6	c3		 ret	 0
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\sstream
;	COMDAT ?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
$T3 = 260
tv155 = 276
tv76 = 280
this$ = 320
_Meta$ = 328
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail, COMDAT

; 190  : 		{	// put an element back to stream

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]

; 191  : 		if (_Mysb::gptr() == 0
; 192  : 			|| _Mysb::gptr() <= _Mysb::eback()
; 193  : 			|| (!_Traits::eq_int_type(_Traits::eof(), _Meta)

  0002e	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0003b	48 85 c0	 test	 rax, rax
  0003e	0f 84 a4 00 00
	00		 je	 $LN4@pbackfail
  00044	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00051	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv76[rbp], rax
  00058	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00065	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR tv76[rbp]
  0006c	48 3b c8	 cmp	 rcx, rax
  0006f	76 77		 jbe	 SHORT $LN4@pbackfail
  00071	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00076	89 85 c4 00 00
	00		 mov	 DWORD PTR $T1[rbp], eax
  0007c	48 8d 95 48 01
	00 00		 lea	 rdx, QWORD PTR _Meta$[rbp]
  00083	48 8d 8d c4 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  0008a	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  0008f	0f b6 c0	 movzx	 eax, al
  00092	85 c0		 test	 eax, eax
  00094	75 5b		 jne	 SHORT $LN2@pbackfail
  00096	48 8d 8d 48 01
	00 00		 lea	 rcx, QWORD PTR _Meta$[rbp]
  0009d	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADAEBH@Z ; std::char_traits<char>::to_char_type
  000a2	88 85 e4 00 00
	00		 mov	 BYTE PTR $T2[rbp], al
  000a8	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000b5	b9 01 00 00 00	 mov	 ecx, 1
  000ba	48 6b c9 ff	 imul	 rcx, rcx, -1
  000be	48 03 c1	 add	 rax, rcx
  000c1	48 8b d0	 mov	 rdx, rax
  000c4	48 8d 8d e4 00
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  000cb	e8 00 00 00 00	 call	 ?eq@?$char_traits@D@std@@SA_NAEBD0@Z ; std::char_traits<char>::eq
  000d0	0f b6 c0	 movzx	 eax, al
  000d3	85 c0		 test	 eax, eax
  000d5	75 1a		 jne	 SHORT $LN2@pbackfail
  000d7	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000de	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000e1	83 e0 02	 and	 eax, 2
  000e4	85 c0		 test	 eax, eax
  000e6	74 09		 je	 SHORT $LN2@pbackfail
$LN4@pbackfail:

; 194  : 			&& !_Traits::eq(_Traits::to_char_type(_Meta), _Mysb::gptr()[-1])
; 195  : 			&& _Mystate & _Constant))
; 196  : 			return (_Traits::eof());	// can't put back, fail

  000e8	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000ed	eb 6d		 jmp	 SHORT $LN1@pbackfail

; 197  : 		else

  000ef	eb 6b		 jmp	 SHORT $LN3@pbackfail
$LN2@pbackfail:

; 198  : 			{	// back up one position and store put-back character
; 199  : 			_Mysb::gbump(-1);

  000f1	ba ff ff ff ff	 mov	 edx, -1
  000f6	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z

; 200  : 			if (!_Traits::eq_int_type(_Traits::eof(), _Meta))

  00103	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00108	89 85 04 01 00
	00		 mov	 DWORD PTR $T3[rbp], eax
  0010e	48 8d 95 48 01
	00 00		 lea	 rdx, QWORD PTR _Meta$[rbp]
  00115	48 8d 8d 04 01
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  0011c	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  00121	0f b6 c0	 movzx	 eax, al
  00124	85 c0		 test	 eax, eax
  00126	75 28		 jne	 SHORT $LN5@pbackfail

; 201  : 				*_Mysb::gptr() = _Traits::to_char_type(_Meta);

  00128	48 8d 8d 48 01
	00 00		 lea	 rcx, QWORD PTR _Meta$[rbp]
  0012f	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADAEBH@Z ; std::char_traits<char>::to_char_type
  00134	88 85 14 01 00
	00		 mov	 BYTE PTR tv155[rbp], al
  0013a	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00141	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00147	0f b6 8d 14 01
	00 00		 movzx	 ecx, BYTE PTR tv155[rbp]
  0014e	88 08		 mov	 BYTE PTR [rax], cl
$LN5@pbackfail:

; 202  : 			return (_Traits::not_eof(_Meta));

  00150	48 8d 8d 48 01
	00 00		 lea	 rcx, QWORD PTR _Meta$[rbp]
  00157	e8 00 00 00 00	 call	 ?not_eof@?$char_traits@D@std@@SAHAEBH@Z ; std::char_traits<char>::not_eof
$LN3@pbackfail:
$LN1@pbackfail:

; 203  : 			}
; 204  : 		}

  0015c	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  00163	5f		 pop	 rdi
  00164	5d		 pop	 rbp
  00165	c3		 ret	 0
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\sstream
;	COMDAT ?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z
_TEXT	SEGMENT
_Oldsize$1 = 8
_Newsize$2 = 40
_Inc$3 = 72
_Newptr$4 = 104
_Oldptr$5 = 136
$T6 = 356
tv334 = 372
tv309 = 372
tv307 = 376
tv265 = 376
tv199 = 376
tv195 = 376
tv159 = 376
tv136 = 376
tv274 = 384
tv187 = 384
this$ = 432
_Meta$ = 440
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow, COMDAT

; 120  : 		{	// put an element to stream

$LN24:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec b8 01
	00 00		 sub	 rsp, 440		; 000001b8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 6e 00 00 00	 mov	 ecx, 110		; 0000006eH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+472]

; 121  : 		if (_Mystate & _Constant)

  0002e	48 8b 85 b0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00038	83 e0 02	 and	 eax, 2
  0003b	85 c0		 test	 eax, eax
  0003d	74 0c		 je	 SHORT $LN4@overflow

; 122  : 			return (_Traits::eof());	// array nonmutable, fail

  0003f	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00044	e9 a1 04 00 00	 jmp	 $LN1@overflow
  00049	eb 36		 jmp	 SHORT $LN5@overflow
$LN4@overflow:

; 123  : 		else if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  0004b	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00050	89 85 64 01 00
	00		 mov	 DWORD PTR $T6[rbp], eax
  00056	48 8d 95 b8 01
	00 00		 lea	 rdx, QWORD PTR _Meta$[rbp]
  0005d	48 8d 8d 64 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  00064	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  00069	0f b6 c0	 movzx	 eax, al
  0006c	85 c0		 test	 eax, eax
  0006e	74 11		 je	 SHORT $LN6@overflow

; 124  : 			return (_Traits::not_eof(_Meta));	// EOF, return success code

  00070	48 8d 8d b8 01
	00 00		 lea	 rcx, QWORD PTR _Meta$[rbp]
  00077	e8 00 00 00 00	 call	 ?not_eof@?$char_traits@D@std@@SAHAEBH@Z ; std::char_traits<char>::not_eof
  0007c	e9 69 04 00 00	 jmp	 $LN1@overflow
$LN6@overflow:
$LN5@overflow:

; 125  : 
; 126  : 		if (_Mystate & _Append
; 127  : 			&& _Mysb::pptr() != 0 && _Mysb::pptr() < _Seekhigh)

  00081	48 8b 85 b0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00088	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0008b	83 e0 08	 and	 eax, 8
  0008e	85 c0		 test	 eax, eax
  00090	74 72		 je	 SHORT $LN7@overflow
  00092	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00099	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0009f	48 85 c0	 test	 rax, rax
  000a2	74 60		 je	 SHORT $LN7@overflow
  000a4	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000b1	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b8	48 3b 41 68	 cmp	 rax, QWORD PTR [rcx+104]
  000bc	73 46		 jae	 SHORT $LN7@overflow

; 128  : 			_Mysb::setp(_Mysb::pbase(), _Seekhigh, _Mysb::epptr());

  000be	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000cb	48 89 85 78 01
	00 00		 mov	 QWORD PTR tv136[rbp], rax
  000d2	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000df	48 8b 8d 78 01
	00 00		 mov	 rcx, QWORD PTR tv136[rbp]
  000e6	4c 8b c9	 mov	 r9, rcx
  000e9	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f0	4c 8b 41 68	 mov	 r8, QWORD PTR [rcx+104]
  000f4	48 8b d0	 mov	 rdx, rax
  000f7	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z
$LN7@overflow:

; 129  : 
; 130  : 		if (_Mysb::pptr() != 0
; 131  : 			&& _Mysb::pptr() < _Mysb::epptr())

  00104	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0010b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00111	48 85 c0	 test	 rax, rax
  00114	74 65		 je	 SHORT $LN8@overflow
  00116	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00123	48 89 85 78 01
	00 00		 mov	 QWORD PTR tv159[rbp], rax
  0012a	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00131	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00137	48 8b 8d 78 01
	00 00		 mov	 rcx, QWORD PTR tv159[rbp]
  0013e	48 3b c8	 cmp	 rcx, rax
  00141	73 38		 jae	 SHORT $LN8@overflow

; 132  : 			{	// room in buffer, store it
; 133  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  00143	48 8d 8d b8 01
	00 00		 lea	 rcx, QWORD PTR _Meta$[rbp]
  0014a	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADAEBH@Z ; std::char_traits<char>::to_char_type
  0014f	88 85 74 01 00
	00		 mov	 BYTE PTR tv334[rbp], al
  00155	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0015c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ
  00162	0f b6 8d 74 01
	00 00		 movzx	 ecx, BYTE PTR tv334[rbp]
  00169	88 08		 mov	 BYTE PTR [rax], cl

; 134  : 			return (_Meta);

  0016b	8b 85 b8 01 00
	00		 mov	 eax, DWORD PTR _Meta$[rbp]
  00171	e9 74 03 00 00	 jmp	 $LN1@overflow

; 135  : 			}
; 136  : 		else

  00176	e9 6f 03 00 00	 jmp	 $LN9@overflow
$LN8@overflow:

; 137  : 			{	// grow buffer and store element
; 138  : 			size_t _Oldsize = _Mysb::pptr() == 0

  0017b	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00182	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00188	48 85 c0	 test	 rax, rax
  0018b	75 0d		 jne	 SHORT $LN20@overflow
  0018d	48 c7 85 78 01
	00 00 00 00 00
	00		 mov	 QWORD PTR tv195[rbp], 0
  00198	eb 35		 jmp	 SHORT $LN21@overflow
$LN20@overflow:
  0019a	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  001a7	48 89 85 80 01
	00 00		 mov	 QWORD PTR tv187[rbp], rax
  001ae	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  001bb	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR tv187[rbp]
  001c2	48 2b c8	 sub	 rcx, rax
  001c5	48 8b c1	 mov	 rax, rcx
  001c8	48 89 85 78 01
	00 00		 mov	 QWORD PTR tv195[rbp], rax
$LN21@overflow:
  001cf	48 8b 85 78 01
	00 00		 mov	 rax, QWORD PTR tv195[rbp]
  001d6	48 89 45 08	 mov	 QWORD PTR _Oldsize$1[rbp], rax

; 139  : 				? 0 : _Mysb::epptr() - _Mysb::eback();
; 140  : 			size_t _Newsize = _Oldsize;

  001da	48 8b 45 08	 mov	 rax, QWORD PTR _Oldsize$1[rbp]
  001de	48 89 45 28	 mov	 QWORD PTR _Newsize$2[rbp], rax

; 141  : 			size_t _Inc = _Newsize / 2 < _MINSIZE

  001e2	33 d2		 xor	 edx, edx
  001e4	48 8b 45 28	 mov	 rax, QWORD PTR _Newsize$2[rbp]
  001e8	b9 02 00 00 00	 mov	 ecx, 2
  001ed	48 f7 f1	 div	 rcx
  001f0	48 83 f8 20	 cmp	 rax, 32			; 00000020H
  001f4	73 0d		 jae	 SHORT $LN22@overflow
  001f6	48 c7 85 78 01
	00 00 20 00 00
	00		 mov	 QWORD PTR tv199[rbp], 32 ; 00000020H
  00201	eb 15		 jmp	 SHORT $LN23@overflow
$LN22@overflow:
  00203	33 d2		 xor	 edx, edx
  00205	48 8b 45 28	 mov	 rax, QWORD PTR _Newsize$2[rbp]
  00209	b9 02 00 00 00	 mov	 ecx, 2
  0020e	48 f7 f1	 div	 rcx
  00211	48 89 85 78 01
	00 00		 mov	 QWORD PTR tv199[rbp], rax
$LN23@overflow:
  00218	48 8b 85 78 01
	00 00		 mov	 rax, QWORD PTR tv199[rbp]
  0021f	48 89 45 48	 mov	 QWORD PTR _Inc$3[rbp], rax
$LN2@overflow:

; 142  : 				? _MINSIZE : _Newsize / 2;	// grow by 50 per cent
; 143  : 
; 144  : 			while (0 < _Inc && INT_MAX - _Inc < _Newsize)

  00223	48 83 7d 48 00	 cmp	 QWORD PTR _Inc$3[rbp], 0
  00228	76 23		 jbe	 SHORT $LN3@overflow
  0022a	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0022f	48 2b 45 48	 sub	 rax, QWORD PTR _Inc$3[rbp]
  00233	48 3b 45 28	 cmp	 rax, QWORD PTR _Newsize$2[rbp]
  00237	73 14		 jae	 SHORT $LN3@overflow

; 145  : 				_Inc /= 2;	// increment causes overflow, halve it

  00239	33 d2		 xor	 edx, edx
  0023b	48 8b 45 48	 mov	 rax, QWORD PTR _Inc$3[rbp]
  0023f	b9 02 00 00 00	 mov	 ecx, 2
  00244	48 f7 f1	 div	 rcx
  00247	48 89 45 48	 mov	 QWORD PTR _Inc$3[rbp], rax
  0024b	eb d6		 jmp	 SHORT $LN2@overflow
$LN3@overflow:

; 146  : 			if (_Inc == 0)

  0024d	48 83 7d 48 00	 cmp	 QWORD PTR _Inc$3[rbp], 0
  00252	75 0a		 jne	 SHORT $LN10@overflow

; 147  : 				return (_Traits::eof());	// buffer can't grow, fail

  00254	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00259	e9 8c 02 00 00	 jmp	 $LN1@overflow
$LN10@overflow:

; 148  : 
; 149  : 			_Newsize += _Inc;

  0025e	48 8b 45 48	 mov	 rax, QWORD PTR _Inc$3[rbp]
  00262	48 8b 4d 28	 mov	 rcx, QWORD PTR _Newsize$2[rbp]
  00266	48 03 c8	 add	 rcx, rax
  00269	48 8b c1	 mov	 rax, rcx
  0026c	48 89 45 28	 mov	 QWORD PTR _Newsize$2[rbp], rax

; 150  : 
; 151  : 			_Elem *_Newptr = _Unfancy(_Al.allocate(_Newsize));

  00270	48 8b 85 b0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00277	48 83 c0 74	 add	 rax, 116		; 00000074H
  0027b	48 8b 55 28	 mov	 rdx, QWORD PTR _Newsize$2[rbp]
  0027f	48 8b c8	 mov	 rcx, rax
  00282	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ; std::allocator<char>::allocate
  00287	48 8b c8	 mov	 rcx, rax
  0028a	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  0028f	48 89 45 68	 mov	 QWORD PTR _Newptr$4[rbp], rax

; 152  : 			_Elem *_Oldptr = _Mysb::eback();

  00293	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0029a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  002a0	48 89 85 88 00
	00 00		 mov	 QWORD PTR _Oldptr$5[rbp], rax

; 153  : 
; 154  : 			if (0 < _Oldsize)

  002a7	48 83 7d 08 00	 cmp	 QWORD PTR _Oldsize$1[rbp], 0
  002ac	76 14		 jbe	 SHORT $LN11@overflow

; 155  : 				_Traits::copy(_Newptr, _Oldptr, _Oldsize);

  002ae	4c 8b 45 08	 mov	 r8, QWORD PTR _Oldsize$1[rbp]
  002b2	48 8b 95 88 00
	00 00		 mov	 rdx, QWORD PTR _Oldptr$5[rbp]
  002b9	48 8b 4d 68	 mov	 rcx, QWORD PTR _Newptr$4[rbp]
  002bd	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z ; std::char_traits<char>::copy
$LN11@overflow:

; 156  : 
; 157  : 			if (_Oldsize == 0)

  002c2	48 83 7d 08 00	 cmp	 QWORD PTR _Oldsize$1[rbp], 0
  002c7	0f 85 80 00 00
	00		 jne	 $LN12@overflow

; 158  : 				{	// first growth, set up pointers
; 159  : 				_Seekhigh = _Newptr;

  002cd	48 8b 85 b0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  002d4	48 8b 4d 68	 mov	 rcx, QWORD PTR _Newptr$4[rbp]
  002d8	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 160  : 				_Mysb::setp(_Newptr, _Newptr + _Newsize);

  002dc	48 8b 45 28	 mov	 rax, QWORD PTR _Newsize$2[rbp]
  002e0	48 8b 4d 68	 mov	 rcx, QWORD PTR _Newptr$4[rbp]
  002e4	48 03 c8	 add	 rcx, rax
  002e7	48 8b c1	 mov	 rax, rcx
  002ea	4c 8b c0	 mov	 r8, rax
  002ed	48 8b 55 68	 mov	 rdx, QWORD PTR _Newptr$4[rbp]
  002f1	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD0@Z

; 161  : 				if (_Mystate & _Noread)

  002fe	48 8b 85 b0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00305	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00308	83 e0 04	 and	 eax, 4
  0030b	85 c0		 test	 eax, eax
  0030d	74 1a		 je	 SHORT $LN14@overflow

; 162  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  0030f	4c 8b 4d 68	 mov	 r9, QWORD PTR _Newptr$4[rbp]
  00313	45 33 c0	 xor	 r8d, r8d
  00316	48 8b 55 68	 mov	 rdx, QWORD PTR _Newptr$4[rbp]
  0031a	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00321	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z

; 163  : 				else

  00327	eb 1f		 jmp	 SHORT $LN15@overflow
$LN14@overflow:

; 164  : 					_Mysb::setg(_Newptr, _Newptr, _Newptr + 1);

  00329	48 8b 45 68	 mov	 rax, QWORD PTR _Newptr$4[rbp]
  0032d	48 ff c0	 inc	 rax
  00330	4c 8b c8	 mov	 r9, rax
  00333	4c 8b 45 68	 mov	 r8, QWORD PTR _Newptr$4[rbp]
  00337	48 8b 55 68	 mov	 rdx, QWORD PTR _Newptr$4[rbp]
  0033b	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00342	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z
$LN15@overflow:

; 165  : 				}
; 166  : 			else

  00348	e9 24 01 00 00	 jmp	 $LN13@overflow
$LN12@overflow:

; 167  : 				{	// not first growth, adjust pointers
; 168  : 				_Seekhigh = _Newptr + (_Seekhigh - _Oldptr);

  0034d	48 8b 85 b0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00354	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _Oldptr$5[rbp]
  0035b	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0035f	48 2b c1	 sub	 rax, rcx
  00362	48 8b 4d 68	 mov	 rcx, QWORD PTR _Newptr$4[rbp]
  00366	48 03 c8	 add	 rcx, rax
  00369	48 8b c1	 mov	 rax, rcx
  0036c	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00373	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 169  : 				_Mysb::setp(_Newptr + (_Mysb::pbase() - _Oldptr),

  00377	48 8b 45 28	 mov	 rax, QWORD PTR _Newsize$2[rbp]
  0037b	48 8b 4d 68	 mov	 rcx, QWORD PTR _Newptr$4[rbp]
  0037f	48 03 c8	 add	 rcx, rax
  00382	48 8b c1	 mov	 rax, rcx
  00385	48 89 85 78 01
	00 00		 mov	 QWORD PTR tv265[rbp], rax
  0038c	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00393	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00399	48 2b 85 88 00
	00 00		 sub	 rax, QWORD PTR _Oldptr$5[rbp]
  003a0	48 8b 4d 68	 mov	 rcx, QWORD PTR _Newptr$4[rbp]
  003a4	48 03 c8	 add	 rcx, rax
  003a7	48 8b c1	 mov	 rax, rcx
  003aa	48 89 85 80 01
	00 00		 mov	 QWORD PTR tv274[rbp], rax
  003b1	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  003be	48 2b 85 88 00
	00 00		 sub	 rax, QWORD PTR _Oldptr$5[rbp]
  003c5	48 8b 4d 68	 mov	 rcx, QWORD PTR _Newptr$4[rbp]
  003c9	48 03 c8	 add	 rcx, rax
  003cc	48 8b c1	 mov	 rax, rcx
  003cf	48 8b 8d 78 01
	00 00		 mov	 rcx, QWORD PTR tv265[rbp]
  003d6	4c 8b c9	 mov	 r9, rcx
  003d9	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR tv274[rbp]
  003e0	4c 8b c1	 mov	 r8, rcx
  003e3	48 8b d0	 mov	 rdx, rax
  003e6	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z

; 170  : 					_Newptr + (_Mysb::pptr() - _Oldptr),
; 171  : 					_Newptr + _Newsize);
; 172  : 				if (_Mystate & _Noread)

  003f3	48 8b 85 b0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  003fa	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003fd	83 e0 04	 and	 eax, 4
  00400	85 c0		 test	 eax, eax
  00402	74 1a		 je	 SHORT $LN16@overflow

; 173  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  00404	4c 8b 4d 68	 mov	 r9, QWORD PTR _Newptr$4[rbp]
  00408	45 33 c0	 xor	 r8d, r8d
  0040b	48 8b 55 68	 mov	 rdx, QWORD PTR _Newptr$4[rbp]
  0040f	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00416	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z

; 174  : 				else

  0041c	eb 53		 jmp	 SHORT $LN17@overflow
$LN16@overflow:

; 175  : 					_Mysb::setg(_Newptr,

  0041e	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00425	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0042b	48 ff c0	 inc	 rax
  0042e	48 89 85 78 01
	00 00		 mov	 QWORD PTR tv307[rbp], rax
  00435	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0043c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00442	48 2b 85 88 00
	00 00		 sub	 rax, QWORD PTR _Oldptr$5[rbp]
  00449	48 8b 4d 68	 mov	 rcx, QWORD PTR _Newptr$4[rbp]
  0044d	48 03 c8	 add	 rcx, rax
  00450	48 8b c1	 mov	 rax, rcx
  00453	48 8b 8d 78 01
	00 00		 mov	 rcx, QWORD PTR tv307[rbp]
  0045a	4c 8b c9	 mov	 r9, rcx
  0045d	4c 8b c0	 mov	 r8, rax
  00460	48 8b 55 68	 mov	 rdx, QWORD PTR _Newptr$4[rbp]
  00464	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0046b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z
$LN17@overflow:
$LN13@overflow:

; 176  : 						_Newptr + (_Mysb::gptr() - _Oldptr),
; 177  : 						_Mysb::pptr() + 1);
; 178  : 				}
; 179  : 
; 180  : 			if (_Mystate & _Allocated)

  00471	48 8b 85 b0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00478	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0047b	83 e0 01	 and	 eax, 1
  0047e	85 c0		 test	 eax, eax
  00480	74 23		 je	 SHORT $LN18@overflow

; 181  : 				_Al.deallocate(pointer_traits<_Ptrty>::pointer_to(*_Oldptr), _Oldsize);

  00482	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _Oldptr$5[rbp]
  00489	e8 00 00 00 00	 call	 ?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z ; std::pointer_traits<char * __ptr64>::pointer_to
  0048e	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00495	48 83 c1 74	 add	 rcx, 116		; 00000074H
  00499	4c 8b 45 08	 mov	 r8, QWORD PTR _Oldsize$1[rbp]
  0049d	48 8b d0	 mov	 rdx, rax
  004a0	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate
$LN18@overflow:

; 182  : 			_Mystate |= _Allocated;

  004a5	48 8b 85 b0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  004ac	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004af	83 c8 01	 or	 eax, 1
  004b2	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004b9	89 41 70	 mov	 DWORD PTR [rcx+112], eax

; 183  : 
; 184  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  004bc	48 8d 8d b8 01
	00 00		 lea	 rcx, QWORD PTR _Meta$[rbp]
  004c3	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADAEBH@Z ; std::char_traits<char>::to_char_type
  004c8	88 85 74 01 00
	00		 mov	 BYTE PTR tv309[rbp], al
  004ce	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  004d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ
  004db	0f b6 8d 74 01
	00 00		 movzx	 ecx, BYTE PTR tv309[rbp]
  004e2	88 08		 mov	 BYTE PTR [rax], cl

; 185  : 			return (_Meta);

  004e4	8b 85 b8 01 00
	00		 mov	 eax, DWORD PTR _Meta$[rbp]
$LN9@overflow:
$LN1@overflow:

; 186  : 			}
; 187  : 		}

  004ea	48 8d a5 98 01
	00 00		 lea	 rsp, QWORD PTR [rbp+408]
  004f1	5f		 pop	 rdi
  004f2	5d		 pop	 rbp
  004f3	c3		 ret	 0
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\sstream
;	COMDAT ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
_Str$6 = 8
_Str$7 = 72
_Nul$8 = 136
$T9 = 388
tv161 = 408
tv91 = 408
tv168 = 416
tv130 = 416
__$ArrayPad$ = 424
this$ = 464
__$ReturnUdt$ = 472
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT

; 93   : 		{	// return string copy of character array

$LN14:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec d8 01
	00 00		 sub	 rsp, 472		; 000001d8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 76 00 00 00	 mov	 ecx, 118		; 00000076H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+504]
  0002f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00036	48 33 c5	 xor	 rax, rbp
  00039	48 89 85 a8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00040	c7 85 84 01 00
	00 00 00 00 00	 mov	 DWORD PTR $T9[rbp], 0

; 94   : 		if (!(_Mystate & _Constant) && _Mysb::pptr() != 0)

  0004a	48 8b 85 d0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00051	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00054	83 e0 02	 and	 eax, 2
  00057	85 c0		 test	 eax, eax
  00059	0f 85 d5 00 00
	00		 jne	 $LN2@str
  0005f	48 8b 8d d0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0006c	48 85 c0	 test	 rax, rax
  0006f	0f 84 bf 00 00
	00		 je	 $LN2@str

; 95   : 			{	// writable, make string from write buffer
; 96   : 			_Mystr _Str(_Mysb::pbase(), (_Seekhigh < _Mysb::pptr()

  00075	48 8b 8d d0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00082	48 8b 8d d0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00089	48 39 41 68	 cmp	 QWORD PTR [rcx+104], rax
  0008d	73 16		 jae	 SHORT $LN7@str
  0008f	48 8b 8d d0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00096	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0009c	48 89 85 98 01
	00 00		 mov	 QWORD PTR tv91[rbp], rax
  000a3	eb 12		 jmp	 SHORT $LN8@str
$LN7@str:
  000a5	48 8b 85 d0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ac	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000b0	48 89 85 98 01
	00 00		 mov	 QWORD PTR tv91[rbp], rax
$LN8@str:
  000b7	48 8b 8d d0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000c4	48 8b 8d 98 01
	00 00		 mov	 rcx, QWORD PTR tv91[rbp]
  000cb	48 2b c8	 sub	 rcx, rax
  000ce	48 8b c1	 mov	 rax, rcx
  000d1	48 89 85 a0 01
	00 00		 mov	 QWORD PTR tv130[rbp], rax
  000d8	48 8b 8d d0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000e5	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR tv130[rbp]
  000ec	4c 8b c1	 mov	 r8, rcx
  000ef	48 8b d0	 mov	 rdx, rax
  000f2	48 8d 4d 08	 lea	 rcx, QWORD PTR _Str$6[rbp]
  000f6	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 97   : 				? _Mysb::pptr() : _Seekhigh) - _Mysb::pbase());
; 98   : 			return (_Str);

  000fb	48 8d 55 08	 lea	 rdx, QWORD PTR _Str$6[rbp]
  000ff	48 8b 8d d8 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00106	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0010b	8b 85 84 01 00
	00		 mov	 eax, DWORD PTR $T9[rbp]
  00111	83 c8 01	 or	 eax, 1
  00114	89 85 84 01 00
	00		 mov	 DWORD PTR $T9[rbp], eax
  0011a	48 8d 4d 08	 lea	 rcx, QWORD PTR _Str$6[rbp]
  0011e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00123	48 8b 85 d8 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  0012a	e9 fc 00 00 00	 jmp	 $LN1@str
  0012f	e9 f7 00 00 00	 jmp	 $LN1@str
$LN2@str:

; 99   : 			}
; 100  : 		else if (!(_Mystate & _Noread) && _Mysb::gptr() != 0)

  00134	48 8b 85 d0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0013b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0013e	83 e0 04	 and	 eax, 4
  00141	85 c0		 test	 eax, eax
  00143	0f 85 a1 00 00
	00		 jne	 $LN4@str
  00149	48 8b 8d d0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00150	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00156	48 85 c0	 test	 rax, rax
  00159	0f 84 8b 00 00
	00		 je	 $LN4@str

; 101  : 			{	// readable, make string from read buffer
; 102  : 			_Mystr _Str(_Mysb::eback(), _Mysb::egptr() - _Mysb::eback());

  0015f	48 8b 8d d0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00166	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0016c	48 89 85 98 01
	00 00		 mov	 QWORD PTR tv161[rbp], rax
  00173	48 8b 8d d0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00180	48 8b 8d 98 01
	00 00		 mov	 rcx, QWORD PTR tv161[rbp]
  00187	48 2b c8	 sub	 rcx, rax
  0018a	48 8b c1	 mov	 rax, rcx
  0018d	48 89 85 a0 01
	00 00		 mov	 QWORD PTR tv168[rbp], rax
  00194	48 8b 8d d0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0019b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  001a1	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR tv168[rbp]
  001a8	4c 8b c1	 mov	 r8, rcx
  001ab	48 8b d0	 mov	 rdx, rax
  001ae	48 8d 4d 48	 lea	 rcx, QWORD PTR _Str$7[rbp]
  001b2	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 103  : 			return (_Str);

  001b7	48 8d 55 48	 lea	 rdx, QWORD PTR _Str$7[rbp]
  001bb	48 8b 8d d8 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  001c2	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  001c7	8b 85 84 01 00
	00		 mov	 eax, DWORD PTR $T9[rbp]
  001cd	83 c8 01	 or	 eax, 1
  001d0	89 85 84 01 00
	00		 mov	 DWORD PTR $T9[rbp], eax
  001d6	48 8d 4d 48	 lea	 rcx, QWORD PTR _Str$7[rbp]
  001da	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001df	48 8b 85 d8 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  001e6	eb 43		 jmp	 SHORT $LN1@str

; 104  : 			}
; 105  : 		else

  001e8	eb 41		 jmp	 SHORT $LN1@str
$LN4@str:

; 106  : 			{	// inaccessible, return empty string
; 107  : 			_Mystr _Nul;

  001ea	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR _Nul$8[rbp]
  001f1	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 108  : 			return (_Nul);

  001f6	48 8d 95 88 00
	00 00		 lea	 rdx, QWORD PTR _Nul$8[rbp]
  001fd	48 8b 8d d8 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00204	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00209	8b 85 84 01 00
	00		 mov	 eax, DWORD PTR $T9[rbp]
  0020f	83 c8 01	 or	 eax, 1
  00212	89 85 84 01 00
	00		 mov	 DWORD PTR $T9[rbp], eax
  00218	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR _Nul$8[rbp]
  0021f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00224	48 8b 85 d8 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
$LN1@str:

; 109  : 			}
; 110  : 		}

  0022b	48 8b f8	 mov	 rdi, rax
  0022e	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00232	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$rtcFrameData
  00239	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0023e	48 8b c7	 mov	 rax, rdi
  00241	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00248	48 33 cd	 xor	 rcx, rbp
  0024b	e8 00 00 00 00	 call	 __security_check_cookie
  00250	48 8d a5 b8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+440]
  00257	5f		 pop	 rdi
  00258	5d		 pop	 rbp
  00259	c3		 ret	 0
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\sstream
;	COMDAT ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 75   : 		{	// destroy the object

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00043	48 89 08	 mov	 QWORD PTR [rax], rcx

; 76   : 		_Tidy();

  00046	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004d	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00052	90		 npad	 1

; 77   : 		}

  00053	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
  00060	90		 npad	 1
  00061	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00068	5f		 pop	 rdi
  00069	5d		 pop	 rbp
  0006a	c3		 ret	 0
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\sstream
;	COMDAT ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
_Mode$ = 264
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 28   : 	explicit basic_stringbuf(ios_base::openmode _Mode =

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002e	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2

; 29   : 		ios_base::in | ios_base::out)
; 30   : 		{	// construct empty character buffer from mode

  00039	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00040	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAA@XZ
  00046	90		 npad	 1
  00047	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00055	48 89 08	 mov	 QWORD PTR [rax], rcx
  00058	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 83 c0 74	 add	 rax, 116		; 00000074H
  00063	48 8b c8	 mov	 rcx, rax
  00066	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QEAA@XZ ; std::allocator<char>::allocator<char>

; 31   : 		_Init(0, 0, _Getstate(_Mode));

  0006b	8b 95 08 01 00
	00		 mov	 edx, DWORD PTR _Mode$[rbp]
  00071	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00078	e8 00 00 00 00	 call	 ?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
  0007d	44 8b c8	 mov	 r9d, eax
  00080	45 33 c0	 xor	 r8d, r8d
  00083	33 d2		 xor	 edx, edx
  00085	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008c	e8 00 00 00 00	 call	 ?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXPEBD_KH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init
  00091	90		 npad	 1

; 32   : 		}

  00092	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00099	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000a0	5f		 pop	 rdi
  000a1	5d		 pop	 rbp
  000a2	c3		 ret	 0
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
_Mode$ = 264
?dtor$0@?0???0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA PROC ; `std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	5f		 pop	 rdi
  00026	5d		 pop	 rbp
  00027	c3		 ret	 0
?dtor$0@?0???0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA ENDP ; `std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
_Mode$ = 264
?dtor$0@?0???0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA PROC ; `std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	5f		 pop	 rdi
  00026	5d		 pop	 rbp
  00027	c3		 ret	 0
?dtor$0@?0???0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA ENDP ; `std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\sstream
;	COMDAT ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T1 = 196
this$ = 256
__$ReturnUdt$ = 264
?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT

; 646  : 		{	// return string copy of character array

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR $T1[rbp], 0

; 647  : 		return (_Stringbuffer.str());

  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	48 83 c0 18	 add	 rax, 24
  00044	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR __$ReturnUdt$[rbp]
  0004b	48 8b c8	 mov	 rcx, rax
  0004e	e8 00 00 00 00	 call	 ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
  00053	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  00059	83 c8 01	 or	 eax, 1
  0005c	89 85 c4 00 00
	00		 mov	 DWORD PTR $T1[rbp], eax
  00062	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 648  : 		}

  00069	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00070	5f		 pop	 rdi
  00071	5d		 pop	 rbp
  00072	c3		 ret	 0
?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\sstream
;	COMDAT ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 637  : 		{	// destroy the object

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8b 80 68 ff
	ff ff		 mov	 rax, QWORD PTR [rax-152]
  00038	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0003c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00043	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  0004a	48 89 94 01 68
	ff ff ff	 mov	 QWORD PTR [rcx+rax-152], rdx
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8b 80 68 ff
	ff ff		 mov	 rax, QWORD PTR [rax-152]
  00060	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00064	48 2d 98 00 00
	00		 sub	 rax, 152		; 00000098H
  0006a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00071	48 8b 89 68 ff
	ff ff		 mov	 rcx, QWORD PTR [rcx-152]
  00078	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  0007c	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00083	89 84 0a 64 ff
	ff ff		 mov	 DWORD PTR [rdx+rcx-156], eax

; 638  : 		}

  0008a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00091	48 2d 80 00 00
	00		 sub	 rax, 128		; 00000080H
  00097	48 8b c8	 mov	 rcx, rax
  0009a	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  0009f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a6	48 83 e8 78	 sub	 rax, 120		; 00000078H
  000aa	48 8b c8	 mov	 rcx, rax
  000ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UEAA@XZ
  000b3	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000ba	5f		 pop	 rdi
  000bb	5d		 pop	 rbp
  000bc	c3		 ret	 0
??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\sstream
;	COMDAT ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
_Mode$ = 296
$initVBases$ = 304
??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 593  : 		{	// construct empty character buffer

$LN8:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  00033	48 c7 85 e8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T2[rbp], -2
  0003e	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR $T1[rbp], 0
  00048	83 bd 30 01 00
	00 00		 cmp	 DWORD PTR $initVBases$[rbp], 0
  0004f	74 49		 je	 SHORT $LN2@basic_stri
  00051	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00058	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
  0005f	48 89 08	 mov	 QWORD PTR [rax], rcx
  00062	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00069	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
  00070	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
  00074	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007b	48 05 98 00 00
	00		 add	 rax, 152		; 00000098H
  00081	48 8b c8	 mov	 rcx, rax
  00084	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IEAA@XZ
  0008a	90		 npad	 1
  0008b	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  00091	83 c8 01	 or	 eax, 1
  00094	89 85 c4 00 00
	00		 mov	 DWORD PTR $T1[rbp], eax
$LN2@basic_stri:

; 591  : 		: _Mybase(&_Stringbuffer),

  0009a	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a1	48 83 c0 18	 add	 rax, 24
  000a5	45 33 c0	 xor	 r8d, r8d
  000a8	48 8b d0	 mov	 rdx, rax
  000ab	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
  000b8	90		 npad	 1

; 593  : 		{	// construct empty character buffer

  000b9	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c3	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000c7	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  000d5	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
  000d9	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000e0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e3	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000e7	48 2d 98 00 00
	00		 sub	 rax, 152		; 00000098H
  000ed	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000f7	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  000fb	48 8b 95 20 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00102	89 44 0a fc	 mov	 DWORD PTR [rdx+rcx-4], eax

; 592  : 			_Stringbuffer(_Mode)

  00106	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0010d	48 83 c0 18	 add	 rax, 24
  00111	8b 95 28 01 00
	00		 mov	 edx, DWORD PTR _Mode$[rbp]
  00117	48 8b c8	 mov	 rcx, rax
  0011a	e8 00 00 00 00	 call	 ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  0011f	90		 npad	 1

; 594  : 		}

  00120	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00127	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0012e	5f		 pop	 rdi
  0012f	5d		 pop	 rbp
  00130	c3		 ret	 0
??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
_Mode$ = 296
$initVBases$ = 304
?dtor$0@?0???0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA PROC ; `std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  0001a	83 e0 01	 and	 eax, 1
  0001d	85 c0		 test	 eax, eax
  0001f	74 1b		 je	 SHORT $LN5@dtor$0
  00021	83 a5 c4 00 00
	00 fe		 and	 DWORD PTR $T1[rbp], -2
  00028	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002f	48 81 c1 98 00
	00 00		 add	 rcx, 152		; 00000098H
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ
$LN5@dtor$0:
  0003c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?dtor$0@?0???0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA ENDP ; `std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
$T1 = 196
$T2 = 232
this$ = 288
_Mode$ = 296
$initVBases$ = 304
?dtor$1@?0???0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA PROC ; `std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
  00043	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00048	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0004d	55		 push	 rbp
  0004e	57		 push	 rdi
  0004f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00053	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00057	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005e	48 83 c1 20	 add	 rcx, 32			; 00000020H
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UEAA@XZ
  00068	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006c	5f		 pop	 rdi
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
?dtor$1@?0???0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA ENDP ; `std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
_Mode$ = 296
$initVBases$ = 304
?dtor$0@?0???0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA PROC ; `std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  0001a	83 e0 01	 and	 eax, 1
  0001d	85 c0		 test	 eax, eax
  0001f	74 1b		 je	 SHORT $LN5@dtor$0
  00021	83 a5 c4 00 00
	00 fe		 and	 DWORD PTR $T1[rbp], -2
  00028	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002f	48 81 c1 98 00
	00 00		 add	 rcx, 152		; 00000098H
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ
$LN5@dtor$0:
  0003c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?dtor$0@?0???0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA ENDP ; `std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
_Mode$ = 296
$initVBases$ = 304
?dtor$1@?0???0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA PROC ; `std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
  00043	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00048	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0004d	55		 push	 rbp
  0004e	57		 push	 rdi
  0004f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00053	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00057	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005e	48 83 c1 20	 add	 rcx, 32			; 00000020H
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UEAA@XZ
  00068	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006c	5f		 pop	 rdi
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
?dtor$1@?0???0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA ENDP ; `std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ??$?RVrandom_device@std@@@?$uniform_int@H@std@@QEBAHAEAVrandom_device@1@@Z
_TEXT	SEGMENT
this$ = 224
_Eng$ = 232
??$?RVrandom_device@std@@@?$uniform_int@H@std@@QEBAHAEAVrandom_device@1@@Z PROC ; std::uniform_int<int>::operator()<std::random_device>, COMDAT

; 2311 : 		{	// return next value

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 2312 : 		return (_Eval(_Eng, _Par._Min, _Par._Max));

  0002f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	44 8b 48 04	 mov	 r9d, DWORD PTR [rax+4]
  0003a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00041	44 8b 00	 mov	 r8d, DWORD PTR [rax]
  00044	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Eng$[rbp]
  0004b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00052	e8 00 00 00 00	 call	 ??$_Eval@Vrandom_device@std@@@?$uniform_int@H@std@@AEBAHAEAVrandom_device@1@HH@Z ; std::uniform_int<int>::_Eval<std::random_device>

; 2313 : 		}

  00057	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005e	5f		 pop	 rdi
  0005f	5d		 pop	 rbp
  00060	c3		 ret	 0
??$?RVrandom_device@std@@@?$uniform_int@H@std@@QEBAHAEAVrandom_device@1@@Z ENDP ; std::uniform_int<int>::operator()<std::random_device>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ??0?$uniform_int_distribution@H@std@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 224
_Min0$ = 232
_Max0$ = 240
??0?$uniform_int_distribution@H@std@@QEAA@HH@Z PROC	; std::uniform_int_distribution<int>::uniform_int_distribution<int>, COMDAT

; 2444 : 		{	// construct from parameters

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 2443 : 		: _Mybase(_Min0, _Max0)

  00033	44 8b 85 f0 00
	00 00		 mov	 r8d, DWORD PTR _Max0$[rbp]
  0003a	8b 95 e8 00 00
	00		 mov	 edx, DWORD PTR _Min0$[rbp]
  00040	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00047	e8 00 00 00 00	 call	 ??0?$uniform_int@H@std@@QEAA@HH@Z ; std::uniform_int<int>::uniform_int<int>

; 2445 : 		}

  0004c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00053	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005a	5f		 pop	 rdi
  0005b	5d		 pop	 rbp
  0005c	c3		 ret	 0
??0?$uniform_int_distribution@H@std@@QEAA@HH@Z ENDP	; std::uniform_int_distribution<int>::uniform_int_distribution<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ?_Init@param_type@?$uniform_int@H@std@@QEAAXHH@Z
_TEXT	SEGMENT
this$ = 224
_Min0$ = 232
_Max0$ = 240
?_Init@param_type@?$uniform_int@H@std@@QEAAXHH@Z PROC	; std::uniform_int<int>::param_type::_Init, COMDAT

; 2253 : 			{	// set internal state

$LN5:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00017	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 2254 : 			_RNG_ASSERT(_Min0 <= _Max0,

  00033	8b 85 f0 00 00
	00		 mov	 eax, DWORD PTR _Max0$[rbp]
  00039	39 85 e8 00 00
	00		 cmp	 DWORD PTR _Min0$[rbp], eax
  0003f	7f 02		 jg	 SHORT $LN3@Init
  00041	eb 43		 jmp	 SHORT $LN4@Init
$LN3@Init:
  00043	41 b8 cf 08 00
	00		 mov	 r8d, 2255		; 000008cfH
  00049	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1NA@LJCFENMG@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00050	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@PKOPLGBP@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAi?$AAn?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAm?$AAa?$AAx?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?5?$AAf?$AAo@
  00057	e8 00 00 00 00	 call	 ?_Debug_message@std@@YAXPEB_W0I@Z ; std::_Debug_message
  0005c	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00065	41 b9 cf 08 00
	00		 mov	 r9d, 2255		; 000008cfH
  0006b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NA@LJCFENMG@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FC@FNLBOEA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAu?$AAn?$AAi?$AAf?$AAo?$AAr?$AAm?$AA_?$AAi?$AAn?$AAt?$AA?$DM?$AAi?$AAn?$AAt?$AA?$DO?$AA?3?$AA?3?$AAp?$AAa?$AAr?$AAa?$AAm?$AA_?$AAt?$AAy?$AAp@
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GA@FJHEAOJP@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAi?$AAn?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAm?$AAa?$AAx?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?5?$AAf@
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
$LN4@Init:

; 2255 : 				"invalid min and max arguments for uniform_int");
; 2256 : 			_Min = _Min0;

  00086	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008d	8b 8d e8 00 00
	00		 mov	 ecx, DWORD PTR _Min0$[rbp]
  00093	89 08		 mov	 DWORD PTR [rax], ecx

; 2257 : 			_Max = _Max0;

  00095	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009c	8b 8d f0 00 00
	00		 mov	 ecx, DWORD PTR _Max0$[rbp]
  000a2	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 2258 : 			}

  000a5	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000ac	5f		 pop	 rdi
  000ad	5d		 pop	 rbp
  000ae	c3		 ret	 0
?_Init@param_type@?$uniform_int@H@std@@QEAAXHH@Z ENDP	; std::uniform_int<int>::param_type::_Init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ??0param_type@?$uniform_int@H@std@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 224
_Min0$ = 232
_Max0$ = 240
??0param_type@?$uniform_int@H@std@@QEAA@HH@Z PROC	; std::uniform_int<int>::param_type::param_type, COMDAT

; 2227 : 		explicit param_type(result_type _Min0 = 0, result_type _Max0 = 9)

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 2228 : 			{	// construct from parameters
; 2229 : 			_Init(_Min0, _Max0);

  00033	44 8b 85 f0 00
	00 00		 mov	 r8d, DWORD PTR _Max0$[rbp]
  0003a	8b 95 e8 00 00
	00		 mov	 edx, DWORD PTR _Min0$[rbp]
  00040	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00047	e8 00 00 00 00	 call	 ?_Init@param_type@?$uniform_int@H@std@@QEAAXHH@Z ; std::uniform_int<int>::param_type::_Init

; 2230 : 			}

  0004c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00053	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005a	5f		 pop	 rdi
  0005b	5d		 pop	 rbp
  0005c	c3		 ret	 0
??0param_type@?$uniform_int@H@std@@QEAA@HH@Z ENDP	; std::uniform_int<int>::param_type::param_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ?_Adjust@?$uniform_int@H@std@@CAIIU?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_Adjuster$ = 4
_Uval$ = 256
__formal$ = 264
?_Adjust@?$uniform_int@H@std@@CAIIU?$integral_constant@_N$00@2@@Z PROC ; std::uniform_int<int>::_Adjust, COMDAT

; 2374 : 		{	// convert signed ranges to unsigned ranges and vice versa

$LN5:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	55		 push	 rbp
  00009	57		 push	 rdi
  0000a	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00011	48 8b ec	 mov	 rbp, rsp
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR [rsp+264]

; 2375 : 		const _Uty _Adjuster = (_Uty(-1) >> 1) + 1;	// 2^(N-1)

  0002a	c7 45 04 00 00
	00 80		 mov	 DWORD PTR _Adjuster$[rbp], -2147483648 ; 80000000H

; 2376 : 
; 2377 : 		if (_Uval < _Adjuster)

  00031	81 bd 00 01 00
	00 00 00 00 80	 cmp	 DWORD PTR _Uval$[rbp], -2147483648 ; 80000000H
  0003b	73 0f		 jae	 SHORT $LN2@Adjust

; 2378 : 			return (_Uval + _Adjuster);

  0003d	8b 85 00 01 00
	00		 mov	 eax, DWORD PTR _Uval$[rbp]
  00043	05 00 00 00 80	 add	 eax, -2147483648	; 80000000H
  00048	eb 0d		 jmp	 SHORT $LN1@Adjust

; 2379 : 		else

  0004a	eb 0b		 jmp	 SHORT $LN3@Adjust
$LN2@Adjust:

; 2380 : 			return (_Uval - _Adjuster);

  0004c	8b 85 00 01 00
	00		 mov	 eax, DWORD PTR _Uval$[rbp]
  00052	2d 00 00 00 80	 sub	 eax, -2147483648	; 80000000H
$LN3@Adjust:
$LN1@Adjust:

; 2381 : 		}

  00057	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005e	5f		 pop	 rdi
  0005f	5d		 pop	 rbp
  00060	c3		 ret	 0
?_Adjust@?$uniform_int@H@std@@CAIIU?$integral_constant@_N$00@2@@Z ENDP ; std::uniform_int<int>::_Adjust
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ?_Adjust@?$uniform_int@H@std@@CAII@Z
_TEXT	SEGMENT
$T1 = 228
_Uval$ = 288
?_Adjust@?$uniform_int@H@std@@CAII@Z PROC		; std::uniform_int<int>::_Adjust, COMDAT

; 2369 : 		{	// convert signed ranges to unsigned ranges and vice versa

$LN3:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8b fc	 mov	 rdi, rsp
  00015	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	8b 8c 24 48 01
	00 00		 mov	 ecx, DWORD PTR [rsp+328]

; 2370 : 		return (_Adjust(_Uval, is_signed<_Ty>()));

  00028	0f b6 95 e4 00
	00 00		 movzx	 edx, BYTE PTR $T1[rbp]
  0002f	8b 8d 20 01 00
	00		 mov	 ecx, DWORD PTR _Uval$[rbp]
  00035	e8 00 00 00 00	 call	 ?_Adjust@?$uniform_int@H@std@@CAIIU?$integral_constant@_N$00@2@@Z ; std::uniform_int<int>::_Adjust

; 2371 : 		}

  0003a	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?_Adjust@?$uniform_int@H@std@@CAII@Z ENDP		; std::uniform_int<int>::_Adjust
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ??0?$uniform_int@H@std@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 224
_Min0$ = 232
_Max0$ = 240
??0?$uniform_int@H@std@@QEAA@HH@Z PROC			; std::uniform_int<int>::uniform_int<int>, COMDAT

; 2267 : 		{	// construct from parameters

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 2266 : 		: _Par(_Min0, _Max0)

  00033	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003a	44 8b 85 f0 00
	00 00		 mov	 r8d, DWORD PTR _Max0$[rbp]
  00041	8b 95 e8 00 00
	00		 mov	 edx, DWORD PTR _Min0$[rbp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	e8 00 00 00 00	 call	 ??0param_type@?$uniform_int@H@std@@QEAA@HH@Z ; std::uniform_int<int>::param_type::param_type

; 2268 : 		}

  0004f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00056	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005d	5f		 pop	 rdi
  0005e	5d		 pop	 rbp
  0005f	c3		 ret	 0
??0?$uniform_int@H@std@@QEAA@HH@Z ENDP			; std::uniform_int<int>::uniform_int<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ??0?$mersenne_twister_engine@_K$0EA@$0BDI@$0JM@$0BP@$0?EKPNJAKFFGJJOGBH@$0BN@$0FFFFFFFFFFFFFFFF@$0BB@$0HBNGHPPPONKGAAAA@$0CF@$0?IBBCAAAAAAAAA@$0CL@$0FIFBPECNEMJFHPCN@@std@@QEAA@_K@Z
_TEXT	SEGMENT
this$ = 224
_X0$ = 232
??0?$mersenne_twister_engine@_K$0EA@$0BDI@$0JM@$0BP@$0?EKPNJAKFFGJJOGBH@$0BN@$0FFFFFFFFFFFFFFFF@$0BB@$0HBNGHPPPONKGAAAA@$0CF@$0?IBBCAAAAAAAAA@$0CL@$0FIFBPECNEMJFHPCN@@std@@QEAA@_K@Z PROC ; std::mersenne_twister_engine<unsigned __int64,64,312,156,31,-5403634167711393303,29,6148914691236517205,17,8202884508482404352,37,-2270628950310912,43,6364136223846793005>::mersenne_twister_engine<unsigned __int64,64,312,156,31,-5403634167711393303,29,6148914691236517205,17,8202884508482404352,37,-2270628950310912,43,6364136223846793005>, COMDAT

; 1545 : 		{	// construct with default seed

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 1544 : 		: _Mybase(_X0, _Dx, _Fx)

  0002f	49 b9 2d 7f 95
	4c 2d f4 51 58	 mov	 r9, 6364136223846793005	; 5851f42d4c957f2dH
  00039	49 b8 55 55 55
	55 55 55 55 55	 mov	 r8, 6148914691236517205	; 5555555555555555H
  00043	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _X0$[rbp]
  0004a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00051	e8 00 00 00 00	 call	 ??0?$mersenne_twister@_K$0EA@$0BDI@$0JM@$0BP@$0?EKPNJAKFFGJJOGBH@$0BN@$0BB@$0HBNGHPPPONKGAAAA@$0CF@$0?IBBCAAAAAAAAA@$0CL@@std@@QEAA@_K00@Z ; std::mersenne_twister<unsigned __int64,64,312,156,31,-5403634167711393303,29,17,8202884508482404352,37,-2270628950310912,43>::mersenne_twister<unsigned __int64,64,312,156,31,-5403634167711393303,29,17,8202884508482404352,37,-2270628950310912,43>

; 1546 : 		}

  00056	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00064	5f		 pop	 rdi
  00065	5d		 pop	 rbp
  00066	c3		 ret	 0
??0?$mersenne_twister_engine@_K$0EA@$0BDI@$0JM@$0BP@$0?EKPNJAKFFGJJOGBH@$0BN@$0FFFFFFFFFFFFFFFF@$0BB@$0HBNGHPPPONKGAAAA@$0CF@$0?IBBCAAAAAAAAA@$0CL@$0FIFBPECNEMJFHPCN@@std@@QEAA@_K@Z ENDP ; std::mersenne_twister_engine<unsigned __int64,64,312,156,31,-5403634167711393303,29,6148914691236517205,17,8202884508482404352,37,-2270628950310912,43,6364136223846793005>::mersenne_twister_engine<unsigned __int64,64,312,156,31,-5403634167711393303,29,6148914691236517205,17,8202884508482404352,37,-2270628950310912,43,6364136223846793005>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ?seed@?$mersenne_twister@_K$0EA@$0BDI@$0JM@$0BP@$0?EKPNJAKFFGJJOGBH@$0BN@$0BB@$0HBNGHPPPONKGAAAA@$0CF@$0?IBBCAAAAAAAAA@$0CL@@std@@QEAAX_K0@Z
_TEXT	SEGMENT
_Prev$ = 8
_Ix$1 = 36
tv85 = 248
this$ = 288
_X0$ = 296
_Fx$ = 304
?seed@?$mersenne_twister@_K$0EA@$0BDI@$0JM@$0BP@$0?EKPNJAKFFGJJOGBH@$0BN@$0BB@$0HBNGHPPPONKGAAAA@$0CF@$0?IBBCAAAAAAAAA@$0CL@@std@@QEAAX_K0@Z PROC ; std::mersenne_twister<unsigned __int64,64,312,156,31,-5403634167711393303,29,17,8202884508482404352,37,-2270628950310912,43>::seed, COMDAT

; 1336 : 		{	// set initial values from specified value

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8b ec	 mov	 rbp, rsp
  0001b	48 8b fc	 mov	 rdi, rsp
  0001e	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 1337 : 		_Ty _Prev = this->_Ax[0] = _X0 & _WMSK;

  00032	b8 08 00 00 00	 mov	 eax, 8
  00037	48 6b c0 00	 imul	 rax, rax, 0
  0003b	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00042	48 8b 95 28 01
	00 00		 mov	 rdx, QWORD PTR _X0$[rbp]
  00049	48 89 54 01 08	 mov	 QWORD PTR [rcx+rax+8], rdx
  0004e	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR _X0$[rbp]
  00055	48 89 45 08	 mov	 QWORD PTR _Prev$[rbp], rax

; 1338 : 		for (int _Ix = 1; _Ix < _Nx; ++_Ix)

  00059	c7 45 24 01 00
	00 00		 mov	 DWORD PTR _Ix$1[rbp], 1
  00060	eb 08		 jmp	 SHORT $LN4@seed
$LN2@seed:
  00062	8b 45 24	 mov	 eax, DWORD PTR _Ix$1[rbp]
  00065	ff c0		 inc	 eax
  00067	89 45 24	 mov	 DWORD PTR _Ix$1[rbp], eax
$LN4@seed:
  0006a	81 7d 24 38 01
	00 00		 cmp	 DWORD PTR _Ix$1[rbp], 312 ; 00000138H
  00071	7d 52		 jge	 SHORT $LN3@seed

; 1339 : 			_Prev = this->_Ax[_Ix] =

  00073	48 63 45 24	 movsxd	 rax, DWORD PTR _Ix$1[rbp]
  00077	48 8b 4d 08	 mov	 rcx, QWORD PTR _Prev$[rbp]
  0007b	48 c1 e9 3e	 shr	 rcx, 62			; 0000003eH
  0007f	48 8b 55 08	 mov	 rdx, QWORD PTR _Prev$[rbp]
  00083	48 33 d1	 xor	 rdx, rcx
  00086	48 8b ca	 mov	 rcx, rdx
  00089	48 8b 95 30 01
	00 00		 mov	 rdx, QWORD PTR _Fx$[rbp]
  00090	48 0f af d1	 imul	 rdx, rcx
  00094	48 8b ca	 mov	 rcx, rdx
  00097	48 03 c1	 add	 rax, rcx
  0009a	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv85[rbp], rax
  000a1	48 63 45 24	 movsxd	 rax, DWORD PTR _Ix$1[rbp]
  000a5	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ac	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR tv85[rbp]
  000b3	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx
  000b8	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR tv85[rbp]
  000bf	48 89 45 08	 mov	 QWORD PTR _Prev$[rbp], rax
  000c3	eb 9d		 jmp	 SHORT $LN2@seed
$LN3@seed:

; 1340 : 				(_Ix + _Fx * (_Prev ^ (_Prev >> (_Wx - 2)))) & _WMSK;
; 1341 : 		this->_Idx = _Nx;

  000c5	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000cc	c7 00 38 01 00
	00		 mov	 DWORD PTR [rax], 312	; 00000138H

; 1342 : 		}

  000d2	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000d9	5f		 pop	 rdi
  000da	5d		 pop	 rbp
  000db	c3		 ret	 0
?seed@?$mersenne_twister@_K$0EA@$0BDI@$0JM@$0BP@$0?EKPNJAKFFGJJOGBH@$0BN@$0BB@$0HBNGHPPPONKGAAAA@$0CF@$0?IBBCAAAAAAAAA@$0CL@@std@@QEAAX_K0@Z ENDP ; std::mersenne_twister<unsigned __int64,64,312,156,31,-5403634167711393303,29,17,8202884508482404352,37,-2270628950310912,43>::seed
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ??0?$mersenne_twister@_K$0EA@$0BDI@$0JM@$0BP@$0?EKPNJAKFFGJJOGBH@$0BN@$0BB@$0HBNGHPPPONKGAAAA@$0CF@$0?IBBCAAAAAAAAA@$0CL@@std@@QEAA@_K00@Z
_TEXT	SEGMENT
this$ = 224
_X0$ = 232
_Dxarg$ = 240
_Fxarg$ = 248
??0?$mersenne_twister@_K$0EA@$0BDI@$0JM@$0BP@$0?EKPNJAKFFGJJOGBH@$0BN@$0BB@$0HBNGHPPPONKGAAAA@$0CF@$0?IBBCAAAAAAAAA@$0CL@@std@@QEAA@_K00@Z PROC ; std::mersenne_twister<unsigned __int64,64,312,156,31,-5403634167711393303,29,17,8202884508482404352,37,-2270628950310912,43>::mersenne_twister<unsigned __int64,64,312,156,31,-5403634167711393303,29,17,8202884508482404352,37,-2270628950310912,43>, COMDAT

; 1322 : 		{	// construct with specified seed

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 1321 : 		: _Dxval(_Dxarg)

  00039	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR _Dxarg$[rbp]
  00047	48 89 88 88 13
	00 00		 mov	 QWORD PTR [rax+5000], rcx

; 1323 : 		seed(_X0, _Fxarg);

  0004e	4c 8b 85 f8 00
	00 00		 mov	 r8, QWORD PTR _Fxarg$[rbp]
  00055	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _X0$[rbp]
  0005c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00063	e8 00 00 00 00	 call	 ?seed@?$mersenne_twister@_K$0EA@$0BDI@$0JM@$0BP@$0?EKPNJAKFFGJJOGBH@$0BN@$0BB@$0HBNGHPPPONKGAAAA@$0CF@$0?IBBCAAAAAAAAA@$0CL@@std@@QEAAX_K0@Z ; std::mersenne_twister<unsigned __int64,64,312,156,31,-5403634167711393303,29,17,8202884508482404352,37,-2270628950310912,43>::seed

; 1324 : 		}

  00068	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00076	5f		 pop	 rdi
  00077	5d		 pop	 rbp
  00078	c3		 ret	 0
??0?$mersenne_twister@_K$0EA@$0BDI@$0JM@$0BP@$0?EKPNJAKFFGJJOGBH@$0BN@$0BB@$0HBNGHPPPONKGAAAA@$0CF@$0?IBBCAAAAAAAAA@$0CL@@std@@QEAA@_K00@Z ENDP ; std::mersenne_twister<unsigned __int64,64,312,156,31,-5403634167711393303,29,17,8202884508482404352,37,-2270628950310912,43>::mersenne_twister<unsigned __int64,64,312,156,31,-5403634167711393303,29,17,8202884508482404352,37,-2270628950310912,43>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::~_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	e8 00 00 00 00	 call	 ??1_Iterator_base12@std@@QEAA@XZ ; std::_Iterator_base12::~_Iterator_base12
  00036	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003d	5f		 pop	 rdi
  0003e	5d		 pop	 rbp
  0003f	c3		 ret	 0
??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::~_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEBDXZ
_TEXT	SEGMENT
_Mycont$ = 8
_Contptr$ = 40
_Rawptr$ = 72
this$ = 320
??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEBDXZ PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*, COMDAT

; 1222 : 		{	// return designated object

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR [rsp+376]

; 1223 : #if _ITERATOR_DEBUG_LEVEL >= 1
; 1224 : 		_IDL_VERIFY(_Ptr, "cannot dereference value-initialized string iterator");

  0002a	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00036	75 43		 jne	 SHORT $LN2@operator
  00038	41 b8 c8 04 00
	00		 mov	 r8d, 1224		; 000004c8H
  0003e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1NC@MMDHPGIM@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GK@EPFFCEAH@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?9?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl@
  0004c	e8 00 00 00 00	 call	 ?_Debug_message@std@@YAXPEB_W0I@Z ; std::_Debug_message
  00051	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0005a	41 b9 c8 04 00
	00		 mov	 r9d, 1224		; 000004c8H
  00060	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NC@MMDHPGIM@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00067	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
  0006e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GO@PNALIMBD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?9?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa@
  00075	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
$LN2@operator:

; 1225 : 		const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());

  0007b	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00082	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00087	48 89 45 08	 mov	 QWORD PTR _Mycont$[rbp], rax

; 1226 : 		_IDL_VERIFY(_Mycont, "cannot dereference string iterator because the iterator was"

  0008b	48 83 7d 08 00	 cmp	 QWORD PTR _Mycont$[rbp], 0
  00090	75 43		 jne	 SHORT $LN3@operator
  00092	41 b8 cb 04 00
	00		 mov	 r8d, 1227		; 000004cbH
  00098	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1NC@MMDHPGIM@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0009f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BAE@HEEJFKO@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@
  000a6	e8 00 00 00 00	 call	 ?_Debug_message@std@@YAXPEB_W0I@Z ; std::_Debug_message
  000ab	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000b4	41 b9 cb 04 00
	00		 mov	 r9d, 1227		; 000004cbH
  000ba	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NC@MMDHPGIM@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  000c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
  000c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BAO@BGLBIONH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa@
  000cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
$LN3@operator:

; 1227 : 			" invalidated (e.g. reallocation occurred, or the string was destroyed)");
; 1228 : 		const auto _Contptr = _Mycont->_Myptr();

  000d5	48 8b 4d 08	 mov	 rcx, QWORD PTR _Mycont$[rbp]
  000d9	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  000de	48 89 45 28	 mov	 QWORD PTR _Contptr$[rbp], rax

; 1229 : 		const auto _Rawptr = _Unfancy(_Ptr);

  000e2	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000e9	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  000ed	e8 00 00 00 00	 call	 ??$_Unfancy@$$CBD@std@@YAPEBDPEBD@Z ; std::_Unfancy<char const >
  000f2	48 89 45 48	 mov	 QWORD PTR _Rawptr$[rbp], rax

; 1230 : 		_IDL_VERIFY(_Contptr <= _Rawptr && _Rawptr < _Contptr + _Mycont->_Mysize,

  000f6	48 8b 45 48	 mov	 rax, QWORD PTR _Rawptr$[rbp]
  000fa	48 39 45 28	 cmp	 QWORD PTR _Contptr$[rbp], rax
  000fe	77 18		 ja	 SHORT $LN5@operator
  00100	48 8b 45 08	 mov	 rax, QWORD PTR _Mycont$[rbp]
  00104	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00108	48 8b 4d 28	 mov	 rcx, QWORD PTR _Contptr$[rbp]
  0010c	48 03 c8	 add	 rcx, rax
  0010f	48 8b c1	 mov	 rax, rcx
  00112	48 39 45 48	 cmp	 QWORD PTR _Rawptr$[rbp], rax
  00116	72 43		 jb	 SHORT $LN4@operator
$LN5@operator:
  00118	41 b8 cf 04 00
	00		 mov	 r8d, 1231		; 000004cfH
  0011e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1NC@MMDHPGIM@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00125	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1KK@GJPIMLCF@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@
  0012c	e8 00 00 00 00	 call	 ?_Debug_message@std@@YAXPEB_W0I@Z ; std::_Debug_message
  00131	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0013a	41 b9 cf 04 00
	00		 mov	 r9d, 1231		; 000004cfH
  00140	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NC@MMDHPGIM@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00147	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
  0014e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1KO@CMPBFHAM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa@
  00155	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
$LN4@operator:

; 1231 : 			"cannot dereference string iterator because it is out of range (e.g. an end iterator)");
; 1232 : #endif /* _ITERATOR_DEBUG_LEVEL >= 1 */
; 1233 : 
; 1234 : 		_Analysis_assume_(_Ptr);
; 1235 : 		return (*_Ptr);

  0015b	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00162	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]

; 1236 : 		}

  00166	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  0016d	5f		 pop	 rdi
  0016e	5d		 pop	 rbp
  0016f	c3		 ret	 0
??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEBDXZ ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEBDPEBU_Container_base12@1@@Z
_TEXT	SEGMENT
this$ = 224
_Parg$ = 232
_Pstring$ = 240
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEBDPEBU_Container_base12@1@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT

; 1215 : 		{	// construct with pointer _Parg

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  00034	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003b	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QEAA@XZ ; std::_Iterator_base12::_Iterator_base12

; 1214 : 		: _Ptr(_Parg)

  00040	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00047	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Parg$[rbp]
  0004e	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 1216 : 		this->_Adopt(_Pstring);

  00052	48 8b 95 f0 00
	00 00		 mov	 rdx, QWORD PTR _Pstring$[rbp]
  00059	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00060	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 1217 : 		}

  00065	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00073	5f		 pop	 rdi
  00074	5d		 pop	 rbp
  00075	c3		 ret	 0
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEBDPEBU_Container_base12@1@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z
_TEXT	SEGMENT
_Left$ = 224
_Right$ = 232
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z PROC ; std::operator==<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 3925 : 	{	// test for string vs. NTCTS equality

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 3926 : 	return (_Left._Equal(_Right));

  0002f	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Right$[rbp]
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Left$[rbp]
  0003d	e8 00 00 00 00	 call	 ?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NQEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal

; 3927 : 	}

  00042	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ENDP ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z
_TEXT	SEGMENT
tv69 = 192
_Left$ = 240
_Right$ = 248
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z PROC ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 3955 : 	{	// test for string vs. NTCTS inequality

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 3956 : 	return (!(_Left == _Right));

  0002f	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR _Right$[rbp]
  00036	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR _Left$[rbp]
  0003d	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  00042	0f b6 c0	 movzx	 eax, al
  00045	85 c0		 test	 eax, eax
  00047	75 0c		 jne	 SHORT $LN3@operator
  00049	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv69[rbp], 1
  00053	eb 0a		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00055	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv69[rbp], 0
$LN4@operator:
  0005f	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv69[rbp]

; 3957 : 	}

  00066	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0006d	5f		 pop	 rdi
  0006e	5d		 pop	 rbp
  0006f	c3		 ret	 0
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ENDP ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\string
;	COMDAT ??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
_State$ = 4
_Changed$ = 36
_Ok$ = 72
_Ctype_fac$5 = 120
_Size$6 = 152
_Meta$7 = 180
$T8 = 408
$T9 = 452
$T10 = 488
$T11 = 520
tv270 = 532
tv268 = 536
tv266 = 536
tv263 = 536
tv65 = 536
tv269 = 544
tv267 = 544
tv264 = 544
tv260 = 544
tv265 = 552
tv166 = 560
__$ArrayPad$ = 568
_Istr$ = 608
_Str$ = 616
??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::operator>><char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 23   : 	{	// extract a string

$LN22:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 68 02
	00 00		 sub	 rsp, 616		; 00000268H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 9a 00 00 00	 mov	 ecx, 154		; 0000009aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 88
	02 00 00	 mov	 rcx, QWORD PTR [rsp+648]
  0002f	48 c7 85 08 02
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T11[rbp], -2
  0003a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00041	48 33 c5	 xor	 rax, rbp
  00044	48 89 85 38 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 24   : 	typedef ctype<_Elem> _Ctype;
; 25   : 	typedef basic_istream<_Elem, _Traits> _Myis;
; 26   : 	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
; 27   : 	typedef typename _Mystr::size_type _Mysizt;
; 28   : 
; 29   : 	ios_base::iostate _State = ios_base::goodbit;

  0004b	c7 45 04 00 00
	00 00		 mov	 DWORD PTR _State$[rbp], 0

; 30   : 	bool _Changed = false;

  00052	c6 45 24 00	 mov	 BYTE PTR _Changed$[rbp], 0

; 31   : 	const typename _Myis::sentry _Ok(_Istr);

  00056	45 33 c0	 xor	 r8d, r8d
  00059	48 8b 95 60 02
	00 00		 mov	 rdx, QWORD PTR _Istr$[rbp]
  00060	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00064	e8 00 00 00 00	 call	 ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
  00069	90		 npad	 1

; 32   : 
; 33   : 	if (_Ok)

  0006a	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  0006e	e8 00 00 00 00	 call	 ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
  00073	0f b6 c0	 movzx	 eax, al
  00076	85 c0		 test	 eax, eax
  00078	0f 84 82 02 00
	00		 je	 $LN5@operator

; 34   : 		{	// state okay, extract characters
; 35   : 		const _Ctype& _Ctype_fac = _USE(_Istr.getloc(), _Ctype);

  0007e	48 8b 85 60 02
	00 00		 mov	 rax, QWORD PTR _Istr$[rbp]
  00085	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00088	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0008c	48 8b 8d 60 02
	00 00		 mov	 rcx, QWORD PTR _Istr$[rbp]
  00093	48 03 c8	 add	 rcx, rax
  00096	48 8b c1	 mov	 rax, rcx
  00099	48 8d 95 98 01
	00 00		 lea	 rdx, QWORD PTR $T8[rbp]
  000a0	48 8b c8	 mov	 rcx, rax
  000a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?getloc@ios_base@std@@QEBA?AVlocale@2@XZ
  000a9	48 89 85 18 02
	00 00		 mov	 QWORD PTR tv65[rbp], rax
  000b0	48 8b 85 18 02
	00 00		 mov	 rax, QWORD PTR tv65[rbp]
  000b7	48 89 85 20 02
	00 00		 mov	 QWORD PTR tv260[rbp], rax
  000be	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR tv260[rbp]
  000c5	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  000ca	48 89 45 78	 mov	 QWORD PTR _Ctype_fac$5[rbp], rax
  000ce	48 8d 8d 98 01
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  000d5	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale

; 36   : 		_Str.erase();

  000da	33 d2		 xor	 edx, edx
  000dc	48 8b 8d 68 02
	00 00		 mov	 rcx, QWORD PTR _Str$[rbp]
  000e3	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  000e8	90		 npad	 1

; 37   : 
; 38   : 		_TRY_IO_BEGIN
; 39   : 		_Mysizt _Size = 0 < _Istr.width()
; 40   : 			&& (_Mysizt)_Istr.width() < _Str.max_size()

  000e9	48 8b 85 60 02
	00 00		 mov	 rax, QWORD PTR _Istr$[rbp]
  000f0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f3	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000f7	48 8b 8d 60 02
	00 00		 mov	 rcx, QWORD PTR _Istr$[rbp]
  000fe	48 03 c8	 add	 rcx, rax
  00101	48 8b c1	 mov	 rax, rcx
  00104	48 8b c8	 mov	 rcx, rax
  00107	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  0010d	48 89 85 18 02
	00 00		 mov	 QWORD PTR tv263[rbp], rax
  00114	48 83 bd 18 02
	00 00 00	 cmp	 QWORD PTR tv263[rbp], 0
  0011c	7e 7b		 jle	 SHORT $LN13@operator
  0011e	48 8b 85 60 02
	00 00		 mov	 rax, QWORD PTR _Istr$[rbp]
  00125	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00128	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0012c	48 8b 8d 60 02
	00 00		 mov	 rcx, QWORD PTR _Istr$[rbp]
  00133	48 03 c8	 add	 rcx, rax
  00136	48 8b c1	 mov	 rax, rcx
  00139	48 8b c8	 mov	 rcx, rax
  0013c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  00142	48 89 85 20 02
	00 00		 mov	 QWORD PTR tv264[rbp], rax
  00149	48 8b 8d 68 02
	00 00		 mov	 rcx, QWORD PTR _Str$[rbp]
  00150	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00155	48 39 85 20 02
	00 00		 cmp	 QWORD PTR tv264[rbp], rax
  0015c	73 3b		 jae	 SHORT $LN13@operator
  0015e	48 8b 85 60 02
	00 00		 mov	 rax, QWORD PTR _Istr$[rbp]
  00165	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00168	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0016c	48 8b 8d 60 02
	00 00		 mov	 rcx, QWORD PTR _Istr$[rbp]
  00173	48 03 c8	 add	 rcx, rax
  00176	48 8b c1	 mov	 rax, rcx
  00179	48 8b c8	 mov	 rcx, rax
  0017c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  00182	48 89 85 28 02
	00 00		 mov	 QWORD PTR tv265[rbp], rax
  00189	48 8b 85 28 02
	00 00		 mov	 rax, QWORD PTR tv265[rbp]
  00190	48 89 85 30 02
	00 00		 mov	 QWORD PTR tv166[rbp], rax
  00197	eb 13		 jmp	 SHORT $LN14@operator
$LN13@operator:
  00199	48 8b 8d 68 02
	00 00		 mov	 rcx, QWORD PTR _Str$[rbp]
  001a0	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  001a5	48 89 85 30 02
	00 00		 mov	 QWORD PTR tv166[rbp], rax
$LN14@operator:
  001ac	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR tv166[rbp]
  001b3	48 89 85 98 00
	00 00		 mov	 QWORD PTR _Size$6[rbp], rax

; 41   : 				? (_Mysizt)_Istr.width() : _Str.max_size();
; 42   : 		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  001ba	48 8b 85 60 02
	00 00		 mov	 rax, QWORD PTR _Istr$[rbp]
  001c1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001c4	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  001c8	48 8b 8d 60 02
	00 00		 mov	 rcx, QWORD PTR _Istr$[rbp]
  001cf	48 03 c8	 add	 rcx, rax
  001d2	48 8b c1	 mov	 rax, rcx
  001d5	48 8b c8	 mov	 rcx, rax
  001d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001de	48 89 85 18 02
	00 00		 mov	 QWORD PTR tv266[rbp], rax
  001e5	48 8b 8d 18 02
	00 00		 mov	 rcx, QWORD PTR tv266[rbp]
  001ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ
  001f2	89 85 20 02 00
	00		 mov	 DWORD PTR tv267[rbp], eax
  001f8	8b 85 20 02 00
	00		 mov	 eax, DWORD PTR tv267[rbp]
  001fe	89 85 b4 00 00
	00		 mov	 DWORD PTR _Meta$7[rbp], eax

; 43   : 
; 44   : 		for (; 0 < _Size; --_Size, _Meta = _Istr.rdbuf()->snextc())

  00204	eb 5b		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00206	48 8b 85 98 00
	00 00		 mov	 rax, QWORD PTR _Size$6[rbp]
  0020d	48 ff c8	 dec	 rax
  00210	48 89 85 98 00
	00 00		 mov	 QWORD PTR _Size$6[rbp], rax
  00217	48 8b 85 60 02
	00 00		 mov	 rax, QWORD PTR _Istr$[rbp]
  0021e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00221	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00225	48 8b 8d 60 02
	00 00		 mov	 rcx, QWORD PTR _Istr$[rbp]
  0022c	48 03 c8	 add	 rcx, rax
  0022f	48 8b c1	 mov	 rax, rcx
  00232	48 8b c8	 mov	 rcx, rax
  00235	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0023b	48 89 85 18 02
	00 00		 mov	 QWORD PTR tv268[rbp], rax
  00242	48 8b 8d 18 02
	00 00		 mov	 rcx, QWORD PTR tv268[rbp]
  00249	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ
  0024f	89 85 20 02 00
	00		 mov	 DWORD PTR tv269[rbp], eax
  00255	8b 85 20 02 00
	00		 mov	 eax, DWORD PTR tv269[rbp]
  0025b	89 85 b4 00 00
	00		 mov	 DWORD PTR _Meta$7[rbp], eax
$LN4@operator:
  00261	48 83 bd 98 00
	00 00 00	 cmp	 QWORD PTR _Size$6[rbp], 0
  00269	0f 86 8f 00 00
	00		 jbe	 $LN3@operator

; 45   : 			if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  0026f	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00274	89 85 c4 01 00
	00		 mov	 DWORD PTR $T9[rbp], eax
  0027a	48 8d 95 b4 00
	00 00		 lea	 rdx, QWORD PTR _Meta$7[rbp]
  00281	48 8d 8d c4 01
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  00288	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  0028d	0f b6 c0	 movzx	 eax, al
  00290	85 c0		 test	 eax, eax
  00292	74 0d		 je	 SHORT $LN7@operator

; 46   : 				{	// end of file, quit
; 47   : 				_State |= ios_base::eofbit;

  00294	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00297	83 c8 01	 or	 eax, 1
  0029a	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 48   : 				break;

  0029d	eb 5f		 jmp	 SHORT $LN3@operator
  0029f	eb 58		 jmp	 SHORT $LN8@operator
$LN7@operator:

; 49   : 				}
; 50   : 			else if (_Ctype_fac.is(_Ctype::space,

  002a1	48 8d 8d b4 00
	00 00		 lea	 rcx, QWORD PTR _Meta$7[rbp]
  002a8	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADAEBH@Z ; std::char_traits<char>::to_char_type
  002ad	44 0f b6 c0	 movzx	 r8d, al
  002b1	66 ba 48 00	 mov	 dx, 72			; 00000048H
  002b5	48 8b 4d 78	 mov	 rcx, QWORD PTR _Ctype_fac$5[rbp]
  002b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?is@?$ctype@D@std@@QEBA_NFD@Z
  002bf	88 85 14 02 00
	00		 mov	 BYTE PTR tv270[rbp], al
  002c5	0f b6 85 14 02
	00 00		 movzx	 eax, BYTE PTR tv270[rbp]
  002cc	85 c0		 test	 eax, eax
  002ce	74 04		 je	 SHORT $LN9@operator

; 51   : 				_Traits::to_char_type(_Meta)))
; 52   : 				break;	// whitespace, quit

  002d0	eb 2c		 jmp	 SHORT $LN3@operator

; 53   : 			else

  002d2	eb 25		 jmp	 SHORT $LN8@operator
$LN9@operator:

; 54   : 				{	// add character to string
; 55   : 				_Str.append(1, _Traits::to_char_type(_Meta));

  002d4	48 8d 8d b4 00
	00 00		 lea	 rcx, QWORD PTR _Meta$7[rbp]
  002db	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADAEBH@Z ; std::char_traits<char>::to_char_type
  002e0	44 0f b6 c0	 movzx	 r8d, al
  002e4	ba 01 00 00 00	 mov	 edx, 1
  002e9	48 8b 8d 68 02
	00 00		 mov	 rcx, QWORD PTR _Str$[rbp]
  002f0	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 56   : 				_Changed = true;

  002f5	c6 45 24 01	 mov	 BYTE PTR _Changed$[rbp], 1
$LN8@operator:

; 57   : 				}

  002f9	e9 08 ff ff ff	 jmp	 $LN2@operator
$LN3@operator:
  002fe	eb 00		 jmp	 SHORT $LN5@operator
$LN20@operator:
$LN5@operator:

; 58   : 		_CATCH_IO_(_Istr)
; 59   : 		}
; 60   : 
; 61   : 	_Istr.width(0);

  00300	48 8b 85 60 02
	00 00		 mov	 rax, QWORD PTR _Istr$[rbp]
  00307	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0030a	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0030e	48 8b 8d 60 02
	00 00		 mov	 rcx, QWORD PTR _Istr$[rbp]
  00315	48 03 c8	 add	 rcx, rax
  00318	48 8b c1	 mov	 rax, rcx
  0031b	33 d2		 xor	 edx, edx
  0031d	48 8b c8	 mov	 rcx, rax
  00320	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEAA_J_J@Z

; 62   : 	if (!_Changed)

  00326	0f b6 45 24	 movzx	 eax, BYTE PTR _Changed$[rbp]
  0032a	85 c0		 test	 eax, eax
  0032c	75 09		 jne	 SHORT $LN11@operator

; 63   : 		_State |= ios_base::failbit;

  0032e	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00331	83 c8 02	 or	 eax, 2
  00334	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN11@operator:

; 64   : 	_Istr.setstate(_State);

  00337	48 8b 85 60 02
	00 00		 mov	 rax, QWORD PTR _Istr$[rbp]
  0033e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00341	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00345	48 8b 8d 60 02
	00 00		 mov	 rcx, QWORD PTR _Istr$[rbp]
  0034c	48 03 c8	 add	 rcx, rax
  0034f	48 8b c1	 mov	 rax, rcx
  00352	45 33 c0	 xor	 r8d, r8d
  00355	8b 55 04	 mov	 edx, DWORD PTR _State$[rbp]
  00358	48 8b c8	 mov	 rcx, rax
  0035b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z

; 65   : 	return (_Istr);

  00361	48 8b 85 60 02
	00 00		 mov	 rax, QWORD PTR _Istr$[rbp]
  00368	48 89 85 e8 01
	00 00		 mov	 QWORD PTR $T10[rbp], rax
  0036f	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00373	e8 00 00 00 00	 call	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ
  00378	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR $T10[rbp]

; 66   : 	}

  0037f	48 8b f8	 mov	 rdi, rax
  00382	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00386	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$rtcFrameData
  0038d	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00392	48 8b c7	 mov	 rax, rdi
  00395	48 8b 8d 38 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0039c	48 33 cd	 xor	 rcx, rbp
  0039f	e8 00 00 00 00	 call	 __security_check_cookie
  003a4	48 8d a5 48 02
	00 00		 lea	 rsp, QWORD PTR [rbp+584]
  003ab	5f		 pop	 rdi
  003ac	5d		 pop	 rbp
  003ad	c3		 ret	 0
??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Changed$ = 36
_Ok$ = 72
_Ctype_fac$5 = 120
_Size$6 = 152
_Meta$7 = 180
$T8 = 408
$T9 = 452
$T10 = 488
$T11 = 520
tv270 = 532
tv268 = 536
tv266 = 536
tv263 = 536
tv65 = 536
tv269 = 544
tv267 = 544
tv264 = 544
tv260 = 544
tv265 = 552
tv166 = 560
__$ArrayPad$ = 568
_Istr$ = 608
_Str$ = 616
?dtor$0@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA PROC ; `std::operator>><char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA ENDP ; `std::operator>><char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
_State$ = 4
_Changed$ = 36
_Ok$ = 72
_Ctype_fac$5 = 120
_Size$6 = 152
_Meta$7 = 180
$T8 = 408
$T9 = 452
$T10 = 488
$T11 = 520
tv270 = 532
tv268 = 536
tv266 = 536
tv263 = 536
tv65 = 536
tv269 = 544
tv267 = 544
tv264 = 544
tv260 = 544
tv265 = 552
tv166 = 560
__$ArrayPad$ = 568
_Istr$ = 608
_Str$ = 616
?dtor$1@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA PROC ; `std::operator>><char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
  00024	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00029	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002e	55		 push	 rbp
  0002f	57		 push	 rdi
  00030	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00034	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00038	48 8d 8d 98 01
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  0003f	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale
  00044	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00048	5f		 pop	 rdi
  00049	5d		 pop	 rbp
  0004a	c3		 ret	 0
?dtor$1@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA ENDP ; `std::operator>><char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
_State$ = 4
_Changed$ = 36
_Ok$ = 72
_Ctype_fac$5 = 120
_Size$6 = 152
_Meta$7 = 180
$T8 = 408
$T9 = 452
$T10 = 488
$T11 = 520
tv270 = 532
tv268 = 536
tv266 = 536
tv263 = 536
tv65 = 536
tv269 = 544
tv267 = 544
tv264 = 544
tv260 = 544
tv265 = 552
tv166 = 560
__$ArrayPad$ = 568
_Istr$ = 608
_Str$ = 616
?catch$2@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA PROC ; `std::operator>><char,std::char_traits<char>,std::allocator<char> >'::`1'::catch$2

; 58   : 		_CATCH_IO_(_Istr)

  0004b	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00050	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00055	55		 push	 rbp
  00056	57		 push	 rdi
  00057	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0005b	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$0:
  0005f	48 8b 85 60 02
	00 00		 mov	 rax, QWORD PTR _Istr$[rbp]
  00066	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00069	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0006d	48 8b 8d 60 02
	00 00		 mov	 rcx, QWORD PTR _Istr$[rbp]
  00074	48 03 c8	 add	 rcx, rax
  00077	48 8b c1	 mov	 rax, rcx
  0007a	41 b0 01	 mov	 r8b, 1
  0007d	ba 04 00 00 00	 mov	 edx, 4
  00082	48 8b c8	 mov	 rcx, rax
  00085	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  0008b	90		 npad	 1
  0008c	48 8d 05 00 00
	00 00		 lea	 rax, $LN20@catch$2
  00093	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00097	5f		 pop	 rdi
  00098	5d		 pop	 rbp
  00099	c3		 ret	 0
  0009a	cc		 int	 3
?catch$2@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA ENDP ; `std::operator>><char,std::char_traits<char>,std::allocator<char> >'::`1'::catch$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Changed$ = 36
_Ok$ = 72
_Ctype_fac$5 = 120
_Size$6 = 152
_Meta$7 = 180
$T8 = 408
$T9 = 452
$T10 = 488
$T11 = 520
tv270 = 532
tv268 = 536
tv266 = 536
tv263 = 536
tv65 = 536
tv269 = 544
tv267 = 544
tv264 = 544
tv260 = 544
tv265 = 552
tv166 = 560
__$ArrayPad$ = 568
_Istr$ = 608
_Str$ = 616
?dtor$0@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA PROC ; `std::operator>><char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA ENDP ; `std::operator>><char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Changed$ = 36
_Ok$ = 72
_Ctype_fac$5 = 120
_Size$6 = 152
_Meta$7 = 180
$T8 = 408
$T9 = 452
$T10 = 488
$T11 = 520
tv270 = 532
tv268 = 536
tv266 = 536
tv263 = 536
tv65 = 536
tv269 = 544
tv267 = 544
tv264 = 544
tv260 = 544
tv265 = 552
tv166 = 560
__$ArrayPad$ = 568
_Istr$ = 608
_Str$ = 616
?dtor$1@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA PROC ; `std::operator>><char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
  00024	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00029	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002e	55		 push	 rbp
  0002f	57		 push	 rdi
  00030	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00034	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00038	48 8d 8d 98 01
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  0003f	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale
  00044	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00048	5f		 pop	 rdi
  00049	5d		 pop	 rbp
  0004a	c3		 ret	 0
?dtor$1@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA ENDP ; `std::operator>><char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Changed$ = 36
_Ok$ = 72
_Ctype_fac$5 = 120
_Size$6 = 152
_Meta$7 = 180
$T8 = 408
$T9 = 452
$T10 = 488
$T11 = 520
tv270 = 532
tv268 = 536
tv266 = 536
tv263 = 536
tv65 = 536
tv269 = 544
tv267 = 544
tv264 = 544
tv260 = 544
tv265 = 552
tv166 = 560
__$ArrayPad$ = 568
_Istr$ = 608
_Str$ = 616
?catch$2@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA PROC ; `std::operator>><char,std::char_traits<char>,std::allocator<char> >'::`1'::catch$2

; 58   : 		_CATCH_IO_(_Istr)

  0004b	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00050	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00055	55		 push	 rbp
  00056	57		 push	 rdi
  00057	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0005b	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$0:
  0005f	48 8b 85 60 02
	00 00		 mov	 rax, QWORD PTR _Istr$[rbp]
  00066	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00069	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0006d	48 8b 8d 60 02
	00 00		 mov	 rcx, QWORD PTR _Istr$[rbp]
  00074	48 03 c8	 add	 rcx, rax
  00077	48 8b c1	 mov	 rax, rcx
  0007a	41 b0 01	 mov	 r8b, 1
  0007d	ba 04 00 00 00	 mov	 edx, 4
  00082	48 8b c8	 mov	 rcx, rax
  00085	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  0008b	90		 npad	 1
  0008c	48 8d 05 00 00
	00 00		 lea	 rax, $LN20@catch$2
  00093	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00097	5f		 pop	 rdi
  00098	5d		 pop	 rbp
  00099	c3		 ret	 0
  0009a	cc		 int	 3
?catch$2@?0???$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA ENDP ; `std::operator>><char,std::char_traits<char>,std::allocator<char> >'::`1'::catch$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\string
;	COMDAT ??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
_Istr$ = 224
_Str$ = 232
??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::operator>><char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 137  : 	{	// extract a string

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 138  : 	return (_STD move(_Istr) >> _Str);

  0002f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Istr$[rbp]
  00036	e8 00 00 00 00	 call	 ??$move@AEAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::move<std::basic_istream<char,std::char_traits<char> > & __ptr64>
  0003b	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Str$[rbp]
  00042	48 8b c8	 mov	 rcx, rax
  00045	e8 00 00 00 00	 call	 ??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator>><char,std::char_traits<char>,std::allocator<char> >

; 139  : 	}

  0004a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z
_TEXT	SEGMENT
_Ans$ = 8
$T4 = 260
$T5 = 296
tv70 = 312
__$ArrayPad$ = 320
__$ReturnUdt$ = 368
_Left$ = 376
_Right$ = 384
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 3799 : 	{	// return string + NTCTS

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 5e 00 00 00	 mov	 ecx, 94			; 0000005eH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR [rsp+408]
  00034	48 c7 85 28 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T5[rbp], -2
  0003f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00046	48 33 c5	 xor	 rax, rbp
  00049	48 89 85 40 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00050	c7 85 04 01 00
	00 00 00 00 00	 mov	 DWORD PTR $T4[rbp], 0

; 3800 : 	using _String_type = basic_string<_Elem, _Traits, _Alloc>;
; 3801 : 	using _Size_type = typename _String_type::size_type;
; 3802 : 	_String_type _Ans;

  0005a	48 8d 4d 08	 lea	 rcx, QWORD PTR _Ans$[rbp]
  0005e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00063	90		 npad	 1

; 3803 : 	_Ans.reserve(_Convert_size<_Size_type>(_Left.size() + _Traits::length(_Right)));

  00064	48 8b 8d 78 01
	00 00		 mov	 rcx, QWORD PTR _Left$[rbp]
  0006b	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00070	48 89 85 38 01
	00 00		 mov	 QWORD PTR tv70[rbp], rax
  00077	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  0007e	e8 00 00 00 00	 call	 ?length@?$char_traits@D@std@@SA_KQEBD@Z ; std::char_traits<char>::length
  00083	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR tv70[rbp]
  0008a	48 03 c8	 add	 rcx, rax
  0008d	48 8b c1	 mov	 rax, rcx
  00090	48 8b c8	 mov	 rcx, rax
  00093	e8 00 00 00 00	 call	 ??$_Convert_size@_K@std@@YA_K_K@Z ; std::_Convert_size<unsigned __int64>
  00098	48 8b d0	 mov	 rdx, rax
  0009b	48 8d 4d 08	 lea	 rcx, QWORD PTR _Ans$[rbp]
  0009f	e8 00 00 00 00	 call	 ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve

; 3804 : 	_Ans += _Left;

  000a4	48 8b 95 78 01
	00 00		 mov	 rdx, QWORD PTR _Left$[rbp]
  000ab	48 8d 4d 08	 lea	 rcx, QWORD PTR _Ans$[rbp]
  000af	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 3805 : 	_Ans += _Right;

  000b4	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR _Right$[rbp]
  000bb	48 8d 4d 08	 lea	 rcx, QWORD PTR _Ans$[rbp]
  000bf	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 3806 : 	return (_Ans);

  000c4	48 8d 55 08	 lea	 rdx, QWORD PTR _Ans$[rbp]
  000c8	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  000cf	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000d4	8b 85 04 01 00
	00		 mov	 eax, DWORD PTR $T4[rbp]
  000da	83 c8 01	 or	 eax, 1
  000dd	89 85 04 01 00
	00		 mov	 DWORD PTR $T4[rbp], eax
  000e3	48 8d 4d 08	 lea	 rcx, QWORD PTR _Ans$[rbp]
  000e7	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000ec	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 3807 : 	}

  000f3	48 8b f8	 mov	 rdi, rax
  000f6	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z$rtcFrameData
  00101	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00106	48 8b c7	 mov	 rax, rdi
  00109	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00110	48 33 cd	 xor	 rcx, rbp
  00113	e8 00 00 00 00	 call	 __security_check_cookie
  00118	48 8d a5 58 01
	00 00		 lea	 rsp, QWORD PTR [rbp+344]
  0011f	5f		 pop	 rdi
  00120	5d		 pop	 rbp
  00121	c3		 ret	 0
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Ans$ = 8
$T4 = 260
$T5 = 296
tv70 = 312
__$ArrayPad$ = 320
__$ReturnUdt$ = 368
_Left$ = 376
_Right$ = 384
?dtor$0@?0???$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z@4HA PROC ; `std::operator+<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR _Ans$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z@4HA ENDP ; `std::operator+<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_Ans$ = 8
$T4 = 260
$T5 = 296
tv70 = 312
__$ArrayPad$ = 320
__$ReturnUdt$ = 368
_Left$ = 376
_Right$ = 384
?dtor$0@?0???$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z@4HA PROC ; `std::operator+<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR _Ans$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z@4HA ENDP ; `std::operator+<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QEAV10@QEBD@Z
_TEXT	SEGMENT
$T1 = 196
__$ReturnUdt$ = 256
_Left$ = 264
_Right$ = 272
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QEAV10@QEBD@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 3884 : 	{	// return string + NTCTS

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00034	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR $T1[rbp], 0

; 3885 : 	return (_STD move(_Left.append(_Right)));

  0003e	48 8b 95 10 01
	00 00		 mov	 rdx, QWORD PTR _Right$[rbp]
  00045	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Left$[rbp]
  0004c	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00051	48 8b c8	 mov	 rcx, rax
  00054	e8 00 00 00 00	 call	 ??$move@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > & __ptr64>
  00059	48 8b d0	 mov	 rdx, rax
  0005c	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00063	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00068	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  0006e	83 c8 01	 or	 eax, 1
  00071	89 85 c4 00 00
	00		 mov	 DWORD PTR $T1[rbp], eax
  00077	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 3886 : 	}

  0007e	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00085	5f		 pop	 rdi
  00086	5d		 pop	 rbp
  00087	c3		 ret	 0
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QEAV10@QEBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\string
;	COMDAT ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
tv66 = 192
_Ostr$ = 240
_Str$ = 248
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 168  : 	{	// insert a string

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 169  : 	return (_Insert_string(_Ostr, _Str.data(), _Str.size()));

  0002f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _Str$[rbp]
  00036	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  0003b	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv66[rbp], rax
  00042	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _Str$[rbp]
  00049	e8 00 00 00 00	 call	 ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
  0004e	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv66[rbp]
  00055	4c 8b c1	 mov	 r8, rcx
  00058	48 8b d0	 mov	 rdx, rax
  0005b	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00062	e8 00 00 00 00	 call	 ??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>

; 170  : 	}

  00067	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0006e	5f		 pop	 rdi
  0006f	5d		 pop	 rbp
  00070	c3		 ret	 0
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Ostr$ = 224
??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 983  : 	{	// insert newline and flush stream

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 984  : 	_Ostr.put(_Ostr.widen('\n'));

  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00031	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00034	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00038	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0003f	48 03 c8	 add	 rcx, rax
  00042	48 8b c1	 mov	 rax, rcx
  00045	b2 0a		 mov	 dl, 10
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z
  00050	0f b6 d0	 movzx	 edx, al
  00053	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0005a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z

; 985  : 	_Ostr.flush();

  00060	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00067	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 986  : 	return (_Ostr);

  0006d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]

; 987  : 	}

  00074	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0007b	5f		 pop	 rdi
  0007c	5d		 pop	 rbp
  0007d	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
_TEXT	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
$T9 = 504
tv299 = 516
tv294 = 516
tv139 = 516
tv300 = 520
tv297 = 520
tv295 = 520
tv137 = 520
tv301 = 528
tv298 = 528
tv296 = 528
__$ArrayPad$ = 536
_Ostr$ = 576
_Val$ = 584
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 772  : 	{	// insert NTBS into char stream

$LN25:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 48 02
	00 00		 sub	 rsp, 584		; 00000248H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 92 00 00 00	 mov	 ecx, 146		; 00000092H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 68
	02 00 00	 mov	 rcx, QWORD PTR [rsp+616]
  0002f	48 c7 85 f8 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T9[rbp], -2
  0003a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00041	48 33 c5	 xor	 rax, rbp
  00044	48 89 85 18 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 773  : 	typedef char _Elem;
; 774  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 775  : 	ios_base::iostate _State = ios_base::goodbit;

  0004b	c7 45 04 00 00
	00 00		 mov	 DWORD PTR _State$[rbp], 0

; 776  : 	streamsize _Count = (streamsize)_Traits::length(_Val);	// may overflow

  00052	48 8b 8d 48 02
	00 00		 mov	 rcx, QWORD PTR _Val$[rbp]
  00059	e8 00 00 00 00	 call	 ?length@?$char_traits@D@std@@SA_KQEBD@Z ; std::char_traits<char>::length
  0005e	48 89 45 28	 mov	 QWORD PTR _Count$[rbp], rax

; 777  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count

  00062	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00069	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0006c	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00070	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00077	48 03 c8	 add	 rcx, rax
  0007a	48 8b c1	 mov	 rax, rcx
  0007d	48 8b c8	 mov	 rcx, rax
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  00086	48 85 c0	 test	 rax, rax
  00089	7e 5b		 jle	 SHORT $LN17@operator
  0008b	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00092	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00095	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00099	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000a0	48 03 c8	 add	 rcx, rax
  000a3	48 8b c1	 mov	 rax, rcx
  000a6	48 8b c8	 mov	 rcx, rax
  000a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000af	48 3b 45 28	 cmp	 rax, QWORD PTR _Count$[rbp]
  000b3	7e 31		 jle	 SHORT $LN17@operator
  000b5	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000bc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000bf	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000c3	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000ca	48 03 c8	 add	 rcx, rax
  000cd	48 8b c1	 mov	 rax, rcx
  000d0	48 8b c8	 mov	 rcx, rax
  000d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000d9	48 2b 45 28	 sub	 rax, QWORD PTR _Count$[rbp]
  000dd	48 89 85 08 02
	00 00		 mov	 QWORD PTR tv137[rbp], rax
  000e4	eb 0b		 jmp	 SHORT $LN18@operator
$LN17@operator:
  000e6	48 c7 85 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR tv137[rbp], 0
$LN18@operator:
  000f1	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR tv137[rbp]
  000f8	48 89 45 48	 mov	 QWORD PTR _Pad$[rbp], rax

; 778  : 		? 0 : _Ostr.width() - _Count;
; 779  : 	const typename _Myos::sentry _Ok(_Ostr);

  000fc	48 8b 95 40 02
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  00103	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00107	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0010c	90		 npad	 1

; 780  : 
; 781  : 	if (!_Ok)

  0010d	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00111	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00116	0f b6 c0	 movzx	 eax, al
  00119	85 c0		 test	 eax, eax
  0011b	75 0e		 jne	 SHORT $LN8@operator

; 782  : 		_State |= ios_base::badbit;

  0011d	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00120	83 c8 04	 or	 eax, 4
  00123	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 783  : 	else

  00126	e9 67 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 784  : 		{	// state okay, insert
; 785  : 		_TRY_IO_BEGIN
; 786  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  0012b	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00132	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00135	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00139	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00140	48 03 c8	 add	 rcx, rax
  00143	48 8b c1	 mov	 rax, rcx
  00146	48 8b c8	 mov	 rcx, rax
  00149	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flags@ios_base@std@@QEBAHXZ
  0014f	89 85 04 02 00
	00		 mov	 DWORD PTR tv139[rbp], eax
  00155	8b 85 04 02 00
	00		 mov	 eax, DWORD PTR tv139[rbp]
  0015b	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00160	83 f8 40	 cmp	 eax, 64			; 00000040H
  00163	0f 84 c8 00 00
	00		 je	 $LN11@operator

; 787  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00169	eb 0b		 jmp	 SHORT $LN4@operator
$LN2@operator:
  0016b	48 8b 45 48	 mov	 rax, QWORD PTR _Pad$[rbp]
  0016f	48 ff c8	 dec	 rax
  00172	48 89 45 48	 mov	 QWORD PTR _Pad$[rbp], rax
$LN4@operator:
  00176	48 83 7d 48 00	 cmp	 QWORD PTR _Pad$[rbp], 0
  0017b	0f 8e b0 00 00
	00		 jle	 $LN11@operator

; 788  : 				if (_Traits::eq_int_type(_Traits::eof(),

  00181	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00188	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0018b	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0018f	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00196	48 03 c8	 add	 rcx, rax
  00199	48 8b c1	 mov	 rax, rcx
  0019c	48 8b c8	 mov	 rcx, rax
  0019f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  001a5	88 85 04 02 00
	00		 mov	 BYTE PTR tv294[rbp], al
  001ab	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  001b2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001b5	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  001b9	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  001c0	48 03 c8	 add	 rcx, rax
  001c3	48 8b c1	 mov	 rax, rcx
  001c6	48 8b c8	 mov	 rcx, rax
  001c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001cf	48 89 85 08 02
	00 00		 mov	 QWORD PTR tv295[rbp], rax
  001d6	0f b6 95 04 02
	00 00		 movzx	 edx, BYTE PTR tv294[rbp]
  001dd	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR tv295[rbp]
  001e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  001ea	89 85 10 02 00
	00		 mov	 DWORD PTR tv296[rbp], eax
  001f0	8b 85 10 02 00
	00		 mov	 eax, DWORD PTR tv296[rbp]
  001f6	89 85 54 01 00
	00		 mov	 DWORD PTR $T4[rbp], eax
  001fc	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00201	89 85 74 01 00
	00		 mov	 DWORD PTR $T5[rbp], eax
  00207	48 8d 95 54 01
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  0020e	48 8d 8d 74 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00215	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  0021a	0f b6 c0	 movzx	 eax, al
  0021d	85 c0		 test	 eax, eax
  0021f	74 0b		 je	 SHORT $LN12@operator

; 789  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 790  : 					{	// insertion failed, quit
; 791  : 					_State |= ios_base::badbit;

  00221	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00224	83 c8 04	 or	 eax, 4
  00227	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 792  : 					break;

  0022a	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 793  : 					}
; 794  : 
; 795  : 		if (_State == ios_base::goodbit

  0022c	e9 3a ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 796  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

  00231	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  00235	75 60		 jne	 SHORT $LN13@operator
  00237	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0023e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00241	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00245	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0024c	48 03 c8	 add	 rcx, rax
  0024f	48 8b c1	 mov	 rax, rcx
  00252	48 8b c8	 mov	 rcx, rax
  00255	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0025b	48 89 85 08 02
	00 00		 mov	 QWORD PTR tv297[rbp], rax
  00262	4c 8b 45 28	 mov	 r8, QWORD PTR _Count$[rbp]
  00266	48 8b 95 48 02
	00 00		 mov	 rdx, QWORD PTR _Val$[rbp]
  0026d	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR tv297[rbp]
  00274	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z
  0027a	48 89 85 10 02
	00 00		 mov	 QWORD PTR tv298[rbp], rax
  00281	48 8b 45 28	 mov	 rax, QWORD PTR _Count$[rbp]
  00285	48 39 85 10 02
	00 00		 cmp	 QWORD PTR tv298[rbp], rax
  0028c	74 09		 je	 SHORT $LN13@operator

; 797  : 			_State |= ios_base::badbit;

  0028e	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00291	83 c8 04	 or	 eax, 4
  00294	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN13@operator:

; 798  : 
; 799  : 		if (_State == ios_base::goodbit)

  00297	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  0029b	0f 85 c8 00 00
	00		 jne	 $LN14@operator

; 800  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  002a1	eb 0b		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002a3	48 8b 45 48	 mov	 rax, QWORD PTR _Pad$[rbp]
  002a7	48 ff c8	 dec	 rax
  002aa	48 89 45 48	 mov	 QWORD PTR _Pad$[rbp], rax
$LN7@operator:
  002ae	48 83 7d 48 00	 cmp	 QWORD PTR _Pad$[rbp], 0
  002b3	0f 8e b0 00 00
	00		 jle	 $LN14@operator

; 801  : 				if (_Traits::eq_int_type(_Traits::eof(),

  002b9	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  002c0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002c3	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002c7	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  002ce	48 03 c8	 add	 rcx, rax
  002d1	48 8b c1	 mov	 rax, rcx
  002d4	48 8b c8	 mov	 rcx, rax
  002d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  002dd	88 85 04 02 00
	00		 mov	 BYTE PTR tv299[rbp], al
  002e3	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  002ea	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002ed	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002f1	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  002f8	48 03 c8	 add	 rcx, rax
  002fb	48 8b c1	 mov	 rax, rcx
  002fe	48 8b c8	 mov	 rcx, rax
  00301	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00307	48 89 85 08 02
	00 00		 mov	 QWORD PTR tv300[rbp], rax
  0030e	0f b6 95 04 02
	00 00		 movzx	 edx, BYTE PTR tv299[rbp]
  00315	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR tv300[rbp]
  0031c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  00322	89 85 10 02 00
	00		 mov	 DWORD PTR tv301[rbp], eax
  00328	8b 85 10 02 00
	00		 mov	 eax, DWORD PTR tv301[rbp]
  0032e	89 85 94 01 00
	00		 mov	 DWORD PTR $T6[rbp], eax
  00334	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00339	89 85 b4 01 00
	00		 mov	 DWORD PTR $T7[rbp], eax
  0033f	48 8d 95 94 01
	00 00		 lea	 rdx, QWORD PTR $T6[rbp]
  00346	48 8d 8d b4 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  0034d	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  00352	0f b6 c0	 movzx	 eax, al
  00355	85 c0		 test	 eax, eax
  00357	74 0b		 je	 SHORT $LN15@operator

; 802  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 803  : 					{	// insertion failed, quit
; 804  : 					_State |= ios_base::badbit;

  00359	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  0035c	83 c8 04	 or	 eax, 4
  0035f	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 805  : 					break;

  00362	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 806  : 					}

  00364	e9 3a ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 807  : 		_Ostr.width(0);

  00369	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00370	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00373	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00377	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0037e	48 03 c8	 add	 rcx, rax
  00381	48 8b c1	 mov	 rax, rcx
  00384	33 d2		 xor	 edx, edx
  00386	48 8b c8	 mov	 rcx, rax
  00389	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEAA_J_J@Z
  0038f	90		 npad	 1
  00390	eb 00		 jmp	 SHORT $LN9@operator
$LN23@operator:
$LN9@operator:

; 808  : 		_CATCH_IO_(_Ostr)
; 809  : 		}
; 810  : 
; 811  : 	_Ostr.setstate(_State);

  00392	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00399	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0039c	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  003a0	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  003a7	48 03 c8	 add	 rcx, rax
  003aa	48 8b c1	 mov	 rax, rcx
  003ad	45 33 c0	 xor	 r8d, r8d
  003b0	8b 55 04	 mov	 edx, DWORD PTR _State$[rbp]
  003b3	48 8b c8	 mov	 rcx, rax
  003b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z

; 812  : 	return (_Ostr);

  003bc	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  003c3	48 89 85 d8 01
	00 00		 mov	 QWORD PTR $T8[rbp], rax
  003ca	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  003ce	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  003d3	48 8b 85 d8 01
	00 00		 mov	 rax, QWORD PTR $T8[rbp]

; 813  : 	}

  003da	48 8b f8	 mov	 rdi, rax
  003dd	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  003e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcFrameData
  003e8	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  003ed	48 8b c7	 mov	 rax, rdi
  003f0	48 8b 8d 18 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  003f7	48 33 cd	 xor	 rcx, rbp
  003fa	e8 00 00 00 00	 call	 __security_check_cookie
  003ff	48 8d a5 28 02
	00 00		 lea	 rsp, QWORD PTR [rbp+552]
  00406	5f		 pop	 rdi
  00407	5d		 pop	 rbp
  00408	c3		 ret	 0
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ENDP ; std::operator<<<std::char_traits<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
$T9 = 504
tv299 = 516
tv294 = 516
tv139 = 516
tv300 = 520
tv297 = 520
tv295 = 520
tv137 = 520
tv301 = 528
tv298 = 528
tv296 = 528
__$ArrayPad$ = 536
_Ostr$ = 576
_Val$ = 584
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
$T9 = 504
tv299 = 516
tv294 = 516
tv139 = 516
tv300 = 520
tv297 = 520
tv295 = 520
tv137 = 520
tv301 = 528
tv298 = 528
tv296 = 528
__$ArrayPad$ = 536
_Ostr$ = 576
_Val$ = 584
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1

; 808  : 		_CATCH_IO_(_Ostr)

  00024	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00029	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002e	55		 push	 rbp
  0002f	57		 push	 rdi
  00030	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00034	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  00038	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0003f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00042	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00046	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0004d	48 03 c8	 add	 rcx, rax
  00050	48 8b c1	 mov	 rax, rcx
  00053	41 b0 01	 mov	 r8b, 1
  00056	ba 04 00 00 00	 mov	 edx, 4
  0005b	48 8b c8	 mov	 rcx, rax
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00064	90		 npad	 1
  00065	48 8d 05 00 00
	00 00		 lea	 rax, $LN23@catch$1
  0006c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00070	5f		 pop	 rdi
  00071	5d		 pop	 rbp
  00072	c3		 ret	 0
  00073	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
$T9 = 504
tv299 = 516
tv294 = 516
tv139 = 516
tv300 = 520
tv297 = 520
tv295 = 520
tv137 = 520
tv301 = 528
tv298 = 528
tv296 = 528
__$ArrayPad$ = 536
_Ostr$ = 576
_Val$ = 584
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
$T9 = 504
tv299 = 516
tv294 = 516
tv139 = 516
tv300 = 520
tv297 = 520
tv295 = 520
tv137 = 520
tv301 = 528
tv298 = 528
tv296 = 528
__$ArrayPad$ = 536
_Ostr$ = 576
_Val$ = 584
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1

; 808  : 		_CATCH_IO_(_Ostr)

  00024	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00029	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002e	55		 push	 rbp
  0002f	57		 push	 rdi
  00030	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00034	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  00038	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0003f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00042	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00046	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0004d	48 03 c8	 add	 rcx, rax
  00050	48 8b c1	 mov	 rax, rcx
  00053	41 b0 01	 mov	 r8b, 1
  00056	ba 04 00 00 00	 mov	 edx, 4
  0005b	48 8b c8	 mov	 rcx, rax
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00064	90		 npad	 1
  00065	48 8d 05 00 00
	00 00		 lea	 rax, $LN23@catch$1
  0006c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00070	5f		 pop	 rdi
  00071	5d		 pop	 rbp
  00072	c3		 ret	 0
  00073	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_D?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
??_D?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAXXZ PROC ; std::basic_fstream<char,std::char_traits<char> >::`vbase destructor', COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 05 b8 00 00
	00		 add	 rax, 184		; 000000b8H
  00037	48 8b c8	 mov	 rcx, rax
  0003a	e8 00 00 00 00	 call	 ??1?$basic_fstream@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_fstream<char,std::char_traits<char> >::~basic_fstream<char,std::char_traits<char> >
  0003f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00046	48 05 b8 00 00
	00		 add	 rax, 184		; 000000b8H
  0004c	48 8b c8	 mov	 rcx, rax
  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ
  00055	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005c	5f		 pop	 rdi
  0005d	5d		 pop	 rbp
  0005e	c3		 ret	 0
??_D?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAXXZ ENDP ; std::basic_fstream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$basic_fstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_G?$basic_fstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z PROC ; std::basic_fstream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	48 2d b8 00 00
	00		 sub	 rax, 184		; 000000b8H
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	e8 00 00 00 00	 call	 ??_D?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  00043	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00049	83 e0 01	 and	 eax, 1
  0004c	85 c0		 test	 eax, eax
  0004e	74 1a		 je	 SHORT $LN2@scalar
  00050	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00057	48 2d b8 00 00
	00		 sub	 rax, 184		; 000000b8H
  0005d	ba 18 01 00 00	 mov	 edx, 280		; 00000118H
  00062	48 8b c8	 mov	 rcx, rax
  00065	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  0006a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00071	48 2d b8 00 00
	00		 sub	 rax, 184		; 000000b8H
  00077	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0007e	5f		 pop	 rdi
  0007f	5d		 pop	 rbp
  00080	c3		 ret	 0
??_G?$basic_fstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z ENDP ; std::basic_fstream<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__autoclassinit2@?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z
_TEXT	SEGMENT
this$ = 224
classSize$ = 232
?__autoclassinit2@?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z PROC ; std::basic_fstream<char,std::char_traits<char> >::__autoclassinit2, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  0002d	48 8b bd e0 00
	00 00		 mov	 rdi, QWORD PTR this$[rbp]
  00034	33 c0		 xor	 eax, eax
  00036	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR classSize$[rbp]
  0003d	f3 aa		 rep stosb
  0003f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00046	5f		 pop	 rdi
  00047	5d		 pop	 rbp
  00048	c3		 ret	 0
?__autoclassinit2@?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z ENDP ; std::basic_fstream<char,std::char_traits<char> >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?close@?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?close@?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAXXZ PROC ; std::basic_fstream<char,std::char_traits<char> >::close, COMDAT

; 1380 : 		{	// close the C stream

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 1381 : 		if (_Filebuffer.close() == 0)

  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 c0 18	 add	 rax, 24
  00035	48 8b c8	 mov	 rcx, rax
  00038	e8 00 00 00 00	 call	 ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
  0003d	48 85 c0	 test	 rax, rax
  00040	75 2c		 jne	 SHORT $LN2@close

; 1382 : 			_Myios::setstate(ios_base::failbit);

  00042	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004c	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00050	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00057	48 03 c8	 add	 rcx, rax
  0005a	48 8b c1	 mov	 rax, rcx
  0005d	45 33 c0	 xor	 r8d, r8d
  00060	ba 02 00 00 00	 mov	 edx, 2
  00065	48 8b c8	 mov	 rcx, rax
  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
$LN2@close:

; 1383 : 	}

  0006e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00075	5f		 pop	 rdi
  00076	5d		 pop	 rbp
  00077	c3		 ret	 0
?close@?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAXXZ ENDP ; std::basic_fstream<char,std::char_traits<char> >::close
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?open@?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAXPEBDHH@Z
_TEXT	SEGMENT
this$ = 224
_Filename$ = 232
_Mode$ = 240
_Prot$ = 248
?open@?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAXPEBDHH@Z PROC ; std::basic_fstream<char,std::char_traits<char> >::open, COMDAT

; 1358 : 		{	// open a C stream with specified mode

$LN5:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 1359 : 		if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)

  00039	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	48 83 c0 18	 add	 rax, 24
  00044	44 8b 8d f8 00
	00 00		 mov	 r9d, DWORD PTR _Prot$[rbp]
  0004b	44 8b 85 f0 00
	00 00		 mov	 r8d, DWORD PTR _Mode$[rbp]
  00052	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Filename$[rbp]
  00059	48 8b c8	 mov	 rcx, rax
  0005c	e8 00 00 00 00	 call	 ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
  00061	48 85 c0	 test	 rax, rax
  00064	75 2e		 jne	 SHORT $LN2@open

; 1360 : 			_Myios::setstate(ios_base::failbit);

  00066	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00070	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00074	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007b	48 03 c8	 add	 rcx, rax
  0007e	48 8b c1	 mov	 rax, rcx
  00081	45 33 c0	 xor	 r8d, r8d
  00084	ba 02 00 00 00	 mov	 edx, 2
  00089	48 8b c8	 mov	 rcx, rax
  0008c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z

; 1361 : 		else

  00092	eb 29		 jmp	 SHORT $LN3@open
$LN2@open:

; 1362 : 			_Myios::clear();	// added with C++11

  00094	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000a2	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	48 03 c8	 add	 rcx, rax
  000ac	48 8b c1	 mov	 rax, rcx
  000af	45 33 c0	 xor	 r8d, r8d
  000b2	33 d2		 xor	 edx, edx
  000b4	48 8b c8	 mov	 rcx, rax
  000b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
$LN3@open:

; 1363 : 		}

  000bd	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000c4	5f		 pop	 rdi
  000c5	5d		 pop	 rbp
  000c6	c3		 ret	 0
?open@?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAXPEBDHH@Z ENDP ; std::basic_fstream<char,std::char_traits<char> >::open
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ??1?$basic_fstream@DU?$char_traits@D@std@@@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$basic_fstream@DU?$char_traits@D@std@@@std@@UEAA@XZ PROC ; std::basic_fstream<char,std::char_traits<char> >::~basic_fstream<char,std::char_traits<char> >, COMDAT

; 1342 : 		{	// destroy the object

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8b 80 48 ff
	ff ff		 mov	 rax, QWORD PTR [rax-184]
  00038	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0003c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00043	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_7?$basic_fstream@DU?$char_traits@D@std@@@std@@6B@
  0004a	48 89 94 01 48
	ff ff ff	 mov	 QWORD PTR [rcx+rax-184], rdx
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8b 80 48 ff
	ff ff		 mov	 rax, QWORD PTR [rax-184]
  00060	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00064	48 2d b8 00 00
	00		 sub	 rax, 184		; 000000b8H
  0006a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00071	48 8b 89 48 ff
	ff ff		 mov	 rcx, QWORD PTR [rcx-184]
  00078	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  0007c	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00083	89 84 0a 44 ff
	ff ff		 mov	 DWORD PTR [rdx+rcx-188], eax

; 1343 : 		}

  0008a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00091	48 2d a0 00 00
	00		 sub	 rax, 160		; 000000a0H
  00097	48 8b c8	 mov	 rcx, rax
  0009a	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  0009f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a6	48 2d 98 00 00
	00		 sub	 rax, 152		; 00000098H
  000ac	48 8b c8	 mov	 rcx, rax
  000af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UEAA@XZ
  000b5	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000bc	5f		 pop	 rdi
  000bd	5d		 pop	 rbp
  000be	c3		 ret	 0
??1?$basic_fstream@DU?$char_traits@D@std@@@std@@UEAA@XZ ENDP ; std::basic_fstream<char,std::char_traits<char> >::~basic_fstream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
$initVBases$ = 296
??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_fstream<char,std::char_traits<char> >::basic_fstream<char,std::char_traits<char> >, COMDAT

; 1196 : 		{	// construct unopened

$LN8:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002e	48 c7 85 e8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T2[rbp], -2
  00039	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR $T1[rbp], 0
  00043	83 bd 28 01 00
	00 00		 cmp	 DWORD PTR $initVBases$[rbp], 0
  0004a	74 49		 je	 SHORT $LN2@basic_fstr
  0004c	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_8?$basic_fstream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
  0005a	48 89 08	 mov	 QWORD PTR [rax], rcx
  0005d	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00064	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_8?$basic_fstream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
  0006b	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
  0006f	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00076	48 05 b8 00 00
	00		 add	 rax, 184		; 000000b8H
  0007c	48 8b c8	 mov	 rcx, rax
  0007f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IEAA@XZ
  00085	90		 npad	 1
  00086	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  0008c	83 c8 01	 or	 eax, 1
  0008f	89 85 c4 00 00
	00		 mov	 DWORD PTR $T1[rbp], eax
$LN2@basic_fstr:

; 1195 : 		: _Mybase(&_Filebuffer)

  00095	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009c	48 83 c0 18	 add	 rax, 24
  000a0	45 33 c0	 xor	 r8d, r8d
  000a3	48 8b d0	 mov	 rdx, rax
  000a6	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
  000b3	90		 npad	 1

; 1196 : 		{	// construct unopened

  000b4	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000bb	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000be	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000c2	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_7?$basic_fstream@DU?$char_traits@D@std@@@std@@6B@
  000d0	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
  000d4	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000db	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000de	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000e2	48 2d b8 00 00
	00		 sub	 rax, 184		; 000000b8H
  000e8	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ef	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000f2	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  000f6	48 8b 95 20 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  000fd	89 44 0a fc	 mov	 DWORD PTR [rdx+rcx-4], eax
  00101	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00108	48 83 c0 18	 add	 rax, 24
  0010c	33 d2		 xor	 edx, edx
  0010e	48 8b c8	 mov	 rcx, rax
  00111	e8 00 00 00 00	 call	 ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
  00116	90		 npad	 1

; 1197 : 		}

  00117	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0011e	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00125	5f		 pop	 rdi
  00126	5d		 pop	 rbp
  00127	c3		 ret	 0
??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_fstream<char,std::char_traits<char> >::basic_fstream<char,std::char_traits<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
$initVBases$ = 296
?dtor$0@?0???0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA PROC ; `std::basic_fstream<char,std::char_traits<char> >::basic_fstream<char,std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  0001a	83 e0 01	 and	 eax, 1
  0001d	85 c0		 test	 eax, eax
  0001f	74 1b		 je	 SHORT $LN5@dtor$0
  00021	83 a5 c4 00 00
	00 fe		 and	 DWORD PTR $T1[rbp], -2
  00028	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002f	48 81 c1 b8 00
	00 00		 add	 rcx, 184		; 000000b8H
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ
$LN5@dtor$0:
  0003c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?dtor$0@?0???0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA ENDP ; `std::basic_fstream<char,std::char_traits<char> >::basic_fstream<char,std::char_traits<char> >'::`1'::dtor$0
$T1 = 196
$T2 = 232
this$ = 288
$initVBases$ = 296
?dtor$1@?0???0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA PROC ; `std::basic_fstream<char,std::char_traits<char> >::basic_fstream<char,std::char_traits<char> >'::`1'::dtor$1
  00043	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00048	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0004d	55		 push	 rbp
  0004e	57		 push	 rdi
  0004f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00053	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00057	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005e	48 83 c1 20	 add	 rcx, 32			; 00000020H
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UEAA@XZ
  00068	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006c	5f		 pop	 rdi
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
?dtor$1@?0???0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA ENDP ; `std::basic_fstream<char,std::char_traits<char> >::basic_fstream<char,std::char_traits<char> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
$initVBases$ = 296
?dtor$0@?0???0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA PROC ; `std::basic_fstream<char,std::char_traits<char> >::basic_fstream<char,std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  0001a	83 e0 01	 and	 eax, 1
  0001d	85 c0		 test	 eax, eax
  0001f	74 1b		 je	 SHORT $LN5@dtor$0
  00021	83 a5 c4 00 00
	00 fe		 and	 DWORD PTR $T1[rbp], -2
  00028	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002f	48 81 c1 b8 00
	00 00		 add	 rcx, 184		; 000000b8H
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ
$LN5@dtor$0:
  0003c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?dtor$0@?0???0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA ENDP ; `std::basic_fstream<char,std::char_traits<char> >::basic_fstream<char,std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
$initVBases$ = 296
?dtor$1@?0???0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA PROC ; `std::basic_fstream<char,std::char_traits<char> >::basic_fstream<char,std::char_traits<char> >'::`1'::dtor$1
  00043	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00048	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0004d	55		 push	 rbp
  0004e	57		 push	 rdi
  0004f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00053	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00057	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005e	48 83 c1 20	 add	 rcx, 32			; 00000020H
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UEAA@XZ
  00068	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006c	5f		 pop	 rdi
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
?dtor$1@?0???0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA ENDP ; `std::basic_fstream<char,std::char_traits<char> >::basic_fstream<char,std::char_traits<char> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ PROC ; std::basic_ofstream<char,std::char_traits<char> >::`vbase destructor', COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 05 a8 00 00
	00		 add	 rax, 168		; 000000a8H
  00037	48 8b c8	 mov	 rcx, rax
  0003a	e8 00 00 00 00	 call	 ??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >
  0003f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00046	48 05 a8 00 00
	00		 add	 rax, 168		; 000000a8H
  0004c	48 8b c8	 mov	 rcx, rax
  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ
  00055	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005c	5f		 pop	 rdi
  0005d	5d		 pop	 rbp
  0005e	c3		 ret	 0
??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ ENDP ; std::basic_ofstream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	48 2d a8 00 00
	00		 sub	 rax, 168		; 000000a8H
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	e8 00 00 00 00	 call	 ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  00043	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00049	83 e0 01	 and	 eax, 1
  0004c	85 c0		 test	 eax, eax
  0004e	74 1a		 je	 SHORT $LN2@scalar
  00050	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00057	48 2d a8 00 00
	00		 sub	 rax, 168		; 000000a8H
  0005d	ba 08 01 00 00	 mov	 edx, 264		; 00000108H
  00062	48 8b c8	 mov	 rcx, rax
  00065	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  0006a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00071	48 2d a8 00 00
	00		 sub	 rax, 168		; 000000a8H
  00077	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0007e	5f		 pop	 rdi
  0007f	5d		 pop	 rbp
  00080	c3		 ret	 0
??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__autoclassinit2@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z
_TEXT	SEGMENT
this$ = 224
classSize$ = 232
?__autoclassinit2@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::__autoclassinit2, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  0002d	48 8b bd e0 00
	00 00		 mov	 rdi, QWORD PTR this$[rbp]
  00034	33 c0		 xor	 eax, eax
  00036	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR classSize$[rbp]
  0003d	f3 aa		 rep stosb
  0003f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00046	5f		 pop	 rdi
  00047	5d		 pop	 rbp
  00048	c3		 ret	 0
?__autoclassinit2@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  0003a	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 11		 je	 SHORT $LN2@scalar
  00047	ba 98 00 00 00	 mov	 edx, 152		; 00000098H
  0004c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back, COMDAT

; 723  : 		{	// set up putback area

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 724  : 		if (_Mysb::eback() != &_Mychar)

  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00037	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003e	48 83 c1 70	 add	 rcx, 112		; 00000070H
  00042	48 3b c1	 cmp	 rax, rcx
  00045	74 36		 je	 SHORT $LN2@Set_back

; 725  : 			{	// save current get buffer
; 726  : 			_Set_eback = _Mysb::eback();

  00047	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00054	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005b	48 89 81 88 00
	00 00		 mov	 QWORD PTR [rcx+136], rax

; 727  : 			_Set_egptr = _Mysb::egptr();

  00062	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00069	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0006f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00076	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax
$LN2@Set_back:

; 728  : 			}
; 729  : 		_Mysb::setg(&_Mychar, &_Mychar, &_Mychar + 1);

  0007d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00084	48 83 c0 71	 add	 rax, 113		; 00000071H
  00088	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008f	48 83 c1 70	 add	 rcx, 112		; 00000070H
  00093	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0009a	48 83 c2 70	 add	 rdx, 112		; 00000070H
  0009e	4c 8b c8	 mov	 r9, rax
  000a1	4c 8b c1	 mov	 r8, rcx
  000a4	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z

; 730  : 		}

  000b1	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000b8	5f		 pop	 rdi
  000b9	5d		 pop	 rbp
  000ba	c3		 ret	 0
?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back, COMDAT

; 717  : 		{	// restore buffer after putback

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 718  : 		if (_Mysb::eback() == &_Mychar)

  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00037	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003e	48 83 c1 70	 add	 rcx, 112		; 00000070H
  00042	48 3b c1	 cmp	 rax, rcx
  00045	75 37		 jne	 SHORT $LN2@Reset_back

; 719  : 			_Mysb::setg(_Set_eback, _Set_eback, _Set_egptr);

  00047	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004e	4c 8b 88 90 00
	00 00		 mov	 r9, QWORD PTR [rax+144]
  00055	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005c	4c 8b 80 88 00
	00 00		 mov	 r8, QWORD PTR [rax+136]
  00063	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 8b 90 88 00
	00 00		 mov	 rdx, QWORD PTR [rax+136]
  00071	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00078	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z
$LN2@Reset_back:

; 720  : 		}

  0007e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00085	5f		 pop	 rdi
  00086	5d		 pop	 rbp
  00087	c3		 ret	 0
?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEBV?$codecvt@DDU_Mbstatet@@@2@@Z
_TEXT	SEGMENT
this$ = 224
_Newpcvt$ = 232
?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEBV?$codecvt@DDU_Mbstatet@@@2@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt, COMDAT

; 698  : 		{	// initialize codecvt pointer

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 699  : 		if (_Newpcvt->always_noconv())

  0002f	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Newpcvt$[rbp]
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?always_noconv@codecvt_base@std@@QEBA_NXZ
  0003c	0f b6 c0	 movzx	 eax, al
  0003f	85 c0		 test	 eax, eax
  00041	74 11		 je	 SHORT $LN2@Initcvt

; 700  : 			_Pcvt = 0;	// nothing to do

  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0

; 701  : 		else

  00052	eb 1f		 jmp	 SHORT $LN3@Initcvt
$LN2@Initcvt:

; 702  : 			{	// set up for nontrivial codecvt facet
; 703  : 			_Pcvt = _Newpcvt;

  00054	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Newpcvt$[rbp]
  00062	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 704  : 			_Mysb::_Init();	// reset any buffering

  00066	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXXZ
$LN3@Initcvt:

; 705  : 			}
; 706  : 		}

  00073	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0007a	5f		 pop	 rdi
  0007b	5d		 pop	 rbp
  0007c	c3		 ret	 0
?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEBV?$codecvt@DDU_Mbstatet@@@2@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ
_TEXT	SEGMENT
_STRING_INC$5 = 4
_Dest$6 = 40
_Str$7 = 72
_Count$8 = 136
$T9 = 548
$T10 = 580
$T11 = 612
$T12 = 648
$T13 = 696
$T14 = 744
$T15 = 788
$T16 = 824
$T17 = 868
$T18 = 900
$T19 = 932
$T20 = 964
$T21 = 996
$T22 = 1032
tv208 = 1048
tv206 = 1048
tv205 = 1048
tv86 = 1048
tv197 = 1056
tv192 = 1056
tv188 = 1056
tv172 = 1064
tv132 = 1064
tv135 = 1072
tv204 = 1080
tv190 = 1088
tv147 = 1096
__$ArrayPad$ = 1104
this$ = 1152
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite, COMDAT

; 657  : 		{	// put shift to initial conversion state, as needed

$LN28:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 98 04
	00 00		 sub	 rsp, 1176		; 00000498H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 26 01 00 00	 mov	 ecx, 294		; 00000126H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1208]
  0002a	48 c7 85 08 04
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T22[rbp], -2
  00035	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003c	48 33 c5	 xor	 rax, rbp
  0003f	48 89 85 50 04
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00046	c7 85 e4 03 00
	00 00 00 00 00	 mov	 DWORD PTR $T21[rbp], 0

; 658  : 		if (_Pcvt == 0 || !_Wrotesome)

  00050	48 8b 85 80 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00057	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0005c	74 0f		 je	 SHORT $LN9@Endwrite
  0005e	48 8b 85 80 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00065	0f b6 40 71	 movzx	 eax, BYTE PTR [rax+113]
  00069	85 c0		 test	 eax, eax
  0006b	75 0c		 jne	 SHORT $LN7@Endwrite
$LN9@Endwrite:

; 659  : 			return (true);

  0006d	b0 01		 mov	 al, 1
  0006f	e9 42 03 00 00	 jmp	 $LN1@Endwrite

; 660  : 		else

  00074	e9 3d 03 00 00	 jmp	 $LN1@Endwrite
$LN7@Endwrite:

; 661  : 			{	// may have to put
; 662  : 			const int _STRING_INC = 8;

  00079	c7 45 04 08 00
	00 00		 mov	 DWORD PTR _STRING_INC$5[rbp], 8

; 663  : 			char *_Dest;
; 664  : 			if (_Traits::eq_int_type(_Traits::eof(), overflow()))

  00080	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00085	48 8b 8d 80 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008f	48 89 8d 18 04
	00 00		 mov	 QWORD PTR tv208[rbp], rcx
  00096	8b d0		 mov	 edx, eax
  00098	48 8b 8d 80 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009f	48 8b 85 18 04
	00 00		 mov	 rax, QWORD PTR tv208[rbp]
  000a6	ff 50 18	 call	 QWORD PTR [rax+24]
  000a9	89 85 24 02 00
	00		 mov	 DWORD PTR $T9[rbp], eax
  000af	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000b4	89 85 44 02 00
	00		 mov	 DWORD PTR $T10[rbp], eax
  000ba	48 8d 95 24 02
	00 00		 lea	 rdx, QWORD PTR $T9[rbp]
  000c1	48 8d 8d 44 02
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  000c8	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  000cd	0f b6 c0	 movzx	 eax, al
  000d0	85 c0		 test	 eax, eax
  000d2	74 07		 je	 SHORT $LN10@Endwrite

; 665  : 				return (false);

  000d4	32 c0		 xor	 al, al
  000d6	e9 db 02 00 00	 jmp	 $LN1@Endwrite
$LN10@Endwrite:

; 666  : 
; 667  : 			string _Str(_STRING_INC, '\0');

  000db	45 33 c0	 xor	 r8d, r8d
  000de	ba 08 00 00 00	 mov	 edx, 8
  000e3	48 8d 4d 48	 lea	 rcx, QWORD PTR _Str$7[rbp]
  000e7	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000ec	90		 npad	 1
$LN2@Endwrite:

; 668  : 			for (; ; )
; 669  : 				switch (_Pcvt->unshift(_State,

  000ed	48 8d 95 88 02
	00 00		 lea	 rdx, QWORD PTR $T12[rbp]
  000f4	48 8d 4d 48	 lea	 rcx, QWORD PTR _Str$7[rbp]
  000f8	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  000fd	48 89 85 18 04
	00 00		 mov	 QWORD PTR tv86[rbp], rax
  00104	48 8b 85 18 04
	00 00		 mov	 rax, QWORD PTR tv86[rbp]
  0010b	48 89 85 20 04
	00 00		 mov	 QWORD PTR tv188[rbp], rax
  00112	48 8b 8d 20 04
	00 00		 mov	 rcx, QWORD PTR tv188[rbp]
  00119	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  0011e	48 89 85 28 04
	00 00		 mov	 QWORD PTR tv132[rbp], rax
  00125	48 8d 4d 48	 lea	 rcx, QWORD PTR _Str$7[rbp]
  00129	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  0012e	48 8b 8d 28 04
	00 00		 mov	 rcx, QWORD PTR tv132[rbp]
  00135	48 03 c8	 add	 rcx, rax
  00138	48 8b c1	 mov	 rax, rcx
  0013b	48 89 85 30 04
	00 00		 mov	 QWORD PTR tv135[rbp], rax
  00142	48 8d 95 b8 02
	00 00		 lea	 rdx, QWORD PTR $T13[rbp]
  00149	48 8d 4d 48	 lea	 rcx, QWORD PTR _Str$7[rbp]
  0014d	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  00152	48 89 85 38 04
	00 00		 mov	 QWORD PTR tv204[rbp], rax
  00159	48 8b 85 38 04
	00 00		 mov	 rax, QWORD PTR tv204[rbp]
  00160	48 89 85 40 04
	00 00		 mov	 QWORD PTR tv190[rbp], rax
  00167	48 8b 8d 40 04
	00 00		 mov	 rcx, QWORD PTR tv190[rbp]
  0016e	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  00173	48 8b 8d 80 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0017a	48 83 c1 74	 add	 rcx, 116		; 00000074H
  0017e	48 8d 55 28	 lea	 rdx, QWORD PTR _Dest$6[rbp]
  00182	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  00187	48 8b 95 30 04
	00 00		 mov	 rdx, QWORD PTR tv135[rbp]
  0018e	4c 8b ca	 mov	 r9, rdx
  00191	4c 8b c0	 mov	 r8, rax
  00194	48 8b d1	 mov	 rdx, rcx
  00197	48 8b 85 80 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0019e	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  001a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?unshift@?$codecvt@DDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z
  001a8	89 85 64 02 00
	00		 mov	 DWORD PTR $T11[rbp], eax
  001ae	48 8d 8d b8 02
	00 00		 lea	 rcx, QWORD PTR $T13[rbp]
  001b5	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  001ba	90		 npad	 1
  001bb	48 8d 8d 88 02
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  001c2	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  001c7	8b 85 64 02 00
	00		 mov	 eax, DWORD PTR $T11[rbp]
  001cd	89 85 48 04 00
	00		 mov	 DWORD PTR tv147[rbp], eax
  001d3	83 bd 48 04 00
	00 00		 cmp	 DWORD PTR tv147[rbp], 0
  001da	74 1b		 je	 SHORT $LN11@Endwrite
  001dc	83 bd 48 04 00
	00 01		 cmp	 DWORD PTR tv147[rbp], 1
  001e3	74 1d		 je	 SHORT $LN12@Endwrite
  001e5	83 bd 48 04 00
	00 03		 cmp	 DWORD PTR tv147[rbp], 3
  001ec	0f 84 83 01 00
	00		 je	 $LN16@Endwrite
  001f2	e9 97 01 00 00	 jmp	 $LN17@Endwrite
$LN11@Endwrite:

; 670  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))
; 671  : 				{	// test result of homing conversion
; 672  : 				case codecvt_base::ok:
; 673  : 					_Wrotesome = false;	// homed successfully

  001f7	48 8b 85 80 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001fe	c6 40 71 00	 mov	 BYTE PTR [rax+113], 0
$LN12@Endwrite:

; 674  : 
; 675  : 				case codecvt_base::partial:	// fall through
; 676  : 					{	// put any generated bytes
; 677  : 					size_t _Count = _Dest - &*_Str.begin();

  00202	48 8d 95 e8 02
	00 00		 lea	 rdx, QWORD PTR $T14[rbp]
  00209	48 8d 4d 48	 lea	 rcx, QWORD PTR _Str$7[rbp]
  0020d	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  00212	48 89 85 18 04
	00 00		 mov	 QWORD PTR tv205[rbp], rax
  00219	48 8b 85 18 04
	00 00		 mov	 rax, QWORD PTR tv205[rbp]
  00220	48 89 85 20 04
	00 00		 mov	 QWORD PTR tv192[rbp], rax
  00227	48 8b 8d 20 04
	00 00		 mov	 rcx, QWORD PTR tv192[rbp]
  0022e	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  00233	48 8b 4d 28	 mov	 rcx, QWORD PTR _Dest$6[rbp]
  00237	48 2b c8	 sub	 rcx, rax
  0023a	48 8b c1	 mov	 rax, rcx
  0023d	48 89 85 88 00
	00 00		 mov	 QWORD PTR _Count$8[rbp], rax
  00244	48 8d 8d e8 02
	00 00		 lea	 rcx, QWORD PTR $T14[rbp]
  0024b	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ

; 678  : 					if (0 < _Count && _Count !=

  00250	48 83 bd 88 00
	00 00 00	 cmp	 QWORD PTR _Count$8[rbp], 0
  00258	76 78		 jbe	 SHORT $LN19@Endwrite
  0025a	48 8d 95 38 03
	00 00		 lea	 rdx, QWORD PTR $T16[rbp]
  00261	48 8d 4d 48	 lea	 rcx, QWORD PTR _Str$7[rbp]
  00265	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  0026a	48 89 85 18 04
	00 00		 mov	 QWORD PTR tv206[rbp], rax
  00271	48 8b 85 18 04
	00 00		 mov	 rax, QWORD PTR tv206[rbp]
  00278	48 89 85 20 04
	00 00		 mov	 QWORD PTR tv197[rbp], rax
  0027f	8b 85 e4 03 00
	00		 mov	 eax, DWORD PTR $T21[rbp]
  00285	83 c8 01	 or	 eax, 1
  00288	89 85 e4 03 00
	00		 mov	 DWORD PTR $T21[rbp], eax
  0028e	48 8b 8d 20 04
	00 00		 mov	 rcx, QWORD PTR tv197[rbp]
  00295	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  0029a	48 8b 8d 80 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002a1	4c 8b 89 80 00
	00 00		 mov	 r9, QWORD PTR [rcx+128]
  002a8	4c 8b 85 88 00
	00 00		 mov	 r8, QWORD PTR _Count$8[rbp]
  002af	ba 01 00 00 00	 mov	 edx, 1
  002b4	48 8b c8	 mov	 rcx, rax
  002b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwrite
  002bd	48 39 85 88 00
	00 00		 cmp	 QWORD PTR _Count$8[rbp], rax
  002c4	74 0c		 je	 SHORT $LN19@Endwrite
  002c6	c7 85 28 04 00
	00 01 00 00 00	 mov	 DWORD PTR tv172[rbp], 1
  002d0	eb 0a		 jmp	 SHORT $LN20@Endwrite
$LN19@Endwrite:
  002d2	c7 85 28 04 00
	00 00 00 00 00	 mov	 DWORD PTR tv172[rbp], 0
$LN20@Endwrite:
  002dc	0f b6 85 28 04
	00 00		 movzx	 eax, BYTE PTR tv172[rbp]
  002e3	88 85 14 03 00
	00		 mov	 BYTE PTR $T15[rbp], al
  002e9	8b 85 e4 03 00
	00		 mov	 eax, DWORD PTR $T21[rbp]
  002ef	83 e0 01	 and	 eax, 1
  002f2	85 c0		 test	 eax, eax
  002f4	74 13		 je	 SHORT $LN27@Endwrite
  002f6	83 a5 e4 03 00
	00 fe		 and	 DWORD PTR $T21[rbp], -2
  002fd	48 8d 8d 38 03
	00 00		 lea	 rcx, QWORD PTR $T16[rbp]
  00304	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
$LN27@Endwrite:
  00309	0f b6 85 14 03
	00 00		 movzx	 eax, BYTE PTR $T15[rbp]
  00310	85 c0		 test	 eax, eax
  00312	74 1c		 je	 SHORT $LN13@Endwrite

; 679  : 						fwrite(&*_Str.begin(), 1, _Count, _Myfile))
; 680  : 						return (false);	// write failed

  00314	c6 85 64 03 00
	00 00		 mov	 BYTE PTR $T17[rbp], 0
  0031b	48 8d 4d 48	 lea	 rcx, QWORD PTR _Str$7[rbp]
  0031f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00324	0f b6 85 64 03
	00 00		 movzx	 eax, BYTE PTR $T17[rbp]
  0032b	e9 86 00 00 00	 jmp	 $LN1@Endwrite
$LN13@Endwrite:

; 681  : 					if (!_Wrotesome)

  00330	48 8b 85 80 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00337	0f b6 40 71	 movzx	 eax, BYTE PTR [rax+113]
  0033b	85 c0		 test	 eax, eax
  0033d	75 19		 jne	 SHORT $LN14@Endwrite

; 682  : 						return (true);

  0033f	c6 85 84 03 00
	00 01		 mov	 BYTE PTR $T18[rbp], 1
  00346	48 8d 4d 48	 lea	 rcx, QWORD PTR _Str$7[rbp]
  0034a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0034f	0f b6 85 84 03
	00 00		 movzx	 eax, BYTE PTR $T18[rbp]
  00356	eb 5e		 jmp	 SHORT $LN1@Endwrite
$LN14@Endwrite:

; 683  : 					if (_Count == 0)

  00358	48 83 bd 88 00
	00 00 00	 cmp	 QWORD PTR _Count$8[rbp], 0
  00360	75 11		 jne	 SHORT $LN15@Endwrite

; 684  : 						_Str.append(_STRING_INC, '\0');	// try with more space

  00362	45 33 c0	 xor	 r8d, r8d
  00365	ba 08 00 00 00	 mov	 edx, 8
  0036a	48 8d 4d 48	 lea	 rcx, QWORD PTR _Str$7[rbp]
  0036e	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN15@Endwrite:

; 685  : 					break;

  00373	eb 32		 jmp	 SHORT $LN5@Endwrite
$LN16@Endwrite:

; 686  : 					}
; 687  : 
; 688  : 				case codecvt_base::noconv:
; 689  : 					return (true);	// nothing to do

  00375	c6 85 a4 03 00
	00 01		 mov	 BYTE PTR $T19[rbp], 1
  0037c	48 8d 4d 48	 lea	 rcx, QWORD PTR _Str$7[rbp]
  00380	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00385	0f b6 85 a4 03
	00 00		 movzx	 eax, BYTE PTR $T19[rbp]
  0038c	eb 28		 jmp	 SHORT $LN1@Endwrite
$LN17@Endwrite:

; 690  : 
; 691  : 				default:
; 692  : 					return (false);	// conversion failed

  0038e	c6 85 c4 03 00
	00 00		 mov	 BYTE PTR $T20[rbp], 0
  00395	48 8d 4d 48	 lea	 rcx, QWORD PTR _Str$7[rbp]
  00399	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0039e	0f b6 85 c4 03
	00 00		 movzx	 eax, BYTE PTR $T20[rbp]
  003a5	eb 0f		 jmp	 SHORT $LN1@Endwrite
$LN5@Endwrite:

; 693  : 				}

  003a7	e9 41 fd ff ff	 jmp	 $LN2@Endwrite

; 694  : 			}

  003ac	48 8d 4d 48	 lea	 rcx, QWORD PTR _Str$7[rbp]
  003b0	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  003b5	90		 npad	 1
$LN1@Endwrite:

; 695  : 		}

  003b6	48 8b f8	 mov	 rdi, rax
  003b9	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  003bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ$rtcFrameData
  003c4	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  003c9	48 8b c7	 mov	 rax, rdi
  003cc	48 8b 8d 50 04
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  003d3	48 33 cd	 xor	 rcx, rbp
  003d6	e8 00 00 00 00	 call	 __security_check_cookie
  003db	48 8d a5 68 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1128]
  003e2	5f		 pop	 rdi
  003e3	5d		 pop	 rbp
  003e4	c3		 ret	 0
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_STRING_INC$5 = 4
_Dest$6 = 40
_Str$7 = 72
_Count$8 = 136
$T9 = 548
$T10 = 580
$T11 = 612
$T12 = 648
$T13 = 696
$T14 = 744
$T15 = 788
$T16 = 824
$T17 = 868
$T18 = 900
$T19 = 932
$T20 = 964
$T21 = 996
$T22 = 1032
tv208 = 1048
tv206 = 1048
tv205 = 1048
tv86 = 1048
tv197 = 1056
tv192 = 1056
tv188 = 1056
tv172 = 1064
tv132 = 1064
tv135 = 1072
tv204 = 1080
tv190 = 1088
tv147 = 1096
__$ArrayPad$ = 1104
this$ = 1152
?dtor$0@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::_Endwrite'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 4d 48	 lea	 rcx, QWORD PTR _Str$7[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::_Endwrite'::`1'::dtor$0
_STRING_INC$5 = 4
_Dest$6 = 40
_Str$7 = 72
_Count$8 = 136
$T9 = 548
$T10 = 580
$T11 = 612
$T12 = 648
$T13 = 696
$T14 = 744
$T15 = 788
$T16 = 824
$T17 = 868
$T18 = 900
$T19 = 932
$T20 = 964
$T21 = 996
$T22 = 1032
tv208 = 1048
tv206 = 1048
tv205 = 1048
tv86 = 1048
tv197 = 1056
tv192 = 1056
tv188 = 1056
tv172 = 1064
tv132 = 1064
tv135 = 1072
tv204 = 1080
tv190 = 1088
tv147 = 1096
__$ArrayPad$ = 1104
this$ = 1152
?dtor$1@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::_Endwrite'::`1'::dtor$1
  00024	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00029	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002e	55		 push	 rbp
  0002f	57		 push	 rdi
  00030	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00034	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00038	48 8d 8d 88 02
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  0003f	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  00044	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00048	5f		 pop	 rdi
  00049	5d		 pop	 rbp
  0004a	c3		 ret	 0
?dtor$1@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::_Endwrite'::`1'::dtor$1
_STRING_INC$5 = 4
_Dest$6 = 40
_Str$7 = 72
_Count$8 = 136
$T9 = 548
$T10 = 580
$T11 = 612
$T12 = 648
$T13 = 696
$T14 = 744
$T15 = 788
$T16 = 824
$T17 = 868
$T18 = 900
$T19 = 932
$T20 = 964
$T21 = 996
$T22 = 1032
tv208 = 1048
tv206 = 1048
tv205 = 1048
tv86 = 1048
tv197 = 1056
tv192 = 1056
tv188 = 1056
tv172 = 1064
tv132 = 1064
tv135 = 1072
tv204 = 1080
tv190 = 1088
tv147 = 1096
__$ArrayPad$ = 1104
this$ = 1152
?dtor$2@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::_Endwrite'::`1'::dtor$2
  0004b	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00050	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00055	55		 push	 rbp
  00056	57		 push	 rdi
  00057	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0005b	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  0005f	48 8d 8d b8 02
	00 00		 lea	 rcx, QWORD PTR $T13[rbp]
  00066	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  0006b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006f	5f		 pop	 rdi
  00070	5d		 pop	 rbp
  00071	c3		 ret	 0
?dtor$2@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::_Endwrite'::`1'::dtor$2
_STRING_INC$5 = 4
_Dest$6 = 40
_Str$7 = 72
_Count$8 = 136
$T9 = 548
$T10 = 580
$T11 = 612
$T12 = 648
$T13 = 696
$T14 = 744
$T15 = 788
$T16 = 824
$T17 = 868
$T18 = 900
$T19 = 932
$T20 = 964
$T21 = 996
$T22 = 1032
tv208 = 1048
tv206 = 1048
tv205 = 1048
tv86 = 1048
tv197 = 1056
tv192 = 1056
tv188 = 1056
tv172 = 1064
tv132 = 1064
tv135 = 1072
tv204 = 1080
tv190 = 1088
tv147 = 1096
__$ArrayPad$ = 1104
this$ = 1152
?dtor$3@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::_Endwrite'::`1'::dtor$3
  00072	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00077	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0007c	55		 push	 rbp
  0007d	57		 push	 rdi
  0007e	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00082	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00086	48 8d 8d e8 02
	00 00		 lea	 rcx, QWORD PTR $T14[rbp]
  0008d	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  00092	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?dtor$3@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::_Endwrite'::`1'::dtor$3
_STRING_INC$5 = 4
_Dest$6 = 40
_Str$7 = 72
_Count$8 = 136
$T9 = 548
$T10 = 580
$T11 = 612
$T12 = 648
$T13 = 696
$T14 = 744
$T15 = 788
$T16 = 824
$T17 = 868
$T18 = 900
$T19 = 932
$T20 = 964
$T21 = 996
$T22 = 1032
tv208 = 1048
tv206 = 1048
tv205 = 1048
tv86 = 1048
tv197 = 1056
tv192 = 1056
tv188 = 1056
tv172 = 1064
tv132 = 1064
tv135 = 1072
tv204 = 1080
tv190 = 1088
tv147 = 1096
__$ArrayPad$ = 1104
this$ = 1152
?dtor$4@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::_Endwrite'::`1'::dtor$4
  00099	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0009e	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000a3	55		 push	 rbp
  000a4	57		 push	 rdi
  000a5	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000a9	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  000ad	8b 85 e4 03 00
	00		 mov	 eax, DWORD PTR $T21[rbp]
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 13		 je	 SHORT $LN26@dtor$4
  000ba	83 a5 e4 03 00
	00 fe		 and	 DWORD PTR $T21[rbp], -2
  000c1	48 8d 8d 38 03
	00 00		 lea	 rcx, QWORD PTR $T16[rbp]
  000c8	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
$LN26@dtor$4:
  000cd	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000d1	5f		 pop	 rdi
  000d2	5d		 pop	 rbp
  000d3	c3		 ret	 0
?dtor$4@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::_Endwrite'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_STRING_INC$5 = 4
_Dest$6 = 40
_Str$7 = 72
_Count$8 = 136
$T9 = 548
$T10 = 580
$T11 = 612
$T12 = 648
$T13 = 696
$T14 = 744
$T15 = 788
$T16 = 824
$T17 = 868
$T18 = 900
$T19 = 932
$T20 = 964
$T21 = 996
$T22 = 1032
tv208 = 1048
tv206 = 1048
tv205 = 1048
tv86 = 1048
tv197 = 1056
tv192 = 1056
tv188 = 1056
tv172 = 1064
tv132 = 1064
tv135 = 1072
tv204 = 1080
tv190 = 1088
tv147 = 1096
__$ArrayPad$ = 1104
this$ = 1152
?dtor$0@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::_Endwrite'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 4d 48	 lea	 rcx, QWORD PTR _Str$7[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::_Endwrite'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_STRING_INC$5 = 4
_Dest$6 = 40
_Str$7 = 72
_Count$8 = 136
$T9 = 548
$T10 = 580
$T11 = 612
$T12 = 648
$T13 = 696
$T14 = 744
$T15 = 788
$T16 = 824
$T17 = 868
$T18 = 900
$T19 = 932
$T20 = 964
$T21 = 996
$T22 = 1032
tv208 = 1048
tv206 = 1048
tv205 = 1048
tv86 = 1048
tv197 = 1056
tv192 = 1056
tv188 = 1056
tv172 = 1064
tv132 = 1064
tv135 = 1072
tv204 = 1080
tv190 = 1088
tv147 = 1096
__$ArrayPad$ = 1104
this$ = 1152
?dtor$1@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::_Endwrite'::`1'::dtor$1
  00024	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00029	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002e	55		 push	 rbp
  0002f	57		 push	 rdi
  00030	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00034	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00038	48 8d 8d 88 02
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  0003f	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  00044	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00048	5f		 pop	 rdi
  00049	5d		 pop	 rbp
  0004a	c3		 ret	 0
?dtor$1@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::_Endwrite'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_STRING_INC$5 = 4
_Dest$6 = 40
_Str$7 = 72
_Count$8 = 136
$T9 = 548
$T10 = 580
$T11 = 612
$T12 = 648
$T13 = 696
$T14 = 744
$T15 = 788
$T16 = 824
$T17 = 868
$T18 = 900
$T19 = 932
$T20 = 964
$T21 = 996
$T22 = 1032
tv208 = 1048
tv206 = 1048
tv205 = 1048
tv86 = 1048
tv197 = 1056
tv192 = 1056
tv188 = 1056
tv172 = 1064
tv132 = 1064
tv135 = 1072
tv204 = 1080
tv190 = 1088
tv147 = 1096
__$ArrayPad$ = 1104
this$ = 1152
?dtor$2@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::_Endwrite'::`1'::dtor$2
  0004b	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00050	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00055	55		 push	 rbp
  00056	57		 push	 rdi
  00057	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0005b	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  0005f	48 8d 8d b8 02
	00 00		 lea	 rcx, QWORD PTR $T13[rbp]
  00066	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  0006b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006f	5f		 pop	 rdi
  00070	5d		 pop	 rbp
  00071	c3		 ret	 0
?dtor$2@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::_Endwrite'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_STRING_INC$5 = 4
_Dest$6 = 40
_Str$7 = 72
_Count$8 = 136
$T9 = 548
$T10 = 580
$T11 = 612
$T12 = 648
$T13 = 696
$T14 = 744
$T15 = 788
$T16 = 824
$T17 = 868
$T18 = 900
$T19 = 932
$T20 = 964
$T21 = 996
$T22 = 1032
tv208 = 1048
tv206 = 1048
tv205 = 1048
tv86 = 1048
tv197 = 1056
tv192 = 1056
tv188 = 1056
tv172 = 1064
tv132 = 1064
tv135 = 1072
tv204 = 1080
tv190 = 1088
tv147 = 1096
__$ArrayPad$ = 1104
this$ = 1152
?dtor$3@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::_Endwrite'::`1'::dtor$3
  00072	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00077	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0007c	55		 push	 rbp
  0007d	57		 push	 rdi
  0007e	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00082	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00086	48 8d 8d e8 02
	00 00		 lea	 rcx, QWORD PTR $T14[rbp]
  0008d	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  00092	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?dtor$3@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::_Endwrite'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_STRING_INC$5 = 4
_Dest$6 = 40
_Str$7 = 72
_Count$8 = 136
$T9 = 548
$T10 = 580
$T11 = 612
$T12 = 648
$T13 = 696
$T14 = 744
$T15 = 788
$T16 = 824
$T17 = 868
$T18 = 900
$T19 = 932
$T20 = 964
$T21 = 996
$T22 = 1032
tv208 = 1048
tv206 = 1048
tv205 = 1048
tv86 = 1048
tv197 = 1056
tv192 = 1056
tv188 = 1056
tv172 = 1064
tv132 = 1064
tv135 = 1072
tv204 = 1080
tv190 = 1088
tv147 = 1096
__$ArrayPad$ = 1104
this$ = 1152
?dtor$4@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::_Endwrite'::`1'::dtor$4
  00099	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0009e	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000a3	55		 push	 rbp
  000a4	57		 push	 rdi
  000a5	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000a9	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  000ad	8b 85 e4 03 00
	00		 mov	 eax, DWORD PTR $T21[rbp]
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 13		 je	 SHORT $LN26@dtor$4
  000ba	83 a5 e4 03 00
	00 fe		 and	 DWORD PTR $T21[rbp], -2
  000c1	48 8d 8d 38 03
	00 00		 lea	 rcx, QWORD PTR $T16[rbp]
  000c8	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
$LN26@dtor$4:
  000cd	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000d1	5f		 pop	 rdi
  000d2	5d		 pop	 rbp
  000d3	c3		 ret	 0
?dtor$4@?0??_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::_Endwrite'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z
_TEXT	SEGMENT
_Pb$6 = 8
_Pn$7 = 40
_Nr$8 = 72
_Nw$9 = 104
tv66 = 308
__$ArrayPad$ = 312
this$ = 352
_File$ = 360
_Which$ = 368
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Init, COMDAT

; 622  : 		{	// initialize to C stream _File after {new, open, close}

$LN6:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  00018	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c5	 xor	 rax, rbp
  0003e	48 89 85 38 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 623  : 		__PURE_APPDOMAIN_GLOBAL static _Myst _Stinit;	// initial state
; 624  : 
; 625  : 		_Closef = _Which == _Openfl;

  00045	83 bd 70 01 00
	00 01		 cmp	 DWORD PTR _Which$[rbp], 1
  0004c	75 0c		 jne	 SHORT $LN4@Init
  0004e	c7 85 34 01 00
	00 01 00 00 00	 mov	 DWORD PTR tv66[rbp], 1
  00058	eb 0a		 jmp	 SHORT $LN5@Init
$LN4@Init:
  0005a	c7 85 34 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv66[rbp], 0
$LN5@Init:
  00064	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006b	0f b6 8d 34 01
	00 00		 movzx	 ecx, BYTE PTR tv66[rbp]
  00072	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 626  : 		_Wrotesome = false;

  00075	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007c	c6 40 71 00	 mov	 BYTE PTR [rax+113], 0

; 627  : 
; 628  : 		_Mysb::_Init();	// initialize stream buffer base object

  00080	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00087	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXXZ

; 629  : 
; 630  :  #ifndef _IORCNT
; 631  :   #define _IORCNT	_IOCNT	/* read and write counts are the same */
; 632  :   #define _IOWCNT _IOCNT
; 633  :  #endif /* _IORCNT */
; 634  : 
; 635  : 		if (_File != 0 && sizeof (_Elem) == 1)

  0008d	48 83 bd 68 01
	00 00 00	 cmp	 QWORD PTR _File$[rbp], 0
  00095	74 74		 je	 SHORT $LN2@Init
  00097	33 c0		 xor	 eax, eax
  00099	83 f8 01	 cmp	 eax, 1
  0009c	74 6d		 je	 SHORT $LN2@Init

; 636  : 			{	// point inside C stream with [first, first + count) buffer
; 637  : 			_Elem **_Pb = 0;

  0009e	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR _Pb$6[rbp], 0

; 638  : 			_Elem **_Pn = 0;

  000a6	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR _Pn$7[rbp], 0

; 639  : 			int *_Nr = 0;

  000ae	48 c7 45 48 00
	00 00 00	 mov	 QWORD PTR _Nr$8[rbp], 0

; 640  : 
; 641  : 			::_get_stream_buffer_pointers(

  000b6	4c 8d 4d 48	 lea	 r9, QWORD PTR _Nr$8[rbp]
  000ba	4c 8d 45 28	 lea	 r8, QWORD PTR _Pn$7[rbp]
  000be	48 8d 55 08	 lea	 rdx, QWORD PTR _Pb$6[rbp]
  000c2	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR _File$[rbp]
  000c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__get_stream_buffer_pointers

; 642  : 				_File,
; 643  : 				reinterpret_cast<char***>(&_Pb),
; 644  : 				reinterpret_cast<char***>(&_Pn),
; 645  : 				&_Nr);
; 646  : 			int *_Nw = _Nr;

  000cf	48 8b 45 48	 mov	 rax, QWORD PTR _Nr$8[rbp]
  000d3	48 89 45 68	 mov	 QWORD PTR _Nw$9[rbp], rax

; 647  : 
; 648  : 			_Mysb::_Init(_Pb, _Pn, _Nr, _Pb, _Pn, _Nw);

  000d7	48 8b 45 68	 mov	 rax, QWORD PTR _Nw$9[rbp]
  000db	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  000e0	48 8b 45 28	 mov	 rax, QWORD PTR _Pn$7[rbp]
  000e4	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000e9	48 8b 45 08	 mov	 rax, QWORD PTR _Pb$6[rbp]
  000ed	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000f2	4c 8b 4d 48	 mov	 r9, QWORD PTR _Nr$8[rbp]
  000f6	4c 8b 45 28	 mov	 r8, QWORD PTR _Pn$7[rbp]
  000fa	48 8b 55 08	 mov	 rdx, QWORD PTR _Pb$6[rbp]
  000fe	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00105	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAPEAD0PEAH001@Z
$LN2@Init:

; 649  : 			}
; 650  : 
; 651  : 		_Myfile = _File;

  0010b	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00112	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR _File$[rbp]
  00119	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx

; 652  : 		_State = _Stinit;

  00120	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00127	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
  0012e	48 89 48 74	 mov	 QWORD PTR [rax+116], rcx

; 653  : 		_Pcvt = 0;	// pointer to codecvt facet

  00132	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00139	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0

; 654  : 		}

  00141	48 8d 4d c0	 lea	 rcx, QWORD PTR [rbp-64]
  00145	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z$rtcFrameData
  0014c	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00151	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00158	48 33 cd	 xor	 rcx, rbp
  0015b	e8 00 00 00 00	 call	 __security_check_cookie
  00160	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  00167	5f		 pop	 rdi
  00168	5d		 pop	 rbp
  00169	c3		 ret	 0
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z
_TEXT	SEGMENT
this$ = 224
_Loc$ = 232
?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::imbue, COMDAT

; 617  : 		{	// set locale to argument (capture nontrivial codecvt facet)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 618  : 		_Initcvt(&_USE(_Loc, _Cvt));

  0002f	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Loc$[rbp]
  00036	e8 00 00 00 00	 call	 ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
  0003b	48 8b d0	 mov	 rdx, rax
  0003e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00045	e8 00 00 00 00	 call	 ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEBV?$codecvt@DDU_Mbstatet@@@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt

; 619  : 		}

  0004a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::imbue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
tv87 = 248
tv86 = 256
this$ = 304
?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::sync, COMDAT

; 610  : 		{	// synchronize C stream with external file

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR [rsp+344]

; 611  : 		return (_Myfile == 0

  0002a	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00039	74 78		 je	 SHORT $LN3@sync
  0003b	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00040	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00047	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0004a	48 89 8d f8 00
	00 00		 mov	 QWORD PTR tv87[rbp], rcx
  00051	8b d0		 mov	 edx, eax
  00053	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005a	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR tv87[rbp]
  00061	ff 50 18	 call	 QWORD PTR [rax+24]
  00064	89 85 c4 00 00
	00		 mov	 DWORD PTR $T1[rbp], eax
  0006a	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0006f	89 85 e4 00 00
	00		 mov	 DWORD PTR $T2[rbp], eax
  00075	48 8d 95 c4 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  0007c	48 8d 8d e4 00
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  00083	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  00088	0f b6 c0	 movzx	 eax, al
  0008b	85 c0		 test	 eax, eax
  0008d	75 24		 jne	 SHORT $LN3@sync
  0008f	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00096	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  0009d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fflush
  000a3	85 c0		 test	 eax, eax
  000a5	7d 0c		 jge	 SHORT $LN3@sync
  000a7	c7 85 00 01 00
	00 ff ff ff ff	 mov	 DWORD PTR tv86[rbp], -1
  000b1	eb 0a		 jmp	 SHORT $LN4@sync
$LN3@sync:
  000b3	c7 85 00 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv86[rbp], 0
$LN4@sync:
  000bd	8b 85 00 01 00
	00		 mov	 eax, DWORD PTR tv86[rbp]

; 612  : 			|| _Traits::eq_int_type(_Traits::eof(), overflow())
; 613  : 			|| 0 <= fflush(_Myfile) ? 0 : -1);
; 614  : 		}

  000c3	48 8d a5 18 01
	00 00		 lea	 rsp, QWORD PTR [rbp+280]
  000ca	5f		 pop	 rdi
  000cb	5d		 pop	 rbp
  000cc	c3		 ret	 0
?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::sync
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PEAD_J@Z
_TEXT	SEGMENT
tv70 = 192
this$ = 240
_Buffer$ = 248
_Count$ = 256
?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PEAD_J@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::setbuf, COMDAT

; 597  : 		{	// offer _Buffer to C stream

$LN8:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 598  : 		if (_Myfile == 0 || setvbuf(_Myfile, (char *)_Buffer,

  00034	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003b	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00043	74 57		 je	 SHORT $LN4@setbuf
  00045	48 83 bd f8 00
	00 00 00	 cmp	 QWORD PTR _Buffer$[rbp], 0
  0004d	75 16		 jne	 SHORT $LN6@setbuf
  0004f	48 83 bd 00 01
	00 00 00	 cmp	 QWORD PTR _Count$[rbp], 0
  00057	75 0c		 jne	 SHORT $LN6@setbuf
  00059	c7 85 c0 00 00
	00 04 00 00 00	 mov	 DWORD PTR tv70[rbp], 4
  00063	eb 0a		 jmp	 SHORT $LN7@setbuf
$LN6@setbuf:
  00065	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv70[rbp], 0
$LN7@setbuf:
  0006f	4c 8b 8d 00 01
	00 00		 mov	 r9, QWORD PTR _Count$[rbp]
  00076	44 8b 85 c0 00
	00 00		 mov	 r8d, DWORD PTR tv70[rbp]
  0007d	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR _Buffer$[rbp]
  00084	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008b	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00092	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_setvbuf
  00098	85 c0		 test	 eax, eax
  0009a	74 06		 je	 SHORT $LN2@setbuf
$LN4@setbuf:

; 599  : 			_Buffer == 0 && _Count == 0 ? _IONBF : _IOFBF,
; 600  : 			(size_t)_Count * sizeof (_Elem)) != 0)
; 601  : 			return (0);	// failed

  0009c	33 c0		 xor	 eax, eax
  0009e	eb 29		 jmp	 SHORT $LN1@setbuf

; 602  : 		else

  000a0	eb 27		 jmp	 SHORT $LN3@setbuf
$LN2@setbuf:

; 603  : 			{	// new buffer, reinitialize pointers
; 604  : 			_Init(_Myfile, _Openfl);

  000a2	41 b8 01 00 00
	00		 mov	 r8d, 1
  000a8	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000af	48 8b 90 80 00
	00 00		 mov	 rdx, QWORD PTR [rax+128]
  000b6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000bd	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 605  : 			return (this);

  000c2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
$LN3@setbuf:
$LN1@setbuf:

; 606  : 			}
; 607  : 		}

  000c9	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  000d0	5f		 pop	 rdi
  000d1	5d		 pop	 rbp
  000d2	c3		 ret	 0
?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PEAD_J@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::setbuf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
_TEXT	SEGMENT
_Fileposition$ = 8
_Off$ = 40
$T4 = 260
__$ArrayPad$ = 280
this$ = 320
__$ReturnUdt$ = 328
_Pos$ = 336
__formal$ = 344
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::seekpos, COMDAT

; 579  : 		{	// change position to _Pos

$LN6:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00040	48 33 c5	 xor	 rax, rbp
  00043	48 89 85 18 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 580  : 		fpos_t _Fileposition = _POS_TYPE_TO_FPOS_T(_Pos);

  0004a	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR _Pos$[rbp]
  00051	e8 00 00 00 00	 call	 ?seekpos@?$fpos@U_Mbstatet@@@std@@QEBA_JXZ ; std::fpos<_Mbstatet>::seekpos
  00056	48 89 45 08	 mov	 QWORD PTR _Fileposition$[rbp], rax

; 581  : 		off_type _Off = static_cast<off_type>(_Pos) - static_cast<off_type>(_Fileposition);

  0005a	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR _Pos$[rbp]
  00061	e8 00 00 00 00	 call	 ??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ ; std::fpos<_Mbstatet>::operator __int64
  00066	48 2b 45 08	 sub	 rax, QWORD PTR _Fileposition$[rbp]
  0006a	48 89 45 28	 mov	 QWORD PTR _Off$[rbp], rax

; 582  : 
; 583  : 		if (_Myfile == 0 || !_Endwrite()
; 584  : 			|| fsetpos(_Myfile, &_Fileposition) != 0
; 585  : 			|| (_Off != 0 && _fseeki64(_Myfile, _Off, SEEK_CUR) != 0)
; 586  : 			|| fgetpos(_Myfile, &_Fileposition) != 0)

  0006e	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00075	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  0007d	74 74		 je	 SHORT $LN3@seekpos
  0007f	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00086	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
  0008b	0f b6 c0	 movzx	 eax, al
  0008e	85 c0		 test	 eax, eax
  00090	74 61		 je	 SHORT $LN3@seekpos
  00092	48 8d 55 08	 lea	 rdx, QWORD PTR _Fileposition$[rbp]
  00096	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009d	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fsetpos
  000aa	85 c0		 test	 eax, eax
  000ac	75 45		 jne	 SHORT $LN3@seekpos
  000ae	48 83 7d 28 00	 cmp	 QWORD PTR _Off$[rbp], 0
  000b3	74 22		 je	 SHORT $LN4@seekpos
  000b5	41 b8 01 00 00
	00		 mov	 r8d, 1
  000bb	48 8b 55 28	 mov	 rdx, QWORD PTR _Off$[rbp]
  000bf	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c6	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  000cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__fseeki64
  000d3	85 c0		 test	 eax, eax
  000d5	75 1c		 jne	 SHORT $LN3@seekpos
$LN4@seekpos:
  000d7	48 8d 55 08	 lea	 rdx, QWORD PTR _Fileposition$[rbp]
  000db	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000e2	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  000e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fgetpos
  000ef	85 c0		 test	 eax, eax
  000f1	74 1f		 je	 SHORT $LN2@seekpos
$LN3@seekpos:

; 587  : 			return (pos_type(_BADOFF));	// report failure

  000f3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_?_BADOFF@std@@3_JB
  000fa	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  000fd	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00104	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  00109	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  00110	eb 4f		 jmp	 SHORT $LN1@seekpos
$LN2@seekpos:

; 588  : 
; 589  : 		_State = _POS_TYPE_TO_STATE(_Pos);

  00112	48 8d 95 04 01
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  00119	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR _Pos$[rbp]
  00120	e8 00 00 00 00	 call	 ?state@?$fpos@U_Mbstatet@@@std@@QEBA?AU_Mbstatet@@XZ ; std::fpos<_Mbstatet>::state
  00125	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00128	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0012f	48 89 41 74	 mov	 QWORD PTR [rcx+116], rax

; 590  : 
; 591  : 		_Reset_back();	// revert from _Mychar buffer, discarding any putback

  00133	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0013a	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 592  : 		return (_POS_TYPE_FROM_STATE(pos_type, _State,

  0013f	4c 8b 45 08	 mov	 r8, QWORD PTR _Fileposition$[rbp]
  00143	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0014a	48 8b 50 74	 mov	 rdx, QWORD PTR [rax+116]
  0014e	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00155	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QEAA@U_Mbstatet@@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  0015a	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
$LN1@seekpos:

; 593  : 			_Fileposition));	// return new position
; 594  : 		}

  00161	48 8b f8	 mov	 rdi, rax
  00164	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00168	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z$rtcFrameData
  0016f	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00174	48 8b c7	 mov	 rax, rdi
  00177	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0017e	48 33 cd	 xor	 rcx, rbp
  00181	e8 00 00 00 00	 call	 __security_check_cookie
  00186	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  0018d	5f		 pop	 rdi
  0018e	5d		 pop	 rbp
  0018f	c3		 ret	 0
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
_TEXT	SEGMENT
_Fileposition$ = 8
__$ArrayPad$ = 216
this$ = 256
__$ReturnUdt$ = 264
_Off$ = 272
_Way$ = 280
__formal$ = 288
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::seekoff, COMDAT

; 557  : 		{	// change position by _Off

$LN8:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00040	48 33 c5	 xor	 rax, rbp
  00043	48 89 85 d8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 558  : 		fpos_t _Fileposition;
; 559  : 
; 560  : 		if (_Mysb::gptr() == &_Mychar	// something putback
; 561  : 			&& _Way == ios_base::cur	// a relative seek
; 562  : 			&& _Pcvt == 0)	// not converting

  0004a	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00051	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00057	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005e	48 83 c1 70	 add	 rcx, 112		; 00000070H
  00062	48 3b c1	 cmp	 rax, rcx
  00065	75 28		 jne	 SHORT $LN2@seekoff
  00067	83 bd 18 01 00
	00 01		 cmp	 DWORD PTR _Way$[rbp], 1
  0006e	75 1f		 jne	 SHORT $LN2@seekoff
  00070	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00077	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0007c	75 11		 jne	 SHORT $LN2@seekoff

; 563  : 			_Off -= (off_type)sizeof (_Elem);	// back up over _Elem bytes

  0007e	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR _Off$[rbp]
  00085	48 ff c8	 dec	 rax
  00088	48 89 85 10 01
	00 00		 mov	 QWORD PTR _Off$[rbp], rax
$LN2@seekoff:

; 564  : 
; 565  : 		if (_Myfile == 0 || !_Endwrite()
; 566  : 			|| ((_Off != 0 || _Way != ios_base::cur)
; 567  : 				&& _fseeki64(_Myfile, _Off, _Way) != 0)
; 568  : 			|| fgetpos(_Myfile, &_Fileposition) != 0)

  0008f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00096	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  0009e	74 68		 je	 SHORT $LN4@seekoff
  000a0	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a7	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
  000ac	0f b6 c0	 movzx	 eax, al
  000af	85 c0		 test	 eax, eax
  000b1	74 55		 je	 SHORT $LN4@seekoff
  000b3	48 83 bd 10 01
	00 00 00	 cmp	 QWORD PTR _Off$[rbp], 0
  000bb	75 09		 jne	 SHORT $LN6@seekoff
  000bd	83 bd 18 01 00
	00 01		 cmp	 DWORD PTR _Way$[rbp], 1
  000c4	74 26		 je	 SHORT $LN5@seekoff
$LN6@seekoff:
  000c6	44 8b 85 18 01
	00 00		 mov	 r8d, DWORD PTR _Way$[rbp]
  000cd	48 8b 95 10 01
	00 00		 mov	 rdx, QWORD PTR _Off$[rbp]
  000d4	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000db	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__fseeki64
  000e8	85 c0		 test	 eax, eax
  000ea	75 1c		 jne	 SHORT $LN4@seekoff
$LN5@seekoff:
  000ec	48 8d 55 08	 lea	 rdx, QWORD PTR _Fileposition$[rbp]
  000f0	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000f7	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  000fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fgetpos
  00104	85 c0		 test	 eax, eax
  00106	74 1f		 je	 SHORT $LN3@seekoff
$LN4@seekoff:

; 569  : 			return (pos_type(_BADOFF));	// report failure

  00108	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_?_BADOFF@std@@3_JB
  0010f	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00112	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00119	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  0011e	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  00125	eb 2e		 jmp	 SHORT $LN1@seekoff
$LN3@seekoff:

; 570  : 
; 571  : 		_Reset_back();	// revert from _Mychar buffer, discarding any putback

  00127	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0012e	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 572  : 		return (_POS_TYPE_FROM_STATE(pos_type, _State,

  00133	4c 8b 45 08	 mov	 r8, QWORD PTR _Fileposition$[rbp]
  00137	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0013e	48 8b 50 74	 mov	 rdx, QWORD PTR [rax+116]
  00142	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00149	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QEAA@U_Mbstatet@@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  0014e	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
$LN1@seekoff:

; 573  : 			_Fileposition));	// return new position
; 574  : 		}

  00155	48 8b f8	 mov	 rdi, rax
  00158	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0015c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z$rtcFrameData
  00163	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00168	48 8b c7	 mov	 rax, rdi
  0016b	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00172	48 33 cd	 xor	 rcx, rbp
  00175	e8 00 00 00 00	 call	 __security_check_cookie
  0017a	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00181	5f		 pop	 rdi
  00182	5d		 pop	 rbp
  00183	c3		 ret	 0
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
_TEXT	SEGMENT
_Ch$8 = 4
_Str$9 = 40
_Ch$10 = 100
_Dest$11 = 136
_Src$12 = 168
_Nleft$13 = 196
_Meta$14 = 228
$T15 = 644
$T16 = 676
$T17 = 712
$T18 = 760
$T19 = 808
$T20 = 852
$T21 = 888
$T22 = 936
$T23 = 980
$T24 = 1012
$T25 = 1048
tv139 = 1060
tv254 = 1064
tv253 = 1064
tv252 = 1064
tv155 = 1064
tv76 = 1064
tv248 = 1072
tv246 = 1072
tv243 = 1072
tv141 = 1072
tv239 = 1080
tv188 = 1080
tv165 = 1088
tv168 = 1096
tv251 = 1104
tv241 = 1112
tv180 = 1120
__$ArrayPad$ = 1128
this$ = 1168
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::uflow, COMDAT

; 490  : 		{	// get an element from stream, point past it

$LN31:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec b8 04
	00 00		 sub	 rsp, 1208		; 000004b8H
  0000e	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 2e 01 00 00	 mov	 ecx, 302		; 0000012eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 d8
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1240]
  0002a	48 c7 85 18 04
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T25[rbp], -2
  00035	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003c	48 33 c5	 xor	 rax, rbp
  0003f	48 89 85 68 04
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 491  : 		if (_Mysb::gptr() != 0
; 492  : 			&& _Mysb::gptr() < _Mysb::egptr())

  00046	48 8b 8d 90 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00053	48 85 c0	 test	 rax, rax
  00056	74 49		 je	 SHORT $LN10@uflow
  00058	48 8b 8d 90 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00065	48 89 85 28 04
	00 00		 mov	 QWORD PTR tv76[rbp], rax
  0006c	48 8b 8d 90 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00079	48 8b 8d 28 04
	00 00		 mov	 rcx, QWORD PTR tv76[rbp]
  00080	48 3b c8	 cmp	 rcx, rax
  00083	73 1c		 jae	 SHORT $LN10@uflow

; 493  : 			return (_Traits::to_int_type(

  00085	48 8b 8d 90 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ
  00092	48 8b c8	 mov	 rcx, rax
  00095	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHAEBD@Z ; std::char_traits<char>::to_int_type
  0009a	e9 14 04 00 00	 jmp	 $LN1@uflow
  0009f	eb 1b		 jmp	 SHORT $LN11@uflow
$LN10@uflow:

; 494  : 				*_Mysb::_Gninc()));	// return buffered
; 495  : 		else if (_Myfile == 0)

  000a1	48 8b 85 90 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a8	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  000b0	75 0a		 jne	 SHORT $LN11@uflow

; 496  : 			return (_Traits::eof());	// no open C stream, fail

  000b2	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000b7	e9 f7 03 00 00	 jmp	 $LN1@uflow
$LN11@uflow:

; 497  : 		_Reset_back();	// revert from _Mychar buffer

  000bc	48 8b 8d 90 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c3	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 498  : 		if (_Pcvt == 0)

  000c8	48 8b 85 90 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000cf	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  000d4	75 4e		 jne	 SHORT $LN13@uflow

; 499  : 			{	// no codecvt facet, just get it
; 500  : 			_Elem _Ch = 0;

  000d6	c6 45 04 00	 mov	 BYTE PTR _Ch$8[rbp], 0

; 501  : 			return (_Fgetc(_Ch, _Myfile) ? _Traits::to_int_type(_Ch)

  000da	48 8b 85 90 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000e1	48 8b 90 80 00
	00 00		 mov	 rdx, QWORD PTR [rax+128]
  000e8	48 8d 4d 04	 lea	 rcx, QWORD PTR _Ch$8[rbp]
  000ec	e8 00 00 00 00	 call	 ??$_Fgetc@D@std@@YA_NAEADPEAU_iobuf@@@Z ; std::_Fgetc<char>
  000f1	0f b6 c0	 movzx	 eax, al
  000f4	85 c0		 test	 eax, eax
  000f6	74 11		 je	 SHORT $LN23@uflow
  000f8	48 8d 4d 04	 lea	 rcx, QWORD PTR _Ch$8[rbp]
  000fc	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHAEBD@Z ; std::char_traits<char>::to_int_type
  00101	89 85 24 04 00
	00		 mov	 DWORD PTR tv139[rbp], eax
  00107	eb 0b		 jmp	 SHORT $LN24@uflow
$LN23@uflow:
  00109	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0010e	89 85 24 04 00
	00		 mov	 DWORD PTR tv139[rbp], eax
$LN24@uflow:
  00114	8b 85 24 04 00
	00		 mov	 eax, DWORD PTR tv139[rbp]
  0011a	e9 94 03 00 00	 jmp	 $LN1@uflow

; 502  : 				: _Traits::eof());
; 503  : 			}
; 504  : 		else

  0011f	e9 8f 03 00 00	 jmp	 $LN1@uflow
$LN13@uflow:

; 505  : 			{	// build string until codecvt succeeds
; 506  : 			string _Str;

  00124	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$9[rbp]
  00128	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0012d	90		 npad	 1
$LN2@uflow:

; 507  : 
; 508  : 			for (; ; )
; 509  : 				{	// get using codecvt facet
; 510  : 				_Elem _Ch, *_Dest;
; 511  : 				const char *_Src;
; 512  : 				int _Nleft;
; 513  : 				int _Meta = fgetc(_Myfile);

  0012e	48 8b 85 90 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00135	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  0013c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fgetc
  00142	89 85 e4 00 00
	00		 mov	 DWORD PTR _Meta$14[rbp], eax

; 514  : 
; 515  : 				if (_Meta == EOF)

  00148	83 bd e4 00 00
	00 ff		 cmp	 DWORD PTR _Meta$14[rbp], -1
  0014f	75 1f		 jne	 SHORT $LN15@uflow

; 516  : 					return (_Traits::eof());	// partial char?

  00151	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00156	89 85 84 02 00
	00		 mov	 DWORD PTR $T15[rbp], eax
  0015c	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$9[rbp]
  00160	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00165	8b 85 84 02 00
	00		 mov	 eax, DWORD PTR $T15[rbp]
  0016b	e9 43 03 00 00	 jmp	 $LN1@uflow
$LN15@uflow:

; 517  : 
; 518  : 				_Str.append(1, (char)_Meta);	// append byte and convert

  00170	44 0f b6 85 e4
	00 00 00	 movzx	 r8d, BYTE PTR _Meta$14[rbp]
  00178	ba 01 00 00 00	 mov	 edx, 1
  0017d	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$9[rbp]
  00181	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 519  : 				switch (_Pcvt->in(_State,

  00186	48 8d 45 65	 lea	 rax, QWORD PTR _Ch$10[rbp+1]
  0018a	48 89 85 28 04
	00 00		 mov	 QWORD PTR tv155[rbp], rax
  00191	48 8d 95 c8 02
	00 00		 lea	 rdx, QWORD PTR $T17[rbp]
  00198	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$9[rbp]
  0019c	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  001a1	48 89 85 30 04
	00 00		 mov	 QWORD PTR tv141[rbp], rax
  001a8	48 8b 85 30 04
	00 00		 mov	 rax, QWORD PTR tv141[rbp]
  001af	48 89 85 38 04
	00 00		 mov	 QWORD PTR tv239[rbp], rax
  001b6	48 8b 8d 38 04
	00 00		 mov	 rcx, QWORD PTR tv239[rbp]
  001bd	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  001c2	48 89 85 40 04
	00 00		 mov	 QWORD PTR tv165[rbp], rax
  001c9	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$9[rbp]
  001cd	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  001d2	48 8b 8d 40 04
	00 00		 mov	 rcx, QWORD PTR tv165[rbp]
  001d9	48 03 c8	 add	 rcx, rax
  001dc	48 8b c1	 mov	 rax, rcx
  001df	48 89 85 48 04
	00 00		 mov	 QWORD PTR tv168[rbp], rax
  001e6	48 8d 95 f8 02
	00 00		 lea	 rdx, QWORD PTR $T18[rbp]
  001ed	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$9[rbp]
  001f1	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  001f6	48 89 85 50 04
	00 00		 mov	 QWORD PTR tv251[rbp], rax
  001fd	48 8b 85 50 04
	00 00		 mov	 rax, QWORD PTR tv251[rbp]
  00204	48 89 85 58 04
	00 00		 mov	 QWORD PTR tv241[rbp], rax
  0020b	48 8b 8d 58 04
	00 00		 mov	 rcx, QWORD PTR tv241[rbp]
  00212	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  00217	48 8b 8d 90 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0021e	48 83 c1 74	 add	 rcx, 116		; 00000074H
  00222	48 8d 95 88 00
	00 00		 lea	 rdx, QWORD PTR _Dest$11[rbp]
  00229	48 89 54 24 38	 mov	 QWORD PTR [rsp+56], rdx
  0022e	48 8b 95 28 04
	00 00		 mov	 rdx, QWORD PTR tv155[rbp]
  00235	48 89 54 24 30	 mov	 QWORD PTR [rsp+48], rdx
  0023a	48 8d 55 64	 lea	 rdx, QWORD PTR _Ch$10[rbp]
  0023e	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  00243	48 8d 95 a8 00
	00 00		 lea	 rdx, QWORD PTR _Src$12[rbp]
  0024a	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0024f	48 8b 95 48 04
	00 00		 mov	 rdx, QWORD PTR tv168[rbp]
  00256	4c 8b ca	 mov	 r9, rdx
  00259	4c 8b c0	 mov	 r8, rax
  0025c	48 8b d1	 mov	 rdx, rcx
  0025f	48 8b 85 90 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00266	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  0026a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?in@?$codecvt@DDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEAD3AEAPEAD@Z
  00270	89 85 a4 02 00
	00		 mov	 DWORD PTR $T16[rbp], eax
  00276	48 8d 8d f8 02
	00 00		 lea	 rcx, QWORD PTR $T18[rbp]
  0027d	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  00282	90		 npad	 1
  00283	48 8d 8d c8 02
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  0028a	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  0028f	8b 85 a4 02 00
	00		 mov	 eax, DWORD PTR $T16[rbp]
  00295	89 85 60 04 00
	00		 mov	 DWORD PTR tv180[rbp], eax
  0029b	83 bd 60 04 00
	00 00		 cmp	 DWORD PTR tv180[rbp], 0
  002a2	0f 8c e0 01 00
	00		 jl	 $LN21@uflow
  002a8	83 bd 60 04 00
	00 01		 cmp	 DWORD PTR tv180[rbp], 1
  002af	7e 12		 jle	 SHORT $LN16@uflow
  002b1	83 bd 60 04 00
	00 03		 cmp	 DWORD PTR tv180[rbp], 3
  002b8	0f 84 41 01 00
	00		 je	 $LN19@uflow
  002be	e9 c5 01 00 00	 jmp	 $LN21@uflow
$LN16@uflow:

; 520  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Src,
; 521  : 					&_Ch, &_Ch + 1, _Dest))
; 522  : 					{	// test result of converting one element
; 523  : 				case codecvt_base::partial:
; 524  : 				case codecvt_base::ok:
; 525  : 					if (_Dest != &_Ch)

  002c3	48 8d 45 64	 lea	 rax, QWORD PTR _Ch$10[rbp]
  002c7	48 39 85 88 00
	00 00		 cmp	 QWORD PTR _Dest$11[rbp], rax
  002ce	0f 84 cd 00 00
	00		 je	 $LN17@uflow

; 526  : 						{	// got an element, put back excess and deliver it
; 527  : 						_Nleft = (int)(&*_Str.begin() + _Str.size() - _Src);

  002d4	48 8d 95 28 03
	00 00		 lea	 rdx, QWORD PTR $T19[rbp]
  002db	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$9[rbp]
  002df	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  002e4	48 89 85 28 04
	00 00		 mov	 QWORD PTR tv252[rbp], rax
  002eb	48 8b 85 28 04
	00 00		 mov	 rax, QWORD PTR tv252[rbp]
  002f2	48 89 85 30 04
	00 00		 mov	 QWORD PTR tv243[rbp], rax
  002f9	48 8b 8d 30 04
	00 00		 mov	 rcx, QWORD PTR tv243[rbp]
  00300	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  00305	48 89 85 38 04
	00 00		 mov	 QWORD PTR tv188[rbp], rax
  0030c	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$9[rbp]
  00310	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00315	48 8b 8d 38 04
	00 00		 mov	 rcx, QWORD PTR tv188[rbp]
  0031c	48 03 c8	 add	 rcx, rax
  0031f	48 8b c1	 mov	 rax, rcx
  00322	48 2b 85 a8 00
	00 00		 sub	 rax, QWORD PTR _Src$12[rbp]
  00329	89 85 c4 00 00
	00		 mov	 DWORD PTR _Nleft$13[rbp], eax
  0032f	48 8d 8d 28 03
	00 00		 lea	 rcx, QWORD PTR $T19[rbp]
  00336	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
$LN7@uflow:

; 528  : 						for (; 0 < _Nleft; )

  0033b	83 bd c4 00 00
	00 00		 cmp	 DWORD PTR _Nleft$13[rbp], 0
  00342	7e 38		 jle	 SHORT $LN8@uflow

; 529  : 							ungetc(_Src[--_Nleft], _Myfile);

  00344	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR _Nleft$13[rbp]
  0034a	ff c8		 dec	 eax
  0034c	89 85 c4 00 00
	00		 mov	 DWORD PTR _Nleft$13[rbp], eax
  00352	48 63 85 c4 00
	00 00		 movsxd	 rax, DWORD PTR _Nleft$13[rbp]
  00359	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Src$12[rbp]
  00360	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00364	48 8b 8d 90 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0036b	48 8b 91 80 00
	00 00		 mov	 rdx, QWORD PTR [rcx+128]
  00372	8b c8		 mov	 ecx, eax
  00374	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ungetc
  0037a	eb bf		 jmp	 SHORT $LN7@uflow
$LN8@uflow:

; 530  : 						return (_Traits::to_int_type(_Ch));

  0037c	48 8d 4d 64	 lea	 rcx, QWORD PTR _Ch$10[rbp]
  00380	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHAEBD@Z ; std::char_traits<char>::to_int_type
  00385	89 85 54 03 00
	00		 mov	 DWORD PTR $T20[rbp], eax
  0038b	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$9[rbp]
  0038f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00394	8b 85 54 03 00
	00		 mov	 eax, DWORD PTR $T20[rbp]
  0039a	e9 14 01 00 00	 jmp	 $LN1@uflow

; 531  : 						}
; 532  : 					else

  0039f	eb 59		 jmp	 SHORT $LN18@uflow
$LN17@uflow:

; 533  : 						_Str.erase((size_t)0,	// partial, discard used input

  003a1	48 8d 95 78 03
	00 00		 lea	 rdx, QWORD PTR $T21[rbp]
  003a8	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$9[rbp]
  003ac	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  003b1	48 89 85 28 04
	00 00		 mov	 QWORD PTR tv253[rbp], rax
  003b8	48 8b 85 28 04
	00 00		 mov	 rax, QWORD PTR tv253[rbp]
  003bf	48 89 85 30 04
	00 00		 mov	 QWORD PTR tv246[rbp], rax
  003c6	48 8b 8d 30 04
	00 00		 mov	 rcx, QWORD PTR tv246[rbp]
  003cd	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  003d2	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Src$12[rbp]
  003d9	48 2b c8	 sub	 rcx, rax
  003dc	48 8b c1	 mov	 rax, rcx
  003df	4c 8b c0	 mov	 r8, rax
  003e2	33 d2		 xor	 edx, edx
  003e4	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$9[rbp]
  003e8	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  003ed	90		 npad	 1
  003ee	48 8d 8d 78 03
	00 00		 lea	 rcx, QWORD PTR $T21[rbp]
  003f5	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
$LN18@uflow:

; 534  : 							(size_t)(_Src - &*_Str.begin()));
; 535  : 					break;

  003fa	e9 a5 00 00 00	 jmp	 $LN5@uflow
$LN19@uflow:

; 536  : 
; 537  : 				case codecvt_base::noconv:
; 538  : 					if (_Str.size() < sizeof (_Elem))

  003ff	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$9[rbp]
  00403	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00408	48 83 f8 01	 cmp	 rax, 1
  0040c	73 05		 jae	 SHORT $LN20@uflow

; 539  : 						break;	// no conversion, but need more chars

  0040e	e9 91 00 00 00	 jmp	 $LN5@uflow
$LN20@uflow:

; 540  : 
; 541  : 					_CRT_SECURE_MEMCPY(&_Ch, sizeof (_Elem), &*_Str.begin(),

  00413	48 8d 95 a8 03
	00 00		 lea	 rdx, QWORD PTR $T22[rbp]
  0041a	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$9[rbp]
  0041e	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  00423	48 89 85 28 04
	00 00		 mov	 QWORD PTR tv254[rbp], rax
  0042a	48 8b 85 28 04
	00 00		 mov	 rax, QWORD PTR tv254[rbp]
  00431	48 89 85 30 04
	00 00		 mov	 QWORD PTR tv248[rbp], rax
  00438	48 8b 8d 30 04
	00 00		 mov	 rcx, QWORD PTR tv248[rbp]
  0043f	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  00444	41 b9 01 00 00
	00		 mov	 r9d, 1
  0044a	4c 8b c0	 mov	 r8, rax
  0044d	ba 01 00 00 00	 mov	 edx, 1
  00452	48 8d 4d 64	 lea	 rcx, QWORD PTR _Ch$10[rbp]
  00456	e8 00 00 00 00	 call	 memcpy_s
  0045b	90		 npad	 1
  0045c	48 8d 8d a8 03
	00 00		 lea	 rcx, QWORD PTR $T22[rbp]
  00463	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ

; 542  : 						sizeof (_Elem));	// copy raw bytes to element
; 543  : 
; 544  : 					return (_Traits::to_int_type(_Ch));	// return result

  00468	48 8d 4d 64	 lea	 rcx, QWORD PTR _Ch$10[rbp]
  0046c	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHAEBD@Z ; std::char_traits<char>::to_int_type
  00471	89 85 d4 03 00
	00		 mov	 DWORD PTR $T23[rbp], eax
  00477	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$9[rbp]
  0047b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00480	8b 85 d4 03 00
	00		 mov	 eax, DWORD PTR $T23[rbp]
  00486	eb 2b		 jmp	 SHORT $LN1@uflow
$LN21@uflow:

; 545  : 
; 546  : 				default:
; 547  : 					return (_Traits::eof());	// conversion failed

  00488	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0048d	89 85 f4 03 00
	00		 mov	 DWORD PTR $T24[rbp], eax
  00493	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$9[rbp]
  00497	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0049c	8b 85 f4 03 00
	00		 mov	 eax, DWORD PTR $T24[rbp]
  004a2	eb 0f		 jmp	 SHORT $LN1@uflow
$LN5@uflow:

; 548  : 					}
; 549  : 				}

  004a4	e9 85 fc ff ff	 jmp	 $LN2@uflow

; 550  : 			}

  004a9	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$9[rbp]
  004ad	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  004b2	90		 npad	 1
$LN1@uflow:

; 551  : 		}

  004b3	48 8b f8	 mov	 rdi, rax
  004b6	48 8d 4d c0	 lea	 rcx, QWORD PTR [rbp-64]
  004ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcFrameData
  004c1	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  004c6	48 8b c7	 mov	 rax, rdi
  004c9	48 8b 8d 68 04
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  004d0	48 33 cd	 xor	 rcx, rbp
  004d3	e8 00 00 00 00	 call	 __security_check_cookie
  004d8	48 8d a5 78 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1144]
  004df	5f		 pop	 rdi
  004e0	5d		 pop	 rbp
  004e1	c3		 ret	 0
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::uflow
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Ch$8 = 4
_Str$9 = 40
_Ch$10 = 100
_Dest$11 = 136
_Src$12 = 168
_Nleft$13 = 196
_Meta$14 = 228
$T15 = 644
$T16 = 676
$T17 = 712
$T18 = 760
$T19 = 808
$T20 = 852
$T21 = 888
$T22 = 936
$T23 = 980
$T24 = 1012
$T25 = 1048
tv139 = 1060
tv254 = 1064
tv253 = 1064
tv252 = 1064
tv155 = 1064
tv76 = 1064
tv248 = 1072
tv246 = 1072
tv243 = 1072
tv141 = 1072
tv239 = 1080
tv188 = 1080
tv165 = 1088
tv168 = 1096
tv251 = 1104
tv241 = 1112
tv180 = 1120
__$ArrayPad$ = 1128
this$ = 1168
?dtor$0@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::uflow'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$9[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::uflow'::`1'::dtor$0
_Ch$8 = 4
_Str$9 = 40
_Ch$10 = 100
_Dest$11 = 136
_Src$12 = 168
_Nleft$13 = 196
_Meta$14 = 228
$T15 = 644
$T16 = 676
$T17 = 712
$T18 = 760
$T19 = 808
$T20 = 852
$T21 = 888
$T22 = 936
$T23 = 980
$T24 = 1012
$T25 = 1048
tv139 = 1060
tv254 = 1064
tv253 = 1064
tv252 = 1064
tv155 = 1064
tv76 = 1064
tv248 = 1072
tv246 = 1072
tv243 = 1072
tv141 = 1072
tv239 = 1080
tv188 = 1080
tv165 = 1088
tv168 = 1096
tv251 = 1104
tv241 = 1112
tv180 = 1120
__$ArrayPad$ = 1128
this$ = 1168
?dtor$1@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::uflow'::`1'::dtor$1
  00024	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00029	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002e	55		 push	 rbp
  0002f	57		 push	 rdi
  00030	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00034	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00038	48 8d 8d c8 02
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  0003f	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  00044	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00048	5f		 pop	 rdi
  00049	5d		 pop	 rbp
  0004a	c3		 ret	 0
?dtor$1@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::uflow'::`1'::dtor$1
_Ch$8 = 4
_Str$9 = 40
_Ch$10 = 100
_Dest$11 = 136
_Src$12 = 168
_Nleft$13 = 196
_Meta$14 = 228
$T15 = 644
$T16 = 676
$T17 = 712
$T18 = 760
$T19 = 808
$T20 = 852
$T21 = 888
$T22 = 936
$T23 = 980
$T24 = 1012
$T25 = 1048
tv139 = 1060
tv254 = 1064
tv253 = 1064
tv252 = 1064
tv155 = 1064
tv76 = 1064
tv248 = 1072
tv246 = 1072
tv243 = 1072
tv141 = 1072
tv239 = 1080
tv188 = 1080
tv165 = 1088
tv168 = 1096
tv251 = 1104
tv241 = 1112
tv180 = 1120
__$ArrayPad$ = 1128
this$ = 1168
?dtor$2@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::uflow'::`1'::dtor$2
  0004b	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00050	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00055	55		 push	 rbp
  00056	57		 push	 rdi
  00057	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0005b	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0005f	48 8d 8d f8 02
	00 00		 lea	 rcx, QWORD PTR $T18[rbp]
  00066	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  0006b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006f	5f		 pop	 rdi
  00070	5d		 pop	 rbp
  00071	c3		 ret	 0
?dtor$2@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::uflow'::`1'::dtor$2
_Ch$8 = 4
_Str$9 = 40
_Ch$10 = 100
_Dest$11 = 136
_Src$12 = 168
_Nleft$13 = 196
_Meta$14 = 228
$T15 = 644
$T16 = 676
$T17 = 712
$T18 = 760
$T19 = 808
$T20 = 852
$T21 = 888
$T22 = 936
$T23 = 980
$T24 = 1012
$T25 = 1048
tv139 = 1060
tv254 = 1064
tv253 = 1064
tv252 = 1064
tv155 = 1064
tv76 = 1064
tv248 = 1072
tv246 = 1072
tv243 = 1072
tv141 = 1072
tv239 = 1080
tv188 = 1080
tv165 = 1088
tv168 = 1096
tv251 = 1104
tv241 = 1112
tv180 = 1120
__$ArrayPad$ = 1128
this$ = 1168
?dtor$3@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::uflow'::`1'::dtor$3
  00072	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00077	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0007c	55		 push	 rbp
  0007d	57		 push	 rdi
  0007e	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00082	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00086	48 8d 8d 28 03
	00 00		 lea	 rcx, QWORD PTR $T19[rbp]
  0008d	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  00092	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?dtor$3@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::uflow'::`1'::dtor$3
_Ch$8 = 4
_Str$9 = 40
_Ch$10 = 100
_Dest$11 = 136
_Src$12 = 168
_Nleft$13 = 196
_Meta$14 = 228
$T15 = 644
$T16 = 676
$T17 = 712
$T18 = 760
$T19 = 808
$T20 = 852
$T21 = 888
$T22 = 936
$T23 = 980
$T24 = 1012
$T25 = 1048
tv139 = 1060
tv254 = 1064
tv253 = 1064
tv252 = 1064
tv155 = 1064
tv76 = 1064
tv248 = 1072
tv246 = 1072
tv243 = 1072
tv141 = 1072
tv239 = 1080
tv188 = 1080
tv165 = 1088
tv168 = 1096
tv251 = 1104
tv241 = 1112
tv180 = 1120
__$ArrayPad$ = 1128
this$ = 1168
?dtor$4@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::uflow'::`1'::dtor$4
  00099	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0009e	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000a3	55		 push	 rbp
  000a4	57		 push	 rdi
  000a5	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000a9	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  000ad	48 8d 8d 78 03
	00 00		 lea	 rcx, QWORD PTR $T21[rbp]
  000b4	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  000b9	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000bd	5f		 pop	 rdi
  000be	5d		 pop	 rbp
  000bf	c3		 ret	 0
?dtor$4@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::uflow'::`1'::dtor$4
_Ch$8 = 4
_Str$9 = 40
_Ch$10 = 100
_Dest$11 = 136
_Src$12 = 168
_Nleft$13 = 196
_Meta$14 = 228
$T15 = 644
$T16 = 676
$T17 = 712
$T18 = 760
$T19 = 808
$T20 = 852
$T21 = 888
$T22 = 936
$T23 = 980
$T24 = 1012
$T25 = 1048
tv139 = 1060
tv254 = 1064
tv253 = 1064
tv252 = 1064
tv155 = 1064
tv76 = 1064
tv248 = 1072
tv246 = 1072
tv243 = 1072
tv141 = 1072
tv239 = 1080
tv188 = 1080
tv165 = 1088
tv168 = 1096
tv251 = 1104
tv241 = 1112
tv180 = 1120
__$ArrayPad$ = 1128
this$ = 1168
?dtor$5@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::uflow'::`1'::dtor$5
  000c0	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000c5	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000ca	55		 push	 rbp
  000cb	57		 push	 rdi
  000cc	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000d0	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  000d4	48 8d 8d a8 03
	00 00		 lea	 rcx, QWORD PTR $T22[rbp]
  000db	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  000e0	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000e4	5f		 pop	 rdi
  000e5	5d		 pop	 rbp
  000e6	c3		 ret	 0
?dtor$5@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::uflow'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_Ch$8 = 4
_Str$9 = 40
_Ch$10 = 100
_Dest$11 = 136
_Src$12 = 168
_Nleft$13 = 196
_Meta$14 = 228
$T15 = 644
$T16 = 676
$T17 = 712
$T18 = 760
$T19 = 808
$T20 = 852
$T21 = 888
$T22 = 936
$T23 = 980
$T24 = 1012
$T25 = 1048
tv139 = 1060
tv254 = 1064
tv253 = 1064
tv252 = 1064
tv155 = 1064
tv76 = 1064
tv248 = 1072
tv246 = 1072
tv243 = 1072
tv141 = 1072
tv239 = 1080
tv188 = 1080
tv165 = 1088
tv168 = 1096
tv251 = 1104
tv241 = 1112
tv180 = 1120
__$ArrayPad$ = 1128
this$ = 1168
?dtor$0@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::uflow'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 4d 28	 lea	 rcx, QWORD PTR _Str$9[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::uflow'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_Ch$8 = 4
_Str$9 = 40
_Ch$10 = 100
_Dest$11 = 136
_Src$12 = 168
_Nleft$13 = 196
_Meta$14 = 228
$T15 = 644
$T16 = 676
$T17 = 712
$T18 = 760
$T19 = 808
$T20 = 852
$T21 = 888
$T22 = 936
$T23 = 980
$T24 = 1012
$T25 = 1048
tv139 = 1060
tv254 = 1064
tv253 = 1064
tv252 = 1064
tv155 = 1064
tv76 = 1064
tv248 = 1072
tv246 = 1072
tv243 = 1072
tv141 = 1072
tv239 = 1080
tv188 = 1080
tv165 = 1088
tv168 = 1096
tv251 = 1104
tv241 = 1112
tv180 = 1120
__$ArrayPad$ = 1128
this$ = 1168
?dtor$1@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::uflow'::`1'::dtor$1
  00024	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00029	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002e	55		 push	 rbp
  0002f	57		 push	 rdi
  00030	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00034	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00038	48 8d 8d c8 02
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  0003f	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  00044	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00048	5f		 pop	 rdi
  00049	5d		 pop	 rbp
  0004a	c3		 ret	 0
?dtor$1@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::uflow'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_Ch$8 = 4
_Str$9 = 40
_Ch$10 = 100
_Dest$11 = 136
_Src$12 = 168
_Nleft$13 = 196
_Meta$14 = 228
$T15 = 644
$T16 = 676
$T17 = 712
$T18 = 760
$T19 = 808
$T20 = 852
$T21 = 888
$T22 = 936
$T23 = 980
$T24 = 1012
$T25 = 1048
tv139 = 1060
tv254 = 1064
tv253 = 1064
tv252 = 1064
tv155 = 1064
tv76 = 1064
tv248 = 1072
tv246 = 1072
tv243 = 1072
tv141 = 1072
tv239 = 1080
tv188 = 1080
tv165 = 1088
tv168 = 1096
tv251 = 1104
tv241 = 1112
tv180 = 1120
__$ArrayPad$ = 1128
this$ = 1168
?dtor$2@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::uflow'::`1'::dtor$2
  0004b	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00050	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00055	55		 push	 rbp
  00056	57		 push	 rdi
  00057	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0005b	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0005f	48 8d 8d f8 02
	00 00		 lea	 rcx, QWORD PTR $T18[rbp]
  00066	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  0006b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006f	5f		 pop	 rdi
  00070	5d		 pop	 rbp
  00071	c3		 ret	 0
?dtor$2@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::uflow'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_Ch$8 = 4
_Str$9 = 40
_Ch$10 = 100
_Dest$11 = 136
_Src$12 = 168
_Nleft$13 = 196
_Meta$14 = 228
$T15 = 644
$T16 = 676
$T17 = 712
$T18 = 760
$T19 = 808
$T20 = 852
$T21 = 888
$T22 = 936
$T23 = 980
$T24 = 1012
$T25 = 1048
tv139 = 1060
tv254 = 1064
tv253 = 1064
tv252 = 1064
tv155 = 1064
tv76 = 1064
tv248 = 1072
tv246 = 1072
tv243 = 1072
tv141 = 1072
tv239 = 1080
tv188 = 1080
tv165 = 1088
tv168 = 1096
tv251 = 1104
tv241 = 1112
tv180 = 1120
__$ArrayPad$ = 1128
this$ = 1168
?dtor$3@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::uflow'::`1'::dtor$3
  00072	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00077	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0007c	55		 push	 rbp
  0007d	57		 push	 rdi
  0007e	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00082	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00086	48 8d 8d 28 03
	00 00		 lea	 rcx, QWORD PTR $T19[rbp]
  0008d	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  00092	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?dtor$3@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::uflow'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_Ch$8 = 4
_Str$9 = 40
_Ch$10 = 100
_Dest$11 = 136
_Src$12 = 168
_Nleft$13 = 196
_Meta$14 = 228
$T15 = 644
$T16 = 676
$T17 = 712
$T18 = 760
$T19 = 808
$T20 = 852
$T21 = 888
$T22 = 936
$T23 = 980
$T24 = 1012
$T25 = 1048
tv139 = 1060
tv254 = 1064
tv253 = 1064
tv252 = 1064
tv155 = 1064
tv76 = 1064
tv248 = 1072
tv246 = 1072
tv243 = 1072
tv141 = 1072
tv239 = 1080
tv188 = 1080
tv165 = 1088
tv168 = 1096
tv251 = 1104
tv241 = 1112
tv180 = 1120
__$ArrayPad$ = 1128
this$ = 1168
?dtor$4@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::uflow'::`1'::dtor$4
  00099	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0009e	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000a3	55		 push	 rbp
  000a4	57		 push	 rdi
  000a5	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000a9	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  000ad	48 8d 8d 78 03
	00 00		 lea	 rcx, QWORD PTR $T21[rbp]
  000b4	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  000b9	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000bd	5f		 pop	 rdi
  000be	5d		 pop	 rbp
  000bf	c3		 ret	 0
?dtor$4@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::uflow'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_Ch$8 = 4
_Str$9 = 40
_Ch$10 = 100
_Dest$11 = 136
_Src$12 = 168
_Nleft$13 = 196
_Meta$14 = 228
$T15 = 644
$T16 = 676
$T17 = 712
$T18 = 760
$T19 = 808
$T20 = 852
$T21 = 888
$T22 = 936
$T23 = 980
$T24 = 1012
$T25 = 1048
tv139 = 1060
tv254 = 1064
tv253 = 1064
tv252 = 1064
tv155 = 1064
tv76 = 1064
tv248 = 1072
tv246 = 1072
tv243 = 1072
tv141 = 1072
tv239 = 1080
tv188 = 1080
tv165 = 1088
tv168 = 1096
tv251 = 1104
tv241 = 1112
tv180 = 1120
__$ArrayPad$ = 1128
this$ = 1168
?dtor$5@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::uflow'::`1'::dtor$5
  000c0	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000c5	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000ca	55		 push	 rbp
  000cb	57		 push	 rdi
  000cc	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000d0	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  000d4	48 8d 8d a8 03
	00 00		 lea	 rcx, QWORD PTR $T22[rbp]
  000db	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  000e0	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000e4	5f		 pop	 rdi
  000e5	5d		 pop	 rbp
  000e6	c3		 ret	 0
?dtor$5@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::uflow'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
_TEXT	SEGMENT
_Meta$ = 4
$T4 = 228
tv76 = 248
__$ArrayPad$ = 256
this$ = 304
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::underflow, COMDAT

; 475  : 		{	// get an element from stream, but don't point past it

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR [rsp+344]
  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00031	48 33 c5	 xor	 rax, rbp
  00034	48 89 85 00 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 476  : 		int_type _Meta;
; 477  : 		if (_Mysb::gptr() != 0
; 478  : 			&& _Mysb::gptr() < _Mysb::egptr())

  0003b	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00042	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00048	48 85 c0	 test	 rax, rax
  0004b	74 46		 je	 SHORT $LN2@underflow
  0004d	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0005a	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv76[rbp], rax
  00061	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0006e	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR tv76[rbp]
  00075	48 3b c8	 cmp	 rcx, rax
  00078	73 19		 jae	 SHORT $LN2@underflow

; 479  : 			return (_Traits::to_int_type(*_Mysb::gptr()));	// return buffered

  0007a	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00081	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00087	48 8b c8	 mov	 rcx, rax
  0008a	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHAEBD@Z ; std::char_traits<char>::to_int_type
  0008f	eb 5c		 jmp	 SHORT $LN1@underflow
  00091	eb 5a		 jmp	 SHORT $LN3@underflow
$LN2@underflow:

; 480  : 		else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))

  00093	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009d	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a4	ff 50 38	 call	 QWORD PTR [rax+56]
  000a7	89 45 04	 mov	 DWORD PTR _Meta$[rbp], eax
  000aa	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000af	89 85 e4 00 00
	00		 mov	 DWORD PTR $T4[rbp], eax
  000b5	48 8d 55 04	 lea	 rdx, QWORD PTR _Meta$[rbp]
  000b9	48 8d 8d e4 00
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  000c0	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  000c5	0f b6 c0	 movzx	 eax, al
  000c8	85 c0		 test	 eax, eax
  000ca	74 07		 je	 SHORT $LN4@underflow

; 481  : 			return (_Meta);	// uflow failed, return EOF

  000cc	8b 45 04	 mov	 eax, DWORD PTR _Meta$[rbp]
  000cf	eb 1c		 jmp	 SHORT $LN1@underflow

; 482  : 		else

  000d1	eb 1a		 jmp	 SHORT $LN5@underflow
$LN4@underflow:

; 483  : 			{	// get a char, don't point past it
; 484  : 			pbackfail(_Meta);

  000d3	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000da	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000dd	8b 55 04	 mov	 edx, DWORD PTR _Meta$[rbp]
  000e0	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000e7	ff 50 20	 call	 QWORD PTR [rax+32]

; 485  : 			return (_Meta);

  000ea	8b 45 04	 mov	 eax, DWORD PTR _Meta$[rbp]
$LN5@underflow:
$LN3@underflow:
$LN1@underflow:

; 486  : 			}
; 487  : 		}

  000ed	48 8b f8	 mov	 rdi, rax
  000f0	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ$rtcFrameData
  000fb	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00100	48 8b c7	 mov	 rax, rdi
  00103	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0010a	48 33 cd	 xor	 rcx, rbp
  0010d	e8 00 00 00 00	 call	 __security_check_cookie
  00112	48 8d a5 18 01
	00 00		 lea	 rsp, QWORD PTR [rbp+280]
  00119	5f		 pop	 rdi
  0011a	5d		 pop	 rbp
  0011b	c3		 ret	 0
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::underflow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
$T3 = 260
$T4 = 292
tv76 = 312
this$ = 352
_Meta$ = 360
?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail, COMDAT

; 450  : 		{	// put an element back to stream

$LN13:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]

; 451  : 		if (_Mysb::gptr() != 0
; 452  : 			&& _Mysb::eback() < _Mysb::gptr()
; 453  : 			&& (_Traits::eq_int_type(_Traits::eof(), _Meta)

  0002e	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0003b	48 85 c0	 test	 rax, rax
  0003e	0f 84 ba 00 00
	00		 je	 $LN2@pbackfail
  00044	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00051	48 89 85 38 01
	00 00		 mov	 QWORD PTR tv76[rbp], rax
  00058	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00065	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR tv76[rbp]
  0006c	48 3b c8	 cmp	 rcx, rax
  0006f	0f 83 89 00 00
	00		 jae	 $LN2@pbackfail
  00075	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0007a	89 85 c4 00 00
	00		 mov	 DWORD PTR $T1[rbp], eax
  00080	48 8d 95 68 01
	00 00		 lea	 rdx, QWORD PTR _Meta$[rbp]
  00087	48 8d 8d c4 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  0008e	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  00093	0f b6 c0	 movzx	 eax, al
  00096	85 c0		 test	 eax, eax
  00098	75 41		 jne	 SHORT $LN4@pbackfail
  0009a	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000a7	b9 01 00 00 00	 mov	 ecx, 1
  000ac	48 6b c9 ff	 imul	 rcx, rcx, -1
  000b0	48 03 c1	 add	 rax, rcx
  000b3	48 8b c8	 mov	 rcx, rax
  000b6	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHAEBD@Z ; std::char_traits<char>::to_int_type
  000bb	89 85 e4 00 00
	00		 mov	 DWORD PTR $T2[rbp], eax
  000c1	48 8d 95 68 01
	00 00		 lea	 rdx, QWORD PTR _Meta$[rbp]
  000c8	48 8d 8d e4 00
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  000cf	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  000d4	0f b6 c0	 movzx	 eax, al
  000d7	85 c0		 test	 eax, eax
  000d9	74 23		 je	 SHORT $LN2@pbackfail
$LN4@pbackfail:

; 454  : 			|| _Traits::eq_int_type(_Traits::to_int_type(_Mysb::gptr()[-1]),
; 455  : 				_Meta)))
; 456  : 			{	// just back up position
; 457  : 			_Mysb::_Gndec();

  000db	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ

; 458  : 			return (_Traits::not_eof(_Meta));

  000e8	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR _Meta$[rbp]
  000ef	e8 00 00 00 00	 call	 ?not_eof@?$char_traits@D@std@@SAHAEBH@Z ; std::char_traits<char>::not_eof
  000f4	e9 e3 00 00 00	 jmp	 $LN1@pbackfail
  000f9	e9 de 00 00 00	 jmp	 $LN3@pbackfail
$LN2@pbackfail:

; 459  : 			}
; 460  : 		else if (_Myfile == 0 || _Traits::eq_int_type(_Traits::eof(), _Meta))

  000fe	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00105	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  0010d	74 25		 je	 SHORT $LN7@pbackfail
  0010f	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00114	89 85 04 01 00
	00		 mov	 DWORD PTR $T3[rbp], eax
  0011a	48 8d 95 68 01
	00 00		 lea	 rdx, QWORD PTR _Meta$[rbp]
  00121	48 8d 8d 04 01
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  00128	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  0012d	0f b6 c0	 movzx	 eax, al
  00130	85 c0		 test	 eax, eax
  00132	74 0f		 je	 SHORT $LN5@pbackfail
$LN7@pbackfail:

; 461  : 			return (_Traits::eof());	// no open C stream or EOF, fail

  00134	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00139	e9 9e 00 00 00	 jmp	 $LN1@pbackfail
  0013e	e9 99 00 00 00	 jmp	 $LN6@pbackfail
$LN5@pbackfail:

; 462  : 		else if (_Pcvt == 0 && _Ungetc(_Traits::to_char_type(_Meta), _Myfile))

  00143	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0014a	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0014f	75 3d		 jne	 SHORT $LN8@pbackfail
  00151	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR _Meta$[rbp]
  00158	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADAEBH@Z ; std::char_traits<char>::to_char_type
  0015d	88 85 24 01 00
	00		 mov	 BYTE PTR $T4[rbp], al
  00163	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0016a	48 8b 90 80 00
	00 00		 mov	 rdx, QWORD PTR [rax+128]
  00171	48 8d 8d 24 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00178	e8 00 00 00 00	 call	 ??$_Ungetc@D@std@@YA_NAEBDPEAU_iobuf@@@Z ; std::_Ungetc<char>
  0017d	0f b6 c0	 movzx	 eax, al
  00180	85 c0		 test	 eax, eax
  00182	74 0a		 je	 SHORT $LN8@pbackfail

; 463  : 			return (_Meta);	// no facet and unget succeeded, return

  00184	8b 85 68 01 00
	00		 mov	 eax, DWORD PTR _Meta$[rbp]
  0018a	eb 50		 jmp	 SHORT $LN1@pbackfail
  0018c	eb 4e		 jmp	 SHORT $LN9@pbackfail
$LN8@pbackfail:

; 464  : 		else if (_Mysb::gptr() != &_Mychar)

  0018e	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00195	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0019b	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001a2	48 83 c1 70	 add	 rcx, 112		; 00000070H
  001a6	48 3b c1	 cmp	 rax, rcx
  001a9	74 2c		 je	 SHORT $LN10@pbackfail

; 465  : 			{	// putback to _Mychar
; 466  : 			_Mychar = _Traits::to_char_type(_Meta);

  001ab	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR _Meta$[rbp]
  001b2	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADAEBH@Z ; std::char_traits<char>::to_char_type
  001b7	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001be	88 41 70	 mov	 BYTE PTR [rcx+112], al

; 467  : 			_Set_back();	// switch to _Mychar buffer

  001c1	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001c8	e8 00 00 00 00	 call	 ?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back

; 468  : 			return (_Meta);

  001cd	8b 85 68 01 00
	00		 mov	 eax, DWORD PTR _Meta$[rbp]
  001d3	eb 07		 jmp	 SHORT $LN1@pbackfail

; 469  : 			}
; 470  : 		else

  001d5	eb 05		 jmp	 SHORT $LN11@pbackfail
$LN10@pbackfail:

; 471  : 			return (_Traits::eof());	// nowhere to put back

  001d7	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
$LN11@pbackfail:
$LN9@pbackfail:
$LN6@pbackfail:
$LN3@pbackfail:
$LN1@pbackfail:

; 472  : 	}

  001dc	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  001e3	5f		 pop	 rdi
  001e4	5d		 pop	 rbp
  001e5	c3		 ret	 0
?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z
_TEXT	SEGMENT
_STRING_INC$7 = 4
_Ch$8 = 36
_Src$9 = 72
_Dest$10 = 104
_Str$11 = 136
_Count$12 = 200
$T13 = 612
$T14 = 644
$T15 = 680
$T16 = 728
$T17 = 776
$T18 = 820
$T19 = 856
$T20 = 900
$T21 = 932
$T22 = 964
$T23 = 996
$T24 = 1028
$T25 = 1060
$T26 = 1096
tv230 = 1108
tv203 = 1108
tv147 = 1108
tv256 = 1112
tv255 = 1112
tv151 = 1112
tv84 = 1112
tv246 = 1120
tv241 = 1120
tv237 = 1120
tv208 = 1128
tv165 = 1128
tv168 = 1136
tv254 = 1144
tv239 = 1152
tv184 = 1160
__$ArrayPad$ = 1168
this$ = 1216
_Meta$ = 1224
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::overflow, COMDAT

; 389  : 		{	// put an element to stream

$LN37:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 04
	00 00		 sub	 rsp, 1256		; 000004e8H
  00012	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 01 00 00	 mov	 ecx, 314		; 0000013aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	05 00 00	 mov	 rcx, QWORD PTR [rsp+1288]
  0002e	48 c7 85 48 04
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T26[rbp], -2
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00040	48 33 c5	 xor	 rax, rbp
  00043	48 89 85 90 04
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004a	c7 85 24 04 00
	00 00 00 00 00	 mov	 DWORD PTR $T25[rbp], 0

; 390  : 		if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  00054	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00059	89 85 64 02 00
	00		 mov	 DWORD PTR $T13[rbp], eax
  0005f	48 8d 95 c8 04
	00 00		 lea	 rdx, QWORD PTR _Meta$[rbp]
  00066	48 8d 8d 64 02
	00 00		 lea	 rcx, QWORD PTR $T13[rbp]
  0006d	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  00072	0f b6 c0	 movzx	 eax, al
  00075	85 c0		 test	 eax, eax
  00077	74 16		 je	 SHORT $LN7@overflow

; 391  : 			return (_Traits::not_eof(_Meta));	// EOF, return success code

  00079	48 8d 8d c8 04
	00 00		 lea	 rcx, QWORD PTR _Meta$[rbp]
  00080	e8 00 00 00 00	 call	 ?not_eof@?$char_traits@D@std@@SAHAEBH@Z ; std::char_traits<char>::not_eof
  00085	e9 a9 04 00 00	 jmp	 $LN1@overflow

; 392  : 		else if (_Mysb::pptr() != 0

  0008a	e9 8f 00 00 00	 jmp	 $LN8@overflow
$LN7@overflow:

; 393  : 			&& _Mysb::pptr() < _Mysb::epptr())

  0008f	48 8b 8d c0 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00096	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0009c	48 85 c0	 test	 rax, rax
  0009f	74 62		 je	 SHORT $LN9@overflow
  000a1	48 8b 8d c0 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000ae	48 89 85 58 04
	00 00		 mov	 QWORD PTR tv84[rbp], rax
  000b5	48 8b 8d c0 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000c2	48 8b 8d 58 04
	00 00		 mov	 rcx, QWORD PTR tv84[rbp]
  000c9	48 3b c8	 cmp	 rcx, rax
  000cc	73 35		 jae	 SHORT $LN9@overflow

; 394  : 			{	// room in buffer, store it
; 395  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  000ce	48 8d 8d c8 04
	00 00		 lea	 rcx, QWORD PTR _Meta$[rbp]
  000d5	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADAEBH@Z ; std::char_traits<char>::to_char_type
  000da	88 85 54 04 00
	00		 mov	 BYTE PTR tv203[rbp], al
  000e0	48 8b 8d c0 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ
  000ed	0f b6 8d 54 04
	00 00		 movzx	 ecx, BYTE PTR tv203[rbp]
  000f4	88 08		 mov	 BYTE PTR [rax], cl

; 396  : 			return (_Meta);

  000f6	8b 85 c8 04 00
	00		 mov	 eax, DWORD PTR _Meta$[rbp]
  000fc	e9 32 04 00 00	 jmp	 $LN1@overflow
  00101	eb 1b		 jmp	 SHORT $LN8@overflow
$LN9@overflow:

; 397  : 			}
; 398  : 		else if (_Myfile == 0)

  00103	48 8b 85 c0 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0010a	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00112	75 0a		 jne	 SHORT $LN8@overflow

; 399  : 			return (_Traits::eof());	// no open C stream, fail

  00114	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00119	e9 15 04 00 00	 jmp	 $LN1@overflow
$LN8@overflow:

; 400  : 		_Reset_back();	// revert from _Mychar buffer

  0011e	48 8b 8d c0 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00125	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 401  : 		if (_Pcvt == 0)

  0012a	48 8b 85 c0 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00131	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00136	75 52		 jne	 SHORT $LN12@overflow

; 402  : 			return (_Fputc(_Traits::to_char_type(_Meta), _Myfile)

  00138	48 8d 8d c8 04
	00 00		 lea	 rcx, QWORD PTR _Meta$[rbp]
  0013f	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADAEBH@Z ; std::char_traits<char>::to_char_type
  00144	48 8b 8d c0 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0014b	48 8b 91 80 00
	00 00		 mov	 rdx, QWORD PTR [rcx+128]
  00152	0f b6 c8	 movzx	 ecx, al
  00155	e8 00 00 00 00	 call	 ??$_Fputc@D@std@@YA_NDPEAU_iobuf@@@Z ; std::_Fputc<char>
  0015a	0f b6 c0	 movzx	 eax, al
  0015d	85 c0		 test	 eax, eax
  0015f	74 0e		 je	 SHORT $LN24@overflow
  00161	8b 85 c8 04 00
	00		 mov	 eax, DWORD PTR _Meta$[rbp]
  00167	89 85 54 04 00
	00		 mov	 DWORD PTR tv147[rbp], eax
  0016d	eb 0b		 jmp	 SHORT $LN25@overflow
$LN24@overflow:
  0016f	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00174	89 85 54 04 00
	00		 mov	 DWORD PTR tv147[rbp], eax
$LN25@overflow:
  0017a	8b 85 54 04 00
	00		 mov	 eax, DWORD PTR tv147[rbp]
  00180	e9 ae 03 00 00	 jmp	 $LN1@overflow

; 403  : 				? _Meta : _Traits::eof());	// no codecvt facet, put as is
; 404  : 		else

  00185	e9 a9 03 00 00	 jmp	 $LN1@overflow
$LN12@overflow:

; 405  : 			{	// put using codecvt facet
; 406  : 			const int _STRING_INC = 8;

  0018a	c7 45 04 08 00
	00 00		 mov	 DWORD PTR _STRING_INC$7[rbp], 8

; 407  : 			const _Elem _Ch = _Traits::to_char_type(_Meta);

  00191	48 8d 8d c8 04
	00 00		 lea	 rcx, QWORD PTR _Meta$[rbp]
  00198	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADAEBH@Z ; std::char_traits<char>::to_char_type
  0019d	88 45 24	 mov	 BYTE PTR _Ch$8[rbp], al

; 408  : 			const _Elem *_Src;
; 409  : 			char *_Dest;
; 410  : 
; 411  : 			string _Str(_STRING_INC, '\0');

  001a0	45 33 c0	 xor	 r8d, r8d
  001a3	ba 08 00 00 00	 mov	 edx, 8
  001a8	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR _Str$11[rbp]
  001af	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  001b4	90		 npad	 1
$LN2@overflow:

; 412  : 			for (; ; )
; 413  : 				switch (_Pcvt->out(_State,

  001b5	48 8d 95 a8 02
	00 00		 lea	 rdx, QWORD PTR $T15[rbp]
  001bc	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR _Str$11[rbp]
  001c3	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  001c8	48 89 85 58 04
	00 00		 mov	 QWORD PTR tv151[rbp], rax
  001cf	48 8b 85 58 04
	00 00		 mov	 rax, QWORD PTR tv151[rbp]
  001d6	48 89 85 60 04
	00 00		 mov	 QWORD PTR tv237[rbp], rax
  001dd	48 8b 8d 60 04
	00 00		 mov	 rcx, QWORD PTR tv237[rbp]
  001e4	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  001e9	48 89 85 68 04
	00 00		 mov	 QWORD PTR tv165[rbp], rax
  001f0	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR _Str$11[rbp]
  001f7	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  001fc	48 8b 8d 68 04
	00 00		 mov	 rcx, QWORD PTR tv165[rbp]
  00203	48 03 c8	 add	 rcx, rax
  00206	48 8b c1	 mov	 rax, rcx
  00209	48 89 85 70 04
	00 00		 mov	 QWORD PTR tv168[rbp], rax
  00210	48 8d 95 d8 02
	00 00		 lea	 rdx, QWORD PTR $T16[rbp]
  00217	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR _Str$11[rbp]
  0021e	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  00223	48 89 85 78 04
	00 00		 mov	 QWORD PTR tv254[rbp], rax
  0022a	48 8b 85 78 04
	00 00		 mov	 rax, QWORD PTR tv254[rbp]
  00231	48 89 85 80 04
	00 00		 mov	 QWORD PTR tv239[rbp], rax
  00238	48 8b 8d 80 04
	00 00		 mov	 rcx, QWORD PTR tv239[rbp]
  0023f	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  00244	48 8d 4d 25	 lea	 rcx, QWORD PTR _Ch$8[rbp+1]
  00248	48 8b 95 c0 04
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0024f	48 83 c2 74	 add	 rdx, 116		; 00000074H
  00253	4c 8d 45 68	 lea	 r8, QWORD PTR _Dest$10[rbp]
  00257	4c 89 44 24 38	 mov	 QWORD PTR [rsp+56], r8
  0025c	4c 8b 85 70 04
	00 00		 mov	 r8, QWORD PTR tv168[rbp]
  00263	4c 89 44 24 30	 mov	 QWORD PTR [rsp+48], r8
  00268	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0026d	48 8d 45 48	 lea	 rax, QWORD PTR _Src$9[rbp]
  00271	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00276	4c 8b c9	 mov	 r9, rcx
  00279	4c 8d 45 24	 lea	 r8, QWORD PTR _Ch$8[rbp]
  0027d	48 8b 85 c0 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00284	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00288	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?out@?$codecvt@DDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEAD3AEAPEAD@Z
  0028e	89 85 84 02 00
	00		 mov	 DWORD PTR $T14[rbp], eax
  00294	48 8d 8d d8 02
	00 00		 lea	 rcx, QWORD PTR $T16[rbp]
  0029b	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  002a0	90		 npad	 1
  002a1	48 8d 8d a8 02
	00 00		 lea	 rcx, QWORD PTR $T15[rbp]
  002a8	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  002ad	8b 85 84 02 00
	00		 mov	 eax, DWORD PTR $T14[rbp]
  002b3	89 85 88 04 00
	00		 mov	 DWORD PTR tv184[rbp], eax
  002b9	83 bd 88 04 00
	00 00		 cmp	 DWORD PTR tv184[rbp], 0
  002c0	0f 8c 3c 02 00
	00		 jl	 $LN22@overflow
  002c6	83 bd 88 04 00
	00 01		 cmp	 DWORD PTR tv184[rbp], 1
  002cd	7e 12		 jle	 SHORT $LN14@overflow
  002cf	83 bd 88 04 00
	00 03		 cmp	 DWORD PTR tv184[rbp], 3
  002d6	0f 84 cf 01 00
	00		 je	 $LN21@overflow
  002dc	e9 21 02 00 00	 jmp	 $LN22@overflow
$LN14@overflow:

; 414  : 					&_Ch, &_Ch + 1, _Src,
; 415  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))
; 416  : 				{	// test result of converting one element
; 417  : 				case codecvt_base::partial:
; 418  : 				case codecvt_base::ok:
; 419  : 					{	// converted something, try to put it out
; 420  : 					size_t _Count = _Dest - &*_Str.begin();

  002e1	48 8d 95 08 03
	00 00		 lea	 rdx, QWORD PTR $T17[rbp]
  002e8	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR _Str$11[rbp]
  002ef	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  002f4	48 89 85 58 04
	00 00		 mov	 QWORD PTR tv255[rbp], rax
  002fb	48 8b 85 58 04
	00 00		 mov	 rax, QWORD PTR tv255[rbp]
  00302	48 89 85 60 04
	00 00		 mov	 QWORD PTR tv241[rbp], rax
  00309	48 8b 8d 60 04
	00 00		 mov	 rcx, QWORD PTR tv241[rbp]
  00310	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  00315	48 8b 4d 68	 mov	 rcx, QWORD PTR _Dest$10[rbp]
  00319	48 2b c8	 sub	 rcx, rax
  0031c	48 8b c1	 mov	 rax, rcx
  0031f	48 89 85 c8 00
	00 00		 mov	 QWORD PTR _Count$12[rbp], rax
  00326	48 8d 8d 08 03
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  0032d	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ

; 421  : 					if (0 < _Count && _Count !=

  00332	48 83 bd c8 00
	00 00 00	 cmp	 QWORD PTR _Count$12[rbp], 0
  0033a	76 7b		 jbe	 SHORT $LN26@overflow
  0033c	48 8d 95 58 03
	00 00		 lea	 rdx, QWORD PTR $T19[rbp]
  00343	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR _Str$11[rbp]
  0034a	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  0034f	48 89 85 58 04
	00 00		 mov	 QWORD PTR tv256[rbp], rax
  00356	48 8b 85 58 04
	00 00		 mov	 rax, QWORD PTR tv256[rbp]
  0035d	48 89 85 60 04
	00 00		 mov	 QWORD PTR tv246[rbp], rax
  00364	8b 85 24 04 00
	00		 mov	 eax, DWORD PTR $T25[rbp]
  0036a	83 c8 01	 or	 eax, 1
  0036d	89 85 24 04 00
	00		 mov	 DWORD PTR $T25[rbp], eax
  00373	48 8b 8d 60 04
	00 00		 mov	 rcx, QWORD PTR tv246[rbp]
  0037a	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  0037f	48 8b 8d c0 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00386	4c 8b 89 80 00
	00 00		 mov	 r9, QWORD PTR [rcx+128]
  0038d	4c 8b 85 c8 00
	00 00		 mov	 r8, QWORD PTR _Count$12[rbp]
  00394	ba 01 00 00 00	 mov	 edx, 1
  00399	48 8b c8	 mov	 rcx, rax
  0039c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwrite
  003a2	48 39 85 c8 00
	00 00		 cmp	 QWORD PTR _Count$12[rbp], rax
  003a9	74 0c		 je	 SHORT $LN26@overflow
  003ab	c7 85 68 04 00
	00 01 00 00 00	 mov	 DWORD PTR tv208[rbp], 1
  003b5	eb 0a		 jmp	 SHORT $LN27@overflow
$LN26@overflow:
  003b7	c7 85 68 04 00
	00 00 00 00 00	 mov	 DWORD PTR tv208[rbp], 0
$LN27@overflow:
  003c1	0f b6 85 68 04
	00 00		 movzx	 eax, BYTE PTR tv208[rbp]
  003c8	88 85 34 03 00
	00		 mov	 BYTE PTR $T18[rbp], al
  003ce	8b 85 24 04 00
	00		 mov	 eax, DWORD PTR $T25[rbp]
  003d4	83 e0 01	 and	 eax, 1
  003d7	85 c0		 test	 eax, eax
  003d9	74 13		 je	 SHORT $LN36@overflow
  003db	83 a5 24 04 00
	00 fe		 and	 DWORD PTR $T25[rbp], -2
  003e2	48 8d 8d 58 03
	00 00		 lea	 rcx, QWORD PTR $T19[rbp]
  003e9	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
$LN36@overflow:
  003ee	0f b6 85 34 03
	00 00		 movzx	 eax, BYTE PTR $T18[rbp]
  003f5	85 c0		 test	 eax, eax
  003f7	74 22		 je	 SHORT $LN15@overflow

; 422  : 						fwrite(&*_Str.begin(), 1, _Count, _Myfile))
; 423  : 						return (_Traits::eof());	// write failed

  003f9	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  003fe	89 85 84 03 00
	00		 mov	 DWORD PTR $T20[rbp], eax
  00404	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR _Str$11[rbp]
  0040b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00410	8b 85 84 03 00
	00		 mov	 eax, DWORD PTR $T20[rbp]
  00416	e9 18 01 00 00	 jmp	 $LN1@overflow
$LN15@overflow:

; 424  : 
; 425  : 					_Wrotesome = true;	// write succeeded

  0041b	48 8b 85 c0 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00422	c6 40 71 01	 mov	 BYTE PTR [rax+113], 1

; 426  : 					if (_Src != &_Ch)

  00426	48 8d 45 24	 lea	 rax, QWORD PTR _Ch$8[rbp]
  0042a	48 39 45 48	 cmp	 QWORD PTR _Src$9[rbp], rax
  0042e	74 23		 je	 SHORT $LN16@overflow

; 427  : 						return (_Meta);	// converted whole element

  00430	8b 85 c8 04 00
	00		 mov	 eax, DWORD PTR _Meta$[rbp]
  00436	89 85 a4 03 00
	00		 mov	 DWORD PTR $T21[rbp], eax
  0043c	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR _Str$11[rbp]
  00443	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00448	8b 85 a4 03 00
	00		 mov	 eax, DWORD PTR $T21[rbp]
  0044e	e9 e0 00 00 00	 jmp	 $LN1@overflow
$LN16@overflow:

; 428  : 
; 429  : 					if (0 < _Count)

  00453	48 83 bd c8 00
	00 00 00	 cmp	 QWORD PTR _Count$12[rbp], 0
  0045b	76 02		 jbe	 SHORT $LN17@overflow
  0045d	eb 4a		 jmp	 SHORT $LN18@overflow
$LN17@overflow:

; 430  : 						;
; 431  : 					else if (_Str.size() < 4 * _STRING_INC)

  0045f	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR _Str$11[rbp]
  00466	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  0046b	48 83 f8 20	 cmp	 rax, 32			; 00000020H
  0046f	73 16		 jae	 SHORT $LN19@overflow

; 432  : 						_Str.append(_STRING_INC, '\0');	// try with more space

  00471	45 33 c0	 xor	 r8d, r8d
  00474	ba 08 00 00 00	 mov	 edx, 8
  00479	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR _Str$11[rbp]
  00480	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 433  : 					else

  00485	eb 22		 jmp	 SHORT $LN18@overflow
$LN19@overflow:

; 434  : 						return (_Traits::eof());	// conversion failed

  00487	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0048c	89 85 c4 03 00
	00		 mov	 DWORD PTR $T22[rbp], eax
  00492	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR _Str$11[rbp]
  00499	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0049e	8b 85 c4 03 00
	00		 mov	 eax, DWORD PTR $T22[rbp]
  004a4	e9 8a 00 00 00	 jmp	 $LN1@overflow
$LN18@overflow:

; 435  : 					break;

  004a9	eb 76		 jmp	 SHORT $LN5@overflow
$LN21@overflow:

; 436  : 					}
; 437  : 
; 438  : 				case codecvt_base::noconv:
; 439  : 					return (_Fputc(_Ch, _Myfile) ? _Meta

  004ab	48 8b 85 c0 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  004b2	48 8b 90 80 00
	00 00		 mov	 rdx, QWORD PTR [rax+128]
  004b9	0f b6 4d 24	 movzx	 ecx, BYTE PTR _Ch$8[rbp]
  004bd	e8 00 00 00 00	 call	 ??$_Fputc@D@std@@YA_NDPEAU_iobuf@@@Z ; std::_Fputc<char>
  004c2	0f b6 c0	 movzx	 eax, al
  004c5	85 c0		 test	 eax, eax
  004c7	74 0e		 je	 SHORT $LN28@overflow
  004c9	8b 85 c8 04 00
	00		 mov	 eax, DWORD PTR _Meta$[rbp]
  004cf	89 85 54 04 00
	00		 mov	 DWORD PTR tv230[rbp], eax
  004d5	eb 0b		 jmp	 SHORT $LN29@overflow
$LN28@overflow:
  004d7	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  004dc	89 85 54 04 00
	00		 mov	 DWORD PTR tv230[rbp], eax
$LN29@overflow:
  004e2	8b 85 54 04 00
	00		 mov	 eax, DWORD PTR tv230[rbp]
  004e8	89 85 e4 03 00
	00		 mov	 DWORD PTR $T23[rbp], eax
  004ee	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR _Str$11[rbp]
  004f5	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  004fa	8b 85 e4 03 00
	00		 mov	 eax, DWORD PTR $T23[rbp]
  00500	eb 31		 jmp	 SHORT $LN1@overflow
$LN22@overflow:

; 440  : 						: _Traits::eof());	// no conversion, put as is
; 441  : 
; 442  : 				default:
; 443  : 					return (_Traits::eof());	// conversion failed

  00502	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00507	89 85 04 04 00
	00		 mov	 DWORD PTR $T24[rbp], eax
  0050d	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR _Str$11[rbp]
  00514	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00519	8b 85 04 04 00
	00		 mov	 eax, DWORD PTR $T24[rbp]
  0051f	eb 12		 jmp	 SHORT $LN1@overflow
$LN5@overflow:

; 444  : 				}

  00521	e9 8f fc ff ff	 jmp	 $LN2@overflow

; 445  : 			}

  00526	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR _Str$11[rbp]
  0052d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00532	90		 npad	 1
$LN1@overflow:

; 446  : 	}

  00533	48 8b f8	 mov	 rdi, rax
  00536	48 8d 4d c0	 lea	 rcx, QWORD PTR [rbp-64]
  0053a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z$rtcFrameData
  00541	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00546	48 8b c7	 mov	 rax, rdi
  00549	48 8b 8d 90 04
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00550	48 33 cd	 xor	 rcx, rbp
  00553	e8 00 00 00 00	 call	 __security_check_cookie
  00558	48 8d a5 a8 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1192]
  0055f	5f		 pop	 rdi
  00560	5d		 pop	 rbp
  00561	c3		 ret	 0
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::overflow
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_STRING_INC$7 = 4
_Ch$8 = 36
_Src$9 = 72
_Dest$10 = 104
_Str$11 = 136
_Count$12 = 200
$T13 = 612
$T14 = 644
$T15 = 680
$T16 = 728
$T17 = 776
$T18 = 820
$T19 = 856
$T20 = 900
$T21 = 932
$T22 = 964
$T23 = 996
$T24 = 1028
$T25 = 1060
$T26 = 1096
tv230 = 1108
tv203 = 1108
tv147 = 1108
tv256 = 1112
tv255 = 1112
tv151 = 1112
tv84 = 1112
tv246 = 1120
tv241 = 1120
tv237 = 1120
tv208 = 1128
tv165 = 1128
tv168 = 1136
tv254 = 1144
tv239 = 1152
tv184 = 1160
__$ArrayPad$ = 1168
this$ = 1216
_Meta$ = 1224
?dtor$0@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::overflow'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR _Str$11[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::overflow'::`1'::dtor$0
_STRING_INC$7 = 4
_Ch$8 = 36
_Src$9 = 72
_Dest$10 = 104
_Str$11 = 136
_Count$12 = 200
$T13 = 612
$T14 = 644
$T15 = 680
$T16 = 728
$T17 = 776
$T18 = 820
$T19 = 856
$T20 = 900
$T21 = 932
$T22 = 964
$T23 = 996
$T24 = 1028
$T25 = 1060
$T26 = 1096
tv230 = 1108
tv203 = 1108
tv147 = 1108
tv256 = 1112
tv255 = 1112
tv151 = 1112
tv84 = 1112
tv246 = 1120
tv241 = 1120
tv237 = 1120
tv208 = 1128
tv165 = 1128
tv168 = 1136
tv254 = 1144
tv239 = 1152
tv184 = 1160
__$ArrayPad$ = 1168
this$ = 1216
_Meta$ = 1224
?dtor$1@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::overflow'::`1'::dtor$1
  00027	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0002c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00031	55		 push	 rbp
  00032	57		 push	 rdi
  00033	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00037	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0003b	48 8d 8d a8 02
	00 00		 lea	 rcx, QWORD PTR $T15[rbp]
  00042	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  00047	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
?dtor$1@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::overflow'::`1'::dtor$1
_STRING_INC$7 = 4
_Ch$8 = 36
_Src$9 = 72
_Dest$10 = 104
_Str$11 = 136
_Count$12 = 200
$T13 = 612
$T14 = 644
$T15 = 680
$T16 = 728
$T17 = 776
$T18 = 820
$T19 = 856
$T20 = 900
$T21 = 932
$T22 = 964
$T23 = 996
$T24 = 1028
$T25 = 1060
$T26 = 1096
tv230 = 1108
tv203 = 1108
tv147 = 1108
tv256 = 1112
tv255 = 1112
tv151 = 1112
tv84 = 1112
tv246 = 1120
tv241 = 1120
tv237 = 1120
tv208 = 1128
tv165 = 1128
tv168 = 1136
tv254 = 1144
tv239 = 1152
tv184 = 1160
__$ArrayPad$ = 1168
this$ = 1216
_Meta$ = 1224
?dtor$2@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::overflow'::`1'::dtor$2
  0004e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00053	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00058	55		 push	 rbp
  00059	57		 push	 rdi
  0005a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0005e	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00062	48 8d 8d d8 02
	00 00		 lea	 rcx, QWORD PTR $T16[rbp]
  00069	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  0006e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00072	5f		 pop	 rdi
  00073	5d		 pop	 rbp
  00074	c3		 ret	 0
?dtor$2@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::overflow'::`1'::dtor$2
_STRING_INC$7 = 4
_Ch$8 = 36
_Src$9 = 72
_Dest$10 = 104
_Str$11 = 136
_Count$12 = 200
$T13 = 612
$T14 = 644
$T15 = 680
$T16 = 728
$T17 = 776
$T18 = 820
$T19 = 856
$T20 = 900
$T21 = 932
$T22 = 964
$T23 = 996
$T24 = 1028
$T25 = 1060
$T26 = 1096
tv230 = 1108
tv203 = 1108
tv147 = 1108
tv256 = 1112
tv255 = 1112
tv151 = 1112
tv84 = 1112
tv246 = 1120
tv241 = 1120
tv237 = 1120
tv208 = 1128
tv165 = 1128
tv168 = 1136
tv254 = 1144
tv239 = 1152
tv184 = 1160
__$ArrayPad$ = 1168
this$ = 1216
_Meta$ = 1224
?dtor$3@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::overflow'::`1'::dtor$3
  00075	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0007a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0007f	55		 push	 rbp
  00080	57		 push	 rdi
  00081	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00085	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00089	48 8d 8d 08 03
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  00090	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  00095	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00099	5f		 pop	 rdi
  0009a	5d		 pop	 rbp
  0009b	c3		 ret	 0
?dtor$3@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::overflow'::`1'::dtor$3
_STRING_INC$7 = 4
_Ch$8 = 36
_Src$9 = 72
_Dest$10 = 104
_Str$11 = 136
_Count$12 = 200
$T13 = 612
$T14 = 644
$T15 = 680
$T16 = 728
$T17 = 776
$T18 = 820
$T19 = 856
$T20 = 900
$T21 = 932
$T22 = 964
$T23 = 996
$T24 = 1028
$T25 = 1060
$T26 = 1096
tv230 = 1108
tv203 = 1108
tv147 = 1108
tv256 = 1112
tv255 = 1112
tv151 = 1112
tv84 = 1112
tv246 = 1120
tv241 = 1120
tv237 = 1120
tv208 = 1128
tv165 = 1128
tv168 = 1136
tv254 = 1144
tv239 = 1152
tv184 = 1160
__$ArrayPad$ = 1168
this$ = 1216
_Meta$ = 1224
?dtor$4@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::overflow'::`1'::dtor$4
  0009c	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000a1	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000a6	55		 push	 rbp
  000a7	57		 push	 rdi
  000a8	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000ac	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  000b0	8b 85 24 04 00
	00		 mov	 eax, DWORD PTR $T25[rbp]
  000b6	83 e0 01	 and	 eax, 1
  000b9	85 c0		 test	 eax, eax
  000bb	74 13		 je	 SHORT $LN35@dtor$4
  000bd	83 a5 24 04 00
	00 fe		 and	 DWORD PTR $T25[rbp], -2
  000c4	48 8d 8d 58 03
	00 00		 lea	 rcx, QWORD PTR $T19[rbp]
  000cb	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
$LN35@dtor$4:
  000d0	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000d4	5f		 pop	 rdi
  000d5	5d		 pop	 rbp
  000d6	c3		 ret	 0
?dtor$4@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::overflow'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_STRING_INC$7 = 4
_Ch$8 = 36
_Src$9 = 72
_Dest$10 = 104
_Str$11 = 136
_Count$12 = 200
$T13 = 612
$T14 = 644
$T15 = 680
$T16 = 728
$T17 = 776
$T18 = 820
$T19 = 856
$T20 = 900
$T21 = 932
$T22 = 964
$T23 = 996
$T24 = 1028
$T25 = 1060
$T26 = 1096
tv230 = 1108
tv203 = 1108
tv147 = 1108
tv256 = 1112
tv255 = 1112
tv151 = 1112
tv84 = 1112
tv246 = 1120
tv241 = 1120
tv237 = 1120
tv208 = 1128
tv165 = 1128
tv168 = 1136
tv254 = 1144
tv239 = 1152
tv184 = 1160
__$ArrayPad$ = 1168
this$ = 1216
_Meta$ = 1224
?dtor$0@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::overflow'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR _Str$11[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::overflow'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_STRING_INC$7 = 4
_Ch$8 = 36
_Src$9 = 72
_Dest$10 = 104
_Str$11 = 136
_Count$12 = 200
$T13 = 612
$T14 = 644
$T15 = 680
$T16 = 728
$T17 = 776
$T18 = 820
$T19 = 856
$T20 = 900
$T21 = 932
$T22 = 964
$T23 = 996
$T24 = 1028
$T25 = 1060
$T26 = 1096
tv230 = 1108
tv203 = 1108
tv147 = 1108
tv256 = 1112
tv255 = 1112
tv151 = 1112
tv84 = 1112
tv246 = 1120
tv241 = 1120
tv237 = 1120
tv208 = 1128
tv165 = 1128
tv168 = 1136
tv254 = 1144
tv239 = 1152
tv184 = 1160
__$ArrayPad$ = 1168
this$ = 1216
_Meta$ = 1224
?dtor$1@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::overflow'::`1'::dtor$1
  00027	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0002c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00031	55		 push	 rbp
  00032	57		 push	 rdi
  00033	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00037	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0003b	48 8d 8d a8 02
	00 00		 lea	 rcx, QWORD PTR $T15[rbp]
  00042	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  00047	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
?dtor$1@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::overflow'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_STRING_INC$7 = 4
_Ch$8 = 36
_Src$9 = 72
_Dest$10 = 104
_Str$11 = 136
_Count$12 = 200
$T13 = 612
$T14 = 644
$T15 = 680
$T16 = 728
$T17 = 776
$T18 = 820
$T19 = 856
$T20 = 900
$T21 = 932
$T22 = 964
$T23 = 996
$T24 = 1028
$T25 = 1060
$T26 = 1096
tv230 = 1108
tv203 = 1108
tv147 = 1108
tv256 = 1112
tv255 = 1112
tv151 = 1112
tv84 = 1112
tv246 = 1120
tv241 = 1120
tv237 = 1120
tv208 = 1128
tv165 = 1128
tv168 = 1136
tv254 = 1144
tv239 = 1152
tv184 = 1160
__$ArrayPad$ = 1168
this$ = 1216
_Meta$ = 1224
?dtor$2@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::overflow'::`1'::dtor$2
  0004e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00053	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00058	55		 push	 rbp
  00059	57		 push	 rdi
  0005a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0005e	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00062	48 8d 8d d8 02
	00 00		 lea	 rcx, QWORD PTR $T16[rbp]
  00069	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  0006e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00072	5f		 pop	 rdi
  00073	5d		 pop	 rbp
  00074	c3		 ret	 0
?dtor$2@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::overflow'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_STRING_INC$7 = 4
_Ch$8 = 36
_Src$9 = 72
_Dest$10 = 104
_Str$11 = 136
_Count$12 = 200
$T13 = 612
$T14 = 644
$T15 = 680
$T16 = 728
$T17 = 776
$T18 = 820
$T19 = 856
$T20 = 900
$T21 = 932
$T22 = 964
$T23 = 996
$T24 = 1028
$T25 = 1060
$T26 = 1096
tv230 = 1108
tv203 = 1108
tv147 = 1108
tv256 = 1112
tv255 = 1112
tv151 = 1112
tv84 = 1112
tv246 = 1120
tv241 = 1120
tv237 = 1120
tv208 = 1128
tv165 = 1128
tv168 = 1136
tv254 = 1144
tv239 = 1152
tv184 = 1160
__$ArrayPad$ = 1168
this$ = 1216
_Meta$ = 1224
?dtor$3@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::overflow'::`1'::dtor$3
  00075	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0007a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0007f	55		 push	 rbp
  00080	57		 push	 rdi
  00081	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00085	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00089	48 8d 8d 08 03
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  00090	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
  00095	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00099	5f		 pop	 rdi
  0009a	5d		 pop	 rbp
  0009b	c3		 ret	 0
?dtor$3@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::overflow'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_STRING_INC$7 = 4
_Ch$8 = 36
_Src$9 = 72
_Dest$10 = 104
_Str$11 = 136
_Count$12 = 200
$T13 = 612
$T14 = 644
$T15 = 680
$T16 = 728
$T17 = 776
$T18 = 820
$T19 = 856
$T20 = 900
$T21 = 932
$T22 = 964
$T23 = 996
$T24 = 1028
$T25 = 1060
$T26 = 1096
tv230 = 1108
tv203 = 1108
tv147 = 1108
tv256 = 1112
tv255 = 1112
tv151 = 1112
tv84 = 1112
tv246 = 1120
tv241 = 1120
tv237 = 1120
tv208 = 1128
tv165 = 1128
tv168 = 1136
tv254 = 1144
tv239 = 1152
tv184 = 1160
__$ArrayPad$ = 1168
this$ = 1216
_Meta$ = 1224
?dtor$4@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::overflow'::`1'::dtor$4
  0009c	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000a1	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000a6	55		 push	 rbp
  000a7	57		 push	 rdi
  000a8	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000ac	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  000b0	8b 85 24 04 00
	00		 mov	 eax, DWORD PTR $T25[rbp]
  000b6	83 e0 01	 and	 eax, 1
  000b9	85 c0		 test	 eax, eax
  000bb	74 13		 je	 SHORT $LN35@dtor$4
  000bd	83 a5 24 04 00
	00 fe		 and	 DWORD PTR $T25[rbp], -2
  000c4	48 8d 8d 58 03
	00 00		 lea	 rcx, QWORD PTR $T19[rbp]
  000cb	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@XZ
$LN35@dtor$4:
  000d0	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000d4	5f		 pop	 rdi
  000d5	5d		 pop	 rbp
  000d6	c3		 ret	 0
?dtor$4@?0??overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::overflow'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock, COMDAT

; 381  : 		{	// unlock file instead of stream buffer

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 382  : 		if (_Myfile)

  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00039	74 14		 je	 SHORT $LN2@Unlock

; 383  : 			_CSTD _unlock_file(_Myfile);

  0003b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00042	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00049	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__unlock_file
$LN2@Unlock:

; 384  : 		}

  0004f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00056	5f		 pop	 rdi
  00057	5d		 pop	 rbp
  00058	c3		 ret	 0
?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Lock, COMDAT

; 375  : 		{	// lock file instead of stream buffer

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 376  : 		if (_Myfile)

  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00039	74 14		 je	 SHORT $LN2@Lock

; 377  : 			_CSTD _lock_file(_Myfile);

  0003b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00042	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00049	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lock_file
$LN2@Lock:

; 378  : 		}

  0004f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00056	5f		 pop	 rdi
  00057	5d		 pop	 rbp
  00058	c3		 ret	 0
?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Lock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ
_TEXT	SEGMENT
_Ans$ = 8
this$ = 256
?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::close, COMDAT

; 359  : 		{	// close the C stream

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 360  : 		_Myt *_Ans = this;

  0002a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 89 45 08	 mov	 QWORD PTR _Ans$[rbp], rax

; 361  : 		if (_Myfile == 0)

  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00044	75 0a		 jne	 SHORT $LN2@close

; 362  : 			_Ans = 0;

  00046	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR _Ans$[rbp], 0

; 363  : 		else

  0004e	eb 3b		 jmp	 SHORT $LN3@close
$LN2@close:

; 364  : 			{	// put any homing sequence and close file
; 365  : 			if (!_Endwrite())

  00050	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00057	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
  0005c	0f b6 c0	 movzx	 eax, al
  0005f	85 c0		 test	 eax, eax
  00061	75 08		 jne	 SHORT $LN4@close

; 366  : 				_Ans = 0;

  00063	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR _Ans$[rbp], 0
$LN4@close:

; 367  : 			if (fclose(_Myfile) != 0)

  0006b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00072	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00079	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose
  0007f	85 c0		 test	 eax, eax
  00081	74 08		 je	 SHORT $LN5@close

; 368  : 				_Ans = 0;

  00083	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR _Ans$[rbp], 0
$LN5@close:
$LN3@close:

; 369  : 			}
; 370  : 		_Init(0, _Closefl);

  0008b	41 b8 02 00 00
	00		 mov	 r8d, 2
  00091	33 d2		 xor	 edx, edx
  00093	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009a	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 371  : 		return (_Ans);

  0009f	48 8b 45 08	 mov	 rax, QWORD PTR _Ans$[rbp]

; 372  : 		}

  000a3	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000aa	5f		 pop	 rdi
  000ab	5d		 pop	 rbp
  000ac	c3		 ret	 0
?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::close
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z
_TEXT	SEGMENT
_File$ = 8
$T1 = 232
$T2 = 280
tv89 = 296
tv88 = 304
this$ = 352
_Filename$ = 360
_Mode$ = 368
_Prot$ = 376
?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::open, COMDAT

; 275  : 		{	// open a C stream with specified mode

$LN6:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]
  00039	48 c7 85 18 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T2[rbp], -2

; 276  : 		_Filet *_File;
; 277  : 		if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)

  00044	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00053	75 24		 jne	 SHORT $LN3@open
  00055	44 8b 85 78 01
	00 00		 mov	 r8d, DWORD PTR _Prot$[rbp]
  0005c	8b 95 70 01 00
	00		 mov	 edx, DWORD PTR _Mode$[rbp]
  00062	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR _Filename$[rbp]
  00069	e8 00 00 00 00	 call	 ?_Fiopen@std@@YAPEAU_iobuf@@PEBDHH@Z ; std::_Fiopen
  0006e	48 89 45 08	 mov	 QWORD PTR _File$[rbp], rax
  00072	48 83 7d 08 00	 cmp	 QWORD PTR _File$[rbp], 0
  00077	75 04		 jne	 SHORT $LN2@open
$LN3@open:

; 278  : 			return (0);	// open failed

  00079	33 c0		 xor	 eax, eax
  0007b	eb 6e		 jmp	 SHORT $LN1@open
$LN2@open:

; 279  : 
; 280  : 		_Init(_File, _Openfl);

  0007d	41 b8 01 00 00
	00		 mov	 r8d, 1
  00083	48 8b 55 08	 mov	 rdx, QWORD PTR _File$[rbp]
  00087	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008e	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 281  : 		_Initcvt(&_USE(_Mysb::getloc(), _Cvt));

  00093	48 8d 95 e8 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  0009a	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEBA?AVlocale@2@XZ
  000a7	48 89 85 28 01
	00 00		 mov	 QWORD PTR tv89[rbp], rax
  000ae	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR tv89[rbp]
  000b5	48 89 85 30 01
	00 00		 mov	 QWORD PTR tv88[rbp], rax
  000bc	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR tv88[rbp]
  000c3	e8 00 00 00 00	 call	 ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
  000c8	48 8b d0	 mov	 rdx, rax
  000cb	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d2	e8 00 00 00 00	 call	 ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEBV?$codecvt@DDU_Mbstatet@@@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
  000d7	90		 npad	 1
  000d8	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  000df	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale

; 282  : 		return (this);	// open succeeded

  000e4	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
$LN1@open:

; 283  : 		}

  000eb	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  000f2	5f		 pop	 rdi
  000f3	5d		 pop	 rbp
  000f4	c3		 ret	 0
?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::open
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_File$ = 8
$T1 = 232
$T2 = 280
tv89 = 296
tv88 = 304
this$ = 352
_Filename$ = 360
_Mode$ = 368
_Prot$ = 376
?dtor$0@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::open'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  0001b	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::open'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_File$ = 8
$T1 = 232
$T2 = 280
tv89 = 296
tv88 = 304
this$ = 352
_Filename$ = 360
_Mode$ = 368
_Prot$ = 376
?dtor$0@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::open'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  0001b	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::open'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >, COMDAT

; 161  : 		{	// destroy the object

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
  00043	48 89 08	 mov	 QWORD PTR [rax], rcx

; 162  : 		if (_Myfile != 0)

  00046	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004d	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00055	74 0d		 je	 SHORT $LN2@basic_file

; 163  : 			_Reset_back();	// revert from _Mychar buffer

  00057	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005e	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
  00063	90		 npad	 1
$LN2@basic_file:

; 164  : 		if (_Closef)

  00064	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006b	0f b6 40 7c	 movzx	 eax, BYTE PTR [rax+124]
  0006f	85 c0		 test	 eax, eax
  00071	74 0d		 je	 SHORT $LN3@basic_file

; 165  : 			close();

  00073	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007a	e8 00 00 00 00	 call	 ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
  0007f	90		 npad	 1
$LN3@basic_file:

; 166  : 		}

  00080	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00087	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
  0008d	90		 npad	 1
  0008e	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00095	5f		 pop	 rdi
  00096	5d		 pop	 rbp
  00097	c3		 ret	 0
??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
_File$ = 264
??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >, COMDAT

; 156  : 		{	// construct from pointer to C stream

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2

; 155  : 		: _Mysb()

  0003a	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00041	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAA@XZ
  00047	90		 npad	 1

; 156  : 		{	// construct from pointer to C stream

  00048	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
  00056	48 89 08	 mov	 QWORD PTR [rax], rcx

; 157  : 		_Init(_File, _Newfl);

  00059	45 33 c0	 xor	 r8d, r8d
  0005c	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _File$[rbp]
  00063	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006a	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init
  0006f	90		 npad	 1

; 158  : 		}

  00070	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00077	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007e	5f		 pop	 rdi
  0007f	5d		 pop	 rbp
  00080	c3		 ret	 0
??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
_File$ = 264
?dtor$0@?0???0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	5f		 pop	 rdi
  00026	5d		 pop	 rbp
  00027	c3		 ret	 0
?dtor$0@?0???0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
_File$ = 264
?dtor$0@?0???0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z@4HA PROC ; `std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	5f		 pop	 rdi
  00026	5d		 pop	 rbp
  00027	c3		 ret	 0
?dtor$0@?0???0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z@4HA ENDP ; `std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXPEBDHH@Z
_TEXT	SEGMENT
this$ = 224
_Filename$ = 232
_Mode$ = 240
_Prot$ = 248
?open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXPEBDHH@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::open, COMDAT

; 1137 : 		{	// open a C stream with specified mode

$LN5:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 1138 : 		if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)

  00039	8b 85 f0 00 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  0003f	83 c8 02	 or	 eax, 2
  00042	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	48 83 c1 08	 add	 rcx, 8
  0004d	44 8b 8d f8 00
	00 00		 mov	 r9d, DWORD PTR _Prot$[rbp]
  00054	44 8b c0	 mov	 r8d, eax
  00057	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Filename$[rbp]
  0005e	e8 00 00 00 00	 call	 ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
  00063	48 85 c0	 test	 rax, rax
  00066	75 2e		 jne	 SHORT $LN2@open

; 1139 : 			_Myios::setstate(ios_base::failbit);

  00068	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00072	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00076	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007d	48 03 c8	 add	 rcx, rax
  00080	48 8b c1	 mov	 rax, rcx
  00083	45 33 c0	 xor	 r8d, r8d
  00086	ba 02 00 00 00	 mov	 edx, 2
  0008b	48 8b c8	 mov	 rcx, rax
  0008e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z

; 1140 : 		else

  00094	eb 29		 jmp	 SHORT $LN3@open
$LN2@open:

; 1141 : 			_Myios::clear();	// added with C++11

  00096	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a0	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000a4	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ab	48 03 c8	 add	 rcx, rax
  000ae	48 8b c1	 mov	 rax, rcx
  000b1	45 33 c0	 xor	 r8d, r8d
  000b4	33 d2		 xor	 edx, edx
  000b6	48 8b c8	 mov	 rcx, rax
  000b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
$LN3@open:

; 1142 : 		}

  000bf	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000c6	5f		 pop	 rdi
  000c7	5d		 pop	 rbp
  000c8	c3		 ret	 0
?open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXPEBDHH@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::open
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAA@XZ PROC ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >, COMDAT

; 1121 : 		{	// destroy the object

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8b 80 58 ff
	ff ff		 mov	 rax, QWORD PTR [rax-168]
  00038	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0003c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00043	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
  0004a	48 89 94 01 58
	ff ff ff	 mov	 QWORD PTR [rcx+rax-168], rdx
  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8b 80 58 ff
	ff ff		 mov	 rax, QWORD PTR [rax-168]
  00060	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00064	48 2d a8 00 00
	00		 sub	 rax, 168		; 000000a8H
  0006a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00071	48 8b 89 58 ff
	ff ff		 mov	 rcx, QWORD PTR [rcx-168]
  00078	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  0007c	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00083	89 84 0a 54 ff
	ff ff		 mov	 DWORD PTR [rdx+rcx-172], eax

; 1122 : 		}

  0008a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00091	48 2d a0 00 00
	00		 sub	 rax, 160		; 000000a0H
  00097	48 8b c8	 mov	 rcx, rax
  0009a	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  0009f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a6	48 2d 98 00 00
	00		 sub	 rax, 152		; 00000098H
  000ac	48 8b c8	 mov	 rcx, rax
  000af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAA@XZ
  000b5	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000bc	5f		 pop	 rdi
  000bd	5d		 pop	 rbp
  000be	c3		 ret	 0
??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UEAA@XZ ENDP ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
$initVBases$ = 296
??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >, COMDAT

; 975  : 		{	// construct unopened

$LN8:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002e	48 c7 85 e8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T2[rbp], -2
  00039	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR $T1[rbp], 0
  00043	83 bd 28 01 00
	00 00		 cmp	 DWORD PTR $initVBases$[rbp], 0
  0004a	74 37		 je	 SHORT $LN2@basic_ofst
  0004c	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@
  0005a	48 89 08	 mov	 QWORD PTR [rax], rcx
  0005d	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00064	48 05 a8 00 00
	00		 add	 rax, 168		; 000000a8H
  0006a	48 8b c8	 mov	 rcx, rax
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IEAA@XZ
  00073	90		 npad	 1
  00074	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  0007a	83 c8 01	 or	 eax, 1
  0007d	89 85 c4 00 00
	00		 mov	 DWORD PTR $T1[rbp], eax
$LN2@basic_ofst:

; 974  : 		: _Mybase(&_Filebuffer)

  00083	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008a	48 83 c0 08	 add	 rax, 8
  0008e	45 33 c9	 xor	 r9d, r9d
  00091	45 33 c0	 xor	 r8d, r8d
  00094	48 8b d0	 mov	 rdx, rax
  00097	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  000a4	90		 npad	 1

; 975  : 		{	// construct unopened

  000a5	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ac	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000af	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000b3	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
  000c1	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
  000c5	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000cc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000cf	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000d3	48 2d a8 00 00
	00		 sub	 rax, 168		; 000000a8H
  000d9	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000e0	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000e3	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  000e7	48 8b 95 20 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  000ee	89 44 0a fc	 mov	 DWORD PTR [rdx+rcx-4], eax
  000f2	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000f9	48 83 c0 08	 add	 rax, 8
  000fd	33 d2		 xor	 edx, edx
  000ff	48 8b c8	 mov	 rcx, rax
  00102	e8 00 00 00 00	 call	 ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAA@PEAU_iobuf@@@Z ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
  00107	90		 npad	 1

; 976  : 		}

  00108	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0010f	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00116	5f		 pop	 rdi
  00117	5d		 pop	 rbp
  00118	c3		 ret	 0
??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
$initVBases$ = 296
?dtor$0@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA PROC ; `std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  0001a	83 e0 01	 and	 eax, 1
  0001d	85 c0		 test	 eax, eax
  0001f	74 1b		 je	 SHORT $LN5@dtor$0
  00021	83 a5 c4 00 00
	00 fe		 and	 DWORD PTR $T1[rbp], -2
  00028	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002f	48 81 c1 a8 00
	00 00		 add	 rcx, 168		; 000000a8H
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ
$LN5@dtor$0:
  0003c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?dtor$0@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA ENDP ; `std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >'::`1'::dtor$0
$T1 = 196
$T2 = 232
this$ = 288
$initVBases$ = 296
?dtor$1@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA PROC ; `std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >'::`1'::dtor$1
  00043	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00048	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0004d	55		 push	 rbp
  0004e	57		 push	 rdi
  0004f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00053	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00057	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005e	48 83 c1 10	 add	 rcx, 16
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAA@XZ
  00068	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006c	5f		 pop	 rdi
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
?dtor$1@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA ENDP ; `std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
$initVBases$ = 296
?dtor$0@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA PROC ; `std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  0001a	83 e0 01	 and	 eax, 1
  0001d	85 c0		 test	 eax, eax
  0001f	74 1b		 je	 SHORT $LN5@dtor$0
  00021	83 a5 c4 00 00
	00 fe		 and	 DWORD PTR $T1[rbp], -2
  00028	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002f	48 81 c1 a8 00
	00 00		 add	 rcx, 168		; 000000a8H
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ
$LN5@dtor$0:
  0003c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?dtor$0@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA ENDP ; `std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
$initVBases$ = 296
?dtor$1@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA PROC ; `std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >'::`1'::dtor$1
  00043	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00048	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0004d	55		 push	 rbp
  0004e	57		 push	 rdi
  0004f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00053	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00057	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005e	48 83 c1 10	 add	 rcx, 16
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAA@XZ
  00068	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006c	5f		 pop	 rdi
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
?dtor$1@?0???0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA ENDP ; `std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT main
_TEXT	SEGMENT
a$ = 4
b$ = 40
log_ogólny$ = 112
log$ = 416
iloœæ_pieniêdzy$ = 724
kwota_zak³adu$ = 756
wylosowana_liczba$ = 788
wygrana$ = 820
typ_zak³adu$ = 856
co_kontynuowaæ$ = 916
buf$14 = 952
i$15 = 1012
$T16 = 1624
$T17 = 1684
$T18 = 1716
$T19 = 1748
$T20 = 1784
tv775 = 1796
tv791 = 1800
tv622 = 1800
tv608 = 1800
tv546 = 1800
tv500 = 1800
tv422 = 1800
tv408 = 1800
tv338 = 1800
tv262 = 1800
tv202 = 1800
__$ArrayPad$ = 1808
main	PROC						; COMDAT

; 65   : {

$LN94:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 68 07
	00 00		 sub	 rsp, 1896		; 00000768H
  0000a	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 da 01 00 00	 mov	 ecx, 474		; 000001daH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 c7 85 f8 06
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T20[rbp], -2
  00029	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00030	48 33 c5	 xor	 rax, rbp
  00033	48 89 85 10 07
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003a	c6 85 d4 06 00
	00 00		 mov	 BYTE PTR $T19[rbp], 0

; 66   : 	//Inicjowanie funkcji
; 67   : 	setlocale(LC_ALL, "polish"); // W celu polskich liter w konsoli

  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06JGCGFIEG@polish?$AA@
  00048	33 c9		 xor	 ecx, ecx
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_setlocale

; 68   : 	srand((unsigned int)time(nullptr)); //Zainicjowanie generatorza LCG (Liniowy Generator Kongruentny) dla ma³o wa¿nych liczb

  00050	33 c9		 xor	 ecx, ecx
  00052	e8 00 00 00 00	 call	 time
  00057	8b c8		 mov	 ecx, eax
  00059	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_srand

; 69   : 	Show_Cursor(); //Pokazanie kursora tekstowego w konsoli

  0005f	e8 00 00 00 00	 call	 ?Show_Cursor@@YAXXZ	; Show_Cursor

; 70   : 
; 71   : 	SprawdŸ_Pliki();

  00064	e8 00 00 00 00	 call	 ?SprawdŸ_Pliki@@YAXXZ	; SprawdŸ_Pliki

; 72   : 
; 73   : 	int a = 10;

  00069	c7 45 04 0a 00
	00 00		 mov	 DWORD PTR a$[rbp], 10

; 74   : 	string b = "10";

  00070	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02PKFBJPLJ@10?$AA@
  00077	48 8d 4d 28	 lea	 rcx, QWORD PTR b$[rbp]
  0007b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00080	90		 npad	 1

; 75   : 	Odczytaj_liczbê(a, b);

  00081	48 8d 55 28	 lea	 rdx, QWORD PTR b$[rbp]
  00085	48 8d 4d 04	 lea	 rcx, QWORD PTR a$[rbp]
  00089	e8 00 00 00 00	 call	 ?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Odczytaj_liczbê

; 76   : 	b = "p";

  0008e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01JBBJJEPG@p?$AA@
  00095	48 8d 4d 28	 lea	 rcx, QWORD PTR b$[rbp]
  00099	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 77   : 	Odczytaj_liczbê(a, b);

  0009e	48 8d 55 28	 lea	 rdx, QWORD PTR b$[rbp]
  000a2	48 8d 4d 04	 lea	 rcx, QWORD PTR a$[rbp]
  000a6	e8 00 00 00 00	 call	 ?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Odczytaj_liczbê

; 78   : 	b = "r";

  000ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01KDCPPGHE@r?$AA@
  000b2	48 8d 4d 28	 lea	 rcx, QWORD PTR b$[rbp]
  000b6	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 79   : 	Odczytaj_liczbê(a, b);

  000bb	48 8d 55 28	 lea	 rdx, QWORD PTR b$[rbp]
  000bf	48 8d 4d 04	 lea	 rcx, QWORD PTR a$[rbp]
  000c3	e8 00 00 00 00	 call	 ?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Odczytaj_liczbê

; 80   : 	b = "g";

  000c8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01JEJKBAGA@g?$AA@
  000cf	48 8d 4d 28	 lea	 rcx, QWORD PTR b$[rbp]
  000d3	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 81   : 	Odczytaj_liczbê(a, b);

  000d8	48 8d 55 28	 lea	 rdx, QWORD PTR b$[rbp]
  000dc	48 8d 4d 04	 lea	 rcx, QWORD PTR a$[rbp]
  000e0	e8 00 00 00 00	 call	 ?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Odczytaj_liczbê

; 82   : 	b = "k1";

  000e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02ICGBAFJO@k1?$AA@
  000ec	48 8d 4d 28	 lea	 rcx, QWORD PTR b$[rbp]
  000f0	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 83   : 	Odczytaj_liczbê(a, b);

  000f5	48 8d 55 28	 lea	 rdx, QWORD PTR b$[rbp]
  000f9	48 8d 4d 04	 lea	 rcx, QWORD PTR a$[rbp]
  000fd	e8 00 00 00 00	 call	 ?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Odczytaj_liczbê

; 84   : 	b = "w1";

  00102	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02JHFNFPIK@w1?$AA@
  00109	48 8d 4d 28	 lea	 rcx, QWORD PTR b$[rbp]
  0010d	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 85   : 	Odczytaj_liczbê(a, b);

  00112	48 8d 55 28	 lea	 rdx, QWORD PTR b$[rbp]
  00116	48 8d 4d 04	 lea	 rcx, QWORD PTR a$[rbp]
  0011a	e8 00 00 00 00	 call	 ?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Odczytaj_liczbê

; 86   : 
; 87   : 	//	PlaySound(TEXT("FAIL SOUND EFFECT.wav"), nullptr, SND_SYNC);
; 88   : 
; 89   : 	ofstream log_ogólny; //Utworzenie typu do celu zapisu do pliku

  0011f	ba 08 01 00 00	 mov	 edx, 264		; 00000108H
  00124	48 8d 4d 70	 lea	 rcx, QWORD PTR log_ogólny$[rbp]
  00128	e8 00 00 00 00	 call	 ?__autoclassinit2@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z
  0012d	ba 01 00 00 00	 mov	 edx, 1
  00132	48 8d 4d 70	 lea	 rcx, QWORD PTR log_ogólny$[rbp]
  00136	e8 00 00 00 00	 call	 ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
  0013b	90		 npad	 1

; 90   : 	log_ogólny.open("log_ogólny.txt", ios::app); //Otworzenie pliku z ustawieniem kursora zapisu do pliku

  0013c	41 b9 40 00 00
	00		 mov	 r9d, 64			; 00000040H
  00142	41 b8 08 00 00
	00		 mov	 r8d, 8
  00148	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@GMFAENOC@log_og?slny?4txt?$AA@
  0014f	48 8d 4d 70	 lea	 rcx, QWORD PTR log_ogólny$[rbp]
  00153	e8 00 00 00 00	 call	 ?open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXPEBDHH@Z ; std::basic_ofstream<char,std::char_traits<char> >::open

; 91   : 	fstream log; //Utworzenie typu do celu zapisu i/lub odczytu do i/lub z pliku

  00158	ba 18 01 00 00	 mov	 edx, 280		; 00000118H
  0015d	48 8d 8d a0 01
	00 00		 lea	 rcx, QWORD PTR log$[rbp]
  00164	e8 00 00 00 00	 call	 ?__autoclassinit2@?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAX_K@Z
  00169	ba 01 00 00 00	 mov	 edx, 1
  0016e	48 8d 8d a0 01
	00 00		 lea	 rcx, QWORD PTR log$[rbp]
  00175	e8 00 00 00 00	 call	 ??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_fstream<char,std::char_traits<char> >::basic_fstream<char,std::char_traits<char> >
  0017a	90		 npad	 1

; 92   : 	int iloœæ_pieniêdzy = kwota_pocz¹tkowa, kwota_zak³adu, wylosowana_liczba, wygrana; //Zmienne do których wczytuje siê wartoœci liczbowe pobrane od u¿ytkownika takie jak kwota zak³adu a przechowuje iloœæ posiadanych pieniêdzy a tak¿e przechowuje wyniki funkcji losowania liczby z ruletki i kwote wygran¹ z zak³adu

  0017b	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?kwota_pocz¹tkowa@@3HA ; kwota_pocz¹tkowa
  00181	89 85 d4 02 00
	00		 mov	 DWORD PTR iloœæ_pieniêdzy$[rbp], eax

; 93   : 	string typ_zak³adu; //Przechowuje typ zak³adu wprowadzony przez u¿ytkownika

  00187	48 8d 8d 58 03
	00 00		 lea	 rcx, QWORD PTR typ_zak³adu$[rbp]
  0018e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00193	90		 npad	 1

; 94   : 	char co_kontynuowaæ; //Deklaracja znaku który przechowuje nazwany znakiem punkt od którego kontynuowaæ runde
; 95   : 
; 96   : 	if (!czy_kontynuowaæ_grê) //Kompilacja je¿eli czy_kontynuowaæ_grê == 0

  00194	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?czy_kontynuowaæ_grê@@3HA, 0 ; czy_kontynuowaæ_grê
  0019b	75 61		 jne	 SHORT $LN8@main

; 97   : 		if (!_access("log_aktualny.txt", 0)) // Sprawdzenie dostêpu do pliku (je¿eli takowy istnieje, musi istnieæ plik)

  0019d	33 d2		 xor	 edx, edx
  0019f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@KLDNCCFE@log_aktualny?4txt?$AA@
  001a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__access
  001ac	85 c0		 test	 eax, eax
  001ae	75 4e		 jne	 SHORT $LN8@main

; 98   : 		{
; 99   : 			co_kontynuowaæ = 'n'; //Przypisanie znaku rozpoczêcia rundy od pocz¹tku

  001b0	c6 85 94 03 00
	00 6e		 mov	 BYTE PTR co_kontynuowaæ$[rbp], 110 ; 0000006eH

; 100  : 			remove("log_aktualny.txt"); //Usuniêcie pliku log aktualny poniewa¿ rozpoczyna siê now¹ grê

  001b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@KLDNCCFE@log_aktualny?4txt?$AA@
  001be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_remove

; 101  : 			log_ogólny << endl << "Uruchomiono ponownie grê z wy³¹czon¹ opcj¹ kontynuowania" << endl; //Wpisanie do buforu logu ogólnego informacje o rozpoczêciu nowej gry spowodowane ustawieniem gry

  001c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  001cb	48 8d 4d 70	 lea	 rcx, QWORD PTR log_ogólny$[rbp]
  001cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
  001d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DJ@EFIKGJBI@Uruchomiono?5ponownie?5gr?j?5z?5wy?$LD?$LJc@
  001dc	48 8b c8	 mov	 rcx, rax
  001df	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  001e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  001eb	48 8b c8	 mov	 rcx, rax
  001ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 102  : 			log_ogólny.flush(); //Zapisanie do pliku log_ogólny.txt danych wpisanych do bufora danych

  001f4	48 8d 4d 70	 lea	 rcx, QWORD PTR log_ogólny$[rbp]
  001f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ
$LN8@main:

; 103  : 		}
; 104  : 
; 105  : 	Wczytaj_z_pliku(log_ogólny, log, co_kontynuowaæ, iloœæ_pieniêdzy, kwota_zak³adu, wylosowana_liczba, typ_zak³adu);

  001fe	48 8d 85 58 03
	00 00		 lea	 rax, QWORD PTR typ_zak³adu$[rbp]
  00205	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0020a	48 8d 85 14 03
	00 00		 lea	 rax, QWORD PTR wylosowana_liczba$[rbp]
  00211	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00216	48 8d 85 f4 02
	00 00		 lea	 rax, QWORD PTR kwota_zak³adu$[rbp]
  0021d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00222	4c 8d 8d d4 02
	00 00		 lea	 r9, QWORD PTR iloœæ_pieniêdzy$[rbp]
  00229	4c 8d 85 94 03
	00 00		 lea	 r8, QWORD PTR co_kontynuowaæ$[rbp]
  00230	48 8d 95 a0 01
	00 00		 lea	 rdx, QWORD PTR log$[rbp]
  00237	48 8d 4d 70	 lea	 rcx, QWORD PTR log_ogólny$[rbp]
  0023b	e8 00 00 00 00	 call	 ?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; Wczytaj_z_pliku
$LN4@main:

; 106  : 
; 107  : 	do
; 108  : 	{
; 109  : 		if (co_kontynuowaæ == 'n') Wczytaj_Kwotê_Zak³adu(kwota_zak³adu, iloœæ_pieniêdzy); //Przypisanie do zmiennej pobranej od u¿ytkownika kwoty zak³adu

  00240	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  00247	83 f8 6e	 cmp	 eax, 110		; 0000006eH
  0024a	75 15		 jne	 SHORT $LN10@main
  0024c	48 8d 95 d4 02
	00 00		 lea	 rdx, QWORD PTR iloœæ_pieniêdzy$[rbp]
  00253	48 8d 8d f4 02
	00 00		 lea	 rcx, QWORD PTR kwota_zak³adu$[rbp]
  0025a	e8 00 00 00 00	 call	 ?Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z ; Wczytaj_Kwotê_Zak³adu
  0025f	eb 41		 jmp	 SHORT $LN11@main
$LN10@main:

; 110  : 		else cout << "Obstawiono za " << kwota_zak³adu << "$" << endl; //Wypisanie wczytanej kwoty zak³adu

  00261	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@LMKDJHDC@Obstawiono?5za?5?$AA@
  00268	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0026f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00274	8b 95 f4 02 00
	00		 mov	 edx, DWORD PTR kwota_zak³adu$[rbp]
  0027a	48 8b c8	 mov	 rcx, rax
  0027d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  00283	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EPMOAMKG@$?$AA@
  0028a	48 8b c8	 mov	 rcx, rax
  0028d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00292	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00299	48 8b c8	 mov	 rcx, rax
  0029c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
$LN11@main:

; 111  : 		if (co_kontynuowaæ == 'n') log << "Obstawiono za " << kwota_zak³adu << "$"; //Zapisanie do bufora pliku logu aktualnego informacji o kwocie obstawionego zak³adu

  002a2	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  002a9	83 f8 6e	 cmp	 eax, 110		; 0000006eH
  002ac	75 5c		 jne	 SHORT $LN12@main
  002ae	48 8d 85 a0 01
	00 00		 lea	 rax, QWORD PTR log$[rbp]
  002b5	48 85 c0	 test	 rax, rax
  002b8	74 14		 je	 SHORT $LN61@main
  002ba	48 8d 85 a0 01
	00 00		 lea	 rax, QWORD PTR log$[rbp]
  002c1	48 83 c0 10	 add	 rax, 16
  002c5	48 89 85 08 07
	00 00		 mov	 QWORD PTR tv202[rbp], rax
  002cc	eb 0b		 jmp	 SHORT $LN62@main
$LN61@main:
  002ce	48 c7 85 08 07
	00 00 00 00 00
	00		 mov	 QWORD PTR tv202[rbp], 0
$LN62@main:
  002d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@LMKDJHDC@Obstawiono?5za?5?$AA@
  002e0	48 8b 8d 08 07
	00 00		 mov	 rcx, QWORD PTR tv202[rbp]
  002e7	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  002ec	8b 95 f4 02 00
	00		 mov	 edx, DWORD PTR kwota_zak³adu$[rbp]
  002f2	48 8b c8	 mov	 rcx, rax
  002f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  002fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EPMOAMKG@$?$AA@
  00302	48 8b c8	 mov	 rcx, rax
  00305	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
$LN12@main:

; 112  : 		if (co_kontynuowaæ == 'n') log_ogólny << "Obstawiono za " << kwota_zak³adu << "$"; //Zapisanie do bufora pliku logu ogólnego informacji o kwocie obstawionego zak³adu

  0030a	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  00311	83 f8 6e	 cmp	 eax, 110		; 0000006eH
  00314	75 2e		 jne	 SHORT $LN13@main
  00316	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@LMKDJHDC@Obstawiono?5za?5?$AA@
  0031d	48 8d 4d 70	 lea	 rcx, QWORD PTR log_ogólny$[rbp]
  00321	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00326	8b 95 f4 02 00
	00		 mov	 edx, DWORD PTR kwota_zak³adu$[rbp]
  0032c	48 8b c8	 mov	 rcx, rax
  0032f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  00335	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EPMOAMKG@$?$AA@
  0033c	48 8b c8	 mov	 rcx, rax
  0033f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
$LN13@main:

; 113  : 		log.flush(); //Zapisanie do pliku log_aktualny.txt danych wpisanych do bufora danych

  00344	48 8d 85 b0 01
	00 00		 lea	 rax, QWORD PTR log$[rbp+16]
  0034b	48 8b c8	 mov	 rcx, rax
  0034e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 114  : 		log_ogólny.flush(); //Zapisanie do pliku log_ogólny.txt danych wpisanych do bufora danych

  00354	48 8d 4d 70	 lea	 rcx, QWORD PTR log_ogólny$[rbp]
  00358	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 115  : 		if (co_kontynuowaæ == 'n' || co_kontynuowaæ == 'k') typ_zak³adu = Obstaw(); //Przypisanie do zmiennej pobranej od u¿ytkownika typu zak³adu

  0035e	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  00365	83 f8 6e	 cmp	 eax, 110		; 0000006eH
  00368	74 0c		 je	 SHORT $LN16@main
  0036a	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  00371	83 f8 6b	 cmp	 eax, 107		; 0000006bH
  00374	75 34		 jne	 SHORT $LN14@main
$LN16@main:
  00376	48 8d 8d 58 06
	00 00		 lea	 rcx, QWORD PTR $T16[rbp]
  0037d	e8 00 00 00 00	 call	 ?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; Obstaw
  00382	48 89 85 08 07
	00 00		 mov	 QWORD PTR tv791[rbp], rax
  00389	48 8b 95 08 07
	00 00		 mov	 rdx, QWORD PTR tv791[rbp]
  00390	48 8d 8d 58 03
	00 00		 lea	 rcx, QWORD PTR typ_zak³adu$[rbp]
  00397	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  0039c	48 8d 8d 58 06
	00 00		 lea	 rcx, QWORD PTR $T16[rbp]
  003a3	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  003a8	eb 32		 jmp	 SHORT $LN15@main
$LN14@main:

; 116  : 		else cout << "Obstawiono zak³ad " << typ_zak³adu << endl; //Wypisanie wczytanego typu zak³adu

  003aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@IOLLNBIB@Obstawiono?5zak?$LDad?5?$AA@
  003b1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  003b8	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  003bd	48 8d 95 58 03
	00 00		 lea	 rdx, QWORD PTR typ_zak³adu$[rbp]
  003c4	48 8b c8	 mov	 rcx, rax
  003c7	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  003cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  003d3	48 8b c8	 mov	 rcx, rax
  003d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
$LN15@main:

; 117  : 		if (co_kontynuowaæ == 'n' || co_kontynuowaæ == 'k') log << " Obstawiono zaklad " << typ_zak³adu; //Zapisanie do bufora pliku logu aktualnego informacji o typie obstawionego zak³adu

  003dc	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  003e3	83 f8 6e	 cmp	 eax, 110		; 0000006eH
  003e6	74 0c		 je	 SHORT $LN18@main
  003e8	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  003ef	83 f8 6b	 cmp	 eax, 107		; 0000006bH
  003f2	75 4d		 jne	 SHORT $LN17@main
$LN18@main:
  003f4	48 8d 85 a0 01
	00 00		 lea	 rax, QWORD PTR log$[rbp]
  003fb	48 85 c0	 test	 rax, rax
  003fe	74 14		 je	 SHORT $LN63@main
  00400	48 8d 85 a0 01
	00 00		 lea	 rax, QWORD PTR log$[rbp]
  00407	48 83 c0 10	 add	 rax, 16
  0040b	48 89 85 08 07
	00 00		 mov	 QWORD PTR tv262[rbp], rax
  00412	eb 0b		 jmp	 SHORT $LN64@main
$LN63@main:
  00414	48 c7 85 08 07
	00 00 00 00 00
	00		 mov	 QWORD PTR tv262[rbp], 0
$LN64@main:
  0041f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@EKDPDLOA@?5Obstawiono?5zaklad?5?$AA@
  00426	48 8b 8d 08 07
	00 00		 mov	 rcx, QWORD PTR tv262[rbp]
  0042d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00432	48 8d 95 58 03
	00 00		 lea	 rdx, QWORD PTR typ_zak³adu$[rbp]
  00439	48 8b c8	 mov	 rcx, rax
  0043c	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
$LN17@main:

; 118  : 		if (co_kontynuowaæ == 'n' || co_kontynuowaæ == 'k') log_ogólny << " Obstawiono zaklad " << typ_zak³adu; //Zapisanie do bufora pliku logu ogólnego informacji o typie obstawionego zak³adu

  00441	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  00448	83 f8 6e	 cmp	 eax, 110		; 0000006eH
  0044b	74 0c		 je	 SHORT $LN20@main
  0044d	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  00454	83 f8 6b	 cmp	 eax, 107		; 0000006bH
  00457	75 1f		 jne	 SHORT $LN19@main
$LN20@main:
  00459	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@EKDPDLOA@?5Obstawiono?5zaklad?5?$AA@
  00460	48 8d 4d 70	 lea	 rcx, QWORD PTR log_ogólny$[rbp]
  00464	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00469	48 8d 95 58 03
	00 00		 lea	 rdx, QWORD PTR typ_zak³adu$[rbp]
  00470	48 8b c8	 mov	 rcx, rax
  00473	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
$LN19@main:

; 119  : 		log.flush(); //Zapisanie do pliku log_aktualny.txt danych wpisanych do bufora danych

  00478	48 8d 85 b0 01
	00 00		 lea	 rax, QWORD PTR log$[rbp+16]
  0047f	48 8b c8	 mov	 rcx, rax
  00482	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 120  : 		log_ogólny.flush(); //Zapisanie do pliku log_ogólny.txt danych wpisanych do bufora danych

  00488	48 8d 4d 70	 lea	 rcx, QWORD PTR log_ogólny$[rbp]
  0048c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 121  : 		if (co_kontynuowaæ == 'n' || co_kontynuowaæ == 'k' || co_kontynuowaæ == 't' || co_kontynuowaæ == 'w') iloœæ_pieniêdzy -= kwota_zak³adu; //Odjêcie od iloœci pieniêdzy kwoty zak³adu

  00492	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  00499	83 f8 6e	 cmp	 eax, 110		; 0000006eH
  0049c	74 24		 je	 SHORT $LN22@main
  0049e	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  004a5	83 f8 6b	 cmp	 eax, 107		; 0000006bH
  004a8	74 18		 je	 SHORT $LN22@main
  004aa	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  004b1	83 f8 74	 cmp	 eax, 116		; 00000074H
  004b4	74 0c		 je	 SHORT $LN22@main
  004b6	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  004bd	83 f8 77	 cmp	 eax, 119		; 00000077H
  004c0	75 16		 jne	 SHORT $LN21@main
$LN22@main:
  004c2	8b 85 f4 02 00
	00		 mov	 eax, DWORD PTR kwota_zak³adu$[rbp]
  004c8	8b 8d d4 02 00
	00		 mov	 ecx, DWORD PTR iloœæ_pieniêdzy$[rbp]
  004ce	2b c8		 sub	 ecx, eax
  004d0	8b c1		 mov	 eax, ecx
  004d2	89 85 d4 02 00
	00		 mov	 DWORD PTR iloœæ_pieniêdzy$[rbp], eax
$LN21@main:

; 122  : 		if (co_kontynuowaæ == 'n' || co_kontynuowaæ == 'k' || co_kontynuowaæ == 't') cout << "Kulka w grze, zaczekaj na wylosowanie numeru..." << endl; //Poinformowanie u¿ytkownika o rozpoczêciu losowania

  004d8	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  004df	83 f8 6e	 cmp	 eax, 110		; 0000006eH
  004e2	74 18		 je	 SHORT $LN24@main
  004e4	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  004eb	83 f8 6b	 cmp	 eax, 107		; 0000006bH
  004ee	74 0c		 je	 SHORT $LN24@main
  004f0	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  004f7	83 f8 74	 cmp	 eax, 116		; 00000074H
  004fa	75 23		 jne	 SHORT $LN23@main
$LN24@main:
  004fc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@EJNBAHOM@Kulka?5w?5grze?0?5zaczekaj?5na?5wyloso@
  00503	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0050a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0050f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00516	48 8b c8	 mov	 rcx, rax
  00519	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
$LN23@main:

; 123  : 		if (co_kontynuowaæ == 'n' || co_kontynuowaæ == 'k' || co_kontynuowaæ == 't') wylosowana_liczba = Zakrêæ_Ruletk¹(); //Wylosowanie i przypisanie do zmiennej liczby bêdêcej na  wylosowanej pozycji na kole ruletki

  0051f	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  00526	83 f8 6e	 cmp	 eax, 110		; 0000006eH
  00529	74 18		 je	 SHORT $LN27@main
  0052b	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  00532	83 f8 6b	 cmp	 eax, 107		; 0000006bH
  00535	74 0c		 je	 SHORT $LN27@main
  00537	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  0053e	83 f8 74	 cmp	 eax, 116		; 00000074H
  00541	75 0d		 jne	 SHORT $LN25@main
$LN27@main:
  00543	e8 00 00 00 00	 call	 ?Zakrêæ_Ruletk¹@@YAHXZ	; Zakrêæ_Ruletk¹
  00548	89 85 14 03 00
	00		 mov	 DWORD PTR wylosowana_liczba$[rbp], eax

; 124  : 		else {

  0054e	eb 69		 jmp	 SHORT $LN26@main
$LN25@main:

; 125  : 			cout << "Wylosowano numer "; //Poinformowaniu o wylosowaniu liczby

  00550	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@IEHJKDDM@Wylosowano?5numer?5?$AA@
  00557	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0055e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 126  : 			Change_Col(Ruletka_plansza_kolor_col[wylosowana_liczba]); //Zmiana koloru tekstu w konsoli zgodnie z kolorem numeru na ruletce

  00563	48 63 85 14 03
	00 00		 movsxd	 rax, DWORD PTR wylosowana_liczba$[rbp]
  0056a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Ruletka_plansza_kolor_col@@3PAHA ; Ruletka_plansza_kolor_col
  00571	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  00575	48 8b c8	 mov	 rcx, rax
  00578	e8 00 00 00 00	 call	 ?Change_Col@@YAXAEBH@Z	; Change_Col

; 127  : 			cout << wylosowana_liczba; //Wypisanie wylosowanej liczby

  0057d	8b 95 14 03 00
	00		 mov	 edx, DWORD PTR wylosowana_liczba$[rbp]
  00583	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0058a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z

; 128  : 			Change_Col(7); //Powrót do standardowego koloru tekstu w konsoli

  00590	c7 85 94 06 00
	00 07 00 00 00	 mov	 DWORD PTR $T17[rbp], 7
  0059a	48 8d 8d 94 06
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  005a1	e8 00 00 00 00	 call	 ?Change_Col@@YAXAEBH@Z	; Change_Col

; 129  : 			cout << ". "; //Wypisanie kropki koñcz¹cej zdanie

  005a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02KHOJGJKF@?4?5?$AA@
  005ad	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  005b4	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
$LN26@main:

; 130  : 		}
; 131  : 		if (co_kontynuowaæ == 'n' || co_kontynuowaæ == 'k' || co_kontynuowaæ == 't') log << " Wylosowano " << wylosowana_liczba; //Zapisanie do bufora pliku logu aktualnego informacji o wylosowanej liczbie

  005b9	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  005c0	83 f8 6e	 cmp	 eax, 110		; 0000006eH
  005c3	74 18		 je	 SHORT $LN29@main
  005c5	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  005cc	83 f8 6b	 cmp	 eax, 107		; 0000006bH
  005cf	74 0c		 je	 SHORT $LN29@main
  005d1	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  005d8	83 f8 74	 cmp	 eax, 116		; 00000074H
  005db	75 4d		 jne	 SHORT $LN28@main
$LN29@main:
  005dd	48 8d 85 a0 01
	00 00		 lea	 rax, QWORD PTR log$[rbp]
  005e4	48 85 c0	 test	 rax, rax
  005e7	74 14		 je	 SHORT $LN65@main
  005e9	48 8d 85 a0 01
	00 00		 lea	 rax, QWORD PTR log$[rbp]
  005f0	48 83 c0 10	 add	 rax, 16
  005f4	48 89 85 08 07
	00 00		 mov	 QWORD PTR tv338[rbp], rax
  005fb	eb 0b		 jmp	 SHORT $LN66@main
$LN65@main:
  005fd	48 c7 85 08 07
	00 00 00 00 00
	00		 mov	 QWORD PTR tv338[rbp], 0
$LN66@main:
  00608	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@CGNKGGIC@?5Wylosowano?5?$AA@
  0060f	48 8b 8d 08 07
	00 00		 mov	 rcx, QWORD PTR tv338[rbp]
  00616	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0061b	8b 95 14 03 00
	00		 mov	 edx, DWORD PTR wylosowana_liczba$[rbp]
  00621	48 8b c8	 mov	 rcx, rax
  00624	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
$LN28@main:

; 132  : 		if (co_kontynuowaæ == 'n' || co_kontynuowaæ == 'k' || co_kontynuowaæ == 't') log_ogólny << " Wylosowano " << wylosowana_liczba; //Zapisanie do bufora pliku logu ogólnego informacji o wylosowanej liczbie

  0062a	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  00631	83 f8 6e	 cmp	 eax, 110		; 0000006eH
  00634	74 18		 je	 SHORT $LN31@main
  00636	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  0063d	83 f8 6b	 cmp	 eax, 107		; 0000006bH
  00640	74 0c		 je	 SHORT $LN31@main
  00642	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  00649	83 f8 74	 cmp	 eax, 116		; 00000074H
  0064c	75 1f		 jne	 SHORT $LN30@main
$LN31@main:
  0064e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@CGNKGGIC@?5Wylosowano?5?$AA@
  00655	48 8d 4d 70	 lea	 rcx, QWORD PTR log_ogólny$[rbp]
  00659	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0065e	8b 95 14 03 00
	00		 mov	 edx, DWORD PTR wylosowana_liczba$[rbp]
  00664	48 8b c8	 mov	 rcx, rax
  00667	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
$LN30@main:

; 133  : 		log.flush(); //Zapisanie do pliku log_aktualny.txt danych wpisanych do bufora danych

  0066d	48 8d 85 b0 01
	00 00		 lea	 rax, QWORD PTR log$[rbp+16]
  00674	48 8b c8	 mov	 rcx, rax
  00677	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 134  : 		log_ogólny.flush(); //Zapisanie do pliku log_ogólny.txt danych wpisanych do bufora danych

  0067d	48 8d 4d 70	 lea	 rcx, QWORD PTR log_ogólny$[rbp]
  00681	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 135  : 		if (co_kontynuowaæ == 'n' || co_kontynuowaæ == 'k' || co_kontynuowaæ == 't') Odczytaj_liczbê(wylosowana_liczba, typ_zak³adu);

  00687	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  0068e	83 f8 6e	 cmp	 eax, 110		; 0000006eH
  00691	74 18		 je	 SHORT $LN33@main
  00693	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  0069a	83 f8 6b	 cmp	 eax, 107		; 0000006bH
  0069d	74 0c		 je	 SHORT $LN33@main
  0069f	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  006a6	83 f8 74	 cmp	 eax, 116		; 00000074H
  006a9	75 13		 jne	 SHORT $LN32@main
$LN33@main:
  006ab	48 8d 95 58 03
	00 00		 lea	 rdx, QWORD PTR typ_zak³adu$[rbp]
  006b2	48 8d 8d 14 03
	00 00		 lea	 rcx, QWORD PTR wylosowana_liczba$[rbp]
  006b9	e8 00 00 00 00	 call	 ?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Odczytaj_liczbê
$LN32@main:

; 136  : 		if (co_kontynuowaæ == 'n' || co_kontynuowaæ == 'k' || co_kontynuowaæ == 't' || co_kontynuowaæ == 'w') wygrana = SprawdŸ_Zak³ad(kwota_zak³adu, typ_zak³adu, wylosowana_liczba);

  006be	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  006c5	83 f8 6e	 cmp	 eax, 110		; 0000006eH
  006c8	74 24		 je	 SHORT $LN35@main
  006ca	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  006d1	83 f8 6b	 cmp	 eax, 107		; 0000006bH
  006d4	74 18		 je	 SHORT $LN35@main
  006d6	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  006dd	83 f8 74	 cmp	 eax, 116		; 00000074H
  006e0	74 0c		 je	 SHORT $LN35@main
  006e2	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  006e9	83 f8 77	 cmp	 eax, 119		; 00000077H
  006ec	75 27		 jne	 SHORT $LN34@main
$LN35@main:
  006ee	4c 8d 85 14 03
	00 00		 lea	 r8, QWORD PTR wylosowana_liczba$[rbp]
  006f5	48 8d 95 58 03
	00 00		 lea	 rdx, QWORD PTR typ_zak³adu$[rbp]
  006fc	48 8d 8d f4 02
	00 00		 lea	 rcx, QWORD PTR kwota_zak³adu$[rbp]
  00703	e8 00 00 00 00	 call	 ?SprawdŸ_Zak³ad@@YAHAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBH@Z ; SprawdŸ_Zak³ad
  00708	c6 85 d4 06 00
	00 01		 mov	 BYTE PTR $T19[rbp], 1
  0070f	89 85 34 03 00
	00		 mov	 DWORD PTR wygrana$[rbp], eax
$LN34@main:

; 137  : 		if (co_kontynuowaæ == 'n' || co_kontynuowaæ == 'k' || co_kontynuowaæ == 't' || co_kontynuowaæ == 'w')

  00715	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  0071c	83 f8 6e	 cmp	 eax, 110		; 0000006eH
  0071f	74 28		 je	 SHORT $LN37@main
  00721	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  00728	83 f8 6b	 cmp	 eax, 107		; 0000006bH
  0072b	74 1c		 je	 SHORT $LN37@main
  0072d	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  00734	83 f8 74	 cmp	 eax, 116		; 00000074H
  00737	74 10		 je	 SHORT $LN37@main
  00739	0f be 85 94 03
	00 00		 movsx	 eax, BYTE PTR co_kontynuowaæ$[rbp]
  00740	83 f8 77	 cmp	 eax, 119		; 00000077H
  00743	0f 85 38 06 00
	00		 jne	 $LN36@main
$LN37@main:

; 138  : 			if (wygrana >= kwota_zak³adu) //Je¿eli wygrana jest wiêksza lub równa kwocie zak³adu to znaczy, ¿e siê wygra³o zak³ad

  00749	80 bd d4 06 00
	00 00		 cmp	 BYTE PTR $T19[rbp], 0
  00750	75 0c		 jne	 SHORT $LN85@main
  00752	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:main$rtcName$0
  00759	e8 00 00 00 00	 call	 _RTC_UninitUse
$LN85@main:
  0075e	8b 85 f4 02 00
	00		 mov	 eax, DWORD PTR kwota_zak³adu$[rbp]
  00764	39 85 34 03 00
	00		 cmp	 DWORD PTR wygrana$[rbp], eax
  0076a	0f 8c 72 02 00
	00		 jl	 $LN38@main

; 139  : 			{
; 140  : 				iloœæ_pieniêdzy += wygrana; //Dopisanie do salda kwoty wygranej z zak³adu

  00770	80 bd d4 06 00
	00 00		 cmp	 BYTE PTR $T19[rbp], 0
  00777	75 0c		 jne	 SHORT $LN86@main
  00779	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:main$rtcName$0
  00780	e8 00 00 00 00	 call	 _RTC_UninitUse
$LN86@main:
  00785	8b 85 34 03 00
	00		 mov	 eax, DWORD PTR wygrana$[rbp]
  0078b	8b 8d d4 02 00
	00		 mov	 ecx, DWORD PTR iloœæ_pieniêdzy$[rbp]
  00791	03 c8		 add	 ecx, eax
  00793	8b c1		 mov	 eax, ecx
  00795	89 85 d4 02 00
	00		 mov	 DWORD PTR iloœæ_pieniêdzy$[rbp], eax

; 141  : 				if (styl_liczenia_wygranej) iloœæ_pieniêdzy += kwota_zak³adu; //Dopisanie do salda kwoty zak³adu

  0079b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?styl_liczenia_wygranej@@3HA, 0 ; styl_liczenia_wygranej
  007a2	74 16		 je	 SHORT $LN40@main
  007a4	8b 85 f4 02 00
	00		 mov	 eax, DWORD PTR kwota_zak³adu$[rbp]
  007aa	8b 8d d4 02 00
	00		 mov	 ecx, DWORD PTR iloœæ_pieniêdzy$[rbp]
  007b0	03 c8		 add	 ecx, eax
  007b2	8b c1		 mov	 eax, ecx
  007b4	89 85 d4 02 00
	00		 mov	 DWORD PTR iloœæ_pieniêdzy$[rbp], eax
$LN40@main:

; 142  : 				log << " Wygrywasz " << wygrana << "$"; //Zapisanie do bufora pliku logu aktualnego informacji o kwocie wygranej zak³adu

  007ba	48 8d 85 a0 01
	00 00		 lea	 rax, QWORD PTR log$[rbp]
  007c1	48 85 c0	 test	 rax, rax
  007c4	74 14		 je	 SHORT $LN67@main
  007c6	48 8d 85 a0 01
	00 00		 lea	 rax, QWORD PTR log$[rbp]
  007cd	48 83 c0 10	 add	 rax, 16
  007d1	48 89 85 08 07
	00 00		 mov	 QWORD PTR tv408[rbp], rax
  007d8	eb 0b		 jmp	 SHORT $LN68@main
$LN67@main:
  007da	48 c7 85 08 07
	00 00 00 00 00
	00		 mov	 QWORD PTR tv408[rbp], 0
$LN68@main:
  007e5	80 bd d4 06 00
	00 00		 cmp	 BYTE PTR $T19[rbp], 0
  007ec	75 0c		 jne	 SHORT $LN87@main
  007ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:main$rtcName$0
  007f5	e8 00 00 00 00	 call	 _RTC_UninitUse
$LN87@main:
  007fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@GPFIMODH@?5Wygrywasz?5?$AA@
  00801	48 8b 8d 08 07
	00 00		 mov	 rcx, QWORD PTR tv408[rbp]
  00808	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0080d	8b 95 34 03 00
	00		 mov	 edx, DWORD PTR wygrana$[rbp]
  00813	48 8b c8	 mov	 rcx, rax
  00816	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  0081c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EPMOAMKG@$?$AA@
  00823	48 8b c8	 mov	 rcx, rax
  00826	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 143  : 				log << " Posiadasz " << iloœæ_pieniêdzy << "$" << endl; //Zapisanie do bufora pliku logu aktualnego informacji o saldzie konta u¿ytkownika

  0082b	48 8d 85 a0 01
	00 00		 lea	 rax, QWORD PTR log$[rbp]
  00832	48 85 c0	 test	 rax, rax
  00835	74 14		 je	 SHORT $LN69@main
  00837	48 8d 85 a0 01
	00 00		 lea	 rax, QWORD PTR log$[rbp]
  0083e	48 83 c0 10	 add	 rax, 16
  00842	48 89 85 08 07
	00 00		 mov	 QWORD PTR tv422[rbp], rax
  00849	eb 0b		 jmp	 SHORT $LN70@main
$LN69@main:
  0084b	48 c7 85 08 07
	00 00 00 00 00
	00		 mov	 QWORD PTR tv422[rbp], 0
$LN70@main:
  00856	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@GNFNLGIH@?5Posiadasz?5?$AA@
  0085d	48 8b 8d 08 07
	00 00		 mov	 rcx, QWORD PTR tv422[rbp]
  00864	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00869	8b 95 d4 02 00
	00		 mov	 edx, DWORD PTR iloœæ_pieniêdzy$[rbp]
  0086f	48 8b c8	 mov	 rcx, rax
  00872	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  00878	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EPMOAMKG@$?$AA@
  0087f	48 8b c8	 mov	 rcx, rax
  00882	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00887	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  0088e	48 8b c8	 mov	 rcx, rax
  00891	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 144  : 				log_ogólny << " Wygrywasz " << wygrana << "$"; //Zapisanie do bufora pliku logu ogólnego informacji o kwocie wygranej zak³adu

  00897	80 bd d4 06 00
	00 00		 cmp	 BYTE PTR $T19[rbp], 0
  0089e	75 0c		 jne	 SHORT $LN88@main
  008a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:main$rtcName$0
  008a7	e8 00 00 00 00	 call	 _RTC_UninitUse
$LN88@main:
  008ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@GPFIMODH@?5Wygrywasz?5?$AA@
  008b3	48 8d 4d 70	 lea	 rcx, QWORD PTR log_ogólny$[rbp]
  008b7	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  008bc	8b 95 34 03 00
	00		 mov	 edx, DWORD PTR wygrana$[rbp]
  008c2	48 8b c8	 mov	 rcx, rax
  008c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  008cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EPMOAMKG@$?$AA@
  008d2	48 8b c8	 mov	 rcx, rax
  008d5	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 145  : 				log_ogólny << " Posiadasz " << iloœæ_pieniêdzy << "$" << endl; //Zapisanie do bufora pliku logu ogólnego informacji o saldzie konta u¿ytkownika

  008da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@GNFNLGIH@?5Posiadasz?5?$AA@
  008e1	48 8d 4d 70	 lea	 rcx, QWORD PTR log_ogólny$[rbp]
  008e5	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  008ea	8b 95 d4 02 00
	00		 mov	 edx, DWORD PTR iloœæ_pieniêdzy$[rbp]
  008f0	48 8b c8	 mov	 rcx, rax
  008f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  008f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EPMOAMKG@$?$AA@
  00900	48 8b c8	 mov	 rcx, rax
  00903	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00908	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  0090f	48 8b c8	 mov	 rcx, rax
  00912	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 146  : 				log.flush(); //Zapisanie do pliku log_aktualny.txt danych wpisanych do bufora danych

  00918	48 8d 85 b0 01
	00 00		 lea	 rax, QWORD PTR log$[rbp+16]
  0091f	48 8b c8	 mov	 rcx, rax
  00922	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 147  : 				log_ogólny.flush(); //Zapisanie do pliku log_ogólny.txt danych wpisanych do bufora danych

  00928	48 8d 4d 70	 lea	 rcx, QWORD PTR log_ogólny$[rbp]
  0092c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 148  : 				if (stan_dŸwiêków)

  00932	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?stan_dŸwiêków@@3HA, 0 ; stan_dŸwiêków
  00939	0f 84 9e 00 00
	00		 je	 $LN41@main

; 149  : 				{
; 150  : 					if (G³osyKompletne)

  0093f	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?G³osyKompletne@@3_NA ; G³osyKompletne
  00946	85 c0		 test	 eax, eax
  00948	74 42		 je	 SHORT $LN42@main

; 151  : 					{
; 152  : 						string buf = G³os + "win.wav";

  0094a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07KIPBKJCE@win?4wav?$AA@
  00951	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  00958	48 8d 8d b8 03
	00 00		 lea	 rcx, QWORD PTR buf$14[rbp]
  0095f	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >

; 153  : 						PlaySound(buf.c_str(), nullptr, SND_SYNC);

  00964	48 8d 8d b8 03
	00 00		 lea	 rcx, QWORD PTR buf$14[rbp]
  0096b	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00970	45 33 c0	 xor	 r8d, r8d
  00973	33 d2		 xor	 edx, edx
  00975	48 8b c8	 mov	 rcx, rax
  00978	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PlaySoundA

; 154  : 					}

  0097e	48 8d 8d b8 03
	00 00		 lea	 rcx, QWORD PTR buf$14[rbp]
  00985	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 155  : 					else

  0098a	eb 51		 jmp	 SHORT $LN41@main
$LN42@main:

; 156  : 					{
; 157  : 						cout << "\a"; //Wywo³anie pikniêcia w g³oœniku

  0098c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01PBGHHLMH@?$AH?$AA@
  00993	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0099a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 158  : 						Sleep(czas_przerwy_dzwiêku); //Przerwa przed kolejnym pikniêciem

  0099f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?czas_przerwy_dzwiêku@@3HA ; czas_przerwy_dzwiêku
  009a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_Sleep

; 159  : 						cout << "\a"; //Wywo³anie pikniêcia w g³oœniku

  009ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01PBGHHLMH@?$AH?$AA@
  009b2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  009b9	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 160  : 						Sleep(czas_przerwy_dzwiêku); //Przerwa przed kolejnym pikniêciem

  009be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?czas_przerwy_dzwiêku@@3HA ; czas_przerwy_dzwiêku
  009c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_Sleep

; 161  : 						cout << "\a"; //Wywo³anie pikniêcia w g³oœniku

  009ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01PBGHHLMH@?$AH?$AA@
  009d1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  009d8	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
$LN41@main:

; 162  : 					}
; 163  : 				}
; 164  : 			}

  009dd	e9 9f 03 00 00	 jmp	 $LN36@main
$LN38@main:

; 165  : 			else if (wygrana == (kwota_zak³adu / 2)) //Je¿eli wygrana jest równa po³owie kwocie zak³adu to znaczy, ¿e dostaje siê zwrot po³owy kwoty zak³adu

  009e2	80 bd d4 06 00
	00 00		 cmp	 BYTE PTR $T19[rbp], 0
  009e9	75 0c		 jne	 SHORT $LN89@main
  009eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:main$rtcName$0
  009f2	e8 00 00 00 00	 call	 _RTC_UninitUse
$LN89@main:
  009f7	8b 85 f4 02 00
	00		 mov	 eax, DWORD PTR kwota_zak³adu$[rbp]
  009fd	99		 cdq
  009fe	2b c2		 sub	 eax, edx
  00a00	d1 f8		 sar	 eax, 1
  00a02	39 85 34 03 00
	00		 cmp	 DWORD PTR wygrana$[rbp], eax
  00a08	0f 85 e5 01 00
	00		 jne	 $LN44@main

; 166  : 			{
; 167  : 				iloœæ_pieniêdzy += wygrana; //Dopisanie do salda kwoty zwrotu z zak³adu

  00a0e	80 bd d4 06 00
	00 00		 cmp	 BYTE PTR $T19[rbp], 0
  00a15	75 0c		 jne	 SHORT $LN90@main
  00a17	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:main$rtcName$0
  00a1e	e8 00 00 00 00	 call	 _RTC_UninitUse
$LN90@main:
  00a23	8b 85 34 03 00
	00		 mov	 eax, DWORD PTR wygrana$[rbp]
  00a29	8b 8d d4 02 00
	00		 mov	 ecx, DWORD PTR iloœæ_pieniêdzy$[rbp]
  00a2f	03 c8		 add	 ecx, eax
  00a31	8b c1		 mov	 eax, ecx
  00a33	89 85 d4 02 00
	00		 mov	 DWORD PTR iloœæ_pieniêdzy$[rbp], eax

; 168  : 				log << " Dostajesz polowe zak³adu " << wygrana << "$"; //Zapisanie do bufora pliku logu aktualnego informacji o kwocie zwrotu zak³adu

  00a39	48 8d 85 a0 01
	00 00		 lea	 rax, QWORD PTR log$[rbp]
  00a40	48 85 c0	 test	 rax, rax
  00a43	74 14		 je	 SHORT $LN71@main
  00a45	48 8d 85 a0 01
	00 00		 lea	 rax, QWORD PTR log$[rbp]
  00a4c	48 83 c0 10	 add	 rax, 16
  00a50	48 89 85 08 07
	00 00		 mov	 QWORD PTR tv500[rbp], rax
  00a57	eb 0b		 jmp	 SHORT $LN72@main
$LN71@main:
  00a59	48 c7 85 08 07
	00 00 00 00 00
	00		 mov	 QWORD PTR tv500[rbp], 0
$LN72@main:
  00a64	80 bd d4 06 00
	00 00		 cmp	 BYTE PTR $T19[rbp], 0
  00a6b	75 0c		 jne	 SHORT $LN91@main
  00a6d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:main$rtcName$0
  00a74	e8 00 00 00 00	 call	 _RTC_UninitUse
$LN91@main:
  00a79	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@LJEGNEAJ@?5Dostajesz?5polowe?5zak?$LDadu?5?$AA@
  00a80	48 8b 8d 08 07
	00 00		 mov	 rcx, QWORD PTR tv500[rbp]
  00a87	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00a8c	8b 95 34 03 00
	00		 mov	 edx, DWORD PTR wygrana$[rbp]
  00a92	48 8b c8	 mov	 rcx, rax
  00a95	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  00a9b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EPMOAMKG@$?$AA@
  00aa2	48 8b c8	 mov	 rcx, rax
  00aa5	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 169  : 				log << " Posiadasz " << iloœæ_pieniêdzy << "$" << endl; //Zapisanie do bufora pliku logu aktualnego informacji o saldzie konta u¿ytkownika

  00aaa	48 8d 85 a0 01
	00 00		 lea	 rax, QWORD PTR log$[rbp]
  00ab1	48 85 c0	 test	 rax, rax
  00ab4	74 14		 je	 SHORT $LN73@main
  00ab6	48 8d 85 a0 01
	00 00		 lea	 rax, QWORD PTR log$[rbp]
  00abd	48 83 c0 10	 add	 rax, 16
  00ac1	48 89 85 08 07
	00 00		 mov	 QWORD PTR tv546[rbp], rax
  00ac8	eb 0b		 jmp	 SHORT $LN74@main
$LN73@main:
  00aca	48 c7 85 08 07
	00 00 00 00 00
	00		 mov	 QWORD PTR tv546[rbp], 0
$LN74@main:
  00ad5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@GNFNLGIH@?5Posiadasz?5?$AA@
  00adc	48 8b 8d 08 07
	00 00		 mov	 rcx, QWORD PTR tv546[rbp]
  00ae3	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00ae8	8b 95 d4 02 00
	00		 mov	 edx, DWORD PTR iloœæ_pieniêdzy$[rbp]
  00aee	48 8b c8	 mov	 rcx, rax
  00af1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  00af7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EPMOAMKG@$?$AA@
  00afe	48 8b c8	 mov	 rcx, rax
  00b01	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00b06	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00b0d	48 8b c8	 mov	 rcx, rax
  00b10	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 170  : 				log_ogólny << " Dostajesz polowe zak³adu " << wygrana << "$"; //Zapisanie do bufora pliku logu ogólnego informacji o kwocie zwrotu zak³adu

  00b16	80 bd d4 06 00
	00 00		 cmp	 BYTE PTR $T19[rbp], 0
  00b1d	75 0c		 jne	 SHORT $LN92@main
  00b1f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:main$rtcName$0
  00b26	e8 00 00 00 00	 call	 _RTC_UninitUse
$LN92@main:
  00b2b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@LJEGNEAJ@?5Dostajesz?5polowe?5zak?$LDadu?5?$AA@
  00b32	48 8d 4d 70	 lea	 rcx, QWORD PTR log_ogólny$[rbp]
  00b36	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00b3b	8b 95 34 03 00
	00		 mov	 edx, DWORD PTR wygrana$[rbp]
  00b41	48 8b c8	 mov	 rcx, rax
  00b44	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  00b4a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EPMOAMKG@$?$AA@
  00b51	48 8b c8	 mov	 rcx, rax
  00b54	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 171  : 				log_ogólny << " Posiadasz " << iloœæ_pieniêdzy << "$" << endl; //Zapisanie do bufora pliku logu ogólnego informacji o saldzie konta u¿ytkownika

  00b59	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@GNFNLGIH@?5Posiadasz?5?$AA@
  00b60	48 8d 4d 70	 lea	 rcx, QWORD PTR log_ogólny$[rbp]
  00b64	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00b69	8b 95 d4 02 00
	00		 mov	 edx, DWORD PTR iloœæ_pieniêdzy$[rbp]
  00b6f	48 8b c8	 mov	 rcx, rax
  00b72	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  00b78	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EPMOAMKG@$?$AA@
  00b7f	48 8b c8	 mov	 rcx, rax
  00b82	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00b87	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00b8e	48 8b c8	 mov	 rcx, rax
  00b91	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 172  : 				log.flush(); //Zapisanie do pliku log_aktualny.txt danych wpisanych do bufora danych

  00b97	48 8d 85 b0 01
	00 00		 lea	 rax, QWORD PTR log$[rbp+16]
  00b9e	48 8b c8	 mov	 rcx, rax
  00ba1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 173  : 				log_ogólny.flush(); //Zapisanie do pliku log_ogólny.txt danych wpisanych do bufora danych

  00ba7	48 8d 4d 70	 lea	 rcx, QWORD PTR log_ogólny$[rbp]
  00bab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 174  : 				if (!G³osyKompletne)

  00bb1	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?G³osyKompletne@@3_NA ; G³osyKompletne
  00bb8	85 c0		 test	 eax, eax
  00bba	75 32		 jne	 SHORT $LN46@main

; 175  : 				{
; 176  : 					cout << "\a"; //Wywo³anie pikniêcia w g³oœniku

  00bbc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01PBGHHLMH@?$AH?$AA@
  00bc3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00bca	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 177  : 					Sleep(czas_przerwy_dzwiêku); //Przerwa przed kolejnym pikniêciem

  00bcf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?czas_przerwy_dzwiêku@@3HA ; czas_przerwy_dzwiêku
  00bd5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_Sleep

; 178  : 					cout << "\a"; //Wywo³anie pikniêcia w g³oœniku

  00bdb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01PBGHHLMH@?$AH?$AA@
  00be2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00be9	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
$LN46@main:

; 179  : 				}
; 180  : 			}

  00bee	e9 8e 01 00 00	 jmp	 $LN36@main
$LN44@main:

; 181  : 			else if (wygrana == 0) //Je¿eli wygrana jest równa 0 to znaczy, ¿e siê zak³ad przegra³o

  00bf3	80 bd d4 06 00
	00 00		 cmp	 BYTE PTR $T19[rbp], 0
  00bfa	75 0c		 jne	 SHORT $LN93@main
  00bfc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:main$rtcName$0
  00c03	e8 00 00 00 00	 call	 _RTC_UninitUse
$LN93@main:
  00c08	83 bd 34 03 00
	00 00		 cmp	 DWORD PTR wygrana$[rbp], 0
  00c0f	0f 85 6c 01 00
	00		 jne	 $LN36@main

; 182  : 			{
; 183  : 				log << " Przegrales " << kwota_zak³adu << "$"; //Zapisanie do bufora pliku logu aktualnego informacji o przegranej kwocie

  00c15	48 8d 85 a0 01
	00 00		 lea	 rax, QWORD PTR log$[rbp]
  00c1c	48 85 c0	 test	 rax, rax
  00c1f	74 14		 je	 SHORT $LN75@main
  00c21	48 8d 85 a0 01
	00 00		 lea	 rax, QWORD PTR log$[rbp]
  00c28	48 83 c0 10	 add	 rax, 16
  00c2c	48 89 85 08 07
	00 00		 mov	 QWORD PTR tv608[rbp], rax
  00c33	eb 0b		 jmp	 SHORT $LN76@main
$LN75@main:
  00c35	48 c7 85 08 07
	00 00 00 00 00
	00		 mov	 QWORD PTR tv608[rbp], 0
$LN76@main:
  00c40	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@NPCHEJIF@?5Przegrales?5?$AA@
  00c47	48 8b 8d 08 07
	00 00		 mov	 rcx, QWORD PTR tv608[rbp]
  00c4e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00c53	8b 95 f4 02 00
	00		 mov	 edx, DWORD PTR kwota_zak³adu$[rbp]
  00c59	48 8b c8	 mov	 rcx, rax
  00c5c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  00c62	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EPMOAMKG@$?$AA@
  00c69	48 8b c8	 mov	 rcx, rax
  00c6c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 184  : 				log << " Posiadasz " << iloœæ_pieniêdzy << "$" << endl; //Zapisanie do bufora pliku logu aktualnego informacji o saldzie konta u¿ytkownika

  00c71	48 8d 85 a0 01
	00 00		 lea	 rax, QWORD PTR log$[rbp]
  00c78	48 85 c0	 test	 rax, rax
  00c7b	74 14		 je	 SHORT $LN77@main
  00c7d	48 8d 85 a0 01
	00 00		 lea	 rax, QWORD PTR log$[rbp]
  00c84	48 83 c0 10	 add	 rax, 16
  00c88	48 89 85 08 07
	00 00		 mov	 QWORD PTR tv622[rbp], rax
  00c8f	eb 0b		 jmp	 SHORT $LN78@main
$LN77@main:
  00c91	48 c7 85 08 07
	00 00 00 00 00
	00		 mov	 QWORD PTR tv622[rbp], 0
$LN78@main:
  00c9c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@GNFNLGIH@?5Posiadasz?5?$AA@
  00ca3	48 8b 8d 08 07
	00 00		 mov	 rcx, QWORD PTR tv622[rbp]
  00caa	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00caf	8b 95 d4 02 00
	00		 mov	 edx, DWORD PTR iloœæ_pieniêdzy$[rbp]
  00cb5	48 8b c8	 mov	 rcx, rax
  00cb8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  00cbe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EPMOAMKG@$?$AA@
  00cc5	48 8b c8	 mov	 rcx, rax
  00cc8	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00ccd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00cd4	48 8b c8	 mov	 rcx, rax
  00cd7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 185  : 				log_ogólny << " Przegrales " << kwota_zak³adu << "$"; //Zapisanie do bufora pliku logu ogólnego informacji o przegranej kwocie

  00cdd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@NPCHEJIF@?5Przegrales?5?$AA@
  00ce4	48 8d 4d 70	 lea	 rcx, QWORD PTR log_ogólny$[rbp]
  00ce8	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00ced	8b 95 f4 02 00
	00		 mov	 edx, DWORD PTR kwota_zak³adu$[rbp]
  00cf3	48 8b c8	 mov	 rcx, rax
  00cf6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  00cfc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EPMOAMKG@$?$AA@
  00d03	48 8b c8	 mov	 rcx, rax
  00d06	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 186  : 				log_ogólny << " Posiadasz " << iloœæ_pieniêdzy << "$" << endl; //Zapisanie do bufora pliku logu aktualnego informacji o saldzie konta u¿ytkownika

  00d0b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@GNFNLGIH@?5Posiadasz?5?$AA@
  00d12	48 8d 4d 70	 lea	 rcx, QWORD PTR log_ogólny$[rbp]
  00d16	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00d1b	8b 95 d4 02 00
	00		 mov	 edx, DWORD PTR iloœæ_pieniêdzy$[rbp]
  00d21	48 8b c8	 mov	 rcx, rax
  00d24	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  00d2a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EPMOAMKG@$?$AA@
  00d31	48 8b c8	 mov	 rcx, rax
  00d34	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00d39	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00d40	48 8b c8	 mov	 rcx, rax
  00d43	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 187  : 				log.flush(); //Zapisanie do pliku log_aktualny.txt danych wpisanych do bufora danych

  00d49	48 8d 85 b0 01
	00 00		 lea	 rax, QWORD PTR log$[rbp+16]
  00d50	48 8b c8	 mov	 rcx, rax
  00d53	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 188  : 				log_ogólny.flush(); //Zapisanie do pliku log_ogólny.txt danych wpisanych do bufora danych

  00d59	48 8d 4d 70	 lea	 rcx, QWORD PTR log_ogólny$[rbp]
  00d5d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 189  : 				if (!G³osyKompletne) cout << "\a"; //Wywo³anie pikniêcia w g³oœniku

  00d63	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?G³osyKompletne@@3_NA ; G³osyKompletne
  00d6a	85 c0		 test	 eax, eax
  00d6c	75 13		 jne	 SHORT $LN36@main
  00d6e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01PBGHHLMH@?$AH?$AA@
  00d75	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00d7c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
$LN36@main:

; 190  : 			}
; 191  : 		co_kontynuowaæ = 'n'; //Przypisanie znaku rozpoczêcia rundy od pocz¹tku

  00d81	c6 85 94 03 00
	00 6e		 mov	 BYTE PTR co_kontynuowaæ$[rbp], 110 ; 0000006eH

; 192  : 	} while (Czy_Kontynuowaæ(iloœæ_pieniêdzy)); //Pêtla dza³aj¹ca do czasu wartoœci fa³sz zwróconej przez funkcjê Czy_kontynuowaæ

  00d88	48 8d 8d d4 02
	00 00		 lea	 rcx, QWORD PTR iloœæ_pieniêdzy$[rbp]
  00d8f	e8 00 00 00 00	 call	 ?Czy_Kontynuowaæ@@YA_NAEAH@Z ; Czy_Kontynuowaæ
  00d94	0f b6 c0	 movzx	 eax, al
  00d97	85 c0		 test	 eax, eax
  00d99	0f 85 a1 f4 ff
	ff		 jne	 $LN4@main

; 193  : 
; 194  : 	cout << endl << "Koñczysz grê z wynikiem " << iloœæ_pieniêdzy << "$" << endl; //Poinformowanie u¿ytkownika o saldzie konta

  00d9f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00da6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00dad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
  00db3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GCHIFPGC@Ko?qczysz?5gr?j?5z?5wynikiem?5?$AA@
  00dba	48 8b c8	 mov	 rcx, rax
  00dbd	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00dc2	8b 95 d4 02 00
	00		 mov	 edx, DWORD PTR iloœæ_pieniêdzy$[rbp]
  00dc8	48 8b c8	 mov	 rcx, rax
  00dcb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  00dd1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EPMOAMKG@$?$AA@
  00dd8	48 8b c8	 mov	 rcx, rax
  00ddb	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00de0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00de7	48 8b c8	 mov	 rcx, rax
  00dea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 195  : 	log << endl << "Koñczysz grê z wynikiem " << iloœæ_pieniêdzy << "$" << endl; //Zapisanie do bufora pliku logu aktualnego informacji o saldzie konta u¿ytkownika

  00df0	48 8d 85 b0 01
	00 00		 lea	 rax, QWORD PTR log$[rbp+16]
  00df7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00dfe	48 8b c8	 mov	 rcx, rax
  00e01	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
  00e07	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GCHIFPGC@Ko?qczysz?5gr?j?5z?5wynikiem?5?$AA@
  00e0e	48 8b c8	 mov	 rcx, rax
  00e11	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00e16	8b 95 d4 02 00
	00		 mov	 edx, DWORD PTR iloœæ_pieniêdzy$[rbp]
  00e1c	48 8b c8	 mov	 rcx, rax
  00e1f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  00e25	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EPMOAMKG@$?$AA@
  00e2c	48 8b c8	 mov	 rcx, rax
  00e2f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00e34	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00e3b	48 8b c8	 mov	 rcx, rax
  00e3e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 196  : 	log_ogólny << "Koñczysz grê z wynikiem " << iloœæ_pieniêdzy << "$" << endl; //Zapisanie do bufora pliku logu ogólnego informacji o saldzie konta u¿ytkownika

  00e44	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@GCHIFPGC@Ko?qczysz?5gr?j?5z?5wynikiem?5?$AA@
  00e4b	48 8d 4d 70	 lea	 rcx, QWORD PTR log_ogólny$[rbp]
  00e4f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00e54	8b 95 d4 02 00
	00		 mov	 edx, DWORD PTR iloœæ_pieniêdzy$[rbp]
  00e5a	48 8b c8	 mov	 rcx, rax
  00e5d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  00e63	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EPMOAMKG@$?$AA@
  00e6a	48 8b c8	 mov	 rcx, rax
  00e6d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00e72	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00e79	48 8b c8	 mov	 rcx, rax
  00e7c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 197  : 	log.flush(); //Zapisanie do pliku log_aktualny.txt danych wpisanych do bufora danych

  00e82	48 8d 85 b0 01
	00 00		 lea	 rax, QWORD PTR log$[rbp+16]
  00e89	48 8b c8	 mov	 rcx, rax
  00e8c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 198  : 	log_ogólny.flush(); //Zapisanie do pliku log_ogólny.txt danych wpisanych do bufora danych

  00e92	48 8d 4d 70	 lea	 rcx, QWORD PTR log_ogólny$[rbp]
  00e96	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 199  : 	log.close();

  00e9c	48 8d 8d a0 01
	00 00		 lea	 rcx, QWORD PTR log$[rbp]
  00ea3	e8 00 00 00 00	 call	 ?close@?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAXXZ ; std::basic_fstream<char,std::char_traits<char> >::close

; 200  : 	remove("log_aktualny.txt"); //Usuniêcie pliku log aktualny poniewa¿ skoñczy³o siê grê

  00ea8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@KLDNCCFE@log_aktualny?4txt?$AA@
  00eaf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_remove

; 201  : 
; 202  : 	if (stan_dŸwiêków == 1) //Kompilacja je¿eli stan_dŸwiêków == 1

  00eb5	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?stan_dŸwiêków@@3HA, 1 ; stan_dŸwiêków
  00ebc	75 6c		 jne	 SHORT $LN49@main

; 203  : 		if (iloœæ_pieniêdzy == 0) //Je¿eli bud¿et jest równy 0 to

  00ebe	83 bd d4 02 00
	00 00		 cmp	 DWORD PTR iloœæ_pieniêdzy$[rbp], 0
  00ec5	75 63		 jne	 SHORT $LN49@main

; 204  : 			if (EfektyKompletne) PlaySound("Efekty dzwiêkowe/bankrut.wav", nullptr, SND_SYNC);

  00ec7	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?EfektyKompletne@@3_NA ; EfektyKompletne
  00ece	85 c0		 test	 eax, eax
  00ed0	74 14		 je	 SHORT $LN51@main
  00ed2	45 33 c0	 xor	 r8d, r8d
  00ed5	33 d2		 xor	 edx, edx
  00ed7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@DACGNLHK@Efekty?5dzwi?jkowe?1bankrut?4wav?$AA@
  00ede	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PlaySoundA

; 205  : 			else

  00ee4	eb 44		 jmp	 SHORT $LN49@main
$LN51@main:

; 206  : 				for (int i = 0; i < 5; ++i) //Rozpoczêcie pêtli która wykona 5 obrotów

  00ee6	c7 85 f4 03 00
	00 00 00 00 00	 mov	 DWORD PTR i$15[rbp], 0
  00ef0	eb 0e		 jmp	 SHORT $LN7@main
$LN5@main:
  00ef2	8b 85 f4 03 00
	00		 mov	 eax, DWORD PTR i$15[rbp]
  00ef8	ff c0		 inc	 eax
  00efa	89 85 f4 03 00
	00		 mov	 DWORD PTR i$15[rbp], eax
$LN7@main:
  00f00	83 bd f4 03 00
	00 05		 cmp	 DWORD PTR i$15[rbp], 5
  00f07	7d 21		 jge	 SHORT $LN49@main

; 207  : 				{
; 208  : 					cout << "\a"; //Wywo³anie pikniêcia w g³oœniku

  00f09	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01PBGHHLMH@?$AH?$AA@
  00f10	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00f17	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 209  : 					Sleep(czas_przerwy_dzwiêku); //Przerwa przed kolejnym pikniêciem //Przerwa przed kolejnym pikniêciem

  00f1c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?czas_przerwy_dzwiêku@@3HA ; czas_przerwy_dzwiêku
  00f22	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_Sleep

; 210  : 				}

  00f28	eb c8		 jmp	 SHORT $LN5@main
$LN49@main:

; 211  : 
; 212  : 	if (iloœæ_pieniêdzy > kwota_pocz¹tkowa && iloœæ_pieniêdzy < kwota_pocz¹tkowa * 2)

  00f2a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?kwota_pocz¹tkowa@@3HA ; kwota_pocz¹tkowa
  00f30	39 85 d4 02 00
	00		 cmp	 DWORD PTR iloœæ_pieniêdzy$[rbp], eax
  00f36	7e 75		 jle	 SHORT $LN53@main
  00f38	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?kwota_pocz¹tkowa@@3HA ; kwota_pocz¹tkowa
  00f3e	d1 e0		 shl	 eax, 1
  00f40	39 85 d4 02 00
	00		 cmp	 DWORD PTR iloœæ_pieniêdzy$[rbp], eax
  00f46	7d 65		 jge	 SHORT $LN53@main

; 213  : 	{
; 214  : 		cout << "Gratuluje zwiêkszy³eœ swój zasób finansowy" << endl; //Wyœwietlenie gratulacji z powodu zwiêkszenia bud¿etu

  00f48	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@DCKMMPCF@Gratuluje?5zwi?jkszy?$LDe?$JM?5sw?sj?5zas?sb@
  00f4f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00f56	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00f5b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00f62	48 8b c8	 mov	 rcx, rax
  00f65	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 215  : 		if (EfektyKompletne)

  00f6b	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?EfektyKompletne@@3_NA ; EfektyKompletne
  00f72	85 c0		 test	 eax, eax
  00f74	74 32		 je	 SHORT $LN55@main

; 216  : 			if (rand() % 1) PlaySound("Efekty dzwiêkowe/wygrana1.wav", nullptr, SND_SYNC);

  00f76	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  00f7c	33 c0		 xor	 eax, eax
  00f7e	85 c0		 test	 eax, eax
  00f80	74 14		 je	 SHORT $LN56@main
  00f82	45 33 c0	 xor	 r8d, r8d
  00f85	33 d2		 xor	 edx, edx
  00f87	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@OAKNDKAH@Efekty?5dzwi?jkowe?1wygrana1?4wav?$AA@
  00f8e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PlaySoundA
  00f94	eb 12		 jmp	 SHORT $LN55@main
$LN56@main:

; 217  : 			else PlaySound("Efekty dzwiêkowe/wygrana2.wav", nullptr, SND_SYNC);

  00f96	45 33 c0	 xor	 r8d, r8d
  00f99	33 d2		 xor	 edx, edx
  00f9b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@GGDJEIKJ@Efekty?5dzwi?jkowe?1wygrana2?4wav?$AA@
  00fa2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PlaySoundA
$LN55@main:

; 218  : 	}

  00fa8	e9 83 00 00 00	 jmp	 $LN54@main
$LN53@main:

; 219  : 	else if (iloœæ_pieniêdzy >= kwota_pocz¹tkowa * 2)

  00fad	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?kwota_pocz¹tkowa@@3HA ; kwota_pocz¹tkowa
  00fb3	d1 e0		 shl	 eax, 1
  00fb5	39 85 d4 02 00
	00		 cmp	 DWORD PTR iloœæ_pieniêdzy$[rbp], eax
  00fbb	7c 73		 jl	 SHORT $LN54@main

; 220  : 	{
; 221  : 		cout << "Gratuluje zwiêkszy³eœ " << iloœæ_pieniêdzy / kwota_pocz¹tkowa << " krotnie swój zasób finansowy" << endl; //Wyœwietlenie gratulacji z powodu zwielokrotnienia przynajmniej 2 razy bud¿etu

  00fbd	8b 85 d4 02 00
	00		 mov	 eax, DWORD PTR iloœæ_pieniêdzy$[rbp]
  00fc3	99		 cdq
  00fc4	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?kwota_pocz¹tkowa@@3HA ; kwota_pocz¹tkowa
  00fca	89 85 04 07 00
	00		 mov	 DWORD PTR tv775[rbp], eax
  00fd0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@GDCLDFHN@Gratuluje?5zwi?jkszy?$LDe?$JM?5?$AA@
  00fd7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00fde	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00fe3	8b 8d 04 07 00
	00		 mov	 ecx, DWORD PTR tv775[rbp]
  00fe9	8b d1		 mov	 edx, ecx
  00feb	48 8b c8	 mov	 rcx, rax
  00fee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  00ff4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@CAHFKDBP@?5krotnie?5sw?sj?5zas?sb?5finansowy?$AA@
  00ffb	48 8b c8	 mov	 rcx, rax
  00ffe	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  01003	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  0100a	48 8b c8	 mov	 rcx, rax
  0100d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 222  : 		if (EfektyKompletne) PlaySound("Efekty dzwiêkowe/zwielokrotnenie.wav", nullptr, SND_SYNC);

  01013	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?EfektyKompletne@@3_NA ; EfektyKompletne
  0101a	85 c0		 test	 eax, eax
  0101c	74 12		 je	 SHORT $LN54@main
  0101e	45 33 c0	 xor	 r8d, r8d
  01021	33 d2		 xor	 edx, edx
  01023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@DNPALCEH@Efekty?5dzwi?jkowe?1zwielokrotnenie@
  0102a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PlaySoundA
$LN54@main:

; 223  : 	}
; 224  : 
; 225  : 	system("pause"); //Wywo³anie funkcji wymagaj¹cej do zamkniêcia naciœniêcie dowolnego klawisza

  01030	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05PDJBBECF@pause?$AA@
  01037	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_system

; 226  : 
; 227  : 	return 0; //Zwrócenie wartoœæ 0, czyli porogram zakoñczy³ siê bez b³êdu

  0103d	c7 85 b4 06 00
	00 00 00 00 00	 mov	 DWORD PTR $T18[rbp], 0
  01047	48 8d 8d 58 03
	00 00		 lea	 rcx, QWORD PTR typ_zak³adu$[rbp]
  0104e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  01053	90		 npad	 1
  01054	48 8d 8d a0 01
	00 00		 lea	 rcx, QWORD PTR log$[rbp]
  0105b	e8 00 00 00 00	 call	 ??_D?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  01060	90		 npad	 1
  01061	48 8d 4d 70	 lea	 rcx, QWORD PTR log_ogólny$[rbp]
  01065	e8 00 00 00 00	 call	 ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  0106a	90		 npad	 1
  0106b	48 8d 4d 28	 lea	 rcx, QWORD PTR b$[rbp]
  0106f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  01074	8b 85 b4 06 00
	00		 mov	 eax, DWORD PTR $T18[rbp]

; 228  : }

  0107a	8b f8		 mov	 edi, eax
  0107c	48 8d 4d c0	 lea	 rcx, QWORD PTR [rbp-64]
  01080	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:main$rtcFrameData
  01087	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0108c	8b c7		 mov	 eax, edi
  0108e	48 8b 8d 10 07
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  01095	48 33 cd	 xor	 rcx, rbp
  01098	e8 00 00 00 00	 call	 __security_check_cookie
  0109d	48 8d a5 28 07
	00 00		 lea	 rsp, QWORD PTR [rbp+1832]
  010a4	5f		 pop	 rdi
  010a5	5d		 pop	 rbp
  010a6	c3		 ret	 0
main	ENDP
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
a$ = 4
b$ = 40
log_ogólny$ = 112
log$ = 416
iloœæ_pieniêdzy$ = 724
kwota_zak³adu$ = 756
wylosowana_liczba$ = 788
wygrana$ = 820
typ_zak³adu$ = 856
co_kontynuowaæ$ = 916
buf$14 = 952
i$15 = 1012
$T16 = 1624
$T17 = 1684
$T18 = 1716
$T19 = 1748
$T20 = 1784
tv775 = 1796
tv791 = 1800
tv622 = 1800
tv608 = 1800
tv546 = 1800
tv500 = 1800
tv422 = 1800
tv408 = 1800
tv338 = 1800
tv262 = 1800
tv202 = 1800
__$ArrayPad$ = 1808
main$dtor$0 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 4d 28	 lea	 rcx, QWORD PTR b$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
main$dtor$0 ENDP
a$ = 4
b$ = 40
log_ogólny$ = 112
log$ = 416
iloœæ_pieniêdzy$ = 724
kwota_zak³adu$ = 756
wylosowana_liczba$ = 788
wygrana$ = 820
typ_zak³adu$ = 856
co_kontynuowaæ$ = 916
buf$14 = 952
i$15 = 1012
$T16 = 1624
$T17 = 1684
$T18 = 1716
$T19 = 1748
$T20 = 1784
tv775 = 1796
tv791 = 1800
tv622 = 1800
tv608 = 1800
tv546 = 1800
tv500 = 1800
tv422 = 1800
tv408 = 1800
tv338 = 1800
tv262 = 1800
tv202 = 1800
__$ArrayPad$ = 1808
main$dtor$1 PROC
  00024	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00029	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002e	55		 push	 rbp
  0002f	57		 push	 rdi
  00030	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00034	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00038	48 8d 4d 70	 lea	 rcx, QWORD PTR log_ogólny$[rbp]
  0003c	e8 00 00 00 00	 call	 ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  00041	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
main$dtor$1 ENDP
a$ = 4
b$ = 40
log_ogólny$ = 112
log$ = 416
iloœæ_pieniêdzy$ = 724
kwota_zak³adu$ = 756
wylosowana_liczba$ = 788
wygrana$ = 820
typ_zak³adu$ = 856
co_kontynuowaæ$ = 916
buf$14 = 952
i$15 = 1012
$T16 = 1624
$T17 = 1684
$T18 = 1716
$T19 = 1748
$T20 = 1784
tv775 = 1796
tv791 = 1800
tv622 = 1800
tv608 = 1800
tv546 = 1800
tv500 = 1800
tv422 = 1800
tv408 = 1800
tv338 = 1800
tv262 = 1800
tv202 = 1800
__$ArrayPad$ = 1808
main$dtor$2 PROC
  00048	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0004d	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00052	55		 push	 rbp
  00053	57		 push	 rdi
  00054	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00058	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0005c	48 8d 8d a0 01
	00 00		 lea	 rcx, QWORD PTR log$[rbp]
  00063	e8 00 00 00 00	 call	 ??_D?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  00068	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006c	5f		 pop	 rdi
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
main$dtor$2 ENDP
a$ = 4
b$ = 40
log_ogólny$ = 112
log$ = 416
iloœæ_pieniêdzy$ = 724
kwota_zak³adu$ = 756
wylosowana_liczba$ = 788
wygrana$ = 820
typ_zak³adu$ = 856
co_kontynuowaæ$ = 916
buf$14 = 952
i$15 = 1012
$T16 = 1624
$T17 = 1684
$T18 = 1716
$T19 = 1748
$T20 = 1784
tv775 = 1796
tv791 = 1800
tv622 = 1800
tv608 = 1800
tv546 = 1800
tv500 = 1800
tv422 = 1800
tv408 = 1800
tv338 = 1800
tv262 = 1800
tv202 = 1800
__$ArrayPad$ = 1808
main$dtor$3 PROC
  0006f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00074	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00079	55		 push	 rbp
  0007a	57		 push	 rdi
  0007b	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0007f	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00083	48 8d 8d 58 03
	00 00		 lea	 rcx, QWORD PTR typ_zak³adu$[rbp]
  0008a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0008f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00093	5f		 pop	 rdi
  00094	5d		 pop	 rbp
  00095	c3		 ret	 0
main$dtor$3 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
a$ = 4
b$ = 40
log_ogólny$ = 112
log$ = 416
iloœæ_pieniêdzy$ = 724
kwota_zak³adu$ = 756
wylosowana_liczba$ = 788
wygrana$ = 820
typ_zak³adu$ = 856
co_kontynuowaæ$ = 916
buf$14 = 952
i$15 = 1012
$T16 = 1624
$T17 = 1684
$T18 = 1716
$T19 = 1748
$T20 = 1784
tv775 = 1796
tv791 = 1800
tv622 = 1800
tv608 = 1800
tv546 = 1800
tv500 = 1800
tv422 = 1800
tv408 = 1800
tv338 = 1800
tv262 = 1800
tv202 = 1800
__$ArrayPad$ = 1808
main$dtor$0 PROC
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 4d 28	 lea	 rcx, QWORD PTR b$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
main$dtor$0 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
a$ = 4
b$ = 40
log_ogólny$ = 112
log$ = 416
iloœæ_pieniêdzy$ = 724
kwota_zak³adu$ = 756
wylosowana_liczba$ = 788
wygrana$ = 820
typ_zak³adu$ = 856
co_kontynuowaæ$ = 916
buf$14 = 952
i$15 = 1012
$T16 = 1624
$T17 = 1684
$T18 = 1716
$T19 = 1748
$T20 = 1784
tv775 = 1796
tv791 = 1800
tv622 = 1800
tv608 = 1800
tv546 = 1800
tv500 = 1800
tv422 = 1800
tv408 = 1800
tv338 = 1800
tv262 = 1800
tv202 = 1800
__$ArrayPad$ = 1808
main$dtor$1 PROC
  00024	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00029	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002e	55		 push	 rbp
  0002f	57		 push	 rdi
  00030	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00034	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00038	48 8d 4d 70	 lea	 rcx, QWORD PTR log_ogólny$[rbp]
  0003c	e8 00 00 00 00	 call	 ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  00041	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
main$dtor$1 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
a$ = 4
b$ = 40
log_ogólny$ = 112
log$ = 416
iloœæ_pieniêdzy$ = 724
kwota_zak³adu$ = 756
wylosowana_liczba$ = 788
wygrana$ = 820
typ_zak³adu$ = 856
co_kontynuowaæ$ = 916
buf$14 = 952
i$15 = 1012
$T16 = 1624
$T17 = 1684
$T18 = 1716
$T19 = 1748
$T20 = 1784
tv775 = 1796
tv791 = 1800
tv622 = 1800
tv608 = 1800
tv546 = 1800
tv500 = 1800
tv422 = 1800
tv408 = 1800
tv338 = 1800
tv262 = 1800
tv202 = 1800
__$ArrayPad$ = 1808
main$dtor$2 PROC
  00048	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0004d	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00052	55		 push	 rbp
  00053	57		 push	 rdi
  00054	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00058	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0005c	48 8d 8d a0 01
	00 00		 lea	 rcx, QWORD PTR log$[rbp]
  00063	e8 00 00 00 00	 call	 ??_D?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  00068	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006c	5f		 pop	 rdi
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
main$dtor$2 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
a$ = 4
b$ = 40
log_ogólny$ = 112
log$ = 416
iloœæ_pieniêdzy$ = 724
kwota_zak³adu$ = 756
wylosowana_liczba$ = 788
wygrana$ = 820
typ_zak³adu$ = 856
co_kontynuowaæ$ = 916
buf$14 = 952
i$15 = 1012
$T16 = 1624
$T17 = 1684
$T18 = 1716
$T19 = 1748
$T20 = 1784
tv775 = 1796
tv791 = 1800
tv622 = 1800
tv608 = 1800
tv546 = 1800
tv500 = 1800
tv422 = 1800
tv408 = 1800
tv338 = 1800
tv262 = 1800
tv202 = 1800
__$ArrayPad$ = 1808
main$dtor$3 PROC
  0006f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00074	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00079	55		 push	 rbp
  0007a	57		 push	 rdi
  0007b	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0007f	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00083	48 8d 8d 58 03
	00 00		 lea	 rcx, QWORD PTR typ_zak³adu$[rbp]
  0008a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0008f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00093	5f		 pop	 rdi
  00094	5d		 pop	 rbp
  00095	c3		 ret	 0
main$dtor$3 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__FG³os@@YAXXZ
text$yd	SEGMENT
??__FG³os@@YAXXZ PROC					; `dynamic atexit destructor for 'G³os'', COMDAT
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00031	5f		 pop	 rdi
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
??__FG³os@@YAXXZ ENDP					; `dynamic atexit destructor for 'G³os''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ??__EG³os@@YAXXZ
text$di	SEGMENT
??__EG³os@@YAXXZ PROC					; `dynamic initializer for 'G³os'', COMDAT

; 61   : string G³os;

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  00025	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??__FG³os@@YAXXZ ; `dynamic atexit destructor for 'G³os''
  00031	e8 00 00 00 00	 call	 atexit
  00036	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003d	5f		 pop	 rdi
  0003e	5d		 pop	 rbp
  0003f	c3		 ret	 0
??__EG³os@@YAXXZ ENDP					; `dynamic initializer for 'G³os''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?Show_Cursor@@YAXXZ
_TEXT	SEGMENT
hConsoleOut$ = 8
hCCI$ = 40
__$ArrayPad$ = 248
?Show_Cursor@@YAXXZ PROC				; Show_Cursor, COMDAT

; 475  : {

$LN4:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00025	48 33 c5	 xor	 rax, rbp
  00028	48 89 85 f8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 476  : 	HANDLE hConsoleOut = GetStdHandle(STD_OUTPUT_HANDLE); //Stworzenie zmiennej typu uchwyt i przypisanie do standardowego wyjœcia

  0002f	b9 f5 ff ff ff	 mov	 ecx, -11		; fffffff5H
  00034	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetStdHandle
  0003a	48 89 45 08	 mov	 QWORD PTR hConsoleOut$[rbp], rax

; 477  : 	CONSOLE_CURSOR_INFO hCCI; //Stworzenie zmiennej typu informacji o kursorze tekstowym w konsoli
; 478  : 	GetConsoleCursorInfo(hConsoleOut, &hCCI); //Przypisanie do zmiennej informacji o kursorze tekstowym w konsoli

  0003e	48 8d 55 28	 lea	 rdx, QWORD PTR hCCI$[rbp]
  00042	48 8b 4d 08	 mov	 rcx, QWORD PTR hConsoleOut$[rbp]
  00046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetConsoleCursorInfo

; 479  : 	if (hCCI.bVisible != TRUE) //Sprawdzenie czy wartoœæ widocznoœci kursorsora tekstego w konsoli jest ró¿na od prawdy

  0004c	83 7d 2c 01	 cmp	 DWORD PTR hCCI$[rbp+4], 1
  00050	74 15		 je	 SHORT $LN2@Show_Curso

; 480  : 	{
; 481  : 		hCCI.bVisible = TRUE;//Je¿eli tak, to zmiena widocznoœci kursora na widoczny

  00052	c7 45 2c 01 00
	00 00		 mov	 DWORD PTR hCCI$[rbp+4], 1

; 482  : 		SetConsoleCursorInfo(hConsoleOut, &hCCI); //I ustawienie widocznoœci kursora zgodnie z poprzedni¹ zmienn¹

  00059	48 8d 55 28	 lea	 rdx, QWORD PTR hCCI$[rbp]
  0005d	48 8b 4d 08	 mov	 rcx, QWORD PTR hConsoleOut$[rbp]
  00061	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetConsoleCursorInfo
$LN2@Show_Curso:

; 483  : 	}
; 484  : }

  00067	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?Show_Cursor@@YAXXZ$rtcFrameData
  00072	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00077	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0007e	48 33 cd	 xor	 rcx, rbp
  00081	e8 00 00 00 00	 call	 __security_check_cookie
  00086	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0008d	5f		 pop	 rdi
  0008e	5d		 pop	 rbp
  0008f	c3		 ret	 0
?Show_Cursor@@YAXXZ ENDP				; Show_Cursor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?Hide_Cursor@@YAXXZ
_TEXT	SEGMENT
hConsoleOut$ = 8
hCCI$ = 40
__$ArrayPad$ = 248
?Hide_Cursor@@YAXXZ PROC				; Hide_Cursor, COMDAT

; 466  : {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00025	48 33 c5	 xor	 rax, rbp
  00028	48 89 85 f8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 467  : 	HANDLE hConsoleOut = GetStdHandle(STD_OUTPUT_HANDLE); //Stworzenie zmiennej typu uchwyt i przypisanie do standardowego wyjœcia

  0002f	b9 f5 ff ff ff	 mov	 ecx, -11		; fffffff5H
  00034	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetStdHandle
  0003a	48 89 45 08	 mov	 QWORD PTR hConsoleOut$[rbp], rax

; 468  : 	CONSOLE_CURSOR_INFO hCCI; //Stworzenie zmiennej typu informacji o kursorze tekstowym w konsoli
; 469  : 	GetConsoleCursorInfo(hConsoleOut, &hCCI); //Przypisanie do zmiennej informacji o kursorze tekstowym w konsoli

  0003e	48 8d 55 28	 lea	 rdx, QWORD PTR hCCI$[rbp]
  00042	48 8b 4d 08	 mov	 rcx, QWORD PTR hConsoleOut$[rbp]
  00046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetConsoleCursorInfo

; 470  : 	hCCI.bVisible = FALSE; //Zmiena widocznoœci kursora na niewidoczny

  0004c	c7 45 2c 00 00
	00 00		 mov	 DWORD PTR hCCI$[rbp+4], 0

; 471  : 	SetConsoleCursorInfo(hConsoleOut, &hCCI); //Ustawienie widocznoœci kursora zgodnie z poprzedni¹ zmienn¹

  00053	48 8d 55 28	 lea	 rdx, QWORD PTR hCCI$[rbp]
  00057	48 8b 4d 08	 mov	 rcx, QWORD PTR hConsoleOut$[rbp]
  0005b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetConsoleCursorInfo

; 472  : }

  00061	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00065	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?Hide_Cursor@@YAXXZ$rtcFrameData
  0006c	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00071	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00078	48 33 cd	 xor	 rcx, rbp
  0007b	e8 00 00 00 00	 call	 __security_check_cookie
  00080	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00087	5f		 pop	 rdi
  00088	5d		 pop	 rbp
  00089	c3		 ret	 0
?Hide_Cursor@@YAXXZ ENDP				; Hide_Cursor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?Change_Col@@YAXAEBH@Z
_TEXT	SEGMENT
h_wyj$ = 8
num_of_col$ = 256
?Change_Col@@YAXAEBH@Z PROC				; Change_Col, COMDAT

; 460  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 461  : 	HANDLE h_wyj = GetStdHandle(STD_OUTPUT_HANDLE); //Stworzenie zmiennej typu uchwyt i przypisanie do standardowego wyjœcia

  0002a	b9 f5 ff ff ff	 mov	 ecx, -11		; fffffff5H
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetStdHandle
  00035	48 89 45 08	 mov	 QWORD PTR h_wyj$[rbp], rax

; 462  : 	SetConsoleTextAttribute(h_wyj, num_of_col); //Zmienia atrybut koloru tekstu w konsoli

  00039	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR num_of_col$[rbp]
  00040	0f b7 10	 movzx	 edx, WORD PTR [rax]
  00043	48 8b 4d 08	 mov	 rcx, QWORD PTR h_wyj$[rbp]
  00047	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetConsoleTextAttribute

; 463  : }

  0004d	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00054	5f		 pop	 rdi
  00055	5d		 pop	 rbp
  00056	c3		 ret	 0
?Change_Col@@YAXAEBH@Z ENDP				; Change_Col
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?SprawdŸ_ustawienia@@YAXXZ
_TEXT	SEGMENT
?SprawdŸ_ustawienia@@YAXXZ PROC				; SprawdŸ_ustawienia, COMDAT

; 885  : {

$LN19:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 886  : 	if (czas_przeskoku_kulki_wolny < czas_przeskoku_kulki_szybki)

  0001e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?czas_przeskoku_kulki_szybki@@3HA ; czas_przeskoku_kulki_szybki
  00024	39 05 00 00 00
	00		 cmp	 DWORD PTR ?czas_przeskoku_kulki_wolny@@3HA, eax ; czas_przeskoku_kulki_wolny
  0002a	7d 46		 jge	 SHORT $LN2@SprawdŸ_u

; 887  : 	{
; 888  : 		cout << "Wartoœæ wolnego czasu przeskoku kulki musi byæ ni¿sza ni¿ wartoœæ szybkiego czasu przeskoku kulki" << endl; //(Wartoœci tych zmiennych to czas opóŸnienia wiêc im jest wy¿szy tym d³u¿sza przerwa)

  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GC@FGDMKFMP@Warto?$JM?f?5wolnego?5czasu?5przeskoku?5@
  00033	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0003a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00046	48 8b c8	 mov	 rcx, rax
  00049	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 889  : 		cout << "Ustawiam domyœne ustawienie" << endl;

  0004f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@BFHMOJCD@Ustawiam?5domy?$JMne?5ustawienie?$AA@
  00056	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0005d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00062	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00069	48 8b c8	 mov	 rcx, rax
  0006c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
$LN2@SprawdŸ_u:

; 890  : 	}
; 891  : 	if (iloœæ_minimalna_obrotów_ruletki < 0)

  00072	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?iloœæ_minimalna_obrotów_ruletki@@3HA, 0 ; iloœæ_minimalna_obrotów_ruletki
  00079	7d 46		 jge	 SHORT $LN3@SprawdŸ_u

; 892  : 	{
; 893  : 		cout << "Iloœæ minimalna obrotów ruletki nie mo¿e byæ mniejsza od 0" << endl;

  0007b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DL@EDLBNLFA@Ilo?$JM?f?5minimalna?5obrot?sw?5ruletki?5@
  00082	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00089	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0008e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00095	48 8b c8	 mov	 rcx, rax
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 894  : 		cout << "Ustawiam domyœne ustawienie" << endl;

  0009e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@BFHMOJCD@Ustawiam?5domy?$JMne?5ustawienie?$AA@
  000a5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000ac	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  000b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  000b8	48 8b c8	 mov	 rcx, rax
  000bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
$LN3@SprawdŸ_u:

; 895  : 	}
; 896  : 	if (iloœæ_max_dodatkowych_obrotów_ruletki < 0)

  000c1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?iloœæ_max_dodatkowych_obrotów_ruletki@@3HA, 0 ; iloœæ_max_dodatkowych_obrotów_ruletki
  000c8	7d 46		 jge	 SHORT $LN4@SprawdŸ_u

; 897  : 	{
; 898  : 		cout << "Iloœæ max obrotów ruletki nie mo¿e byæ mniejsza od 0" << endl;

  000ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DF@PACHBLM@Ilo?$JM?f?5max?5obrot?sw?5ruletki?5nie?5mo@
  000d1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000d8	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  000dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  000e4	48 8b c8	 mov	 rcx, rax
  000e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 899  : 		cout << "Ustawiam domyœne ustawienie" << endl;

  000ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@BFHMOJCD@Ustawiam?5domy?$JMne?5ustawienie?$AA@
  000f4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000fb	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00100	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00107	48 8b c8	 mov	 rcx, rax
  0010a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
$LN4@SprawdŸ_u:

; 900  : 	}
; 901  : 	if ((iloœæ_minimalna_obrotów_ruletki == 0) && (iloœæ_max_dodatkowych_obrotów_ruletki == 0))

  00110	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?iloœæ_minimalna_obrotów_ruletki@@3HA, 0 ; iloœæ_minimalna_obrotów_ruletki
  00117	75 4f		 jne	 SHORT $LN5@SprawdŸ_u
  00119	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?iloœæ_max_dodatkowych_obrotów_ruletki@@3HA, 0 ; iloœæ_max_dodatkowych_obrotów_ruletki
  00120	75 46		 jne	 SHORT $LN5@SprawdŸ_u

; 902  : 	{
; 903  : 		cout << "Jedna z deklaracji w sprawie obrotów ruletki musi byæ wiêksza od zera" << endl;

  00122	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EG@FJFKONPC@Jedna?5z?5deklaracji?5w?5sprawie?5obr@
  00129	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00130	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00135	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  0013c	48 8b c8	 mov	 rcx, rax
  0013f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 904  : 		cout << "Ustawiam domyœne ustawienie" << endl;

  00145	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@BFHMOJCD@Ustawiam?5domy?$JMne?5ustawienie?$AA@
  0014c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00153	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00158	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  0015f	48 8b c8	 mov	 rcx, rax
  00162	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
$LN5@SprawdŸ_u:

; 905  : 	}
; 906  : 	if (((styl_liczenia_wygranej > 1) || (styl_liczenia_wygranej < 0)))

  00168	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?styl_liczenia_wygranej@@3HA, 1 ; styl_liczenia_wygranej
  0016f	7f 09		 jg	 SHORT $LN7@SprawdŸ_u
  00171	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?styl_liczenia_wygranej@@3HA, 0 ; styl_liczenia_wygranej
  00178	7d 46		 jge	 SHORT $LN6@SprawdŸ_u
$LN7@SprawdŸ_u:

; 907  : 	{
; 908  : 		cout << "Styl liczeia wygranej przyjmuje wartoœci tylko 0 lub 1" << endl;

  0017a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DH@EDACBMH@Styl?5liczeia?5wygranej?5przyjmuje?5@
  00181	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00188	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0018d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00194	48 8b c8	 mov	 rcx, rax
  00197	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 909  : 		cout << "Ustawiam domyœne ustawienie" << endl;

  0019d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@BFHMOJCD@Ustawiam?5domy?$JMne?5ustawienie?$AA@
  001a4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001ab	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  001b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  001b7	48 8b c8	 mov	 rcx, rax
  001ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
$LN6@SprawdŸ_u:

; 910  : 	}
; 911  : 	if (czas_przerwy_dzwiêku < 0)

  001c0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?czas_przerwy_dzwiêku@@3HA, 0 ; czas_przerwy_dzwiêku
  001c7	7d 46		 jge	 SHORT $LN8@SprawdŸ_u

; 912  : 	{
; 913  : 		cout << "Czas przerwy dŸwiêku nie mo¿e byæ mniejszy od zera" << endl;

  001c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@CJFGHGHP@Czas?5przerwy?5d?$JPwi?jku?5nie?5mo?$LPe?5by@
  001d0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001d7	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  001dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  001e3	48 8b c8	 mov	 rcx, rax
  001e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 914  : 		cout << "Ustawiam domyœne ustawienie" << endl;

  001ec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@BFHMOJCD@Ustawiam?5domy?$JMne?5ustawienie?$AA@
  001f3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001fa	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  001ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00206	48 8b c8	 mov	 rcx, rax
  00209	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
$LN8@SprawdŸ_u:

; 915  : 	}
; 916  : 	if (kwota_pocz¹tkowa < 0)

  0020f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?kwota_pocz¹tkowa@@3HA, 0 ; kwota_pocz¹tkowa
  00216	7d 46		 jge	 SHORT $LN9@SprawdŸ_u

; 917  : 	{
; 918  : 		cout << "Kwota pocz¹tkowa nie mo¿e byæ mniejsza od zera" << endl;

  00218	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@ODEFLMCC@Kwota?5pocz?$LJtkowa?5nie?5mo?$LPe?5by?f?5mn@
  0021f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00226	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0022b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00232	48 8b c8	 mov	 rcx, rax
  00235	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 919  : 		cout << "Ustawiam domyœne ustawienie" << endl;

  0023b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@BFHMOJCD@Ustawiam?5domy?$JMne?5ustawienie?$AA@
  00242	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00249	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0024e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00255	48 8b c8	 mov	 rcx, rax
  00258	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
$LN9@SprawdŸ_u:

; 920  : 	}
; 921  : 	if ((stan_dŸwiêków > 1) || (stan_dŸwiêków < 0))

  0025e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?stan_dŸwiêków@@3HA, 1 ; stan_dŸwiêków
  00265	7f 09		 jg	 SHORT $LN11@SprawdŸ_u
  00267	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?stan_dŸwiêków@@3HA, 0 ; stan_dŸwiêków
  0026e	7d 46		 jge	 SHORT $LN10@SprawdŸ_u
$LN11@SprawdŸ_u:

; 922  : 	{
; 923  : 		cout << "Stan dŸwiêków przyjmuje wartoœci tylko 0 lub 1" << endl;

  00270	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@LNDFINPO@Stan?5d?$JPwi?jk?sw?5przyjmuje?5warto?$JMci@
  00277	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0027e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00283	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  0028a	48 8b c8	 mov	 rcx, rax
  0028d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 924  : 		cout << "Ustawiam domyœne ustawienie" << endl;

  00293	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@BFHMOJCD@Ustawiam?5domy?$JMne?5ustawienie?$AA@
  0029a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  002a1	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  002a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  002ad	48 8b c8	 mov	 rcx, rax
  002b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
$LN10@SprawdŸ_u:

; 925  : 	}
; 926  : 	if ((czy_kontynuowaæ_grê > 1) || (czy_kontynuowaæ_grê < 0))

  002b6	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?czy_kontynuowaæ_grê@@3HA, 1 ; czy_kontynuowaæ_grê
  002bd	7f 09		 jg	 SHORT $LN13@SprawdŸ_u
  002bf	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?czy_kontynuowaæ_grê@@3HA, 0 ; czy_kontynuowaæ_grê
  002c6	7d 46		 jge	 SHORT $LN12@SprawdŸ_u
$LN13@SprawdŸ_u:

; 927  : 	{
; 928  : 		cout << "Opcja kontynuowania gry przyjmuje wartoœci tylko 0 lub 1" << endl;

  002c8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DJ@OKKJHGDF@Opcja?5kontynuowania?5gry?5przyjmuj@
  002cf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  002d6	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  002db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  002e2	48 8b c8	 mov	 rcx, rax
  002e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 929  : 		cout << "Ustawiam domyœne ustawienie" << endl;

  002eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@BFHMOJCD@Ustawiam?5domy?$JMne?5ustawienie?$AA@
  002f2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  002f9	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  002fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00305	48 8b c8	 mov	 rcx, rax
  00308	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
$LN12@SprawdŸ_u:

; 930  : 	}
; 931  : 	if ((g³os_odczytu_numeru > 10) || (g³os_odczytu_numeru < 0))

  0030e	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR ?g³os_odczytu_numeru@@3HA, 10 ; g³os_odczytu_numeru
  00315	7f 09		 jg	 SHORT $LN15@SprawdŸ_u
  00317	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g³os_odczytu_numeru@@3HA, 0 ; g³os_odczytu_numeru
  0031e	7d 46		 jge	 SHORT $LN14@SprawdŸ_u
$LN15@SprawdŸ_u:

; 932  : 	{
; 933  : 		cout << "Opcja g³os odczytu numeru przyjmuje wartoœci w przedziale <0;10>" << endl;

  00320	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EB@BADOFEHO@Opcja?5g?$LDos?5odczytu?5numeru?5przyjm@
  00327	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0032e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00333	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  0033a	48 8b c8	 mov	 rcx, rax
  0033d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 934  : 		cout << "Ustawiam domyœne ustawienie" << endl;

  00343	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@BFHMOJCD@Ustawiam?5domy?$JMne?5ustawienie?$AA@
  0034a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00351	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00356	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  0035d	48 8b c8	 mov	 rcx, rax
  00360	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
$LN14@SprawdŸ_u:

; 935  : 	}
; 936  : 	if ((g³os_szybkoœæ_odczytu_numeru > 5) || (g³os_szybkoœæ_odczytu_numeru < 0))

  00366	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?g³os_szybkoœæ_odczytu_numeru@@3HA, 5 ; g³os_szybkoœæ_odczytu_numeru
  0036d	7f 09		 jg	 SHORT $LN17@SprawdŸ_u
  0036f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g³os_szybkoœæ_odczytu_numeru@@3HA, 0 ; g³os_szybkoœæ_odczytu_numeru
  00376	7d 46		 jge	 SHORT $LN16@SprawdŸ_u
$LN17@SprawdŸ_u:

; 937  : 	{
; 938  : 		cout << "Opcja szybkoœæ g³osu odczytu przyjmuje wartoœci w przedziale <0;5>" << endl;

  00378	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0ED@HLOPCNMJ@Opcja?5szybko?$JM?f?5g?$LDosu?5odczytu?5prz@
  0037f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00386	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0038b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00392	48 8b c8	 mov	 rcx, rax
  00395	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 939  : 		cout << "Ustawiam domyœne ustawienie" << endl;

  0039b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@BFHMOJCD@Ustawiam?5domy?$JMne?5ustawienie?$AA@
  003a2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  003a9	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  003ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  003b5	48 8b c8	 mov	 rcx, rax
  003b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
$LN16@SprawdŸ_u:

; 940  : 	}
; 941  : }

  003be	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  003c5	5f		 pop	 rdi
  003c6	5d		 pop	 rbp
  003c7	c3		 ret	 0
?SprawdŸ_ustawienia@@YAXXZ ENDP				; SprawdŸ_ustawienia
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?SprawdŸ_Pliki@@YAXXZ
_TEXT	SEGMENT
g³os_nazwa$ = 8
buf$ = 72
i$8 = 132
numers$9 = 176
i$10 = 452
numers$11 = 496
i$12 = 772
numers$13 = 816
$T14 = 1672
$T15 = 1736
$T16 = 1800
$T17 = 1864
tv70 = 1876
tv313 = 1880
tv275 = 1880
tv235 = 1880
tv425 = 1888
tv419 = 1888
tv381 = 1888
__$ArrayPad$ = 1896
?SprawdŸ_Pliki@@YAXXZ PROC				; SprawdŸ_Pliki, COMDAT

; 713  : {

$LN45:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 98 07
	00 00		 sub	 rsp, 1944		; 00000798H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 e6 01 00 00	 mov	 ecx, 486		; 000001e6H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 c7 85 48 07
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T17[rbp], -2
  00029	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00030	48 33 c5	 xor	 rax, rbp
  00033	48 89 85 68 07
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 714  : 	string g³os_nazwa;

  0003a	48 8d 4d 08	 lea	 rcx, QWORD PTR g³os_nazwa$[rbp]
  0003e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00043	90		 npad	 1

; 715  : 	string buf;

  00044	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  00048	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0004d	90		 npad	 1

; 716  : 
; 717  : 	switch (g³os_odczytu_numeru)

  0004e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?g³os_odczytu_numeru@@3HA ; g³os_odczytu_numeru
  00054	89 85 54 07 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  0005a	8b 85 54 07 00
	00		 mov	 eax, DWORD PTR tv70[rbp]
  00060	ff c8		 dec	 eax
  00062	89 85 54 07 00
	00		 mov	 DWORD PTR tv70[rbp], eax
  00068	83 bd 54 07 00
	00 08		 cmp	 DWORD PTR tv70[rbp], 8
  0006f	0f 87 bd 00 00
	00		 ja	 $LN2@SprawdŸ_P
  00075	48 63 85 54 07
	00 00		 movsxd	 rax, DWORD PTR tv70[rbp]
  0007c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00083	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN44@SprawdŸ_P[rcx+rax*4]
  0008a	48 03 c1	 add	 rax, rcx
  0008d	ff e0		 jmp	 rax
$LN13@SprawdŸ_P:

; 718  : 	{
; 719  : 	case 1:
; 720  : 	{
; 721  : 		g³os_nazwa = "Jacek ";

  0008f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06ECCMNMIG@Jacek?5?$AA@
  00096	48 8d 4d 08	 lea	 rcx, QWORD PTR g³os_nazwa$[rbp]
  0009a	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 722  : 		break;

  0009f	e9 8e 00 00 00	 jmp	 $LN2@SprawdŸ_P
$LN14@SprawdŸ_P:

; 723  : 	}
; 724  : 	case 2:
; 725  : 	{
; 726  : 		g³os_nazwa = "Ewa ";

  000a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04IDLHMCEL@Ewa?5?$AA@
  000ab	48 8d 4d 08	 lea	 rcx, QWORD PTR g³os_nazwa$[rbp]
  000af	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 727  : 		break;

  000b4	eb 7c		 jmp	 SHORT $LN2@SprawdŸ_P
$LN15@SprawdŸ_P:

; 728  : 	}
; 729  : 	case 3:
; 730  : 	{
; 731  : 		g³os_nazwa = "Maja ";

  000b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05NBKDILMB@Maja?5?$AA@
  000bd	48 8d 4d 08	 lea	 rcx, QWORD PTR g³os_nazwa$[rbp]
  000c1	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 732  : 		break;

  000c6	eb 6a		 jmp	 SHORT $LN2@SprawdŸ_P
$LN16@SprawdŸ_P:

; 733  : 	}
; 734  : 	case 4:
; 735  : 	{
; 736  : 		g³os_nazwa = "Jan ";

  000c8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04HPMJBKOE@Jan?5?$AA@
  000cf	48 8d 4d 08	 lea	 rcx, QWORD PTR g³os_nazwa$[rbp]
  000d3	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 737  : 		break;

  000d8	eb 58		 jmp	 SHORT $LN2@SprawdŸ_P
$LN17@SprawdŸ_P:

; 738  : 	}
; 739  : 	case 5:
; 740  : 	{
; 741  : 		g³os_nazwa = "Jacek 2";

  000da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07OJOJFOLI@Jacek?52?$AA@
  000e1	48 8d 4d 08	 lea	 rcx, QWORD PTR g³os_nazwa$[rbp]
  000e5	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 742  : 		break;

  000ea	eb 46		 jmp	 SHORT $LN2@SprawdŸ_P
$LN18@SprawdŸ_P:

; 743  : 	}
; 744  : 
; 745  : 	case 6:
; 746  : 	{
; 747  : 		g³os_nazwa = "Ewa 2";

  000ec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05MPNHLKL@Ewa?52?$AA@
  000f3	48 8d 4d 08	 lea	 rcx, QWORD PTR g³os_nazwa$[rbp]
  000f7	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 748  : 		break;

  000fc	eb 34		 jmp	 SHORT $LN2@SprawdŸ_P
$LN19@SprawdŸ_P:

; 749  : 	}
; 750  : 	case 7:
; 751  : 	{
; 752  : 		g³os_nazwa = "Maja 2";

  000fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06BMCAFNM@Maja?52?$AA@
  00105	48 8d 4d 08	 lea	 rcx, QWORD PTR g³os_nazwa$[rbp]
  00109	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 753  : 		break;

  0010e	eb 22		 jmp	 SHORT $LN2@SprawdŸ_P
$LN20@SprawdŸ_P:

; 754  : 	}
; 755  : 	case 8:
; 756  : 	{
; 757  : 		g³os_nazwa = "Jan 2";

  00110	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05EKGILLAK@Jan?52?$AA@
  00117	48 8d 4d 08	 lea	 rcx, QWORD PTR g³os_nazwa$[rbp]
  0011b	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 758  : 		break;

  00120	eb 10		 jmp	 SHORT $LN2@SprawdŸ_P
$LN21@SprawdŸ_P:

; 759  : 	}
; 760  : 	case 9:
; 761  : 	{
; 762  : 		g³os_nazwa = "Agata ";

  00122	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06JIAINCN@Agata?5?$AA@
  00129	48 8d 4d 08	 lea	 rcx, QWORD PTR g³os_nazwa$[rbp]
  0012d	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
$LN2@SprawdŸ_P:

; 763  : 		break;
; 764  : 	}
; 765  : 	default:
; 766  : 		break;
; 767  : 	}
; 768  : 
; 769  : 	G³os = "G³os/";

  00132	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05CMOJBPHN@G?$LDos?1?$AA@
  00139	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  00140	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 770  : 	G³os += g³os_nazwa;

  00145	48 8d 55 08	 lea	 rdx, QWORD PTR g³os_nazwa$[rbp]
  00149	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  00150	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 771  : 	G³os += "_";

  00155	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01IDAFKMJL@_?$AA@
  0015c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  00163	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 772  : 	G³os += '0' + g³os_szybkoœæ_odczytu_numeru;

  00168	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?g³os_szybkoœæ_odczytu_numeru@@3HA ; g³os_szybkoœæ_odczytu_numeru
  0016e	83 c0 30	 add	 eax, 48			; 00000030H
  00171	0f b6 d0	 movzx	 edx, al
  00174	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  0017b	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 773  : 	G³os += "/";

  00180	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01KMDKNFGN@?1?$AA@
  00187	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  0018e	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 774  : 
; 775  : 	buf = G³os;

  00193	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  0019a	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  0019e	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 776  : 	buf += "p.wav";

  001a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05PNHGCFLK@p?4wav?$AA@
  001aa	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  001ae	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 777  : 	if ((_access(buf.c_str(), 0)))

  001b3	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  001b7	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  001bc	33 d2		 xor	 edx, edx
  001be	48 8b c8	 mov	 rcx, rax
  001c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__access
  001c7	85 c0		 test	 eax, eax
  001c9	74 42		 je	 SHORT $LN23@SprawdŸ_P

; 778  : 	{
; 779  : 		cout << "Brak wszystkich plików dla g³osu, wy³¹czono odczytywanie wyniku" << endl;

  001cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EA@BAJGLA@Brak?5wszystkich?5plik?sw?5dla?5g?$LDosu@
  001d2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001d9	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  001de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  001e5	48 8b c8	 mov	 rcx, rax
  001e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 780  : 		G³osyKompletne = false;

  001ee	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?G³osyKompletne@@3_NA, 0 ; G³osyKompletne

; 781  : 		return;

  001f5	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  001f9	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001fe	90		 npad	 1
  001ff	48 8d 4d 08	 lea	 rcx, QWORD PTR g³os_nazwa$[rbp]
  00203	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00208	e9 f5 06 00 00	 jmp	 $LN1@SprawdŸ_P
$LN23@SprawdŸ_P:

; 782  : 	}
; 783  : 
; 784  : 	buf = G³os;

  0020d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  00214	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  00218	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 785  : 	buf += "n.wav";

  0021d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05MEKKEGFB@n?4wav?$AA@
  00224	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  00228	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 786  : 	if ((_access(buf.c_str(), 0)))

  0022d	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  00231	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00236	33 d2		 xor	 edx, edx
  00238	48 8b c8	 mov	 rcx, rax
  0023b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__access
  00241	85 c0		 test	 eax, eax
  00243	74 42		 je	 SHORT $LN24@SprawdŸ_P

; 787  : 	{
; 788  : 		cout << "Brak wszystkich plików dla g³osu, wy³¹czono odczytywanie wyniku" << endl;

  00245	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EA@BAJGLA@Brak?5wszystkich?5plik?sw?5dla?5g?$LDosu@
  0024c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00253	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00258	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  0025f	48 8b c8	 mov	 rcx, rax
  00262	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 789  : 		G³osyKompletne = false;

  00268	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?G³osyKompletne@@3_NA, 0 ; G³osyKompletne

; 790  : 		return;

  0026f	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  00273	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00278	90		 npad	 1
  00279	48 8d 4d 08	 lea	 rcx, QWORD PTR g³os_nazwa$[rbp]
  0027d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00282	e9 7b 06 00 00	 jmp	 $LN1@SprawdŸ_P
$LN24@SprawdŸ_P:

; 791  : 	}
; 792  : 
; 793  : 	buf = G³os;

  00287	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  0028e	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  00292	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 794  : 	buf += "r.wav";

  00297	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05LALOIELB@r?4wav?$AA@
  0029e	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  002a2	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 795  : 	if ((_access(buf.c_str(), 0)))

  002a7	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  002ab	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  002b0	33 d2		 xor	 edx, edx
  002b2	48 8b c8	 mov	 rcx, rax
  002b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__access
  002bb	85 c0		 test	 eax, eax
  002bd	74 42		 je	 SHORT $LN25@SprawdŸ_P

; 796  : 	{
; 797  : 		cout << "Brak wszystkich plików dla g³osu, wy³¹czono odczytywanie wyniku" << endl;

  002bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EA@BAJGLA@Brak?5wszystkich?5plik?sw?5dla?5g?$LDosu@
  002c6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  002cd	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  002d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  002d9	48 8b c8	 mov	 rcx, rax
  002dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 798  : 		G³osyKompletne = false;

  002e2	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?G³osyKompletne@@3_NA, 0 ; G³osyKompletne

; 799  : 		return;

  002e9	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  002ed	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  002f2	90		 npad	 1
  002f3	48 8d 4d 08	 lea	 rcx, QWORD PTR g³os_nazwa$[rbp]
  002f7	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  002fc	e9 01 06 00 00	 jmp	 $LN1@SprawdŸ_P
$LN25@SprawdŸ_P:

; 800  : 	}
; 801  : 
; 802  : 	buf = G³os;

  00301	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  00308	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  0030c	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 803  : 	buf += "b.wav";

  00311	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05LDGIIGCK@b?4wav?$AA@
  00318	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  0031c	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 804  : 	if ((_access(buf.c_str(), 0)))

  00321	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  00325	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0032a	33 d2		 xor	 edx, edx
  0032c	48 8b c8	 mov	 rcx, rax
  0032f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__access
  00335	85 c0		 test	 eax, eax
  00337	74 42		 je	 SHORT $LN26@SprawdŸ_P

; 805  : 	{
; 806  : 		cout << "Brak wszystkich plików dla g³osu, wy³¹czono odczytywanie wyniku" << endl;

  00339	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EA@BAJGLA@Brak?5wszystkich?5plik?sw?5dla?5g?$LDosu@
  00340	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00347	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0034c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00353	48 8b c8	 mov	 rcx, rax
  00356	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 807  : 		G³osyKompletne = false;

  0035c	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?G³osyKompletne@@3_NA, 0 ; G³osyKompletne

; 808  : 		return;

  00363	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  00367	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0036c	90		 npad	 1
  0036d	48 8d 4d 08	 lea	 rcx, QWORD PTR g³os_nazwa$[rbp]
  00371	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00376	e9 87 05 00 00	 jmp	 $LN1@SprawdŸ_P
$LN26@SprawdŸ_P:

; 809  : 	}
; 810  : 
; 811  : 	buf = G³os;

  0037b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  00382	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  00386	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 812  : 	buf += "g.wav";

  0038b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05ODKFBHJJ@g?4wav?$AA@
  00392	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  00396	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 813  : 	if ((_access(buf.c_str(), 0)))

  0039b	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  0039f	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  003a4	33 d2		 xor	 edx, edx
  003a6	48 8b c8	 mov	 rcx, rax
  003a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__access
  003af	85 c0		 test	 eax, eax
  003b1	74 42		 je	 SHORT $LN27@SprawdŸ_P

; 814  : 	{
; 815  : 		cout << "Brak wszystkich plików dla g³osu, wy³¹czono odczytywanie wyniku" << endl;

  003b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EA@BAJGLA@Brak?5wszystkich?5plik?sw?5dla?5g?$LDosu@
  003ba	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  003c1	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  003c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  003cd	48 8b c8	 mov	 rcx, rax
  003d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 816  : 		G³osyKompletne = false;

  003d6	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?G³osyKompletne@@3_NA, 0 ; G³osyKompletne

; 817  : 		return;

  003dd	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  003e1	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  003e6	90		 npad	 1
  003e7	48 8d 4d 08	 lea	 rcx, QWORD PTR g³os_nazwa$[rbp]
  003eb	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  003f0	e9 0d 05 00 00	 jmp	 $LN1@SprawdŸ_P
$LN27@SprawdŸ_P:

; 818  : 	}
; 819  : 
; 820  : 	buf = G³os;

  003f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  003fc	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  00400	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 821  : 	buf += "d.wav";

  00405	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05GFDBGFDH@d?4wav?$AA@
  0040c	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  00410	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 822  : 	if ((_access(buf.c_str(), 0)))

  00415	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  00419	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0041e	33 d2		 xor	 edx, edx
  00420	48 8b c8	 mov	 rcx, rax
  00423	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__access
  00429	85 c0		 test	 eax, eax
  0042b	74 42		 je	 SHORT $LN28@SprawdŸ_P

; 823  : 	{
; 824  : 		cout << "Brak wszystkich plików dla g³osu, wy³¹czono odczytywanie wyniku" << endl;

  0042d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EA@BAJGLA@Brak?5wszystkich?5plik?sw?5dla?5g?$LDosu@
  00434	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0043b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00440	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00447	48 8b c8	 mov	 rcx, rax
  0044a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 825  : 		G³osyKompletne = false;

  00450	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?G³osyKompletne@@3_NA, 0 ; G³osyKompletne

; 826  : 		return;

  00457	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  0045b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00460	90		 npad	 1
  00461	48 8d 4d 08	 lea	 rcx, QWORD PTR g³os_nazwa$[rbp]
  00465	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0046a	e9 93 04 00 00	 jmp	 $LN1@SprawdŸ_P
$LN28@SprawdŸ_P:

; 827  : 	}
; 828  : 
; 829  : 	for (unsigned short i = 1; i <= 3; ++i)

  0046f	b8 01 00 00 00	 mov	 eax, 1
  00474	66 89 85 84 00
	00 00		 mov	 WORD PTR i$8[rbp], ax
  0047b	eb 11		 jmp	 SHORT $LN6@SprawdŸ_P
$LN4@SprawdŸ_P:
  0047d	0f b7 85 84 00
	00 00		 movzx	 eax, WORD PTR i$8[rbp]
  00484	66 ff c0	 inc	 ax
  00487	66 89 85 84 00
	00 00		 mov	 WORD PTR i$8[rbp], ax
$LN6@SprawdŸ_P:
  0048e	0f b7 85 84 00
	00 00		 movzx	 eax, WORD PTR i$8[rbp]
  00495	83 f8 03	 cmp	 eax, 3
  00498	0f 8f 2d 01 00
	00		 jg	 $LN5@SprawdŸ_P

; 830  : 	{
; 831  : 		buf = G³os;

  0049e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  004a5	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  004a9	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 832  : 		buf += "k";

  004ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  004b5	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  004b9	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 833  : 		stringstream numers;

  004be	ba f8 00 00 00	 mov	 edx, 248		; 000000f8H
  004c3	48 8d 8d b0 00
	00 00		 lea	 rcx, QWORD PTR numers$9[rbp]
  004ca	e8 00 00 00 00	 call	 ?__autoclassinit2@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z
  004cf	41 b8 01 00 00
	00		 mov	 r8d, 1
  004d5	ba 03 00 00 00	 mov	 edx, 3
  004da	48 8d 8d b0 00
	00 00		 lea	 rcx, QWORD PTR numers$9[rbp]
  004e1	e8 00 00 00 00	 call	 ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  004e6	90		 npad	 1

; 834  : 		numers << i;

  004e7	48 8d 85 c0 00
	00 00		 lea	 rax, QWORD PTR numers$9[rbp+16]
  004ee	0f b7 95 84 00
	00 00		 movzx	 edx, WORD PTR i$8[rbp]
  004f5	48 8b c8	 mov	 rcx, rax
  004f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@G@Z

; 835  : 		buf += numers.str();

  004fe	48 8d 95 88 06
	00 00		 lea	 rdx, QWORD PTR $T14[rbp]
  00505	48 8d 8d b0 00
	00 00		 lea	 rcx, QWORD PTR numers$9[rbp]
  0050c	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00511	48 89 85 58 07
	00 00		 mov	 QWORD PTR tv235[rbp], rax
  00518	48 8b 85 58 07
	00 00		 mov	 rax, QWORD PTR tv235[rbp]
  0051f	48 89 85 60 07
	00 00		 mov	 QWORD PTR tv381[rbp], rax
  00526	48 8b 95 60 07
	00 00		 mov	 rdx, QWORD PTR tv381[rbp]
  0052d	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  00531	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
  00536	90		 npad	 1
  00537	48 8d 8d 88 06
	00 00		 lea	 rcx, QWORD PTR $T14[rbp]
  0053e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 836  : 		buf += ".wav";

  00543	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04IBLEHOMF@?4wav?$AA@
  0054a	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  0054e	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 837  : 		if ((_access(buf.c_str(), 0)))

  00553	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  00557	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0055c	33 d2		 xor	 edx, edx
  0055e	48 8b c8	 mov	 rcx, rax
  00561	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__access
  00567	85 c0		 test	 eax, eax
  00569	74 4f		 je	 SHORT $LN29@SprawdŸ_P

; 838  : 		{
; 839  : 			cout << "Brak wszystkich plików dla g³osu, wy³¹czono odczytywanie wyniku" << endl;

  0056b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EA@BAJGLA@Brak?5wszystkich?5plik?sw?5dla?5g?$LDosu@
  00572	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00579	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0057e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00585	48 8b c8	 mov	 rcx, rax
  00588	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 840  : 			G³osyKompletne = false;

  0058e	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?G³osyKompletne@@3_NA, 0 ; G³osyKompletne

; 841  : 			return;

  00595	48 8d 8d b0 00
	00 00		 lea	 rcx, QWORD PTR numers$9[rbp]
  0059c	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  005a1	90		 npad	 1
  005a2	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  005a6	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  005ab	90		 npad	 1
  005ac	48 8d 4d 08	 lea	 rcx, QWORD PTR g³os_nazwa$[rbp]
  005b0	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  005b5	e9 48 03 00 00	 jmp	 $LN1@SprawdŸ_P
$LN29@SprawdŸ_P:

; 842  : 		}
; 843  : 	}

  005ba	48 8d 8d b0 00
	00 00		 lea	 rcx, QWORD PTR numers$9[rbp]
  005c1	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  005c6	e9 b2 fe ff ff	 jmp	 $LN4@SprawdŸ_P
$LN5@SprawdŸ_P:

; 844  : 
; 845  : 	for (unsigned short i = 1; i <= 12; ++i)

  005cb	b8 01 00 00 00	 mov	 eax, 1
  005d0	66 89 85 c4 01
	00 00		 mov	 WORD PTR i$10[rbp], ax
  005d7	eb 11		 jmp	 SHORT $LN9@SprawdŸ_P
$LN7@SprawdŸ_P:
  005d9	0f b7 85 c4 01
	00 00		 movzx	 eax, WORD PTR i$10[rbp]
  005e0	66 ff c0	 inc	 ax
  005e3	66 89 85 c4 01
	00 00		 mov	 WORD PTR i$10[rbp], ax
$LN9@SprawdŸ_P:
  005ea	0f b7 85 c4 01
	00 00		 movzx	 eax, WORD PTR i$10[rbp]
  005f1	83 f8 0c	 cmp	 eax, 12
  005f4	0f 8f 2d 01 00
	00		 jg	 $LN8@SprawdŸ_P

; 846  : 	{
; 847  : 		buf = G³os;

  005fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  00601	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  00605	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 848  : 		buf += "w";

  0060a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01NOFIACDB@w?$AA@
  00611	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  00615	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 849  : 		stringstream numers;

  0061a	ba f8 00 00 00	 mov	 edx, 248		; 000000f8H
  0061f	48 8d 8d f0 01
	00 00		 lea	 rcx, QWORD PTR numers$11[rbp]
  00626	e8 00 00 00 00	 call	 ?__autoclassinit2@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z
  0062b	41 b8 01 00 00
	00		 mov	 r8d, 1
  00631	ba 03 00 00 00	 mov	 edx, 3
  00636	48 8d 8d f0 01
	00 00		 lea	 rcx, QWORD PTR numers$11[rbp]
  0063d	e8 00 00 00 00	 call	 ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  00642	90		 npad	 1

; 850  : 		numers << i;

  00643	48 8d 85 00 02
	00 00		 lea	 rax, QWORD PTR numers$11[rbp+16]
  0064a	0f b7 95 c4 01
	00 00		 movzx	 edx, WORD PTR i$10[rbp]
  00651	48 8b c8	 mov	 rcx, rax
  00654	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@G@Z

; 851  : 		buf += numers.str();

  0065a	48 8d 95 c8 06
	00 00		 lea	 rdx, QWORD PTR $T15[rbp]
  00661	48 8d 8d f0 01
	00 00		 lea	 rcx, QWORD PTR numers$11[rbp]
  00668	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
  0066d	48 89 85 58 07
	00 00		 mov	 QWORD PTR tv275[rbp], rax
  00674	48 8b 85 58 07
	00 00		 mov	 rax, QWORD PTR tv275[rbp]
  0067b	48 89 85 60 07
	00 00		 mov	 QWORD PTR tv419[rbp], rax
  00682	48 8b 95 60 07
	00 00		 mov	 rdx, QWORD PTR tv419[rbp]
  00689	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  0068d	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
  00692	90		 npad	 1
  00693	48 8d 8d c8 06
	00 00		 lea	 rcx, QWORD PTR $T15[rbp]
  0069a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 852  : 		buf += ".wav";

  0069f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04IBLEHOMF@?4wav?$AA@
  006a6	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  006aa	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 853  : 		if ((_access(buf.c_str(), 0)))

  006af	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  006b3	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  006b8	33 d2		 xor	 edx, edx
  006ba	48 8b c8	 mov	 rcx, rax
  006bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__access
  006c3	85 c0		 test	 eax, eax
  006c5	74 4f		 je	 SHORT $LN30@SprawdŸ_P

; 854  : 		{
; 855  : 			cout << "Brak wszystkich plików dla g³osu, wy³¹czono odczytywanie wyniku" << endl;

  006c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EA@BAJGLA@Brak?5wszystkich?5plik?sw?5dla?5g?$LDosu@
  006ce	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  006d5	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  006da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  006e1	48 8b c8	 mov	 rcx, rax
  006e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 856  : 			G³osyKompletne = false;

  006ea	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?G³osyKompletne@@3_NA, 0 ; G³osyKompletne

; 857  : 			return;

  006f1	48 8d 8d f0 01
	00 00		 lea	 rcx, QWORD PTR numers$11[rbp]
  006f8	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  006fd	90		 npad	 1
  006fe	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  00702	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00707	90		 npad	 1
  00708	48 8d 4d 08	 lea	 rcx, QWORD PTR g³os_nazwa$[rbp]
  0070c	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00711	e9 ec 01 00 00	 jmp	 $LN1@SprawdŸ_P
$LN30@SprawdŸ_P:

; 858  : 		}
; 859  : 	}

  00716	48 8d 8d f0 01
	00 00		 lea	 rcx, QWORD PTR numers$11[rbp]
  0071d	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  00722	e9 b2 fe ff ff	 jmp	 $LN7@SprawdŸ_P
$LN8@SprawdŸ_P:

; 860  : 
; 861  : 	for (unsigned short i = 0; i <= 36; ++i)

  00727	33 c0		 xor	 eax, eax
  00729	66 89 85 04 03
	00 00		 mov	 WORD PTR i$12[rbp], ax
  00730	eb 11		 jmp	 SHORT $LN12@SprawdŸ_P
$LN10@SprawdŸ_P:
  00732	0f b7 85 04 03
	00 00		 movzx	 eax, WORD PTR i$12[rbp]
  00739	66 ff c0	 inc	 ax
  0073c	66 89 85 04 03
	00 00		 mov	 WORD PTR i$12[rbp], ax
$LN12@SprawdŸ_P:
  00743	0f b7 85 04 03
	00 00		 movzx	 eax, WORD PTR i$12[rbp]
  0074a	83 f8 24	 cmp	 eax, 36			; 00000024H
  0074d	0f 8f 1d 01 00
	00		 jg	 $LN11@SprawdŸ_P

; 862  : 	{
; 863  : 		buf = G³os;

  00753	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  0075a	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  0075e	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 864  : 		stringstream numers;

  00763	ba f8 00 00 00	 mov	 edx, 248		; 000000f8H
  00768	48 8d 8d 30 03
	00 00		 lea	 rcx, QWORD PTR numers$13[rbp]
  0076f	e8 00 00 00 00	 call	 ?__autoclassinit2@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z
  00774	41 b8 01 00 00
	00		 mov	 r8d, 1
  0077a	ba 03 00 00 00	 mov	 edx, 3
  0077f	48 8d 8d 30 03
	00 00		 lea	 rcx, QWORD PTR numers$13[rbp]
  00786	e8 00 00 00 00	 call	 ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  0078b	90		 npad	 1

; 865  : 		numers << i;

  0078c	48 8d 85 40 03
	00 00		 lea	 rax, QWORD PTR numers$13[rbp+16]
  00793	0f b7 95 04 03
	00 00		 movzx	 edx, WORD PTR i$12[rbp]
  0079a	48 8b c8	 mov	 rcx, rax
  0079d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@G@Z

; 866  : 		buf += numers.str();

  007a3	48 8d 95 08 07
	00 00		 lea	 rdx, QWORD PTR $T16[rbp]
  007aa	48 8d 8d 30 03
	00 00		 lea	 rcx, QWORD PTR numers$13[rbp]
  007b1	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
  007b6	48 89 85 58 07
	00 00		 mov	 QWORD PTR tv313[rbp], rax
  007bd	48 8b 85 58 07
	00 00		 mov	 rax, QWORD PTR tv313[rbp]
  007c4	48 89 85 60 07
	00 00		 mov	 QWORD PTR tv425[rbp], rax
  007cb	48 8b 95 60 07
	00 00		 mov	 rdx, QWORD PTR tv425[rbp]
  007d2	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  007d6	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
  007db	90		 npad	 1
  007dc	48 8d 8d 08 07
	00 00		 lea	 rcx, QWORD PTR $T16[rbp]
  007e3	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 867  : 		buf += ".wav";

  007e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04IBLEHOMF@?4wav?$AA@
  007ef	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  007f3	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 868  : 		if ((_access(buf.c_str(), 0)))

  007f8	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  007fc	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00801	33 d2		 xor	 edx, edx
  00803	48 8b c8	 mov	 rcx, rax
  00806	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__access
  0080c	85 c0		 test	 eax, eax
  0080e	74 4f		 je	 SHORT $LN31@SprawdŸ_P

; 869  : 		{
; 870  : 			cout << "Brak wszystkich plików dla g³osu, wy³¹czono odczytywanie wyniku" << endl;

  00810	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EA@BAJGLA@Brak?5wszystkich?5plik?sw?5dla?5g?$LDosu@
  00817	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0081e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00823	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  0082a	48 8b c8	 mov	 rcx, rax
  0082d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 871  : 			G³osyKompletne = false;

  00833	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?G³osyKompletne@@3_NA, 0 ; G³osyKompletne

; 872  : 			return;

  0083a	48 8d 8d 30 03
	00 00		 lea	 rcx, QWORD PTR numers$13[rbp]
  00841	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  00846	90		 npad	 1
  00847	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  0084b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00850	90		 npad	 1
  00851	48 8d 4d 08	 lea	 rcx, QWORD PTR g³os_nazwa$[rbp]
  00855	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0085a	e9 a3 00 00 00	 jmp	 $LN1@SprawdŸ_P
$LN31@SprawdŸ_P:

; 873  : 		}
; 874  : 	}

  0085f	48 8d 8d 30 03
	00 00		 lea	 rcx, QWORD PTR numers$13[rbp]
  00866	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  0086b	e9 c2 fe ff ff	 jmp	 $LN10@SprawdŸ_P
$LN11@SprawdŸ_P:

; 875  : 
; 876  : 	if (stan_dŸwiêków == 1)

  00870	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?stan_dŸwiêków@@3HA, 1 ; stan_dŸwiêków
  00877	75 76		 jne	 SHORT $LN32@SprawdŸ_P

; 877  : 		if ((_access("Efekty dzwiêkowe/bankrut.wav", 0)) || (_access("Efekty dzwiêkowe/wygrana1.wav", 0)) || (_access("Efekty dzwiêkowe/wygrana2.wav", 0)) || (_access("Efekty dzwiêkowe/zwielokrotnenie.wav", 0)))

  00879	33 d2		 xor	 edx, edx
  0087b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@DACGNLHK@Efekty?5dzwi?jkowe?1bankrut?4wav?$AA@
  00882	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__access
  00888	85 c0		 test	 eax, eax
  0088a	75 39		 jne	 SHORT $LN34@SprawdŸ_P
  0088c	33 d2		 xor	 edx, edx
  0088e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@OAKNDKAH@Efekty?5dzwi?jkowe?1wygrana1?4wav?$AA@
  00895	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__access
  0089b	85 c0		 test	 eax, eax
  0089d	75 26		 jne	 SHORT $LN34@SprawdŸ_P
  0089f	33 d2		 xor	 edx, edx
  008a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@GGDJEIKJ@Efekty?5dzwi?jkowe?1wygrana2?4wav?$AA@
  008a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__access
  008ae	85 c0		 test	 eax, eax
  008b0	75 13		 jne	 SHORT $LN34@SprawdŸ_P
  008b2	33 d2		 xor	 edx, edx
  008b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@DNPALCEH@Efekty?5dzwi?jkowe?1zwielokrotnenie@
  008bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__access
  008c1	85 c0		 test	 eax, eax
  008c3	74 2a		 je	 SHORT $LN32@SprawdŸ_P
$LN34@SprawdŸ_P:

; 878  : 		{
; 879  : 			cout << "Brak plików dla efektów dŸwiêkowych, wy³¹czono efekty dŸwiêkowe muzyczne, w³¹czono efekty systemowe" << endl;

  008c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GE@BGEAJNPD@Brak?5plik?sw?5dla?5efekt?sw?5d?$JPwi?jkow@
  008cc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  008d3	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  008d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  008df	48 8b c8	 mov	 rcx, rax
  008e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 880  : 			EfektyKompletne = false;

  008e8	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?EfektyKompletne@@3_NA, 0 ; EfektyKompletne
$LN32@SprawdŸ_P:

; 881  : 		}
; 882  : }

  008ef	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  008f3	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  008f8	90		 npad	 1
  008f9	48 8d 4d 08	 lea	 rcx, QWORD PTR g³os_nazwa$[rbp]
  008fd	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN1@SprawdŸ_P:
  00902	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00906	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?SprawdŸ_Pliki@@YAXXZ$rtcFrameData
  0090d	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00912	48 8b 8d 68 07
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00919	48 33 cd	 xor	 rcx, rbp
  0091c	e8 00 00 00 00	 call	 __security_check_cookie
  00921	48 8d a5 78 07
	00 00		 lea	 rsp, QWORD PTR [rbp+1912]
  00928	5f		 pop	 rdi
  00929	5d		 pop	 rbp
  0092a	c3		 ret	 0
  0092b	90		 npad	 1
$LN44@SprawdŸ_P:
  0092c	00 00 00 00	 DD	 $LN13@SprawdŸ_P
  00930	00 00 00 00	 DD	 $LN14@SprawdŸ_P
  00934	00 00 00 00	 DD	 $LN15@SprawdŸ_P
  00938	00 00 00 00	 DD	 $LN16@SprawdŸ_P
  0093c	00 00 00 00	 DD	 $LN17@SprawdŸ_P
  00940	00 00 00 00	 DD	 $LN18@SprawdŸ_P
  00944	00 00 00 00	 DD	 $LN19@SprawdŸ_P
  00948	00 00 00 00	 DD	 $LN20@SprawdŸ_P
  0094c	00 00 00 00	 DD	 $LN21@SprawdŸ_P
?SprawdŸ_Pliki@@YAXXZ ENDP				; SprawdŸ_Pliki
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
g³os_nazwa$ = 8
buf$ = 72
i$8 = 132
numers$9 = 176
i$10 = 452
numers$11 = 496
i$12 = 772
numers$13 = 816
$T14 = 1672
$T15 = 1736
$T16 = 1800
$T17 = 1864
tv70 = 1876
tv313 = 1880
tv275 = 1880
tv235 = 1880
tv425 = 1888
tv419 = 1888
tv381 = 1888
__$ArrayPad$ = 1896
?dtor$0@?0??SprawdŸ_Pliki@@YAXXZ@4HA PROC		; `SprawdŸ_Pliki'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR g³os_nazwa$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??SprawdŸ_Pliki@@YAXXZ@4HA ENDP		; `SprawdŸ_Pliki'::`1'::dtor$0
g³os_nazwa$ = 8
buf$ = 72
i$8 = 132
numers$9 = 176
i$10 = 452
numers$11 = 496
i$12 = 772
numers$13 = 816
$T14 = 1672
$T15 = 1736
$T16 = 1800
$T17 = 1864
tv70 = 1876
tv313 = 1880
tv275 = 1880
tv235 = 1880
tv425 = 1888
tv419 = 1888
tv381 = 1888
__$ArrayPad$ = 1896
?dtor$1@?0??SprawdŸ_Pliki@@YAXXZ@4HA PROC		; `SprawdŸ_Pliki'::`1'::dtor$1
  00024	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00029	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002e	55		 push	 rbp
  0002f	57		 push	 rdi
  00030	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00034	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00038	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  0003c	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00041	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
?dtor$1@?0??SprawdŸ_Pliki@@YAXXZ@4HA ENDP		; `SprawdŸ_Pliki'::`1'::dtor$1
g³os_nazwa$ = 8
buf$ = 72
i$8 = 132
numers$9 = 176
i$10 = 452
numers$11 = 496
i$12 = 772
numers$13 = 816
$T14 = 1672
$T15 = 1736
$T16 = 1800
$T17 = 1864
tv70 = 1876
tv313 = 1880
tv275 = 1880
tv235 = 1880
tv425 = 1888
tv419 = 1888
tv381 = 1888
__$ArrayPad$ = 1896
?dtor$2@?0??SprawdŸ_Pliki@@YAXXZ@4HA PROC		; `SprawdŸ_Pliki'::`1'::dtor$2
  00048	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0004d	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00052	55		 push	 rbp
  00053	57		 push	 rdi
  00054	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00058	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  0005c	48 8d 8d b0 00
	00 00		 lea	 rcx, QWORD PTR numers$9[rbp]
  00063	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  00068	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006c	5f		 pop	 rdi
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
?dtor$2@?0??SprawdŸ_Pliki@@YAXXZ@4HA ENDP		; `SprawdŸ_Pliki'::`1'::dtor$2
g³os_nazwa$ = 8
buf$ = 72
i$8 = 132
numers$9 = 176
i$10 = 452
numers$11 = 496
i$12 = 772
numers$13 = 816
$T14 = 1672
$T15 = 1736
$T16 = 1800
$T17 = 1864
tv70 = 1876
tv313 = 1880
tv275 = 1880
tv235 = 1880
tv425 = 1888
tv419 = 1888
tv381 = 1888
__$ArrayPad$ = 1896
?dtor$3@?0??SprawdŸ_Pliki@@YAXXZ@4HA PROC		; `SprawdŸ_Pliki'::`1'::dtor$3
  0006f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00074	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00079	55		 push	 rbp
  0007a	57		 push	 rdi
  0007b	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0007f	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00083	48 8d 8d 88 06
	00 00		 lea	 rcx, QWORD PTR $T14[rbp]
  0008a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0008f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00093	5f		 pop	 rdi
  00094	5d		 pop	 rbp
  00095	c3		 ret	 0
?dtor$3@?0??SprawdŸ_Pliki@@YAXXZ@4HA ENDP		; `SprawdŸ_Pliki'::`1'::dtor$3
g³os_nazwa$ = 8
buf$ = 72
i$8 = 132
numers$9 = 176
i$10 = 452
numers$11 = 496
i$12 = 772
numers$13 = 816
$T14 = 1672
$T15 = 1736
$T16 = 1800
$T17 = 1864
tv70 = 1876
tv313 = 1880
tv275 = 1880
tv235 = 1880
tv425 = 1888
tv419 = 1888
tv381 = 1888
__$ArrayPad$ = 1896
?dtor$4@?0??SprawdŸ_Pliki@@YAXXZ@4HA PROC		; `SprawdŸ_Pliki'::`1'::dtor$4
  00096	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0009b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000a0	55		 push	 rbp
  000a1	57		 push	 rdi
  000a2	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000a6	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  000aa	48 8d 8d f0 01
	00 00		 lea	 rcx, QWORD PTR numers$11[rbp]
  000b1	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  000b6	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000ba	5f		 pop	 rdi
  000bb	5d		 pop	 rbp
  000bc	c3		 ret	 0
?dtor$4@?0??SprawdŸ_Pliki@@YAXXZ@4HA ENDP		; `SprawdŸ_Pliki'::`1'::dtor$4
g³os_nazwa$ = 8
buf$ = 72
i$8 = 132
numers$9 = 176
i$10 = 452
numers$11 = 496
i$12 = 772
numers$13 = 816
$T14 = 1672
$T15 = 1736
$T16 = 1800
$T17 = 1864
tv70 = 1876
tv313 = 1880
tv275 = 1880
tv235 = 1880
tv425 = 1888
tv419 = 1888
tv381 = 1888
__$ArrayPad$ = 1896
?dtor$5@?0??SprawdŸ_Pliki@@YAXXZ@4HA PROC		; `SprawdŸ_Pliki'::`1'::dtor$5
  000bd	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000c2	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000c7	55		 push	 rbp
  000c8	57		 push	 rdi
  000c9	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000cd	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  000d1	48 8d 8d c8 06
	00 00		 lea	 rcx, QWORD PTR $T15[rbp]
  000d8	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000dd	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000e1	5f		 pop	 rdi
  000e2	5d		 pop	 rbp
  000e3	c3		 ret	 0
?dtor$5@?0??SprawdŸ_Pliki@@YAXXZ@4HA ENDP		; `SprawdŸ_Pliki'::`1'::dtor$5
g³os_nazwa$ = 8
buf$ = 72
i$8 = 132
numers$9 = 176
i$10 = 452
numers$11 = 496
i$12 = 772
numers$13 = 816
$T14 = 1672
$T15 = 1736
$T16 = 1800
$T17 = 1864
tv70 = 1876
tv313 = 1880
tv275 = 1880
tv235 = 1880
tv425 = 1888
tv419 = 1888
tv381 = 1888
__$ArrayPad$ = 1896
?dtor$6@?0??SprawdŸ_Pliki@@YAXXZ@4HA PROC		; `SprawdŸ_Pliki'::`1'::dtor$6
  000e4	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000e9	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000ee	55		 push	 rbp
  000ef	57		 push	 rdi
  000f0	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000f4	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  000f8	48 8d 8d 30 03
	00 00		 lea	 rcx, QWORD PTR numers$13[rbp]
  000ff	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  00104	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00108	5f		 pop	 rdi
  00109	5d		 pop	 rbp
  0010a	c3		 ret	 0
?dtor$6@?0??SprawdŸ_Pliki@@YAXXZ@4HA ENDP		; `SprawdŸ_Pliki'::`1'::dtor$6
g³os_nazwa$ = 8
buf$ = 72
i$8 = 132
numers$9 = 176
i$10 = 452
numers$11 = 496
i$12 = 772
numers$13 = 816
$T14 = 1672
$T15 = 1736
$T16 = 1800
$T17 = 1864
tv70 = 1876
tv313 = 1880
tv275 = 1880
tv235 = 1880
tv425 = 1888
tv419 = 1888
tv381 = 1888
__$ArrayPad$ = 1896
?dtor$7@?0??SprawdŸ_Pliki@@YAXXZ@4HA PROC		; `SprawdŸ_Pliki'::`1'::dtor$7
  0010b	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00110	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00115	55		 push	 rbp
  00116	57		 push	 rdi
  00117	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0011b	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  0011f	48 8d 8d 08 07
	00 00		 lea	 rcx, QWORD PTR $T16[rbp]
  00126	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0012b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0012f	5f		 pop	 rdi
  00130	5d		 pop	 rbp
  00131	c3		 ret	 0
?dtor$7@?0??SprawdŸ_Pliki@@YAXXZ@4HA ENDP		; `SprawdŸ_Pliki'::`1'::dtor$7
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
g³os_nazwa$ = 8
buf$ = 72
i$8 = 132
numers$9 = 176
i$10 = 452
numers$11 = 496
i$12 = 772
numers$13 = 816
$T14 = 1672
$T15 = 1736
$T16 = 1800
$T17 = 1864
tv70 = 1876
tv313 = 1880
tv275 = 1880
tv235 = 1880
tv425 = 1888
tv419 = 1888
tv381 = 1888
__$ArrayPad$ = 1896
?dtor$0@?0??SprawdŸ_Pliki@@YAXXZ@4HA PROC		; `SprawdŸ_Pliki'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR g³os_nazwa$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??SprawdŸ_Pliki@@YAXXZ@4HA ENDP		; `SprawdŸ_Pliki'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
g³os_nazwa$ = 8
buf$ = 72
i$8 = 132
numers$9 = 176
i$10 = 452
numers$11 = 496
i$12 = 772
numers$13 = 816
$T14 = 1672
$T15 = 1736
$T16 = 1800
$T17 = 1864
tv70 = 1876
tv313 = 1880
tv275 = 1880
tv235 = 1880
tv425 = 1888
tv419 = 1888
tv381 = 1888
__$ArrayPad$ = 1896
?dtor$1@?0??SprawdŸ_Pliki@@YAXXZ@4HA PROC		; `SprawdŸ_Pliki'::`1'::dtor$1
  00024	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00029	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002e	55		 push	 rbp
  0002f	57		 push	 rdi
  00030	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00034	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00038	48 8d 4d 48	 lea	 rcx, QWORD PTR buf$[rbp]
  0003c	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00041	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
?dtor$1@?0??SprawdŸ_Pliki@@YAXXZ@4HA ENDP		; `SprawdŸ_Pliki'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
g³os_nazwa$ = 8
buf$ = 72
i$8 = 132
numers$9 = 176
i$10 = 452
numers$11 = 496
i$12 = 772
numers$13 = 816
$T14 = 1672
$T15 = 1736
$T16 = 1800
$T17 = 1864
tv70 = 1876
tv313 = 1880
tv275 = 1880
tv235 = 1880
tv425 = 1888
tv419 = 1888
tv381 = 1888
__$ArrayPad$ = 1896
?dtor$2@?0??SprawdŸ_Pliki@@YAXXZ@4HA PROC		; `SprawdŸ_Pliki'::`1'::dtor$2
  00048	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0004d	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00052	55		 push	 rbp
  00053	57		 push	 rdi
  00054	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00058	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  0005c	48 8d 8d b0 00
	00 00		 lea	 rcx, QWORD PTR numers$9[rbp]
  00063	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  00068	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006c	5f		 pop	 rdi
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
?dtor$2@?0??SprawdŸ_Pliki@@YAXXZ@4HA ENDP		; `SprawdŸ_Pliki'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
g³os_nazwa$ = 8
buf$ = 72
i$8 = 132
numers$9 = 176
i$10 = 452
numers$11 = 496
i$12 = 772
numers$13 = 816
$T14 = 1672
$T15 = 1736
$T16 = 1800
$T17 = 1864
tv70 = 1876
tv313 = 1880
tv275 = 1880
tv235 = 1880
tv425 = 1888
tv419 = 1888
tv381 = 1888
__$ArrayPad$ = 1896
?dtor$3@?0??SprawdŸ_Pliki@@YAXXZ@4HA PROC		; `SprawdŸ_Pliki'::`1'::dtor$3
  0006f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00074	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00079	55		 push	 rbp
  0007a	57		 push	 rdi
  0007b	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0007f	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00083	48 8d 8d 88 06
	00 00		 lea	 rcx, QWORD PTR $T14[rbp]
  0008a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0008f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00093	5f		 pop	 rdi
  00094	5d		 pop	 rbp
  00095	c3		 ret	 0
?dtor$3@?0??SprawdŸ_Pliki@@YAXXZ@4HA ENDP		; `SprawdŸ_Pliki'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
g³os_nazwa$ = 8
buf$ = 72
i$8 = 132
numers$9 = 176
i$10 = 452
numers$11 = 496
i$12 = 772
numers$13 = 816
$T14 = 1672
$T15 = 1736
$T16 = 1800
$T17 = 1864
tv70 = 1876
tv313 = 1880
tv275 = 1880
tv235 = 1880
tv425 = 1888
tv419 = 1888
tv381 = 1888
__$ArrayPad$ = 1896
?dtor$4@?0??SprawdŸ_Pliki@@YAXXZ@4HA PROC		; `SprawdŸ_Pliki'::`1'::dtor$4
  00096	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0009b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000a0	55		 push	 rbp
  000a1	57		 push	 rdi
  000a2	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000a6	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  000aa	48 8d 8d f0 01
	00 00		 lea	 rcx, QWORD PTR numers$11[rbp]
  000b1	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  000b6	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000ba	5f		 pop	 rdi
  000bb	5d		 pop	 rbp
  000bc	c3		 ret	 0
?dtor$4@?0??SprawdŸ_Pliki@@YAXXZ@4HA ENDP		; `SprawdŸ_Pliki'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
g³os_nazwa$ = 8
buf$ = 72
i$8 = 132
numers$9 = 176
i$10 = 452
numers$11 = 496
i$12 = 772
numers$13 = 816
$T14 = 1672
$T15 = 1736
$T16 = 1800
$T17 = 1864
tv70 = 1876
tv313 = 1880
tv275 = 1880
tv235 = 1880
tv425 = 1888
tv419 = 1888
tv381 = 1888
__$ArrayPad$ = 1896
?dtor$5@?0??SprawdŸ_Pliki@@YAXXZ@4HA PROC		; `SprawdŸ_Pliki'::`1'::dtor$5
  000bd	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000c2	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000c7	55		 push	 rbp
  000c8	57		 push	 rdi
  000c9	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000cd	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  000d1	48 8d 8d c8 06
	00 00		 lea	 rcx, QWORD PTR $T15[rbp]
  000d8	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000dd	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000e1	5f		 pop	 rdi
  000e2	5d		 pop	 rbp
  000e3	c3		 ret	 0
?dtor$5@?0??SprawdŸ_Pliki@@YAXXZ@4HA ENDP		; `SprawdŸ_Pliki'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
g³os_nazwa$ = 8
buf$ = 72
i$8 = 132
numers$9 = 176
i$10 = 452
numers$11 = 496
i$12 = 772
numers$13 = 816
$T14 = 1672
$T15 = 1736
$T16 = 1800
$T17 = 1864
tv70 = 1876
tv313 = 1880
tv275 = 1880
tv235 = 1880
tv425 = 1888
tv419 = 1888
tv381 = 1888
__$ArrayPad$ = 1896
?dtor$6@?0??SprawdŸ_Pliki@@YAXXZ@4HA PROC		; `SprawdŸ_Pliki'::`1'::dtor$6
  000e4	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000e9	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000ee	55		 push	 rbp
  000ef	57		 push	 rdi
  000f0	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000f4	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  000f8	48 8d 8d 30 03
	00 00		 lea	 rcx, QWORD PTR numers$13[rbp]
  000ff	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  00104	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00108	5f		 pop	 rdi
  00109	5d		 pop	 rbp
  0010a	c3		 ret	 0
?dtor$6@?0??SprawdŸ_Pliki@@YAXXZ@4HA ENDP		; `SprawdŸ_Pliki'::`1'::dtor$6
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
g³os_nazwa$ = 8
buf$ = 72
i$8 = 132
numers$9 = 176
i$10 = 452
numers$11 = 496
i$12 = 772
numers$13 = 816
$T14 = 1672
$T15 = 1736
$T16 = 1800
$T17 = 1864
tv70 = 1876
tv313 = 1880
tv275 = 1880
tv235 = 1880
tv425 = 1888
tv419 = 1888
tv381 = 1888
__$ArrayPad$ = 1896
?dtor$7@?0??SprawdŸ_Pliki@@YAXXZ@4HA PROC		; `SprawdŸ_Pliki'::`1'::dtor$7
  0010b	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00110	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00115	55		 push	 rbp
  00116	57		 push	 rdi
  00117	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0011b	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  0011f	48 8d 8d 08 07
	00 00		 lea	 rcx, QWORD PTR $T16[rbp]
  00126	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0012b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0012f	5f		 pop	 rdi
  00130	5d		 pop	 rbp
  00131	c3		 ret	 0
?dtor$7@?0??SprawdŸ_Pliki@@YAXXZ@4HA ENDP		; `SprawdŸ_Pliki'::`1'::dtor$7
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
buf$9 = 8
bufor2$10 = 72
pocz¹tek$11 = 132
buf2$12 = 168
pocz¹tek$13 = 228
buf2$14 = 264
koniec$15 = 324
pocz¹tek$16 = 356
buf2$17 = 392
koniec$18 = 452
pocz¹tek$19 = 484
koniec$20 = 516
buf2$21 = 552
$T22 = 1000
tv514 = 1012
tv495 = 1012
tv425 = 1012
tv407 = 1012
tv362 = 1012
tv280 = 1012
tv224 = 1012
tv197 = 1012
tv656 = 1016
tv637 = 1016
tv618 = 1016
tv596 = 1016
tv385 = 1016
tv258 = 1016
tv242 = 1016
tv390 = 1024
tv263 = 1024
tv247 = 1024
__$ArrayPad$ = 1032
log_ogólny$ = 1072
log$ = 1080
co_kontynuowaæ$ = 1088
iloœæ_pieniêdzy$ = 1096
kwota_zak³adu$ = 1104
wylosowana_liczba$ = 1112
typ_zak³adu$ = 1120
?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; Wczytaj_z_pliku, COMDAT

; 561  : {

$LN71:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 38 04
	00 00		 sub	 rsp, 1080		; 00000438H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 0e 01 00 00	 mov	 ecx, 270		; 0000010eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1112]
  00039	48 c7 85 e8 03
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T22[rbp], -2
  00044	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0004b	48 33 c5	 xor	 rax, rbp
  0004e	48 89 85 08 04
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 562  : 	if (!_access("log_aktualny.txt", 0)) // Sprawdzenie dostêpu do pliku (je¿eli takowy istnieje, musi istnieæ plik)

  00055	33 d2		 xor	 edx, edx
  00057	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@KLDNCCFE@log_aktualny?4txt?$AA@
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__access
  00064	85 c0		 test	 eax, eax
  00066	0f 85 66 0c 00
	00		 jne	 $LN30@Wczytaj_z_

; 563  : 	{
; 564  : 		log.open("log_aktualny.txt", ios::in); //Otworzenie pliku w trybie odczytu z pliku

  0006c	41 b9 40 00 00
	00		 mov	 r9d, 64			; 00000040H
  00072	41 b8 01 00 00
	00		 mov	 r8d, 1
  00078	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@KLDNCCFE@log_aktualny?4txt?$AA@
  0007f	48 8b 8d 38 04
	00 00		 mov	 rcx, QWORD PTR log$[rbp]
  00086	e8 00 00 00 00	 call	 ?open@?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAXPEBDHH@Z ; std::basic_fstream<char,std::char_traits<char> >::open

; 565  : 		string buf, bufor2; //Uworzenie 2 buforów na tekst, pierwszy na ostatni¹ linie tekst, drugi na przedostani¹ nie pust¹ linie tekstu lub ostani¹ w przypadku gdy ostania jest pusta

  0008b	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  0008f	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00094	90		 npad	 1
  00095	48 8d 4d 48	 lea	 rcx, QWORD PTR bufor2$10[rbp]
  00099	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0009e	90		 npad	 1

; 566  : 		getline(log, buf); //Odczyt ca³ej lini z pliku

  0009f	48 8d 55 08	 lea	 rdx, QWORD PTR buf$9[rbp]
  000a3	48 8b 8d 38 04
	00 00		 mov	 rcx, QWORD PTR log$[rbp]
  000aa	e8 00 00 00 00	 call	 ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
$LN2@Wczytaj_z_:

; 567  : 		while (!log.eof()) //Pêtla dzia³j¹ca do czasu kiedy kursor odczytu z pliku nie bêdzie na koñcu pliku

  000af	48 8b 85 38 04
	00 00		 mov	 rax, QWORD PTR log$[rbp]
  000b6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000b9	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000bd	48 8b 8d 38 04
	00 00		 mov	 rcx, QWORD PTR log$[rbp]
  000c4	48 03 c8	 add	 rcx, rax
  000c7	48 8b c1	 mov	 rax, rcx
  000ca	48 8b c8	 mov	 rcx, rax
  000cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eof@ios_base@std@@QEBA_NXZ
  000d3	0f b6 c0	 movzx	 eax, al
  000d6	85 c0		 test	 eax, eax
  000d8	75 36		 jne	 SHORT $LN3@Wczytaj_z_

; 568  : 		{
; 569  : 			if (buf != "") bufor2 = buf; //Sprawdzenie czy odczytana linia nie jest pusta, je¿eli nie jest pusta to skopiowanie do drugiego bufora celem posiadania dwóch ostatnich linijek tekstu bêd¹cego w pliku

  000da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  000e1	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  000e5	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  000ea	0f b6 c0	 movzx	 eax, al
  000ed	85 c0		 test	 eax, eax
  000ef	74 0d		 je	 SHORT $LN32@Wczytaj_z_
  000f1	48 8d 55 08	 lea	 rdx, QWORD PTR buf$9[rbp]
  000f5	48 8d 4d 48	 lea	 rcx, QWORD PTR bufor2$10[rbp]
  000f9	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
$LN32@Wczytaj_z_:

; 570  : 			getline(log, buf); //Odczyt ca³ej lini z pliku

  000fe	48 8d 55 08	 lea	 rdx, QWORD PTR buf$9[rbp]
  00102	48 8b 8d 38 04
	00 00		 mov	 rcx, QWORD PTR log$[rbp]
  00109	e8 00 00 00 00	 call	 ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >

; 571  : 		}

  0010e	eb 9f		 jmp	 SHORT $LN2@Wczytaj_z_
$LN3@Wczytaj_z_:

; 572  : 		if (buf == "") buf = bufor2; //Sprawdzenie czy linia w buforze jest pusta, je¿eli jest pusta to zastopienie jej poprzedni¹ lini¹ tekstu z pliku

  00110	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00117	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  0011b	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  00120	0f b6 c0	 movzx	 eax, al
  00123	85 c0		 test	 eax, eax
  00125	74 0d		 je	 SHORT $LN33@Wczytaj_z_
  00127	48 8d 55 48	 lea	 rdx, QWORD PTR bufor2$10[rbp]
  0012b	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  0012f	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
$LN33@Wczytaj_z_:

; 573  : 		if (buf.find("Posiadasz") != string::npos) //Sprawdzenie czy w ostatniej niepustej lini znajduj¹ siê s³owa œwiadcz¹ce o skoñczeniu rundy

  00134	45 33 c0	 xor	 r8d, r8d
  00137	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09LFKNBKJA@Posiadasz?$AA@
  0013e	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  00142	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00147	48 3b 05 00 00
	00 00		 cmp	 rax, QWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2_KB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  0014e	0f 84 df 00 00
	00		 je	 $LN34@Wczytaj_z_

; 574  : 		{
; 575  : 			co_kontynuowaæ = 'n'; //Je¿eli siê znajduj¹ to przypisanie znaku rozpoczêcia rundy od pocz¹tku

  00154	48 8b 85 40 04
	00 00		 mov	 rax, QWORD PTR co_kontynuowaæ$[rbp]
  0015b	c6 00 6e	 mov	 BYTE PTR [rax], 110	; 0000006eH

; 576  : 			auto pocz¹tek = (unsigned short)buf.size(); //Utworzenie i przypisanie do zmiennej wskazuj¹cej pocz¹tek tekst pozycji ostatniego znaku tekstu o kwocie pieniêdzy któr¹ posiada jeszcze gracz, typ zmiennej auto wsazuje, ¿e kompilator sam wybierze typ zmiennej

  0015e	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  00162	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00167	66 89 85 84 00
	00 00		 mov	 WORD PTR pocz¹tek$11[rbp], ax
$LN4@Wczytaj_z_:

; 577  : 			while (buf[pocz¹tek] != ' ' && pocz¹tek > 0) --pocz¹tek; //Poszukiwanie od koñca spacji po której jest kwota pieniêdzy któr¹ posiada jeszcze gracz

  0016e	0f b7 85 84 00
	00 00		 movzx	 eax, WORD PTR pocz¹tek$11[rbp]
  00175	8b d0		 mov	 edx, eax
  00177	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  0017b	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00180	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00183	83 f8 20	 cmp	 eax, 32			; 00000020H
  00186	74 1e		 je	 SHORT $LN5@Wczytaj_z_
  00188	0f b7 85 84 00
	00 00		 movzx	 eax, WORD PTR pocz¹tek$11[rbp]
  0018f	85 c0		 test	 eax, eax
  00191	7e 13		 jle	 SHORT $LN5@Wczytaj_z_
  00193	0f b7 85 84 00
	00 00		 movzx	 eax, WORD PTR pocz¹tek$11[rbp]
  0019a	66 ff c8	 dec	 ax
  0019d	66 89 85 84 00
	00 00		 mov	 WORD PTR pocz¹tek$11[rbp], ax
  001a4	eb c8		 jmp	 SHORT $LN4@Wczytaj_z_
$LN5@Wczytaj_z_:

; 578  : 			++pocz¹tek; //Kwota jest na nastêpnym znaku wiêc przesuniêcie o jeden znak do przodu

  001a6	0f b7 85 84 00
	00 00		 movzx	 eax, WORD PTR pocz¹tek$11[rbp]
  001ad	66 ff c0	 inc	 ax
  001b0	66 89 85 84 00
	00 00		 mov	 WORD PTR pocz¹tek$11[rbp], ax

; 579  : 			string buf2 = buf; //Utworzenie bufora pomocniczego do ciêcia tekstu i w³o¿enie do niego wczeœniej odczytanego tekstu

  001b7	48 8d 55 08	 lea	 rdx, QWORD PTR buf$9[rbp]
  001bb	48 8d 8d a8 00
	00 00		 lea	 rcx, QWORD PTR buf2$12[rbp]
  001c2	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  001c7	90		 npad	 1

; 580  : 			buf2.erase(0, pocz¹tek); //Usuniêcie z bufora pomocniczego tekstu z lewej strony, aby tekst rozpoczyna³ siê liczb¹

  001c8	0f b7 85 84 00
	00 00		 movzx	 eax, WORD PTR pocz¹tek$11[rbp]
  001cf	44 8b c0	 mov	 r8d, eax
  001d2	33 d2		 xor	 edx, edx
  001d4	48 8d 8d a8 00
	00 00		 lea	 rcx, QWORD PTR buf2$12[rbp]
  001db	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 581  : 			buf2.erase(buf2.size() - 1, 1); //Usuniêcie z bufora pomocniczego znaku dolara z prawej strony

  001e0	48 8d 8d a8 00
	00 00		 lea	 rcx, QWORD PTR buf2$12[rbp]
  001e7	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  001ec	48 ff c8	 dec	 rax
  001ef	41 b8 01 00 00
	00		 mov	 r8d, 1
  001f5	48 8b d0	 mov	 rdx, rax
  001f8	48 8d 8d a8 00
	00 00		 lea	 rcx, QWORD PTR buf2$12[rbp]
  001ff	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 582  : 			iloœæ_pieniêdzy = atoi(buf2.c_str()); //Zamiana liczby w tekœcie na wartoœæ w zmiennnej liczbowej

  00204	48 8d 8d a8 00
	00 00		 lea	 rcx, QWORD PTR buf2$12[rbp]
  0020b	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00210	48 8b c8	 mov	 rcx, rax
  00213	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00219	48 8b 8d 48 04
	00 00		 mov	 rcx, QWORD PTR iloœæ_pieniêdzy$[rbp]
  00220	89 01		 mov	 DWORD PTR [rcx], eax

; 583  : 		}

  00222	48 8d 8d a8 00
	00 00		 lea	 rcx, QWORD PTR buf2$12[rbp]
  00229	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0022e	e9 5b 0a 00 00	 jmp	 $LN35@Wczytaj_z_
$LN34@Wczytaj_z_:

; 584  : 		else if (buf.find("Wylosowano") != string::npos) //Sprawdzenie czy w ostatniej niepustej lini znajduj¹ siê s³owa œwiadcz¹ce o wylosowaniu liczby

  00233	45 33 c0	 xor	 r8d, r8d
  00236	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@DAFLKCID@Wylosowano?$AA@
  0023d	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  00241	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00246	48 3b 05 00 00
	00 00		 cmp	 rax, QWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2_KB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  0024d	0f 84 4b 04 00
	00		 je	 $LN36@Wczytaj_z_

; 585  : 		{
; 586  : 			co_kontynuowaæ = 'w'; //Je¿eli siê znajduj¹ to przypisanie znaku rozpoczêcia rundy od sprawdzenia wygranej

  00253	48 8b 85 40 04
	00 00		 mov	 rax, QWORD PTR co_kontynuowaæ$[rbp]
  0025a	c6 00 77	 mov	 BYTE PTR [rax], 119	; 00000077H

; 587  : 			unsigned short pocz¹tek = 0; //Utworzenie i przypisanie zera do zmiennej wskazuj¹cej pocz¹tek tekst o wylosowanej liczbie

  0025d	33 c0		 xor	 eax, eax
  0025f	66 89 85 e4 00
	00 00		 mov	 WORD PTR pocz¹tek$13[rbp], ax
$LN6@Wczytaj_z_:

; 588  : 			while (buf[pocz¹tek] != 'y' && pocz¹tek < (int)buf.size()) ++pocz¹tek; //Poszukiwanie od pocz¹tku litery y która wystêpuje w wyrazie po którym jest wylosowana liczba

  00266	0f b7 85 e4 00
	00 00		 movzx	 eax, WORD PTR pocz¹tek$13[rbp]
  0026d	8b d0		 mov	 edx, eax
  0026f	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  00273	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00278	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0027b	83 f8 79	 cmp	 eax, 121		; 00000079H
  0027e	74 33		 je	 SHORT $LN7@Wczytaj_z_
  00280	0f b7 85 e4 00
	00 00		 movzx	 eax, WORD PTR pocz¹tek$13[rbp]
  00287	89 85 f4 03 00
	00		 mov	 DWORD PTR tv197[rbp], eax
  0028d	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  00291	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00296	8b 8d f4 03 00
	00		 mov	 ecx, DWORD PTR tv197[rbp]
  0029c	3b c8		 cmp	 ecx, eax
  0029e	7d 13		 jge	 SHORT $LN7@Wczytaj_z_
  002a0	0f b7 85 e4 00
	00 00		 movzx	 eax, WORD PTR pocz¹tek$13[rbp]
  002a7	66 ff c0	 inc	 ax
  002aa	66 89 85 e4 00
	00 00		 mov	 WORD PTR pocz¹tek$13[rbp], ax
  002b1	eb b3		 jmp	 SHORT $LN6@Wczytaj_z_
$LN7@Wczytaj_z_:

; 589  : 			pocz¹tek += 10; //Przesuniêcie o +10 pozycji pocz¹tku tekstu o po której jest wylosowana liczba

  002b3	0f b7 85 e4 00
	00 00		 movzx	 eax, WORD PTR pocz¹tek$13[rbp]
  002ba	83 c0 0a	 add	 eax, 10
  002bd	66 89 85 e4 00
	00 00		 mov	 WORD PTR pocz¹tek$13[rbp], ax

; 590  : 			string buf2 = buf; //Utworzenie bufora pomocniczego do ciêcia tekstu i w³o¿enie do niego wczeœniej odczytanego tekstu

  002c4	48 8d 55 08	 lea	 rdx, QWORD PTR buf$9[rbp]
  002c8	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR buf2$14[rbp]
  002cf	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  002d4	90		 npad	 1

; 591  : 			buf2.erase(0, pocz¹tek); //Usuniêcie z bufora pomocniczego tekstu z lewej strony, aby tekst rozpoczyna³ siê liczb¹

  002d5	0f b7 85 e4 00
	00 00		 movzx	 eax, WORD PTR pocz¹tek$13[rbp]
  002dc	44 8b c0	 mov	 r8d, eax
  002df	33 d2		 xor	 edx, edx
  002e1	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR buf2$14[rbp]
  002e8	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 592  : 			wylosowana_liczba = atoi(buf2.c_str()); //Zamiana liczby w tekœcie na wartoœæ w zmiennnej liczbowej

  002ed	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR buf2$14[rbp]
  002f4	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  002f9	48 8b c8	 mov	 rcx, rax
  002fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00302	48 8b 8d 58 04
	00 00		 mov	 rcx, QWORD PTR wylosowana_liczba$[rbp]
  00309	89 01		 mov	 DWORD PTR [rcx], eax

; 593  : 			pocz¹tek = 0; //Przypisanie zera do zmiennej wskazuj¹cej pocz¹tek tekst o typie zak³adu

  0030b	33 c0		 xor	 eax, eax
  0030d	66 89 85 e4 00
	00 00		 mov	 WORD PTR pocz¹tek$13[rbp], ax
$LN8@Wczytaj_z_:

; 594  : 			while (buf[pocz¹tek] != 'd' && pocz¹tek < (int)buf.size()) ++pocz¹tek;

  00314	0f b7 85 e4 00
	00 00		 movzx	 eax, WORD PTR pocz¹tek$13[rbp]
  0031b	8b d0		 mov	 edx, eax
  0031d	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  00321	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00326	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00329	83 f8 64	 cmp	 eax, 100		; 00000064H
  0032c	74 33		 je	 SHORT $LN9@Wczytaj_z_
  0032e	0f b7 85 e4 00
	00 00		 movzx	 eax, WORD PTR pocz¹tek$13[rbp]
  00335	89 85 f4 03 00
	00		 mov	 DWORD PTR tv224[rbp], eax
  0033b	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  0033f	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00344	8b 8d f4 03 00
	00		 mov	 ecx, DWORD PTR tv224[rbp]
  0034a	3b c8		 cmp	 ecx, eax
  0034c	7d 13		 jge	 SHORT $LN9@Wczytaj_z_
  0034e	0f b7 85 e4 00
	00 00		 movzx	 eax, WORD PTR pocz¹tek$13[rbp]
  00355	66 ff c0	 inc	 ax
  00358	66 89 85 e4 00
	00 00		 mov	 WORD PTR pocz¹tek$13[rbp], ax
  0035f	eb b3		 jmp	 SHORT $LN8@Wczytaj_z_
$LN9@Wczytaj_z_:

; 595  : 			pocz¹tek += 2;  //Przesuniêcie o +2 pozycji pocz¹tku tekstu o po której jest typ zak³adu

  00361	0f b7 85 e4 00
	00 00		 movzx	 eax, WORD PTR pocz¹tek$13[rbp]
  00368	83 c0 02	 add	 eax, 2
  0036b	66 89 85 e4 00
	00 00		 mov	 WORD PTR pocz¹tek$13[rbp], ax

; 596  : 			buf2 = buf; //Utworzenie bufora pomocniczego do ciêcia tekstu i w³o¿enie do niego wczeœniej odczytanego tekstu

  00372	48 8d 55 08	 lea	 rdx, QWORD PTR buf$9[rbp]
  00376	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR buf2$14[rbp]
  0037d	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 597  : 			buf2.erase(0, pocz¹tek); //Usuniêcie z bufora pomocniczego tekstu z lewej strony, aby tekst rozpoczyna³ siê liczb¹

  00382	0f b7 85 e4 00
	00 00		 movzx	 eax, WORD PTR pocz¹tek$13[rbp]
  00389	44 8b c0	 mov	 r8d, eax
  0038c	33 d2		 xor	 edx, edx
  0038e	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR buf2$14[rbp]
  00395	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 598  : 			buf2.erase(buf2.find(" Wylosowano"), buf2.size() - buf2.find(" Wylosowano"));

  0039a	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR buf2$14[rbp]
  003a1	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  003a6	48 89 85 f8 03
	00 00		 mov	 QWORD PTR tv242[rbp], rax
  003ad	45 33 c0	 xor	 r8d, r8d
  003b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@DIDIAOPI@?5Wylosowano?$AA@
  003b7	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR buf2$14[rbp]
  003be	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  003c3	48 8b 8d f8 03
	00 00		 mov	 rcx, QWORD PTR tv242[rbp]
  003ca	48 2b c8	 sub	 rcx, rax
  003cd	48 8b c1	 mov	 rax, rcx
  003d0	48 89 85 00 04
	00 00		 mov	 QWORD PTR tv247[rbp], rax
  003d7	45 33 c0	 xor	 r8d, r8d
  003da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@DIDIAOPI@?5Wylosowano?$AA@
  003e1	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR buf2$14[rbp]
  003e8	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  003ed	48 8b 8d 00 04
	00 00		 mov	 rcx, QWORD PTR tv247[rbp]
  003f4	4c 8b c1	 mov	 r8, rcx
  003f7	48 8b d0	 mov	 rdx, rax
  003fa	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR buf2$14[rbp]
  00401	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 599  : 			typ_zak³adu = buf2; //Przypisanie do zmiennej przechowywuj¹cej typ zak³adu wczytanego typu zak³adu

  00406	48 8d 95 08 01
	00 00		 lea	 rdx, QWORD PTR buf2$14[rbp]
  0040d	48 8b 8d 60 04
	00 00		 mov	 rcx, QWORD PTR typ_zak³adu$[rbp]
  00414	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 600  : 			buf.erase(buf.find("Obstawiono zaklad"), buf.size() - buf.find("Obstawiono zaklad"));

  00419	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  0041d	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00422	48 89 85 f8 03
	00 00		 mov	 QWORD PTR tv258[rbp], rax
  00429	45 33 c0	 xor	 r8d, r8d
  0042c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@EAGHPBJK@Obstawiono?5zaklad?$AA@
  00433	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  00437	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  0043c	48 8b 8d f8 03
	00 00		 mov	 rcx, QWORD PTR tv258[rbp]
  00443	48 2b c8	 sub	 rcx, rax
  00446	48 8b c1	 mov	 rax, rcx
  00449	48 89 85 00 04
	00 00		 mov	 QWORD PTR tv263[rbp], rax
  00450	45 33 c0	 xor	 r8d, r8d
  00453	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@EAGHPBJK@Obstawiono?5zaklad?$AA@
  0045a	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  0045e	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00463	48 8b 8d 00 04
	00 00		 mov	 rcx, QWORD PTR tv263[rbp]
  0046a	4c 8b c1	 mov	 r8, rcx
  0046d	48 8b d0	 mov	 rdx, rax
  00470	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  00474	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 601  : 			pocz¹tek = 0; //Przypisanie zera do zmiennej wskazuj¹cej pocz¹tek tekst o kwocie zak³adu

  00479	33 c0		 xor	 eax, eax
  0047b	66 89 85 e4 00
	00 00		 mov	 WORD PTR pocz¹tek$13[rbp], ax

; 602  : 			if (buf[12] == 'a') { pocz¹tek = 14; } //Sprawdzenie czy na pozycji 12 teksty znajduje siê litera a œwiadcz¹ca o wyrazie po którym jest kwota zak³adu, je¿eli tak to pozycja pocz¹tkowa tekstu wynosi 14

  00482	ba 0c 00 00 00	 mov	 edx, 12
  00487	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  0048b	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00490	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00493	83 f8 61	 cmp	 eax, 97			; 00000061H
  00496	75 0e		 jne	 SHORT $LN10@Wczytaj_z_
  00498	b8 0e 00 00 00	 mov	 eax, 14
  0049d	66 89 85 e4 00
	00 00		 mov	 WORD PTR pocz¹tek$13[rbp], ax

; 603  : 			else //Je¿eli nie to

  004a4	eb 61		 jmp	 SHORT $LN39@Wczytaj_z_
$LN10@Wczytaj_z_:

; 604  : 			{
; 605  : 				while (buf[pocz¹tek] != 'z' && pocz¹tek < (unsigned short)buf.size()) ++pocz¹tek; //Poszukanie litery z œwiadcz¹cej o wyrazie po którym jest kwota zak³adu

  004a6	0f b7 85 e4 00
	00 00		 movzx	 eax, WORD PTR pocz¹tek$13[rbp]
  004ad	8b d0		 mov	 edx, eax
  004af	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  004b3	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  004b8	0f be 00	 movsx	 eax, BYTE PTR [rax]
  004bb	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  004be	74 36		 je	 SHORT $LN11@Wczytaj_z_
  004c0	0f b7 85 e4 00
	00 00		 movzx	 eax, WORD PTR pocz¹tek$13[rbp]
  004c7	89 85 f4 03 00
	00		 mov	 DWORD PTR tv280[rbp], eax
  004cd	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  004d1	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  004d6	0f b7 c0	 movzx	 eax, ax
  004d9	8b 8d f4 03 00
	00		 mov	 ecx, DWORD PTR tv280[rbp]
  004df	3b c8		 cmp	 ecx, eax
  004e1	7d 13		 jge	 SHORT $LN11@Wczytaj_z_
  004e3	0f b7 85 e4 00
	00 00		 movzx	 eax, WORD PTR pocz¹tek$13[rbp]
  004ea	66 ff c0	 inc	 ax
  004ed	66 89 85 e4 00
	00 00		 mov	 WORD PTR pocz¹tek$13[rbp], ax
  004f4	eb b0		 jmp	 SHORT $LN10@Wczytaj_z_
$LN11@Wczytaj_z_:

; 606  : 				pocz¹tek += 3; //Po znalezienu z przesuwamy pozycje +3

  004f6	0f b7 85 e4 00
	00 00		 movzx	 eax, WORD PTR pocz¹tek$13[rbp]
  004fd	83 c0 03	 add	 eax, 3
  00500	66 89 85 e4 00
	00 00		 mov	 WORD PTR pocz¹tek$13[rbp], ax
$LN39@Wczytaj_z_:

; 607  : 			}
; 608  : 			int koniec = pocz¹tek + 1; //Przypisanie do zmiennej pozycji pocz¹tku +1 wskazuj¹cej koniec tekst o kwocie zak³adu

  00507	0f b7 85 e4 00
	00 00		 movzx	 eax, WORD PTR pocz¹tek$13[rbp]
  0050e	ff c0		 inc	 eax
  00510	89 85 44 01 00
	00		 mov	 DWORD PTR koniec$15[rbp], eax
$LN12@Wczytaj_z_:

; 609  : 			while (buf[koniec] != '$' && koniec < (unsigned short)buf.size()) ++koniec; //Poszukujemy znaku dolara przed którym jest kwota zak³adu

  00516	48 63 85 44 01
	00 00		 movsxd	 rax, DWORD PTR koniec$15[rbp]
  0051d	48 8b d0	 mov	 rdx, rax
  00520	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  00524	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00529	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0052c	83 f8 24	 cmp	 eax, 36			; 00000024H
  0052f	74 24		 je	 SHORT $LN13@Wczytaj_z_
  00531	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  00535	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  0053a	0f b7 c0	 movzx	 eax, ax
  0053d	39 85 44 01 00
	00		 cmp	 DWORD PTR koniec$15[rbp], eax
  00543	7d 10		 jge	 SHORT $LN13@Wczytaj_z_
  00545	8b 85 44 01 00
	00		 mov	 eax, DWORD PTR koniec$15[rbp]
  0054b	ff c0		 inc	 eax
  0054d	89 85 44 01 00
	00		 mov	 DWORD PTR koniec$15[rbp], eax
  00553	eb c1		 jmp	 SHORT $LN12@Wczytaj_z_
$LN13@Wczytaj_z_:

; 610  : 			buf2 = buf; //Utworzenie bufora pomocniczego do ciêcia tekstu i w³o¿enie do niego wczeœniej odczytanego tekstu

  00555	48 8d 55 08	 lea	 rdx, QWORD PTR buf$9[rbp]
  00559	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR buf2$14[rbp]
  00560	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 611  : 			buf2.erase(koniec, buf2.size() - koniec); //Usuniêcie z bufora pomocniczego tekstu z prawej strony, aby tekst koñczy³ siê liczb¹

  00565	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR buf2$14[rbp]
  0056c	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00571	48 63 8d 44 01
	00 00		 movsxd	 rcx, DWORD PTR koniec$15[rbp]
  00578	48 2b c1	 sub	 rax, rcx
  0057b	48 63 8d 44 01
	00 00		 movsxd	 rcx, DWORD PTR koniec$15[rbp]
  00582	4c 8b c0	 mov	 r8, rax
  00585	48 8b d1	 mov	 rdx, rcx
  00588	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR buf2$14[rbp]
  0058f	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 612  : 			buf2.erase(0, pocz¹tek); //Usuniêcie z bufora pomocniczego tekstu z lewej strony, aby tekst rozpoczyna³ siê liczb¹

  00594	0f b7 85 e4 00
	00 00		 movzx	 eax, WORD PTR pocz¹tek$13[rbp]
  0059b	44 8b c0	 mov	 r8d, eax
  0059e	33 d2		 xor	 edx, edx
  005a0	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR buf2$14[rbp]
  005a7	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 613  : 			kwota_zak³adu = atoi(buf2.c_str()); //Zamiana liczby w tekœcie na wartoœæ w zmiennnej liczbowej

  005ac	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR buf2$14[rbp]
  005b3	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  005b8	48 8b c8	 mov	 rcx, rax
  005bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  005c1	48 8b 8d 50 04
	00 00		 mov	 rcx, QWORD PTR kwota_zak³adu$[rbp]
  005c8	89 01		 mov	 DWORD PTR [rcx], eax

; 614  : 			pocz¹tek = (unsigned short)bufor2.size(); //Utworzenie i przypisanie do zmiennej wskazuj¹cej pocz¹tek tekst o kwocie pieniêdzy któr¹ posiada jeszcze gracz

  005ca	48 8d 4d 48	 lea	 rcx, QWORD PTR bufor2$10[rbp]
  005ce	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  005d3	66 89 85 e4 00
	00 00		 mov	 WORD PTR pocz¹tek$13[rbp], ax
$LN14@Wczytaj_z_:

; 615  : 			while (bufor2[pocz¹tek] != ' ' && pocz¹tek > 0) --pocz¹tek; //Poszukiwanie od koñca spacji po której jest kwota pieniêdzy któr¹ posiada jeszcze gracz

  005da	0f b7 85 e4 00
	00 00		 movzx	 eax, WORD PTR pocz¹tek$13[rbp]
  005e1	8b d0		 mov	 edx, eax
  005e3	48 8d 4d 48	 lea	 rcx, QWORD PTR bufor2$10[rbp]
  005e7	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  005ec	0f be 00	 movsx	 eax, BYTE PTR [rax]
  005ef	83 f8 20	 cmp	 eax, 32			; 00000020H
  005f2	74 1e		 je	 SHORT $LN15@Wczytaj_z_
  005f4	0f b7 85 e4 00
	00 00		 movzx	 eax, WORD PTR pocz¹tek$13[rbp]
  005fb	85 c0		 test	 eax, eax
  005fd	7e 13		 jle	 SHORT $LN15@Wczytaj_z_
  005ff	0f b7 85 e4 00
	00 00		 movzx	 eax, WORD PTR pocz¹tek$13[rbp]
  00606	66 ff c8	 dec	 ax
  00609	66 89 85 e4 00
	00 00		 mov	 WORD PTR pocz¹tek$13[rbp], ax
  00610	eb c8		 jmp	 SHORT $LN14@Wczytaj_z_
$LN15@Wczytaj_z_:

; 616  : 			++pocz¹tek; //Kwota jest na nastêpnym znaku wiêc przesuniêcie o jeden znak do przodu

  00612	0f b7 85 e4 00
	00 00		 movzx	 eax, WORD PTR pocz¹tek$13[rbp]
  00619	66 ff c0	 inc	 ax
  0061c	66 89 85 e4 00
	00 00		 mov	 WORD PTR pocz¹tek$13[rbp], ax

; 617  : 			buf2 = bufor2; //Przypisanie do bufora pomocniczego do ciêcia tekstu i w³o¿enie do niego linie o jedn¹ wczeœniej wczeœniej odczytanego tekstu

  00623	48 8d 55 48	 lea	 rdx, QWORD PTR bufor2$10[rbp]
  00627	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR buf2$14[rbp]
  0062e	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 618  : 			buf2.erase(0, pocz¹tek); //Usuniêcie z bufora pomocniczego tekstu z lewej strony, aby tekst rozpoczyna³ siê liczb¹

  00633	0f b7 85 e4 00
	00 00		 movzx	 eax, WORD PTR pocz¹tek$13[rbp]
  0063a	44 8b c0	 mov	 r8d, eax
  0063d	33 d2		 xor	 edx, edx
  0063f	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR buf2$14[rbp]
  00646	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 619  : 			buf2.erase(buf2.size() - 1, 1); //Usuniêcie z bufora pomocniczego znaku dolara z prawej strony

  0064b	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR buf2$14[rbp]
  00652	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00657	48 ff c8	 dec	 rax
  0065a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00660	48 8b d0	 mov	 rdx, rax
  00663	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR buf2$14[rbp]
  0066a	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 620  : 			iloœæ_pieniêdzy = atoi(buf2.c_str()); //Zamiana liczby w tekœcie na wartoœæ w zmiennnej liczbowej

  0066f	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR buf2$14[rbp]
  00676	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0067b	48 8b c8	 mov	 rcx, rax
  0067e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00684	48 8b 8d 48 04
	00 00		 mov	 rcx, QWORD PTR iloœæ_pieniêdzy$[rbp]
  0068b	89 01		 mov	 DWORD PTR [rcx], eax

; 621  : 		}

  0068d	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR buf2$14[rbp]
  00694	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00699	e9 f0 05 00 00	 jmp	 $LN35@Wczytaj_z_
$LN36@Wczytaj_z_:

; 622  : 		else if (buf.find("Obstawiono zaklad") != string::npos) //Sprawdzenie czy w ostatniej niepustej lini znajduj¹ siê s³owa œwiadcz¹ce o typie obstawionego zak³adu

  0069e	45 33 c0	 xor	 r8d, r8d
  006a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@EAGHPBJK@Obstawiono?5zaklad?$AA@
  006a8	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  006ac	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  006b1	48 3b 05 00 00
	00 00		 cmp	 rax, QWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2_KB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  006b8	0f 84 43 03 00
	00		 je	 $LN40@Wczytaj_z_

; 623  : 		{
; 624  : 			co_kontynuowaæ = 't'; //Je¿eli siê znajduj¹ to przypisanie znaku rozpoczêcia rundy od wylosowania liczby

  006be	48 8b 85 40 04
	00 00		 mov	 rax, QWORD PTR co_kontynuowaæ$[rbp]
  006c5	c6 00 74	 mov	 BYTE PTR [rax], 116	; 00000074H

; 625  : 			unsigned short pocz¹tek = 0; //Utworzenie i przypisanie zera do zmiennej wskazuj¹cej pocz¹tek tekst o typie zak³adu

  006c8	33 c0		 xor	 eax, eax
  006ca	66 89 85 64 01
	00 00		 mov	 WORD PTR pocz¹tek$16[rbp], ax
$LN16@Wczytaj_z_:

; 626  : 			while (buf[pocz¹tek] != 'd' && pocz¹tek < (unsigned short)buf.size()) ++pocz¹tek;

  006d1	0f b7 85 64 01
	00 00		 movzx	 eax, WORD PTR pocz¹tek$16[rbp]
  006d8	8b d0		 mov	 edx, eax
  006da	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  006de	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  006e3	0f be 00	 movsx	 eax, BYTE PTR [rax]
  006e6	83 f8 64	 cmp	 eax, 100		; 00000064H
  006e9	74 36		 je	 SHORT $LN17@Wczytaj_z_
  006eb	0f b7 85 64 01
	00 00		 movzx	 eax, WORD PTR pocz¹tek$16[rbp]
  006f2	89 85 f4 03 00
	00		 mov	 DWORD PTR tv362[rbp], eax
  006f8	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  006fc	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00701	0f b7 c0	 movzx	 eax, ax
  00704	8b 8d f4 03 00
	00		 mov	 ecx, DWORD PTR tv362[rbp]
  0070a	3b c8		 cmp	 ecx, eax
  0070c	7d 13		 jge	 SHORT $LN17@Wczytaj_z_
  0070e	0f b7 85 64 01
	00 00		 movzx	 eax, WORD PTR pocz¹tek$16[rbp]
  00715	66 ff c0	 inc	 ax
  00718	66 89 85 64 01
	00 00		 mov	 WORD PTR pocz¹tek$16[rbp], ax
  0071f	eb b0		 jmp	 SHORT $LN16@Wczytaj_z_
$LN17@Wczytaj_z_:

; 627  : 			pocz¹tek += 2; //Przesuniêcie pozycji pocz¹tku tekstu o 2 po której jest typ zak³adu

  00721	0f b7 85 64 01
	00 00		 movzx	 eax, WORD PTR pocz¹tek$16[rbp]
  00728	83 c0 02	 add	 eax, 2
  0072b	66 89 85 64 01
	00 00		 mov	 WORD PTR pocz¹tek$16[rbp], ax

; 628  : 			string buf2 = buf; //Utworzenie bufora pomocniczego do ciêcia tekstu i w³o¿enie do niego wczeœniej odczytanego tekstu

  00732	48 8d 55 08	 lea	 rdx, QWORD PTR buf$9[rbp]
  00736	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR buf2$17[rbp]
  0073d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00742	90		 npad	 1

; 629  : 			buf2.erase(0, pocz¹tek); //Usuniêcie z bufora pomocniczego tekstu z lewej strony, aby tekst rozpoczyna³ siê liczb¹

  00743	0f b7 85 64 01
	00 00		 movzx	 eax, WORD PTR pocz¹tek$16[rbp]
  0074a	44 8b c0	 mov	 r8d, eax
  0074d	33 d2		 xor	 edx, edx
  0074f	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR buf2$17[rbp]
  00756	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 630  : 			typ_zak³adu = buf2; //Przypisanie do zmiennej przechowywuj¹cej typ zak³adu wczytanego typu zak³adu

  0075b	48 8d 95 88 01
	00 00		 lea	 rdx, QWORD PTR buf2$17[rbp]
  00762	48 8b 8d 60 04
	00 00		 mov	 rcx, QWORD PTR typ_zak³adu$[rbp]
  00769	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 631  : 			buf.erase(buf.find("Obstawiono zaklad"), buf.size() - buf.find("Obstawiono zaklad"));

  0076e	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  00772	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00777	48 89 85 f8 03
	00 00		 mov	 QWORD PTR tv385[rbp], rax
  0077e	45 33 c0	 xor	 r8d, r8d
  00781	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@EAGHPBJK@Obstawiono?5zaklad?$AA@
  00788	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  0078c	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00791	48 8b 8d f8 03
	00 00		 mov	 rcx, QWORD PTR tv385[rbp]
  00798	48 2b c8	 sub	 rcx, rax
  0079b	48 8b c1	 mov	 rax, rcx
  0079e	48 89 85 00 04
	00 00		 mov	 QWORD PTR tv390[rbp], rax
  007a5	45 33 c0	 xor	 r8d, r8d
  007a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@EAGHPBJK@Obstawiono?5zaklad?$AA@
  007af	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  007b3	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  007b8	48 8b 8d 00 04
	00 00		 mov	 rcx, QWORD PTR tv390[rbp]
  007bf	4c 8b c1	 mov	 r8, rcx
  007c2	48 8b d0	 mov	 rdx, rax
  007c5	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  007c9	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 632  : 			pocz¹tek = 0; //Przypisanie zera do zmiennej wskazuj¹cej pocz¹tek tekst o kwocie zak³adu

  007ce	33 c0		 xor	 eax, eax
  007d0	66 89 85 64 01
	00 00		 mov	 WORD PTR pocz¹tek$16[rbp], ax

; 633  : 			if (buf[12] == 'a') pocz¹tek = 14; //Sprawdzenie czy na pozycji 12 teksty znajduje siê litera a œwiadcz¹ca o wyrazie po którym jest kwota zak³adu, je¿eli tak to pozycja pocz¹tkowa tekstu wynosi 14

  007d7	ba 0c 00 00 00	 mov	 edx, 12
  007dc	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  007e0	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  007e5	0f be 00	 movsx	 eax, BYTE PTR [rax]
  007e8	83 f8 61	 cmp	 eax, 97			; 00000061H
  007eb	75 0e		 jne	 SHORT $LN18@Wczytaj_z_
  007ed	b8 0e 00 00 00	 mov	 eax, 14
  007f2	66 89 85 64 01
	00 00		 mov	 WORD PTR pocz¹tek$16[rbp], ax

; 634  : 			else //Je¿eli nie to

  007f9	eb 5e		 jmp	 SHORT $LN43@Wczytaj_z_
$LN18@Wczytaj_z_:

; 635  : 			{
; 636  : 				while (buf[pocz¹tek] != 'z' && pocz¹tek < (int)buf.size()) ++pocz¹tek; //Poszukanie litery z œwiadcz¹cej o wyrazie po którym jest kwota zak³adu

  007fb	0f b7 85 64 01
	00 00		 movzx	 eax, WORD PTR pocz¹tek$16[rbp]
  00802	8b d0		 mov	 edx, eax
  00804	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  00808	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0080d	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00810	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  00813	74 33		 je	 SHORT $LN19@Wczytaj_z_
  00815	0f b7 85 64 01
	00 00		 movzx	 eax, WORD PTR pocz¹tek$16[rbp]
  0081c	89 85 f4 03 00
	00		 mov	 DWORD PTR tv407[rbp], eax
  00822	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  00826	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  0082b	8b 8d f4 03 00
	00		 mov	 ecx, DWORD PTR tv407[rbp]
  00831	3b c8		 cmp	 ecx, eax
  00833	7d 13		 jge	 SHORT $LN19@Wczytaj_z_
  00835	0f b7 85 64 01
	00 00		 movzx	 eax, WORD PTR pocz¹tek$16[rbp]
  0083c	66 ff c0	 inc	 ax
  0083f	66 89 85 64 01
	00 00		 mov	 WORD PTR pocz¹tek$16[rbp], ax
  00846	eb b3		 jmp	 SHORT $LN18@Wczytaj_z_
$LN19@Wczytaj_z_:

; 637  : 				pocz¹tek += 3; //Po znalezienu z przesuwamy pozycje +3

  00848	0f b7 85 64 01
	00 00		 movzx	 eax, WORD PTR pocz¹tek$16[rbp]
  0084f	83 c0 03	 add	 eax, 3
  00852	66 89 85 64 01
	00 00		 mov	 WORD PTR pocz¹tek$16[rbp], ax
$LN43@Wczytaj_z_:

; 638  : 			}
; 639  : 			unsigned short koniec = pocz¹tek + 1; //Przypisanie do zmiennej pozycji pocz¹tku +1 wskazuj¹cej koniec tekst o kwocie zak³adu

  00859	0f b7 85 64 01
	00 00		 movzx	 eax, WORD PTR pocz¹tek$16[rbp]
  00860	ff c0		 inc	 eax
  00862	66 89 85 c4 01
	00 00		 mov	 WORD PTR koniec$18[rbp], ax
$LN20@Wczytaj_z_:

; 640  : 			while (buf[koniec] != '$' && koniec < (unsigned short)buf.size()) ++koniec; //Pêtla poszukuj¹ca znaku dolara, pêtla koñczy siê znalezieniem znaku dolara

  00869	0f b7 85 c4 01
	00 00		 movzx	 eax, WORD PTR koniec$18[rbp]
  00870	8b d0		 mov	 edx, eax
  00872	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  00876	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0087b	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0087e	83 f8 24	 cmp	 eax, 36			; 00000024H
  00881	74 36		 je	 SHORT $LN21@Wczytaj_z_
  00883	0f b7 85 c4 01
	00 00		 movzx	 eax, WORD PTR koniec$18[rbp]
  0088a	89 85 f4 03 00
	00		 mov	 DWORD PTR tv425[rbp], eax
  00890	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  00894	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00899	0f b7 c0	 movzx	 eax, ax
  0089c	8b 8d f4 03 00
	00		 mov	 ecx, DWORD PTR tv425[rbp]
  008a2	3b c8		 cmp	 ecx, eax
  008a4	7d 13		 jge	 SHORT $LN21@Wczytaj_z_
  008a6	0f b7 85 c4 01
	00 00		 movzx	 eax, WORD PTR koniec$18[rbp]
  008ad	66 ff c0	 inc	 ax
  008b0	66 89 85 c4 01
	00 00		 mov	 WORD PTR koniec$18[rbp], ax
  008b7	eb b0		 jmp	 SHORT $LN20@Wczytaj_z_
$LN21@Wczytaj_z_:

; 641  : 			buf2 = buf; //W³o¿enie do bufora pomocniczego do ciêcia tekstu wczeœniej odczytanego tekstu

  008b9	48 8d 55 08	 lea	 rdx, QWORD PTR buf$9[rbp]
  008bd	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR buf2$17[rbp]
  008c4	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 642  : 			buf2.erase(koniec, buf2.size() - koniec); //Usuniêcie z bufora pomocniczego tekstu z prawej strony, aby tekst koñczy³ siê liczb¹

  008c9	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR buf2$17[rbp]
  008d0	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  008d5	0f b7 8d c4 01
	00 00		 movzx	 ecx, WORD PTR koniec$18[rbp]
  008dc	48 2b c1	 sub	 rax, rcx
  008df	0f b7 8d c4 01
	00 00		 movzx	 ecx, WORD PTR koniec$18[rbp]
  008e6	4c 8b c0	 mov	 r8, rax
  008e9	8b d1		 mov	 edx, ecx
  008eb	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR buf2$17[rbp]
  008f2	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 643  : 			buf2.erase(0, pocz¹tek); //Usuniêcie z bufora pomocniczego tekstu z lewej strony, aby tekst rozpoczyna³ siê liczb¹

  008f7	0f b7 85 64 01
	00 00		 movzx	 eax, WORD PTR pocz¹tek$16[rbp]
  008fe	44 8b c0	 mov	 r8d, eax
  00901	33 d2		 xor	 edx, edx
  00903	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR buf2$17[rbp]
  0090a	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 644  : 			kwota_zak³adu = atoi(buf2.c_str()); //Zamiana liczby w tekœcie na wartoœæ w zmiennnej liczbowej

  0090f	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR buf2$17[rbp]
  00916	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0091b	48 8b c8	 mov	 rcx, rax
  0091e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00924	48 8b 8d 50 04
	00 00		 mov	 rcx, QWORD PTR kwota_zak³adu$[rbp]
  0092b	89 01		 mov	 DWORD PTR [rcx], eax

; 645  : 			pocz¹tek = (unsigned short)bufor2.size(); //Utworzenie i przypisanie do zmiennej wskazuj¹cej pocz¹tek tekst o kwocie pieniêdzy któr¹ posiada jeszcze gracz

  0092d	48 8d 4d 48	 lea	 rcx, QWORD PTR bufor2$10[rbp]
  00931	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00936	66 89 85 64 01
	00 00		 mov	 WORD PTR pocz¹tek$16[rbp], ax
$LN22@Wczytaj_z_:

; 646  : 			while (bufor2[pocz¹tek] != ' ' && pocz¹tek > 0) --pocz¹tek; //Poszukiwanie od koñca spacji po której jest kwota pieniêdzy któr¹ posiada jeszcze gracz

  0093d	0f b7 85 64 01
	00 00		 movzx	 eax, WORD PTR pocz¹tek$16[rbp]
  00944	8b d0		 mov	 edx, eax
  00946	48 8d 4d 48	 lea	 rcx, QWORD PTR bufor2$10[rbp]
  0094a	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0094f	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00952	83 f8 20	 cmp	 eax, 32			; 00000020H
  00955	74 1e		 je	 SHORT $LN23@Wczytaj_z_
  00957	0f b7 85 64 01
	00 00		 movzx	 eax, WORD PTR pocz¹tek$16[rbp]
  0095e	85 c0		 test	 eax, eax
  00960	7e 13		 jle	 SHORT $LN23@Wczytaj_z_
  00962	0f b7 85 64 01
	00 00		 movzx	 eax, WORD PTR pocz¹tek$16[rbp]
  00969	66 ff c8	 dec	 ax
  0096c	66 89 85 64 01
	00 00		 mov	 WORD PTR pocz¹tek$16[rbp], ax
  00973	eb c8		 jmp	 SHORT $LN22@Wczytaj_z_
$LN23@Wczytaj_z_:

; 647  : 			++pocz¹tek; //Kwota jest na nastêpnym znaku wiêc przesuniêcie o jeden znak do przodu

  00975	0f b7 85 64 01
	00 00		 movzx	 eax, WORD PTR pocz¹tek$16[rbp]
  0097c	66 ff c0	 inc	 ax
  0097f	66 89 85 64 01
	00 00		 mov	 WORD PTR pocz¹tek$16[rbp], ax

; 648  : 			buf2 = bufor2; //Przypisanie do bufora pomocniczego do ciêcia tekstu i w³o¿enie do niego linie o jedn¹ wczeœniej wczeœniej odczytanego tekstu

  00986	48 8d 55 48	 lea	 rdx, QWORD PTR bufor2$10[rbp]
  0098a	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR buf2$17[rbp]
  00991	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 649  : 			buf2.erase(0, pocz¹tek); //Usuniêcie z bufora pomocniczego tekstu z lewej strony, aby tekst rozpoczyna³ siê liczb¹

  00996	0f b7 85 64 01
	00 00		 movzx	 eax, WORD PTR pocz¹tek$16[rbp]
  0099d	44 8b c0	 mov	 r8d, eax
  009a0	33 d2		 xor	 edx, edx
  009a2	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR buf2$17[rbp]
  009a9	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 650  : 			buf2.erase(buf2.size() - 1, 1); //Usuniêcie z bufora pomocniczego znaku dolara z prawej strony

  009ae	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR buf2$17[rbp]
  009b5	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  009ba	48 ff c8	 dec	 rax
  009bd	41 b8 01 00 00
	00		 mov	 r8d, 1
  009c3	48 8b d0	 mov	 rdx, rax
  009c6	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR buf2$17[rbp]
  009cd	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 651  : 			iloœæ_pieniêdzy = atoi(buf2.c_str()); //Zamiana liczby w tekœcie na wartoœæ w zmiennnej liczbowej

  009d2	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR buf2$17[rbp]
  009d9	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  009de	48 8b c8	 mov	 rcx, rax
  009e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  009e7	48 8b 8d 48 04
	00 00		 mov	 rcx, QWORD PTR iloœæ_pieniêdzy$[rbp]
  009ee	89 01		 mov	 DWORD PTR [rcx], eax

; 652  : 		}

  009f0	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR buf2$17[rbp]
  009f7	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  009fc	e9 8d 02 00 00	 jmp	 $LN35@Wczytaj_z_
$LN40@Wczytaj_z_:

; 653  : 		else if (buf.find("Obstawiono za") != string::npos) //Sprawdzenie czy w ostatniej niepustej lini znajduj¹ siê s³owa œwiadcz¹ce o kwocie obstawionego zak³adu

  00a01	45 33 c0	 xor	 r8d, r8d
  00a04	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@POHKAIHJ@Obstawiono?5za?$AA@
  00a0b	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  00a0f	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00a14	48 3b 05 00 00
	00 00		 cmp	 rax, QWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2_KB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  00a1b	0f 84 3b 02 00
	00		 je	 $LN44@Wczytaj_z_

; 654  : 		{
; 655  : 			co_kontynuowaæ = 'k';  //Je¿eli siê znajduj¹ to przypisanie znaku rozpoczêcia rundy od zapytania o typ zak³adu

  00a21	48 8b 85 40 04
	00 00		 mov	 rax, QWORD PTR co_kontynuowaæ$[rbp]
  00a28	c6 00 6b	 mov	 BYTE PTR [rax], 107	; 0000006bH

; 656  : 			unsigned short pocz¹tek = 0; //Utworzenie i przypisanie do zmiennej wskazuj¹cej pocz¹tek tekst o kwocie pieniêdzy któr¹ posiada jeszcze gracz

  00a2b	33 c0		 xor	 eax, eax
  00a2d	66 89 85 e4 01
	00 00		 mov	 WORD PTR pocz¹tek$19[rbp], ax

; 657  : 			if (buf[12] == 'a') { pocz¹tek = 14; } //Sprawdzenie czy na pozycji 12 teksty znajduje siê litera a œwiadcz¹ca o wyrazie po którym jest kwota zak³adu, je¿eli tak to pozycja pocz¹tkowa tekstu wynosi 14

  00a34	ba 0c 00 00 00	 mov	 edx, 12
  00a39	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  00a3d	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00a42	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00a45	83 f8 61	 cmp	 eax, 97			; 00000061H
  00a48	75 0e		 jne	 SHORT $LN24@Wczytaj_z_
  00a4a	b8 0e 00 00 00	 mov	 eax, 14
  00a4f	66 89 85 e4 01
	00 00		 mov	 WORD PTR pocz¹tek$19[rbp], ax

; 658  : 			else //Je¿eli nie to

  00a56	eb 61		 jmp	 SHORT $LN47@Wczytaj_z_
$LN24@Wczytaj_z_:

; 659  : 			{
; 660  : 				while (buf[pocz¹tek] != 'z' && pocz¹tek < (unsigned short)buf.size()) ++pocz¹tek; //Poszukanie litery z œwiadcz¹cej o wyrazie po którym jest kwota zak³adu

  00a58	0f b7 85 e4 01
	00 00		 movzx	 eax, WORD PTR pocz¹tek$19[rbp]
  00a5f	8b d0		 mov	 edx, eax
  00a61	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  00a65	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00a6a	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00a6d	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  00a70	74 36		 je	 SHORT $LN25@Wczytaj_z_
  00a72	0f b7 85 e4 01
	00 00		 movzx	 eax, WORD PTR pocz¹tek$19[rbp]
  00a79	89 85 f4 03 00
	00		 mov	 DWORD PTR tv495[rbp], eax
  00a7f	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  00a83	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00a88	0f b7 c0	 movzx	 eax, ax
  00a8b	8b 8d f4 03 00
	00		 mov	 ecx, DWORD PTR tv495[rbp]
  00a91	3b c8		 cmp	 ecx, eax
  00a93	7d 13		 jge	 SHORT $LN25@Wczytaj_z_
  00a95	0f b7 85 e4 01
	00 00		 movzx	 eax, WORD PTR pocz¹tek$19[rbp]
  00a9c	66 ff c0	 inc	 ax
  00a9f	66 89 85 e4 01
	00 00		 mov	 WORD PTR pocz¹tek$19[rbp], ax
  00aa6	eb b0		 jmp	 SHORT $LN24@Wczytaj_z_
$LN25@Wczytaj_z_:

; 661  : 				pocz¹tek += 3; //Po znalezienu z przesuwamy pozycje +3

  00aa8	0f b7 85 e4 01
	00 00		 movzx	 eax, WORD PTR pocz¹tek$19[rbp]
  00aaf	83 c0 03	 add	 eax, 3
  00ab2	66 89 85 e4 01
	00 00		 mov	 WORD PTR pocz¹tek$19[rbp], ax
$LN47@Wczytaj_z_:

; 662  : 			}
; 663  : 			unsigned short koniec = pocz¹tek + 1; //Utworzenie i przypisanie do zmiennej pozycji pocz¹tku +1 wskazuj¹cej koniec tekst o kwocie zak³adu

  00ab9	0f b7 85 e4 01
	00 00		 movzx	 eax, WORD PTR pocz¹tek$19[rbp]
  00ac0	ff c0		 inc	 eax
  00ac2	66 89 85 04 02
	00 00		 mov	 WORD PTR koniec$20[rbp], ax
$LN26@Wczytaj_z_:

; 664  : 			while (buf[koniec] != '$' && koniec < (int)buf.size()) ++koniec;

  00ac9	0f b7 85 04 02
	00 00		 movzx	 eax, WORD PTR koniec$20[rbp]
  00ad0	8b d0		 mov	 edx, eax
  00ad2	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  00ad6	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00adb	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00ade	83 f8 24	 cmp	 eax, 36			; 00000024H
  00ae1	74 33		 je	 SHORT $LN27@Wczytaj_z_
  00ae3	0f b7 85 04 02
	00 00		 movzx	 eax, WORD PTR koniec$20[rbp]
  00aea	89 85 f4 03 00
	00		 mov	 DWORD PTR tv514[rbp], eax
  00af0	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  00af4	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00af9	8b 8d f4 03 00
	00		 mov	 ecx, DWORD PTR tv514[rbp]
  00aff	3b c8		 cmp	 ecx, eax
  00b01	7d 13		 jge	 SHORT $LN27@Wczytaj_z_
  00b03	0f b7 85 04 02
	00 00		 movzx	 eax, WORD PTR koniec$20[rbp]
  00b0a	66 ff c0	 inc	 ax
  00b0d	66 89 85 04 02
	00 00		 mov	 WORD PTR koniec$20[rbp], ax
  00b14	eb b3		 jmp	 SHORT $LN26@Wczytaj_z_
$LN27@Wczytaj_z_:

; 665  : 			string buf2 = buf; //Utworzenie bufora pomocniczego do ciêcia tekstu i w³o¿enie do niego wczeœniej odczytanego tekstu

  00b16	48 8d 55 08	 lea	 rdx, QWORD PTR buf$9[rbp]
  00b1a	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR buf2$21[rbp]
  00b21	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00b26	90		 npad	 1

; 666  : 			buf2.erase(koniec, buf2.size() - koniec); //Usuniêcie z bufora pomocniczego tekstu z prawej strony, aby tekst koñczy³ siê liczb¹

  00b27	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR buf2$21[rbp]
  00b2e	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00b33	0f b7 8d 04 02
	00 00		 movzx	 ecx, WORD PTR koniec$20[rbp]
  00b3a	48 2b c1	 sub	 rax, rcx
  00b3d	0f b7 8d 04 02
	00 00		 movzx	 ecx, WORD PTR koniec$20[rbp]
  00b44	4c 8b c0	 mov	 r8, rax
  00b47	8b d1		 mov	 edx, ecx
  00b49	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR buf2$21[rbp]
  00b50	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 667  : 			buf2.erase(0, pocz¹tek); //Usuniêcie z bufora pomocniczego tekstu z lewej strony, aby tekst rozpoczyna³ siê liczb¹

  00b55	0f b7 85 e4 01
	00 00		 movzx	 eax, WORD PTR pocz¹tek$19[rbp]
  00b5c	44 8b c0	 mov	 r8d, eax
  00b5f	33 d2		 xor	 edx, edx
  00b61	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR buf2$21[rbp]
  00b68	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 668  : 			kwota_zak³adu = atoi(buf2.c_str()); //Zamiana liczby w tekœcie na wartoœæ w zmiennnej liczbowej

  00b6d	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR buf2$21[rbp]
  00b74	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00b79	48 8b c8	 mov	 rcx, rax
  00b7c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00b82	48 8b 8d 50 04
	00 00		 mov	 rcx, QWORD PTR kwota_zak³adu$[rbp]
  00b89	89 01		 mov	 DWORD PTR [rcx], eax

; 669  : 			pocz¹tek = (unsigned short)bufor2.size(); //Utworzenie i przypisanie do zmiennej wskazuj¹cej pocz¹tek tekst o kwocie pieniêdzy któr¹ posiada jeszcze gracz

  00b8b	48 8d 4d 48	 lea	 rcx, QWORD PTR bufor2$10[rbp]
  00b8f	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00b94	66 89 85 e4 01
	00 00		 mov	 WORD PTR pocz¹tek$19[rbp], ax
$LN28@Wczytaj_z_:

; 670  : 			while (bufor2[pocz¹tek] != ' ' && pocz¹tek > 0) --pocz¹tek; //Poszukiwanie od koñca spacji po której jest kwota pieniêdzy któr¹ posiada jeszcze gracz

  00b9b	0f b7 85 e4 01
	00 00		 movzx	 eax, WORD PTR pocz¹tek$19[rbp]
  00ba2	8b d0		 mov	 edx, eax
  00ba4	48 8d 4d 48	 lea	 rcx, QWORD PTR bufor2$10[rbp]
  00ba8	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00bad	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00bb0	83 f8 20	 cmp	 eax, 32			; 00000020H
  00bb3	74 1e		 je	 SHORT $LN29@Wczytaj_z_
  00bb5	0f b7 85 e4 01
	00 00		 movzx	 eax, WORD PTR pocz¹tek$19[rbp]
  00bbc	85 c0		 test	 eax, eax
  00bbe	7e 13		 jle	 SHORT $LN29@Wczytaj_z_
  00bc0	0f b7 85 e4 01
	00 00		 movzx	 eax, WORD PTR pocz¹tek$19[rbp]
  00bc7	66 ff c8	 dec	 ax
  00bca	66 89 85 e4 01
	00 00		 mov	 WORD PTR pocz¹tek$19[rbp], ax
  00bd1	eb c8		 jmp	 SHORT $LN28@Wczytaj_z_
$LN29@Wczytaj_z_:

; 671  : 			++pocz¹tek; //Kwota jest na nastêpnym znaku wiêc przesuniêcie o jeden znak do przodu

  00bd3	0f b7 85 e4 01
	00 00		 movzx	 eax, WORD PTR pocz¹tek$19[rbp]
  00bda	66 ff c0	 inc	 ax
  00bdd	66 89 85 e4 01
	00 00		 mov	 WORD PTR pocz¹tek$19[rbp], ax

; 672  : 			buf2 = bufor2; //Przypisanie do bufora pomocniczego do ciêcia tekstu i w³o¿enie do niego linie o jedn¹ wczeœniej wczeœniej odczytanego tekstu

  00be4	48 8d 55 48	 lea	 rdx, QWORD PTR bufor2$10[rbp]
  00be8	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR buf2$21[rbp]
  00bef	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 673  : 			buf2.erase(0, pocz¹tek); //Usuniêcie z bufora pomocniczego tekstu z lewej strony, aby tekst rozpoczyna³ siê liczb¹

  00bf4	0f b7 85 e4 01
	00 00		 movzx	 eax, WORD PTR pocz¹tek$19[rbp]
  00bfb	44 8b c0	 mov	 r8d, eax
  00bfe	33 d2		 xor	 edx, edx
  00c00	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR buf2$21[rbp]
  00c07	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 674  : 			buf2.erase(buf2.size() - 1, 1); //Usuniêcie z bufora pomocniczego znaku dolara z prawej strony

  00c0c	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR buf2$21[rbp]
  00c13	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00c18	48 ff c8	 dec	 rax
  00c1b	41 b8 01 00 00
	00		 mov	 r8d, 1
  00c21	48 8b d0	 mov	 rdx, rax
  00c24	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR buf2$21[rbp]
  00c2b	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 675  : 			iloœæ_pieniêdzy = atoi(buf2.c_str()); //Zamiana liczby w tekœcie na wartoœæ w zmiennnej liczbowej

  00c30	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR buf2$21[rbp]
  00c37	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00c3c	48 8b c8	 mov	 rcx, rax
  00c3f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00c45	48 8b 8d 48 04
	00 00		 mov	 rcx, QWORD PTR iloœæ_pieniêdzy$[rbp]
  00c4c	89 01		 mov	 DWORD PTR [rcx], eax

; 676  : 		}

  00c4e	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR buf2$21[rbp]
  00c55	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00c5a	eb 32		 jmp	 SHORT $LN35@Wczytaj_z_
$LN44@Wczytaj_z_:

; 677  : 		else if (buf.find("Gra rozpoczeta dnia") != string::npos) //Sprawdzenie czy w ostatniej niepustej lini znajduj¹ siê s³owa œwiadcz¹ce o rozpoczêciu nowej gry

  00c5c	45 33 c0	 xor	 r8d, r8d
  00c5f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@CILJHICG@Gra?5rozpoczeta?5dnia?$AA@
  00c66	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  00c6a	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00c6f	48 3b 05 00 00
	00 00		 cmp	 rax, QWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2_KB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  00c76	74 0c		 je	 SHORT $LN48@Wczytaj_z_

; 678  : 		{
; 679  : 			co_kontynuowaæ = 'n'; //Je¿eli siê znajduj¹ to przypisanie znaku rozpoczêcia rundy od pocz¹tku

  00c78	48 8b 85 40 04
	00 00		 mov	 rax, QWORD PTR co_kontynuowaæ$[rbp]
  00c7f	c6 00 6e	 mov	 BYTE PTR [rax], 110	; 0000006eH

; 680  : 		}
; 681  : 		else //Je¿eli coœ pójdzie nie tak, to warunek aby gra siê niewysypa³a

  00c82	eb 0a		 jmp	 SHORT $LN35@Wczytaj_z_
$LN48@Wczytaj_z_:

; 682  : 		{
; 683  : 			co_kontynuowaæ = 'n'; //Je¿eli siê znajduj¹ to przypisanie znaku rozpoczêcia rundy od pocz¹tku

  00c84	48 8b 85 40 04
	00 00		 mov	 rax, QWORD PTR co_kontynuowaæ$[rbp]
  00c8b	c6 00 6e	 mov	 BYTE PTR [rax], 110	; 0000006eH
$LN35@Wczytaj_z_:

; 684  : 		}
; 685  : 		log.close(); //Zamkniêcie pliku logu ogólnego

  00c8e	48 8b 8d 38 04
	00 00		 mov	 rcx, QWORD PTR log$[rbp]
  00c95	e8 00 00 00 00	 call	 ?close@?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAXXZ ; std::basic_fstream<char,std::char_traits<char> >::close

; 686  : 		log.open("log_aktualny.txt", ios::out | ios::app); //Ponowne wczytanie pliku, teraz tylko do odczytu i ustawienie kursora zapisu na koniec pliku

  00c9a	41 b9 40 00 00
	00		 mov	 r9d, 64			; 00000040H
  00ca0	41 b8 0a 00 00
	00		 mov	 r8d, 10
  00ca6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@KLDNCCFE@log_aktualny?4txt?$AA@
  00cad	48 8b 8d 38 04
	00 00		 mov	 rcx, QWORD PTR log$[rbp]
  00cb4	e8 00 00 00 00	 call	 ?open@?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAXPEBDHH@Z ; std::basic_fstream<char,std::char_traits<char> >::open
  00cb9	90		 npad	 1

; 687  : 	}

  00cba	48 8d 4d 48	 lea	 rcx, QWORD PTR bufor2$10[rbp]
  00cbe	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00cc3	90		 npad	 1
  00cc4	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  00cc8	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 688  : 	else

  00ccd	e9 7e 03 00 00	 jmp	 $LN31@Wczytaj_z_
$LN30@Wczytaj_z_:

; 689  : 	{
; 690  : 		co_kontynuowaæ = 'n'; //Przypisanie znaku rozpoczêcia rundy od pocz¹tku

  00cd2	48 8b 85 40 04
	00 00		 mov	 rax, QWORD PTR co_kontynuowaæ$[rbp]
  00cd9	c6 00 6e	 mov	 BYTE PTR [rax], 110	; 0000006eH

; 691  : 		log.open("log_aktualny.txt", ios::out);

  00cdc	41 b9 40 00 00
	00		 mov	 r9d, 64			; 00000040H
  00ce2	41 b8 02 00 00
	00		 mov	 r8d, 2
  00ce8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@KLDNCCFE@log_aktualny?4txt?$AA@
  00cef	48 8b 8d 38 04
	00 00		 mov	 rcx, QWORD PTR log$[rbp]
  00cf6	e8 00 00 00 00	 call	 ?open@?$basic_fstream@DU?$char_traits@D@std@@@std@@QEAAXPEBDHH@Z ; std::basic_fstream<char,std::char_traits<char> >::open

; 692  : 		GetSystemTime(&Czas); //Pobieranie aktualnej daty i czasu z zegara systemowego

  00cfb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Czas@@3U_SYSTEMTIME@@A ; Czas
  00d02	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetSystemTime

; 693  : 		log << "Gra rozpoczeta dnia " << Czas.wDay << "." << Czas.wMonth << "." << Czas.wYear << " o godzinie "; //Wpisanie do bufora zapisu danych o dniu,miesi¹cu i roku do pliku log_aktualny.txt

  00d08	48 83 bd 38 04
	00 00 00	 cmp	 QWORD PTR log$[rbp], 0
  00d10	74 14		 je	 SHORT $LN57@Wczytaj_z_
  00d12	48 8b 85 38 04
	00 00		 mov	 rax, QWORD PTR log$[rbp]
  00d19	48 83 c0 10	 add	 rax, 16
  00d1d	48 89 85 f8 03
	00 00		 mov	 QWORD PTR tv596[rbp], rax
  00d24	eb 0b		 jmp	 SHORT $LN58@Wczytaj_z_
$LN57@Wczytaj_z_:
  00d26	48 c7 85 f8 03
	00 00 00 00 00
	00		 mov	 QWORD PTR tv596[rbp], 0
$LN58@Wczytaj_z_:
  00d31	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@EHKBBICH@Gra?5rozpoczeta?5dnia?5?$AA@
  00d38	48 8b 8d f8 03
	00 00		 mov	 rcx, QWORD PTR tv596[rbp]
  00d3f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00d44	0f b7 15 06 00
	00 00		 movzx	 edx, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+6
  00d4b	48 8b c8	 mov	 rcx, rax
  00d4e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@G@Z
  00d54	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01LFCBOECM@?4?$AA@
  00d5b	48 8b c8	 mov	 rcx, rax
  00d5e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00d63	0f b7 15 02 00
	00 00		 movzx	 edx, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+2
  00d6a	48 8b c8	 mov	 rcx, rax
  00d6d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@G@Z
  00d73	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01LFCBOECM@?4?$AA@
  00d7a	48 8b c8	 mov	 rcx, rax
  00d7d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00d82	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ?Czas@@3U_SYSTEMTIME@@A
  00d89	48 8b c8	 mov	 rcx, rax
  00d8c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@G@Z
  00d92	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@KHLIPMCA@?5o?5godzinie?5?$AA@
  00d99	48 8b c8	 mov	 rcx, rax
  00d9c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 694  : 		if (Czas.wHour < 10) log << "0"; //Wpisanie do bufora zapisu znaku zera dla równego formatowania godzinny je¿eli godzina jest minejsza ni¿ 10 do pliku log_aktualny.txt

  00da1	0f b7 05 08 00
	00 00		 movzx	 eax, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+8
  00da8	83 f8 0a	 cmp	 eax, 10
  00dab	7d 3c		 jge	 SHORT $LN50@Wczytaj_z_
  00dad	48 83 bd 38 04
	00 00 00	 cmp	 QWORD PTR log$[rbp], 0
  00db5	74 14		 je	 SHORT $LN59@Wczytaj_z_
  00db7	48 8b 85 38 04
	00 00		 mov	 rax, QWORD PTR log$[rbp]
  00dbe	48 83 c0 10	 add	 rax, 16
  00dc2	48 89 85 f8 03
	00 00		 mov	 QWORD PTR tv618[rbp], rax
  00dc9	eb 0b		 jmp	 SHORT $LN60@Wczytaj_z_
$LN59@Wczytaj_z_:
  00dcb	48 c7 85 f8 03
	00 00 00 00 00
	00		 mov	 QWORD PTR tv618[rbp], 0
$LN60@Wczytaj_z_:
  00dd6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01GBGANLPD@0?$AA@
  00ddd	48 8b 8d f8 03
	00 00		 mov	 rcx, QWORD PTR tv618[rbp]
  00de4	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
$LN50@Wczytaj_z_:

; 695  : 		log << Czas.wHour << ":"; //Wpisanie do bufora zapisu znaku : dla rozdzielenia godzin od minut do pliku log_aktualny.txt

  00de9	48 8b 85 38 04
	00 00		 mov	 rax, QWORD PTR log$[rbp]
  00df0	48 83 c0 10	 add	 rax, 16
  00df4	0f b7 15 08 00
	00 00		 movzx	 edx, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+8
  00dfb	48 8b c8	 mov	 rcx, rax
  00dfe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@G@Z
  00e04	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  00e0b	48 8b c8	 mov	 rcx, rax
  00e0e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 696  : 		if (Czas.wMinute < 10) log << "0"; //Wpisanie do bufora zapisu znaku zera dla równego formatowania minut je¿eli minuty jest minejsze ni¿ 10 do pliku log_aktualny.txt

  00e13	0f b7 05 0a 00
	00 00		 movzx	 eax, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+10
  00e1a	83 f8 0a	 cmp	 eax, 10
  00e1d	7d 3c		 jge	 SHORT $LN51@Wczytaj_z_
  00e1f	48 83 bd 38 04
	00 00 00	 cmp	 QWORD PTR log$[rbp], 0
  00e27	74 14		 je	 SHORT $LN61@Wczytaj_z_
  00e29	48 8b 85 38 04
	00 00		 mov	 rax, QWORD PTR log$[rbp]
  00e30	48 83 c0 10	 add	 rax, 16
  00e34	48 89 85 f8 03
	00 00		 mov	 QWORD PTR tv637[rbp], rax
  00e3b	eb 0b		 jmp	 SHORT $LN62@Wczytaj_z_
$LN61@Wczytaj_z_:
  00e3d	48 c7 85 f8 03
	00 00 00 00 00
	00		 mov	 QWORD PTR tv637[rbp], 0
$LN62@Wczytaj_z_:
  00e48	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01GBGANLPD@0?$AA@
  00e4f	48 8b 8d f8 03
	00 00		 mov	 rcx, QWORD PTR tv637[rbp]
  00e56	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
$LN51@Wczytaj_z_:

; 697  : 		log << Czas.wMinute << ":"; //Wpisanie do bufora zapisu znaku : dla rozdzielenia minut od sekund do pliku log_aktualny.txt

  00e5b	48 8b 85 38 04
	00 00		 mov	 rax, QWORD PTR log$[rbp]
  00e62	48 83 c0 10	 add	 rax, 16
  00e66	0f b7 15 0a 00
	00 00		 movzx	 edx, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+10
  00e6d	48 8b c8	 mov	 rcx, rax
  00e70	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@G@Z
  00e76	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  00e7d	48 8b c8	 mov	 rcx, rax
  00e80	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 698  : 		if (Czas.wSecond < 10) log << "0"; //Wpisanie do bufora zapisu znaku zera dla równego formatowania sekund je¿eli sekundy jest minejsza ni¿ 10 do pliku log_aktualny.txt

  00e85	0f b7 05 0c 00
	00 00		 movzx	 eax, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+12
  00e8c	83 f8 0a	 cmp	 eax, 10
  00e8f	7d 3c		 jge	 SHORT $LN52@Wczytaj_z_
  00e91	48 83 bd 38 04
	00 00 00	 cmp	 QWORD PTR log$[rbp], 0
  00e99	74 14		 je	 SHORT $LN63@Wczytaj_z_
  00e9b	48 8b 85 38 04
	00 00		 mov	 rax, QWORD PTR log$[rbp]
  00ea2	48 83 c0 10	 add	 rax, 16
  00ea6	48 89 85 f8 03
	00 00		 mov	 QWORD PTR tv656[rbp], rax
  00ead	eb 0b		 jmp	 SHORT $LN64@Wczytaj_z_
$LN63@Wczytaj_z_:
  00eaf	48 c7 85 f8 03
	00 00 00 00 00
	00		 mov	 QWORD PTR tv656[rbp], 0
$LN64@Wczytaj_z_:
  00eba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01GBGANLPD@0?$AA@
  00ec1	48 8b 8d f8 03
	00 00		 mov	 rcx, QWORD PTR tv656[rbp]
  00ec8	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
$LN52@Wczytaj_z_:

; 699  : 		log << Czas.wSecond << endl; // Wpisanie do bufora zapisu danych o sekundzie do pliku log_aktualny.txt

  00ecd	48 8b 85 38 04
	00 00		 mov	 rax, QWORD PTR log$[rbp]
  00ed4	48 83 c0 10	 add	 rax, 16
  00ed8	0f b7 15 0c 00
	00 00		 movzx	 edx, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+12
  00edf	48 8b c8	 mov	 rcx, rax
  00ee2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@G@Z
  00ee8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00eef	48 8b c8	 mov	 rcx, rax
  00ef2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 700  : 		log_ogólny << "Nowa gra rozpoczeta dnia " << Czas.wDay << "." << Czas.wMonth << "." << Czas.wYear << " o godzinie "; //Wpisanie do bufora zapisu danych o dniu,miesi¹cu i roku do pliku log_ogólny.txt

  00ef8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@PLEOEKGI@Nowa?5gra?5rozpoczeta?5dnia?5?$AA@
  00eff	48 8b 8d 30 04
	00 00		 mov	 rcx, QWORD PTR log_ogólny$[rbp]
  00f06	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00f0b	0f b7 15 06 00
	00 00		 movzx	 edx, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+6
  00f12	48 8b c8	 mov	 rcx, rax
  00f15	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@G@Z
  00f1b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01LFCBOECM@?4?$AA@
  00f22	48 8b c8	 mov	 rcx, rax
  00f25	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00f2a	0f b7 15 02 00
	00 00		 movzx	 edx, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+2
  00f31	48 8b c8	 mov	 rcx, rax
  00f34	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@G@Z
  00f3a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01LFCBOECM@?4?$AA@
  00f41	48 8b c8	 mov	 rcx, rax
  00f44	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00f49	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ?Czas@@3U_SYSTEMTIME@@A
  00f50	48 8b c8	 mov	 rcx, rax
  00f53	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@G@Z
  00f59	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@KHLIPMCA@?5o?5godzinie?5?$AA@
  00f60	48 8b c8	 mov	 rcx, rax
  00f63	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 701  : 		if (Czas.wHour < 10) log_ogólny << "0"; //Wpisanie do bufora zapisu znaku zera dla równego formatowania godzinny je¿eli godzina jest minejsza ni¿ 10 do pliku log_ogólny.txt

  00f68	0f b7 05 08 00
	00 00		 movzx	 eax, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+8
  00f6f	83 f8 0a	 cmp	 eax, 10
  00f72	7d 13		 jge	 SHORT $LN53@Wczytaj_z_
  00f74	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01GBGANLPD@0?$AA@
  00f7b	48 8b 8d 30 04
	00 00		 mov	 rcx, QWORD PTR log_ogólny$[rbp]
  00f82	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
$LN53@Wczytaj_z_:

; 702  : 		log_ogólny << Czas.wHour << ":";//Wpisanie do bufora zapisu znaku : dla rozdzielenia godzin od minut do pliku log_aktualny.txt

  00f87	0f b7 15 08 00
	00 00		 movzx	 edx, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+8
  00f8e	48 8b 8d 30 04
	00 00		 mov	 rcx, QWORD PTR log_ogólny$[rbp]
  00f95	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@G@Z
  00f9b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  00fa2	48 8b c8	 mov	 rcx, rax
  00fa5	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 703  : 		if (Czas.wMinute < 10) log_ogólny << "0"; //Wpisanie do bufora zapisu znaku zera dla równego formatowania minut je¿eli minuty jest minejsza ni¿ 10 do pliku log_ogólny.txt

  00faa	0f b7 05 0a 00
	00 00		 movzx	 eax, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+10
  00fb1	83 f8 0a	 cmp	 eax, 10
  00fb4	7d 13		 jge	 SHORT $LN54@Wczytaj_z_
  00fb6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01GBGANLPD@0?$AA@
  00fbd	48 8b 8d 30 04
	00 00		 mov	 rcx, QWORD PTR log_ogólny$[rbp]
  00fc4	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
$LN54@Wczytaj_z_:

; 704  : 		log_ogólny << Czas.wMinute << ":"; //Wpisanie do bufora zapisu znaku : dla rozdzielenia minut od sekund do pliku log_ogólny.txt

  00fc9	0f b7 15 0a 00
	00 00		 movzx	 edx, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+10
  00fd0	48 8b 8d 30 04
	00 00		 mov	 rcx, QWORD PTR log_ogólny$[rbp]
  00fd7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@G@Z
  00fdd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  00fe4	48 8b c8	 mov	 rcx, rax
  00fe7	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 705  : 		if (Czas.wSecond < 10) log_ogólny << "0"; //Wpisanie do bufora zapisu znaku zera dla równego formatowania sekund je¿eli sekundy jest minejsza ni¿ 10 do pliku log_ogólny.txt

  00fec	0f b7 05 0c 00
	00 00		 movzx	 eax, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+12
  00ff3	83 f8 0a	 cmp	 eax, 10
  00ff6	7d 13		 jge	 SHORT $LN55@Wczytaj_z_
  00ff8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01GBGANLPD@0?$AA@
  00fff	48 8b 8d 30 04
	00 00		 mov	 rcx, QWORD PTR log_ogólny$[rbp]
  01006	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
$LN55@Wczytaj_z_:

; 706  : 		log_ogólny << Czas.wSecond << endl; // Wpisanie do bufora zapisu danych o sekundzie do pliku log_ogólny.txt

  0100b	0f b7 15 0c 00
	00 00		 movzx	 edx, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+12
  01012	48 8b 8d 30 04
	00 00		 mov	 rcx, QWORD PTR log_ogólny$[rbp]
  01019	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@G@Z
  0101f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  01026	48 8b c8	 mov	 rcx, rax
  01029	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 707  : 		log.flush(); //Zapisanie do pliku log_aktualny.txt danych wpisanych do bufora danych

  0102f	48 8b 85 38 04
	00 00		 mov	 rax, QWORD PTR log$[rbp]
  01036	48 83 c0 10	 add	 rax, 16
  0103a	48 8b c8	 mov	 rcx, rax
  0103d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 708  : 		log_ogólny.flush(); //Zapisanie do pliku log_ogólny.txt danych wpisanych do bufora danych

  01043	48 8b 8d 30 04
	00 00		 mov	 rcx, QWORD PTR log_ogólny$[rbp]
  0104a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ
$LN31@Wczytaj_z_:

; 709  : 	}
; 710  : }

  01050	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  01054	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$rtcFrameData
  0105b	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  01060	48 8b 8d 08 04
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  01067	48 33 cd	 xor	 rcx, rbp
  0106a	e8 00 00 00 00	 call	 __security_check_cookie
  0106f	48 8d a5 18 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1048]
  01076	5f		 pop	 rdi
  01077	5d		 pop	 rbp
  01078	c3		 ret	 0
?Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; Wczytaj_z_pliku
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
buf$9 = 8
bufor2$10 = 72
pocz¹tek$11 = 132
buf2$12 = 168
pocz¹tek$13 = 228
buf2$14 = 264
koniec$15 = 324
pocz¹tek$16 = 356
buf2$17 = 392
koniec$18 = 452
pocz¹tek$19 = 484
koniec$20 = 516
buf2$21 = 552
$T22 = 1000
tv514 = 1012
tv495 = 1012
tv425 = 1012
tv407 = 1012
tv362 = 1012
tv280 = 1012
tv224 = 1012
tv197 = 1012
tv656 = 1016
tv637 = 1016
tv618 = 1016
tv596 = 1016
tv385 = 1016
tv258 = 1016
tv242 = 1016
tv390 = 1024
tv263 = 1024
tv247 = 1024
__$ArrayPad$ = 1032
log_ogólny$ = 1072
log$ = 1080
co_kontynuowaæ$ = 1088
iloœæ_pieniêdzy$ = 1096
kwota_zak³adu$ = 1104
wylosowana_liczba$ = 1112
typ_zak³adu$ = 1120
?dtor$0@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA PROC ; `Wczytaj_z_pliku'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA ENDP ; `Wczytaj_z_pliku'::`1'::dtor$0
buf$9 = 8
bufor2$10 = 72
pocz¹tek$11 = 132
buf2$12 = 168
pocz¹tek$13 = 228
buf2$14 = 264
koniec$15 = 324
pocz¹tek$16 = 356
buf2$17 = 392
koniec$18 = 452
pocz¹tek$19 = 484
koniec$20 = 516
buf2$21 = 552
$T22 = 1000
tv514 = 1012
tv495 = 1012
tv425 = 1012
tv407 = 1012
tv362 = 1012
tv280 = 1012
tv224 = 1012
tv197 = 1012
tv656 = 1016
tv637 = 1016
tv618 = 1016
tv596 = 1016
tv385 = 1016
tv258 = 1016
tv242 = 1016
tv390 = 1024
tv263 = 1024
tv247 = 1024
__$ArrayPad$ = 1032
log_ogólny$ = 1072
log$ = 1080
co_kontynuowaæ$ = 1088
iloœæ_pieniêdzy$ = 1096
kwota_zak³adu$ = 1104
wylosowana_liczba$ = 1112
typ_zak³adu$ = 1120
?dtor$1@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA PROC ; `Wczytaj_z_pliku'::`1'::dtor$1
  00024	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00029	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002e	55		 push	 rbp
  0002f	57		 push	 rdi
  00030	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00034	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00038	48 8d 4d 48	 lea	 rcx, QWORD PTR bufor2$10[rbp]
  0003c	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00041	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
?dtor$1@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA ENDP ; `Wczytaj_z_pliku'::`1'::dtor$1
buf$9 = 8
bufor2$10 = 72
pocz¹tek$11 = 132
buf2$12 = 168
pocz¹tek$13 = 228
buf2$14 = 264
koniec$15 = 324
pocz¹tek$16 = 356
buf2$17 = 392
koniec$18 = 452
pocz¹tek$19 = 484
koniec$20 = 516
buf2$21 = 552
$T22 = 1000
tv514 = 1012
tv495 = 1012
tv425 = 1012
tv407 = 1012
tv362 = 1012
tv280 = 1012
tv224 = 1012
tv197 = 1012
tv656 = 1016
tv637 = 1016
tv618 = 1016
tv596 = 1016
tv385 = 1016
tv258 = 1016
tv242 = 1016
tv390 = 1024
tv263 = 1024
tv247 = 1024
__$ArrayPad$ = 1032
log_ogólny$ = 1072
log$ = 1080
co_kontynuowaæ$ = 1088
iloœæ_pieniêdzy$ = 1096
kwota_zak³adu$ = 1104
wylosowana_liczba$ = 1112
typ_zak³adu$ = 1120
?dtor$2@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA PROC ; `Wczytaj_z_pliku'::`1'::dtor$2
  00048	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0004d	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00052	55		 push	 rbp
  00053	57		 push	 rdi
  00054	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00058	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  0005c	48 8d 8d a8 00
	00 00		 lea	 rcx, QWORD PTR buf2$12[rbp]
  00063	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00068	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006c	5f		 pop	 rdi
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
?dtor$2@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA ENDP ; `Wczytaj_z_pliku'::`1'::dtor$2
buf$9 = 8
bufor2$10 = 72
pocz¹tek$11 = 132
buf2$12 = 168
pocz¹tek$13 = 228
buf2$14 = 264
koniec$15 = 324
pocz¹tek$16 = 356
buf2$17 = 392
koniec$18 = 452
pocz¹tek$19 = 484
koniec$20 = 516
buf2$21 = 552
$T22 = 1000
tv514 = 1012
tv495 = 1012
tv425 = 1012
tv407 = 1012
tv362 = 1012
tv280 = 1012
tv224 = 1012
tv197 = 1012
tv656 = 1016
tv637 = 1016
tv618 = 1016
tv596 = 1016
tv385 = 1016
tv258 = 1016
tv242 = 1016
tv390 = 1024
tv263 = 1024
tv247 = 1024
__$ArrayPad$ = 1032
log_ogólny$ = 1072
log$ = 1080
co_kontynuowaæ$ = 1088
iloœæ_pieniêdzy$ = 1096
kwota_zak³adu$ = 1104
wylosowana_liczba$ = 1112
typ_zak³adu$ = 1120
?dtor$3@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA PROC ; `Wczytaj_z_pliku'::`1'::dtor$3
  0006f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00074	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00079	55		 push	 rbp
  0007a	57		 push	 rdi
  0007b	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0007f	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00083	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR buf2$14[rbp]
  0008a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0008f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00093	5f		 pop	 rdi
  00094	5d		 pop	 rbp
  00095	c3		 ret	 0
?dtor$3@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA ENDP ; `Wczytaj_z_pliku'::`1'::dtor$3
buf$9 = 8
bufor2$10 = 72
pocz¹tek$11 = 132
buf2$12 = 168
pocz¹tek$13 = 228
buf2$14 = 264
koniec$15 = 324
pocz¹tek$16 = 356
buf2$17 = 392
koniec$18 = 452
pocz¹tek$19 = 484
koniec$20 = 516
buf2$21 = 552
$T22 = 1000
tv514 = 1012
tv495 = 1012
tv425 = 1012
tv407 = 1012
tv362 = 1012
tv280 = 1012
tv224 = 1012
tv197 = 1012
tv656 = 1016
tv637 = 1016
tv618 = 1016
tv596 = 1016
tv385 = 1016
tv258 = 1016
tv242 = 1016
tv390 = 1024
tv263 = 1024
tv247 = 1024
__$ArrayPad$ = 1032
log_ogólny$ = 1072
log$ = 1080
co_kontynuowaæ$ = 1088
iloœæ_pieniêdzy$ = 1096
kwota_zak³adu$ = 1104
wylosowana_liczba$ = 1112
typ_zak³adu$ = 1120
?dtor$4@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA PROC ; `Wczytaj_z_pliku'::`1'::dtor$4
  00096	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0009b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000a0	55		 push	 rbp
  000a1	57		 push	 rdi
  000a2	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000a6	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  000aa	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR buf2$17[rbp]
  000b1	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000b6	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000ba	5f		 pop	 rdi
  000bb	5d		 pop	 rbp
  000bc	c3		 ret	 0
?dtor$4@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA ENDP ; `Wczytaj_z_pliku'::`1'::dtor$4
buf$9 = 8
bufor2$10 = 72
pocz¹tek$11 = 132
buf2$12 = 168
pocz¹tek$13 = 228
buf2$14 = 264
koniec$15 = 324
pocz¹tek$16 = 356
buf2$17 = 392
koniec$18 = 452
pocz¹tek$19 = 484
koniec$20 = 516
buf2$21 = 552
$T22 = 1000
tv514 = 1012
tv495 = 1012
tv425 = 1012
tv407 = 1012
tv362 = 1012
tv280 = 1012
tv224 = 1012
tv197 = 1012
tv656 = 1016
tv637 = 1016
tv618 = 1016
tv596 = 1016
tv385 = 1016
tv258 = 1016
tv242 = 1016
tv390 = 1024
tv263 = 1024
tv247 = 1024
__$ArrayPad$ = 1032
log_ogólny$ = 1072
log$ = 1080
co_kontynuowaæ$ = 1088
iloœæ_pieniêdzy$ = 1096
kwota_zak³adu$ = 1104
wylosowana_liczba$ = 1112
typ_zak³adu$ = 1120
?dtor$5@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA PROC ; `Wczytaj_z_pliku'::`1'::dtor$5
  000bd	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000c2	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000c7	55		 push	 rbp
  000c8	57		 push	 rdi
  000c9	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000cd	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  000d1	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR buf2$21[rbp]
  000d8	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000dd	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000e1	5f		 pop	 rdi
  000e2	5d		 pop	 rbp
  000e3	c3		 ret	 0
?dtor$5@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA ENDP ; `Wczytaj_z_pliku'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
buf$9 = 8
bufor2$10 = 72
pocz¹tek$11 = 132
buf2$12 = 168
pocz¹tek$13 = 228
buf2$14 = 264
koniec$15 = 324
pocz¹tek$16 = 356
buf2$17 = 392
koniec$18 = 452
pocz¹tek$19 = 484
koniec$20 = 516
buf2$21 = 552
$T22 = 1000
tv514 = 1012
tv495 = 1012
tv425 = 1012
tv407 = 1012
tv362 = 1012
tv280 = 1012
tv224 = 1012
tv197 = 1012
tv656 = 1016
tv637 = 1016
tv618 = 1016
tv596 = 1016
tv385 = 1016
tv258 = 1016
tv242 = 1016
tv390 = 1024
tv263 = 1024
tv247 = 1024
__$ArrayPad$ = 1032
log_ogólny$ = 1072
log$ = 1080
co_kontynuowaæ$ = 1088
iloœæ_pieniêdzy$ = 1096
kwota_zak³adu$ = 1104
wylosowana_liczba$ = 1112
typ_zak³adu$ = 1120
?dtor$0@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA PROC ; `Wczytaj_z_pliku'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR buf$9[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA ENDP ; `Wczytaj_z_pliku'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
buf$9 = 8
bufor2$10 = 72
pocz¹tek$11 = 132
buf2$12 = 168
pocz¹tek$13 = 228
buf2$14 = 264
koniec$15 = 324
pocz¹tek$16 = 356
buf2$17 = 392
koniec$18 = 452
pocz¹tek$19 = 484
koniec$20 = 516
buf2$21 = 552
$T22 = 1000
tv514 = 1012
tv495 = 1012
tv425 = 1012
tv407 = 1012
tv362 = 1012
tv280 = 1012
tv224 = 1012
tv197 = 1012
tv656 = 1016
tv637 = 1016
tv618 = 1016
tv596 = 1016
tv385 = 1016
tv258 = 1016
tv242 = 1016
tv390 = 1024
tv263 = 1024
tv247 = 1024
__$ArrayPad$ = 1032
log_ogólny$ = 1072
log$ = 1080
co_kontynuowaæ$ = 1088
iloœæ_pieniêdzy$ = 1096
kwota_zak³adu$ = 1104
wylosowana_liczba$ = 1112
typ_zak³adu$ = 1120
?dtor$1@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA PROC ; `Wczytaj_z_pliku'::`1'::dtor$1
  00024	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00029	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002e	55		 push	 rbp
  0002f	57		 push	 rdi
  00030	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00034	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00038	48 8d 4d 48	 lea	 rcx, QWORD PTR bufor2$10[rbp]
  0003c	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00041	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
?dtor$1@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA ENDP ; `Wczytaj_z_pliku'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
buf$9 = 8
bufor2$10 = 72
pocz¹tek$11 = 132
buf2$12 = 168
pocz¹tek$13 = 228
buf2$14 = 264
koniec$15 = 324
pocz¹tek$16 = 356
buf2$17 = 392
koniec$18 = 452
pocz¹tek$19 = 484
koniec$20 = 516
buf2$21 = 552
$T22 = 1000
tv514 = 1012
tv495 = 1012
tv425 = 1012
tv407 = 1012
tv362 = 1012
tv280 = 1012
tv224 = 1012
tv197 = 1012
tv656 = 1016
tv637 = 1016
tv618 = 1016
tv596 = 1016
tv385 = 1016
tv258 = 1016
tv242 = 1016
tv390 = 1024
tv263 = 1024
tv247 = 1024
__$ArrayPad$ = 1032
log_ogólny$ = 1072
log$ = 1080
co_kontynuowaæ$ = 1088
iloœæ_pieniêdzy$ = 1096
kwota_zak³adu$ = 1104
wylosowana_liczba$ = 1112
typ_zak³adu$ = 1120
?dtor$2@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA PROC ; `Wczytaj_z_pliku'::`1'::dtor$2
  00048	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0004d	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00052	55		 push	 rbp
  00053	57		 push	 rdi
  00054	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00058	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  0005c	48 8d 8d a8 00
	00 00		 lea	 rcx, QWORD PTR buf2$12[rbp]
  00063	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00068	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006c	5f		 pop	 rdi
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
?dtor$2@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA ENDP ; `Wczytaj_z_pliku'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
buf$9 = 8
bufor2$10 = 72
pocz¹tek$11 = 132
buf2$12 = 168
pocz¹tek$13 = 228
buf2$14 = 264
koniec$15 = 324
pocz¹tek$16 = 356
buf2$17 = 392
koniec$18 = 452
pocz¹tek$19 = 484
koniec$20 = 516
buf2$21 = 552
$T22 = 1000
tv514 = 1012
tv495 = 1012
tv425 = 1012
tv407 = 1012
tv362 = 1012
tv280 = 1012
tv224 = 1012
tv197 = 1012
tv656 = 1016
tv637 = 1016
tv618 = 1016
tv596 = 1016
tv385 = 1016
tv258 = 1016
tv242 = 1016
tv390 = 1024
tv263 = 1024
tv247 = 1024
__$ArrayPad$ = 1032
log_ogólny$ = 1072
log$ = 1080
co_kontynuowaæ$ = 1088
iloœæ_pieniêdzy$ = 1096
kwota_zak³adu$ = 1104
wylosowana_liczba$ = 1112
typ_zak³adu$ = 1120
?dtor$3@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA PROC ; `Wczytaj_z_pliku'::`1'::dtor$3
  0006f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00074	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00079	55		 push	 rbp
  0007a	57		 push	 rdi
  0007b	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0007f	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00083	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR buf2$14[rbp]
  0008a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0008f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00093	5f		 pop	 rdi
  00094	5d		 pop	 rbp
  00095	c3		 ret	 0
?dtor$3@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA ENDP ; `Wczytaj_z_pliku'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
buf$9 = 8
bufor2$10 = 72
pocz¹tek$11 = 132
buf2$12 = 168
pocz¹tek$13 = 228
buf2$14 = 264
koniec$15 = 324
pocz¹tek$16 = 356
buf2$17 = 392
koniec$18 = 452
pocz¹tek$19 = 484
koniec$20 = 516
buf2$21 = 552
$T22 = 1000
tv514 = 1012
tv495 = 1012
tv425 = 1012
tv407 = 1012
tv362 = 1012
tv280 = 1012
tv224 = 1012
tv197 = 1012
tv656 = 1016
tv637 = 1016
tv618 = 1016
tv596 = 1016
tv385 = 1016
tv258 = 1016
tv242 = 1016
tv390 = 1024
tv263 = 1024
tv247 = 1024
__$ArrayPad$ = 1032
log_ogólny$ = 1072
log$ = 1080
co_kontynuowaæ$ = 1088
iloœæ_pieniêdzy$ = 1096
kwota_zak³adu$ = 1104
wylosowana_liczba$ = 1112
typ_zak³adu$ = 1120
?dtor$4@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA PROC ; `Wczytaj_z_pliku'::`1'::dtor$4
  00096	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0009b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000a0	55		 push	 rbp
  000a1	57		 push	 rdi
  000a2	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000a6	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  000aa	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR buf2$17[rbp]
  000b1	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000b6	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000ba	5f		 pop	 rdi
  000bb	5d		 pop	 rbp
  000bc	c3		 ret	 0
?dtor$4@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA ENDP ; `Wczytaj_z_pliku'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
buf$9 = 8
bufor2$10 = 72
pocz¹tek$11 = 132
buf2$12 = 168
pocz¹tek$13 = 228
buf2$14 = 264
koniec$15 = 324
pocz¹tek$16 = 356
buf2$17 = 392
koniec$18 = 452
pocz¹tek$19 = 484
koniec$20 = 516
buf2$21 = 552
$T22 = 1000
tv514 = 1012
tv495 = 1012
tv425 = 1012
tv407 = 1012
tv362 = 1012
tv280 = 1012
tv224 = 1012
tv197 = 1012
tv656 = 1016
tv637 = 1016
tv618 = 1016
tv596 = 1016
tv385 = 1016
tv258 = 1016
tv242 = 1016
tv390 = 1024
tv263 = 1024
tv247 = 1024
__$ArrayPad$ = 1032
log_ogólny$ = 1072
log$ = 1080
co_kontynuowaæ$ = 1088
iloœæ_pieniêdzy$ = 1096
kwota_zak³adu$ = 1104
wylosowana_liczba$ = 1112
typ_zak³adu$ = 1120
?dtor$5@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA PROC ; `Wczytaj_z_pliku'::`1'::dtor$5
  000bd	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000c2	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000c7	55		 push	 rbp
  000c8	57		 push	 rdi
  000c9	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000cd	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  000d1	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR buf2$21[rbp]
  000d8	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000dd	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000e1	5f		 pop	 rdi
  000e2	5d		 pop	 rbp
  000e3	c3		 ret	 0
?dtor$5@?0??Wczytaj_z_pliku@@YAXAEAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AEAV?$basic_fstream@DU?$char_traits@D@std@@@2@AEADAEAH33AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z@4HA ENDP ; `Wczytaj_z_pliku'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
numers$ = 16
wynik$ = 296
numers$6 = 368
$T7 = 1224
$T8 = 1288
$T9 = 1352
$T10 = 1416
$T11 = 1480
$T12 = 1544
$T13 = 1608
$T14 = 1672
$T15 = 1736
$T16 = 1800
$T17 = 1864
$T18 = 1928
tv342 = 1944
tv340 = 1944
tv338 = 1944
tv336 = 1944
tv334 = 1944
tv332 = 1944
tv330 = 1944
tv328 = 1944
tv294 = 1944
tv72 = 1944
tv345 = 1952
tv323 = 1952
tv346 = 1960
tv325 = 1968
__$ArrayPad$ = 1976
wylosowana_liczba$ = 2016
typ_zak³adu$ = 2024
?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Odczytaj_liczbê, COMDAT

; 501  : void Odczytaj_liczbê(int & wylosowana_liczba, string & typ_zak³adu) {

$LN38:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 07
	00 00		 sub	 rsp, 2024		; 000007e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 fa 01 00 00	 mov	 ecx, 506		; 000001faH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	08 00 00	 mov	 rcx, QWORD PTR [rsp+2056]
  0002f	48 c7 85 88 07
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T18[rbp], -2
  0003a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00041	48 33 c5	 xor	 rax, rbp
  00044	48 89 85 b8 07
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 502  : 	if (g³os_odczytu_numeru == 0)

  0004b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g³os_odczytu_numeru@@3HA, 0 ; g³os_odczytu_numeru
  00052	75 05		 jne	 SHORT $LN2@Odczytaj_l

; 503  : 		return;

  00054	e9 10 06 00 00	 jmp	 $LN1@Odczytaj_l
$LN2@Odczytaj_l:

; 504  : 	if ((g³os_odczytu_numeru < 10) && (g³os_odczytu_numeru > 0))

  00059	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR ?g³os_odczytu_numeru@@3HA, 10 ; g³os_odczytu_numeru
  00060	7d 19		 jge	 SHORT $LN3@Odczytaj_l
  00062	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g³os_odczytu_numeru@@3HA, 0 ; g³os_odczytu_numeru
  00069	7e 10		 jle	 SHORT $LN3@Odczytaj_l

; 505  : 		if (!G³osyKompletne) return;

  0006b	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?G³osyKompletne@@3_NA ; G³osyKompletne
  00072	85 c0		 test	 eax, eax
  00074	75 05		 jne	 SHORT $LN3@Odczytaj_l
  00076	e9 ee 05 00 00	 jmp	 $LN1@Odczytaj_l
$LN3@Odczytaj_l:

; 506  : 
; 507  : 	stringstream numers;

  0007b	ba f8 00 00 00	 mov	 edx, 248		; 000000f8H
  00080	48 8d 4d 10	 lea	 rcx, QWORD PTR numers$[rbp]
  00084	e8 00 00 00 00	 call	 ?__autoclassinit2@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z
  00089	41 b8 01 00 00
	00		 mov	 r8d, 1
  0008f	ba 03 00 00 00	 mov	 edx, 3
  00094	48 8d 4d 10	 lea	 rcx, QWORD PTR numers$[rbp]
  00098	e8 00 00 00 00	 call	 ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  0009d	90		 npad	 1

; 508  : 	numers << wylosowana_liczba;

  0009e	48 8d 45 20	 lea	 rax, QWORD PTR numers$[rbp+16]
  000a2	48 8b 8d e0 07
	00 00		 mov	 rcx, QWORD PTR wylosowana_liczba$[rbp]
  000a9	8b 11		 mov	 edx, DWORD PTR [rcx]
  000ab	48 8b c8	 mov	 rcx, rax
  000ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z

; 509  : 	string wynik = G³os + numers.str() + ".wav";

  000b4	48 8d 95 c8 04
	00 00		 lea	 rdx, QWORD PTR $T7[rbp]
  000bb	48 8d 4d 10	 lea	 rcx, QWORD PTR numers$[rbp]
  000bf	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
  000c4	48 89 85 98 07
	00 00		 mov	 QWORD PTR tv72[rbp], rax
  000cb	48 8b 85 98 07
	00 00		 mov	 rax, QWORD PTR tv72[rbp]
  000d2	48 89 85 a0 07
	00 00		 mov	 QWORD PTR tv323[rbp], rax
  000d9	4c 8b 85 a0 07
	00 00		 mov	 r8, QWORD PTR tv323[rbp]
  000e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  000e7	48 8d 8d 08 05
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  000ee	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@$$QEAV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000f3	48 89 85 a8 07
	00 00		 mov	 QWORD PTR tv346[rbp], rax
  000fa	48 8b 85 a8 07
	00 00		 mov	 rax, QWORD PTR tv346[rbp]
  00101	48 89 85 b0 07
	00 00		 mov	 QWORD PTR tv325[rbp], rax
  00108	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04IBLEHOMF@?4wav?$AA@
  0010f	48 8b 95 b0 07
	00 00		 mov	 rdx, QWORD PTR tv325[rbp]
  00116	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR wynik$[rbp]
  0011d	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QEAV10@QEBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00122	90		 npad	 1
  00123	48 8d 8d 08 05
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  0012a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0012f	90		 npad	 1
  00130	48 8d 8d c8 04
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00137	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 510  : 	PlaySound(wynik.c_str(), nullptr, SND_SYNC);

  0013c	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR wynik$[rbp]
  00143	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00148	45 33 c0	 xor	 r8d, r8d
  0014b	33 d2		 xor	 edx, edx
  0014d	48 8b c8	 mov	 rcx, rax
  00150	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PlaySoundA

; 511  : 	wynik.clear();

  00156	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR wynik$[rbp]
  0015d	e8 00 00 00 00	 call	 ?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear

; 512  : 	if (typ_zak³adu == "p" || typ_zak³adu == "n")

  00162	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01JBBJJEPG@p?$AA@
  00169	48 8b 8d e8 07
	00 00		 mov	 rcx, QWORD PTR typ_zak³adu$[rbp]
  00170	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  00175	0f b6 c0	 movzx	 eax, al
  00178	85 c0		 test	 eax, eax
  0017a	75 1e		 jne	 SHORT $LN7@Odczytaj_l
  0017c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EFFIKLCJ@n?$AA@
  00183	48 8b 8d e8 07
	00 00		 mov	 rcx, QWORD PTR typ_zak³adu$[rbp]
  0018a	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0018f	0f b6 c0	 movzx	 eax, al
  00192	85 c0		 test	 eax, eax
  00194	0f 84 d0 00 00
	00		 je	 $LN5@Odczytaj_l
$LN7@Odczytaj_l:

; 513  : 		if (wylosowana_liczba % 2 == 0)

  0019a	48 8b 85 e0 07
	00 00		 mov	 rax, QWORD PTR wylosowana_liczba$[rbp]
  001a1	8b 00		 mov	 eax, DWORD PTR [rax]
  001a3	99		 cdq
  001a4	83 e0 01	 and	 eax, 1
  001a7	33 c2		 xor	 eax, edx
  001a9	2b c2		 sub	 eax, edx
  001ab	85 c0		 test	 eax, eax
  001ad	75 5c		 jne	 SHORT $LN8@Odczytaj_l

; 514  : 		{
; 515  : 			wynik = G³os + "p.wav";

  001af	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05PNHGCFLK@p?4wav?$AA@
  001b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  001bd	48 8d 8d 48 05
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  001c4	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  001c9	48 89 85 98 07
	00 00		 mov	 QWORD PTR tv328[rbp], rax
  001d0	48 8b 95 98 07
	00 00		 mov	 rdx, QWORD PTR tv328[rbp]
  001d7	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR wynik$[rbp]
  001de	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  001e3	48 8d 8d 48 05
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  001ea	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 516  : 			PlaySound(wynik.c_str(), nullptr, SND_SYNC);

  001ef	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR wynik$[rbp]
  001f6	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  001fb	45 33 c0	 xor	 r8d, r8d
  001fe	33 d2		 xor	 edx, edx
  00200	48 8b c8	 mov	 rcx, rax
  00203	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PlaySoundA

; 517  : 		}
; 518  : 		else

  00209	eb 5a		 jmp	 SHORT $LN9@Odczytaj_l
$LN8@Odczytaj_l:

; 519  : 		{
; 520  : 			wynik = G³os + "n.wav";

  0020b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05MEKKEGFB@n?4wav?$AA@
  00212	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  00219	48 8d 8d 88 05
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  00220	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00225	48 89 85 98 07
	00 00		 mov	 QWORD PTR tv330[rbp], rax
  0022c	48 8b 95 98 07
	00 00		 mov	 rdx, QWORD PTR tv330[rbp]
  00233	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR wynik$[rbp]
  0023a	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  0023f	48 8d 8d 88 05
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  00246	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 521  : 			PlaySound(wynik.c_str(), nullptr, SND_SYNC);

  0024b	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR wynik$[rbp]
  00252	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00257	45 33 c0	 xor	 r8d, r8d
  0025a	33 d2		 xor	 edx, edx
  0025c	48 8b c8	 mov	 rcx, rax
  0025f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PlaySoundA
$LN9@Odczytaj_l:

; 522  : 		}

  00265	e9 e9 03 00 00	 jmp	 $LN6@Odczytaj_l
$LN5@Odczytaj_l:

; 523  : 	else if (typ_zak³adu == "r" || typ_zak³adu == "b")

  0026a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01KDCPPGHE@r?$AA@
  00271	48 8b 8d e8 07
	00 00		 mov	 rcx, QWORD PTR typ_zak³adu$[rbp]
  00278	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0027d	0f b6 c0	 movzx	 eax, al
  00280	85 c0		 test	 eax, eax
  00282	75 1e		 jne	 SHORT $LN12@Odczytaj_l
  00284	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01OJONOECF@b?$AA@
  0028b	48 8b 8d e8 07
	00 00		 mov	 rcx, QWORD PTR typ_zak³adu$[rbp]
  00292	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  00297	0f b6 c0	 movzx	 eax, al
  0029a	85 c0		 test	 eax, eax
  0029c	0f 84 d5 00 00
	00		 je	 $LN10@Odczytaj_l
$LN12@Odczytaj_l:

; 524  : 		if (Ruletka_plansza_kolor[wylosowana_liczba] == 'r') {

  002a2	48 8b 85 e0 07
	00 00		 mov	 rax, QWORD PTR wylosowana_liczba$[rbp]
  002a9	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  002ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Ruletka_plansza_kolor@@3QBDB
  002b3	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  002b7	83 f8 72	 cmp	 eax, 114		; 00000072H
  002ba	75 5c		 jne	 SHORT $LN13@Odczytaj_l

; 525  : 			wynik = G³os + "r.wav";

  002bc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05LALOIELB@r?4wav?$AA@
  002c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  002ca	48 8d 8d c8 05
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  002d1	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  002d6	48 89 85 98 07
	00 00		 mov	 QWORD PTR tv332[rbp], rax
  002dd	48 8b 95 98 07
	00 00		 mov	 rdx, QWORD PTR tv332[rbp]
  002e4	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR wynik$[rbp]
  002eb	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  002f0	48 8d 8d c8 05
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  002f7	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 526  : 			PlaySound(wynik.c_str(), nullptr, SND_SYNC);

  002fc	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR wynik$[rbp]
  00303	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00308	45 33 c0	 xor	 r8d, r8d
  0030b	33 d2		 xor	 edx, edx
  0030d	48 8b c8	 mov	 rcx, rax
  00310	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PlaySoundA

; 527  : 		}
; 528  : 		else {

  00316	eb 5a		 jmp	 SHORT $LN14@Odczytaj_l
$LN13@Odczytaj_l:

; 529  : 			wynik = G³os + "b.wav";

  00318	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05LDGIIGCK@b?4wav?$AA@
  0031f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  00326	48 8d 8d 08 06
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  0032d	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00332	48 89 85 98 07
	00 00		 mov	 QWORD PTR tv334[rbp], rax
  00339	48 8b 95 98 07
	00 00		 mov	 rdx, QWORD PTR tv334[rbp]
  00340	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR wynik$[rbp]
  00347	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  0034c	48 8d 8d 08 06
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  00353	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 530  : 			PlaySound(wynik.c_str(), nullptr, SND_SYNC);

  00358	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR wynik$[rbp]
  0035f	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00364	45 33 c0	 xor	 r8d, r8d
  00367	33 d2		 xor	 edx, edx
  00369	48 8b c8	 mov	 rcx, rax
  0036c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PlaySoundA
$LN14@Odczytaj_l:

; 531  : 		}

  00372	e9 dc 02 00 00	 jmp	 $LN6@Odczytaj_l
$LN10@Odczytaj_l:

; 532  : 	else if (typ_zak³adu == "g" || typ_zak³adu == "d")

  00377	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01JEJKBAGA@g?$AA@
  0037e	48 8b 8d e8 07
	00 00		 mov	 rcx, QWORD PTR typ_zak³adu$[rbp]
  00385	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0038a	0f b6 c0	 movzx	 eax, al
  0038d	85 c0		 test	 eax, eax
  0038f	75 1e		 jne	 SHORT $LN17@Odczytaj_l
  00391	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01LPLHEDKD@d?$AA@
  00398	48 8b 8d e8 07
	00 00		 mov	 rcx, QWORD PTR typ_zak³adu$[rbp]
  0039f	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  003a4	0f b6 c0	 movzx	 eax, al
  003a7	85 c0		 test	 eax, eax
  003a9	0f 84 c7 00 00
	00		 je	 $LN15@Odczytaj_l
$LN17@Odczytaj_l:

; 533  : 		if (wylosowana_liczba < 19)

  003af	48 8b 85 e0 07
	00 00		 mov	 rax, QWORD PTR wylosowana_liczba$[rbp]
  003b6	83 38 13	 cmp	 DWORD PTR [rax], 19
  003b9	7d 5c		 jge	 SHORT $LN18@Odczytaj_l

; 534  : 		{
; 535  : 			wynik = G³os + "g.wav";

  003bb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05ODKFBHJJ@g?4wav?$AA@
  003c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  003c9	48 8d 8d 48 06
	00 00		 lea	 rcx, QWORD PTR $T13[rbp]
  003d0	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  003d5	48 89 85 98 07
	00 00		 mov	 QWORD PTR tv336[rbp], rax
  003dc	48 8b 95 98 07
	00 00		 mov	 rdx, QWORD PTR tv336[rbp]
  003e3	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR wynik$[rbp]
  003ea	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  003ef	48 8d 8d 48 06
	00 00		 lea	 rcx, QWORD PTR $T13[rbp]
  003f6	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 536  : 			PlaySound(wynik.c_str(), nullptr, SND_SYNC);

  003fb	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR wynik$[rbp]
  00402	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00407	45 33 c0	 xor	 r8d, r8d
  0040a	33 d2		 xor	 edx, edx
  0040c	48 8b c8	 mov	 rcx, rax
  0040f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PlaySoundA

; 537  : 		}
; 538  : 		else {

  00415	eb 5a		 jmp	 SHORT $LN19@Odczytaj_l
$LN18@Odczytaj_l:

; 539  : 			wynik = G³os + "d.wav";

  00417	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05GFDBGFDH@d?4wav?$AA@
  0041e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  00425	48 8d 8d 88 06
	00 00		 lea	 rcx, QWORD PTR $T14[rbp]
  0042c	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00431	48 89 85 98 07
	00 00		 mov	 QWORD PTR tv338[rbp], rax
  00438	48 8b 95 98 07
	00 00		 mov	 rdx, QWORD PTR tv338[rbp]
  0043f	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR wynik$[rbp]
  00446	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  0044b	48 8d 8d 88 06
	00 00		 lea	 rcx, QWORD PTR $T14[rbp]
  00452	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 540  : 			PlaySound(wynik.c_str(), nullptr, SND_SYNC);

  00457	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR wynik$[rbp]
  0045e	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00463	45 33 c0	 xor	 r8d, r8d
  00466	33 d2		 xor	 edx, edx
  00468	48 8b c8	 mov	 rcx, rax
  0046b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PlaySoundA
$LN19@Odczytaj_l:

; 541  : 		}

  00471	e9 dd 01 00 00	 jmp	 $LN6@Odczytaj_l
$LN15@Odczytaj_l:

; 542  : 	else if (typ_zak³adu[0] == 'k')

  00476	33 d2		 xor	 edx, edx
  00478	48 8b 8d e8 07
	00 00		 mov	 rcx, QWORD PTR typ_zak³adu$[rbp]
  0047f	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00484	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00487	83 f8 6b	 cmp	 eax, 107		; 0000006bH
  0048a	0f 85 99 00 00
	00		 jne	 $LN20@Odczytaj_l

; 543  : 	{
; 544  : 		wynik = G³os + "k";

  00490	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01DICPFPGM@k?$AA@
  00497	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  0049e	48 8d 8d c8 06
	00 00		 lea	 rcx, QWORD PTR $T15[rbp]
  004a5	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  004aa	48 89 85 98 07
	00 00		 mov	 QWORD PTR tv340[rbp], rax
  004b1	48 8b 95 98 07
	00 00		 mov	 rdx, QWORD PTR tv340[rbp]
  004b8	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR wynik$[rbp]
  004bf	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  004c4	48 8d 8d c8 06
	00 00		 lea	 rcx, QWORD PTR $T15[rbp]
  004cb	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 545  : 		wynik += (((wylosowana_liczba - 1) % 3) + 49);

  004d0	48 8b 85 e0 07
	00 00		 mov	 rax, QWORD PTR wylosowana_liczba$[rbp]
  004d7	8b 00		 mov	 eax, DWORD PTR [rax]
  004d9	ff c8		 dec	 eax
  004db	99		 cdq
  004dc	b9 03 00 00 00	 mov	 ecx, 3
  004e1	f7 f9		 idiv	 ecx
  004e3	8b c2		 mov	 eax, edx
  004e5	83 c0 31	 add	 eax, 49			; 00000031H
  004e8	0f b6 d0	 movzx	 edx, al
  004eb	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR wynik$[rbp]
  004f2	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 546  : 		wynik += ".wav";

  004f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04IBLEHOMF@?4wav?$AA@
  004fe	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR wynik$[rbp]
  00505	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 547  : 		PlaySound(wynik.c_str(), nullptr, SND_SYNC);

  0050a	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR wynik$[rbp]
  00511	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00516	45 33 c0	 xor	 r8d, r8d
  00519	33 d2		 xor	 edx, edx
  0051b	48 8b c8	 mov	 rcx, rax
  0051e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PlaySoundA
  00524	e9 2a 01 00 00	 jmp	 $LN6@Odczytaj_l
$LN20@Odczytaj_l:

; 548  : 	}
; 549  : 	else if (typ_zak³adu[0] == 'w')

  00529	33 d2		 xor	 edx, edx
  0052b	48 8b 8d e8 07
	00 00		 mov	 rcx, QWORD PTR typ_zak³adu$[rbp]
  00532	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00537	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0053a	83 f8 77	 cmp	 eax, 119		; 00000077H
  0053d	0f 85 10 01 00
	00		 jne	 $LN6@Odczytaj_l

; 550  : 	{
; 551  : 		wynik = G³os + "w";

  00543	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01NOFIACDB@w?$AA@
  0054a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  00551	48 8d 8d 08 07
	00 00		 lea	 rcx, QWORD PTR $T16[rbp]
  00558	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@QEBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0055d	48 89 85 98 07
	00 00		 mov	 QWORD PTR tv342[rbp], rax
  00564	48 8b 95 98 07
	00 00		 mov	 rdx, QWORD PTR tv342[rbp]
  0056b	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR wynik$[rbp]
  00572	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00577	48 8d 8d 08 07
	00 00		 lea	 rcx, QWORD PTR $T16[rbp]
  0057e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 552  : 		stringstream numers;

  00583	ba f8 00 00 00	 mov	 edx, 248		; 000000f8H
  00588	48 8d 8d 70 01
	00 00		 lea	 rcx, QWORD PTR numers$6[rbp]
  0058f	e8 00 00 00 00	 call	 ?__autoclassinit2@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z
  00594	41 b8 01 00 00
	00		 mov	 r8d, 1
  0059a	ba 03 00 00 00	 mov	 edx, 3
  0059f	48 8d 8d 70 01
	00 00		 lea	 rcx, QWORD PTR numers$6[rbp]
  005a6	e8 00 00 00 00	 call	 ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  005ab	90		 npad	 1

; 553  : 		numers << ((wylosowana_liczba - 1) / 3 + 1);

  005ac	48 8b 85 e0 07
	00 00		 mov	 rax, QWORD PTR wylosowana_liczba$[rbp]
  005b3	8b 00		 mov	 eax, DWORD PTR [rax]
  005b5	ff c8		 dec	 eax
  005b7	99		 cdq
  005b8	b9 03 00 00 00	 mov	 ecx, 3
  005bd	f7 f9		 idiv	 ecx
  005bf	ff c0		 inc	 eax
  005c1	48 8d 8d 80 01
	00 00		 lea	 rcx, QWORD PTR numers$6[rbp+16]
  005c8	8b d0		 mov	 edx, eax
  005ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z

; 554  : 		wynik += numers.str();

  005d0	48 8d 95 48 07
	00 00		 lea	 rdx, QWORD PTR $T17[rbp]
  005d7	48 8d 8d 70 01
	00 00		 lea	 rcx, QWORD PTR numers$6[rbp]
  005de	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
  005e3	48 89 85 98 07
	00 00		 mov	 QWORD PTR tv294[rbp], rax
  005ea	48 8b 85 98 07
	00 00		 mov	 rax, QWORD PTR tv294[rbp]
  005f1	48 89 85 a0 07
	00 00		 mov	 QWORD PTR tv345[rbp], rax
  005f8	48 8b 95 a0 07
	00 00		 mov	 rdx, QWORD PTR tv345[rbp]
  005ff	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR wynik$[rbp]
  00606	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
  0060b	90		 npad	 1
  0060c	48 8d 8d 48 07
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  00613	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 555  : 		wynik += ".wav";

  00618	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04IBLEHOMF@?4wav?$AA@
  0061f	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR wynik$[rbp]
  00626	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 556  : 		PlaySound(wynik.c_str(), nullptr, SND_SYNC);

  0062b	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR wynik$[rbp]
  00632	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00637	45 33 c0	 xor	 r8d, r8d
  0063a	33 d2		 xor	 edx, edx
  0063c	48 8b c8	 mov	 rcx, rax
  0063f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PlaySoundA
  00645	90		 npad	 1

; 557  : 	}

  00646	48 8d 8d 70 01
	00 00		 lea	 rcx, QWORD PTR numers$6[rbp]
  0064d	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  00652	90		 npad	 1
$LN6@Odczytaj_l:

; 558  : }

  00653	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR wynik$[rbp]
  0065a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0065f	90		 npad	 1
  00660	48 8d 4d 10	 lea	 rcx, QWORD PTR numers$[rbp]
  00664	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
$LN1@Odczytaj_l:
  00669	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0066d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$rtcFrameData
  00674	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00679	48 8b 8d b8 07
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00680	48 33 cd	 xor	 rcx, rbp
  00683	e8 00 00 00 00	 call	 __security_check_cookie
  00688	48 8d a5 c8 07
	00 00		 lea	 rsp, QWORD PTR [rbp+1992]
  0068f	5f		 pop	 rdi
  00690	5d		 pop	 rbp
  00691	c3		 ret	 0
?Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Odczytaj_liczbê
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
numers$ = 16
wynik$ = 296
numers$6 = 368
$T7 = 1224
$T8 = 1288
$T9 = 1352
$T10 = 1416
$T11 = 1480
$T12 = 1544
$T13 = 1608
$T14 = 1672
$T15 = 1736
$T16 = 1800
$T17 = 1864
$T18 = 1928
tv342 = 1944
tv340 = 1944
tv338 = 1944
tv336 = 1944
tv334 = 1944
tv332 = 1944
tv330 = 1944
tv328 = 1944
tv294 = 1944
tv72 = 1944
tv345 = 1952
tv323 = 1952
tv346 = 1960
tv325 = 1968
__$ArrayPad$ = 1976
wylosowana_liczba$ = 2016
typ_zak³adu$ = 2024
?dtor$0@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA PROC ; `Odczytaj_liczbê'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 10	 lea	 rcx, QWORD PTR numers$[rbp]
  00018	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA ENDP ; `Odczytaj_liczbê'::`1'::dtor$0
numers$ = 16
wynik$ = 296
numers$6 = 368
$T7 = 1224
$T8 = 1288
$T9 = 1352
$T10 = 1416
$T11 = 1480
$T12 = 1544
$T13 = 1608
$T14 = 1672
$T15 = 1736
$T16 = 1800
$T17 = 1864
$T18 = 1928
tv342 = 1944
tv340 = 1944
tv338 = 1944
tv336 = 1944
tv334 = 1944
tv332 = 1944
tv330 = 1944
tv328 = 1944
tv294 = 1944
tv72 = 1944
tv345 = 1952
tv323 = 1952
tv346 = 1960
tv325 = 1968
__$ArrayPad$ = 1976
wylosowana_liczba$ = 2016
typ_zak³adu$ = 2024
?dtor$1@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA PROC ; `Odczytaj_liczbê'::`1'::dtor$1
  00024	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00029	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002e	55		 push	 rbp
  0002f	57		 push	 rdi
  00030	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00034	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00038	48 8d 8d c8 04
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  0003f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00044	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00048	5f		 pop	 rdi
  00049	5d		 pop	 rbp
  0004a	c3		 ret	 0
?dtor$1@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA ENDP ; `Odczytaj_liczbê'::`1'::dtor$1
numers$ = 16
wynik$ = 296
numers$6 = 368
$T7 = 1224
$T8 = 1288
$T9 = 1352
$T10 = 1416
$T11 = 1480
$T12 = 1544
$T13 = 1608
$T14 = 1672
$T15 = 1736
$T16 = 1800
$T17 = 1864
$T18 = 1928
tv342 = 1944
tv340 = 1944
tv338 = 1944
tv336 = 1944
tv334 = 1944
tv332 = 1944
tv330 = 1944
tv328 = 1944
tv294 = 1944
tv72 = 1944
tv345 = 1952
tv323 = 1952
tv346 = 1960
tv325 = 1968
__$ArrayPad$ = 1976
wylosowana_liczba$ = 2016
typ_zak³adu$ = 2024
?dtor$2@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA PROC ; `Odczytaj_liczbê'::`1'::dtor$2
  0004b	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00050	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00055	55		 push	 rbp
  00056	57		 push	 rdi
  00057	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0005b	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  0005f	48 8d 8d 08 05
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  00066	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0006b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006f	5f		 pop	 rdi
  00070	5d		 pop	 rbp
  00071	c3		 ret	 0
?dtor$2@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA ENDP ; `Odczytaj_liczbê'::`1'::dtor$2
numers$ = 16
wynik$ = 296
numers$6 = 368
$T7 = 1224
$T8 = 1288
$T9 = 1352
$T10 = 1416
$T11 = 1480
$T12 = 1544
$T13 = 1608
$T14 = 1672
$T15 = 1736
$T16 = 1800
$T17 = 1864
$T18 = 1928
tv342 = 1944
tv340 = 1944
tv338 = 1944
tv336 = 1944
tv334 = 1944
tv332 = 1944
tv330 = 1944
tv328 = 1944
tv294 = 1944
tv72 = 1944
tv345 = 1952
tv323 = 1952
tv346 = 1960
tv325 = 1968
__$ArrayPad$ = 1976
wylosowana_liczba$ = 2016
typ_zak³adu$ = 2024
?dtor$3@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA PROC ; `Odczytaj_liczbê'::`1'::dtor$3
  00072	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00077	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0007c	55		 push	 rbp
  0007d	57		 push	 rdi
  0007e	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00082	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00086	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR wynik$[rbp]
  0008d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00092	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?dtor$3@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA ENDP ; `Odczytaj_liczbê'::`1'::dtor$3
numers$ = 16
wynik$ = 296
numers$6 = 368
$T7 = 1224
$T8 = 1288
$T9 = 1352
$T10 = 1416
$T11 = 1480
$T12 = 1544
$T13 = 1608
$T14 = 1672
$T15 = 1736
$T16 = 1800
$T17 = 1864
$T18 = 1928
tv342 = 1944
tv340 = 1944
tv338 = 1944
tv336 = 1944
tv334 = 1944
tv332 = 1944
tv330 = 1944
tv328 = 1944
tv294 = 1944
tv72 = 1944
tv345 = 1952
tv323 = 1952
tv346 = 1960
tv325 = 1968
__$ArrayPad$ = 1976
wylosowana_liczba$ = 2016
typ_zak³adu$ = 2024
?dtor$12@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA PROC ; `Odczytaj_liczbê'::`1'::dtor$12
  00099	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0009e	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000a3	55		 push	 rbp
  000a4	57		 push	 rdi
  000a5	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000a9	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  000ad	48 8d 8d 70 01
	00 00		 lea	 rcx, QWORD PTR numers$6[rbp]
  000b4	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  000b9	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000bd	5f		 pop	 rdi
  000be	5d		 pop	 rbp
  000bf	c3		 ret	 0
?dtor$12@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA ENDP ; `Odczytaj_liczbê'::`1'::dtor$12
numers$ = 16
wynik$ = 296
numers$6 = 368
$T7 = 1224
$T8 = 1288
$T9 = 1352
$T10 = 1416
$T11 = 1480
$T12 = 1544
$T13 = 1608
$T14 = 1672
$T15 = 1736
$T16 = 1800
$T17 = 1864
$T18 = 1928
tv342 = 1944
tv340 = 1944
tv338 = 1944
tv336 = 1944
tv334 = 1944
tv332 = 1944
tv330 = 1944
tv328 = 1944
tv294 = 1944
tv72 = 1944
tv345 = 1952
tv323 = 1952
tv346 = 1960
tv325 = 1968
__$ArrayPad$ = 1976
wylosowana_liczba$ = 2016
typ_zak³adu$ = 2024
?dtor$13@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA PROC ; `Odczytaj_liczbê'::`1'::dtor$13
  000c0	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000c5	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000ca	55		 push	 rbp
  000cb	57		 push	 rdi
  000cc	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000d0	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  000d4	48 8d 8d 48 07
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  000db	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000e0	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000e4	5f		 pop	 rdi
  000e5	5d		 pop	 rbp
  000e6	c3		 ret	 0
?dtor$13@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA ENDP ; `Odczytaj_liczbê'::`1'::dtor$13
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
numers$ = 16
wynik$ = 296
numers$6 = 368
$T7 = 1224
$T8 = 1288
$T9 = 1352
$T10 = 1416
$T11 = 1480
$T12 = 1544
$T13 = 1608
$T14 = 1672
$T15 = 1736
$T16 = 1800
$T17 = 1864
$T18 = 1928
tv342 = 1944
tv340 = 1944
tv338 = 1944
tv336 = 1944
tv334 = 1944
tv332 = 1944
tv330 = 1944
tv328 = 1944
tv294 = 1944
tv72 = 1944
tv345 = 1952
tv323 = 1952
tv346 = 1960
tv325 = 1968
__$ArrayPad$ = 1976
wylosowana_liczba$ = 2016
typ_zak³adu$ = 2024
?dtor$0@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA PROC ; `Odczytaj_liczbê'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 10	 lea	 rcx, QWORD PTR numers$[rbp]
  00018	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA ENDP ; `Odczytaj_liczbê'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
numers$ = 16
wynik$ = 296
numers$6 = 368
$T7 = 1224
$T8 = 1288
$T9 = 1352
$T10 = 1416
$T11 = 1480
$T12 = 1544
$T13 = 1608
$T14 = 1672
$T15 = 1736
$T16 = 1800
$T17 = 1864
$T18 = 1928
tv342 = 1944
tv340 = 1944
tv338 = 1944
tv336 = 1944
tv334 = 1944
tv332 = 1944
tv330 = 1944
tv328 = 1944
tv294 = 1944
tv72 = 1944
tv345 = 1952
tv323 = 1952
tv346 = 1960
tv325 = 1968
__$ArrayPad$ = 1976
wylosowana_liczba$ = 2016
typ_zak³adu$ = 2024
?dtor$1@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA PROC ; `Odczytaj_liczbê'::`1'::dtor$1
  00024	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00029	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002e	55		 push	 rbp
  0002f	57		 push	 rdi
  00030	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00034	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00038	48 8d 8d c8 04
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  0003f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00044	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00048	5f		 pop	 rdi
  00049	5d		 pop	 rbp
  0004a	c3		 ret	 0
?dtor$1@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA ENDP ; `Odczytaj_liczbê'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
numers$ = 16
wynik$ = 296
numers$6 = 368
$T7 = 1224
$T8 = 1288
$T9 = 1352
$T10 = 1416
$T11 = 1480
$T12 = 1544
$T13 = 1608
$T14 = 1672
$T15 = 1736
$T16 = 1800
$T17 = 1864
$T18 = 1928
tv342 = 1944
tv340 = 1944
tv338 = 1944
tv336 = 1944
tv334 = 1944
tv332 = 1944
tv330 = 1944
tv328 = 1944
tv294 = 1944
tv72 = 1944
tv345 = 1952
tv323 = 1952
tv346 = 1960
tv325 = 1968
__$ArrayPad$ = 1976
wylosowana_liczba$ = 2016
typ_zak³adu$ = 2024
?dtor$2@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA PROC ; `Odczytaj_liczbê'::`1'::dtor$2
  0004b	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00050	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00055	55		 push	 rbp
  00056	57		 push	 rdi
  00057	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0005b	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  0005f	48 8d 8d 08 05
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  00066	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0006b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006f	5f		 pop	 rdi
  00070	5d		 pop	 rbp
  00071	c3		 ret	 0
?dtor$2@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA ENDP ; `Odczytaj_liczbê'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
numers$ = 16
wynik$ = 296
numers$6 = 368
$T7 = 1224
$T8 = 1288
$T9 = 1352
$T10 = 1416
$T11 = 1480
$T12 = 1544
$T13 = 1608
$T14 = 1672
$T15 = 1736
$T16 = 1800
$T17 = 1864
$T18 = 1928
tv342 = 1944
tv340 = 1944
tv338 = 1944
tv336 = 1944
tv334 = 1944
tv332 = 1944
tv330 = 1944
tv328 = 1944
tv294 = 1944
tv72 = 1944
tv345 = 1952
tv323 = 1952
tv346 = 1960
tv325 = 1968
__$ArrayPad$ = 1976
wylosowana_liczba$ = 2016
typ_zak³adu$ = 2024
?dtor$3@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA PROC ; `Odczytaj_liczbê'::`1'::dtor$3
  00072	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00077	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0007c	55		 push	 rbp
  0007d	57		 push	 rdi
  0007e	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00082	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00086	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR wynik$[rbp]
  0008d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00092	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?dtor$3@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA ENDP ; `Odczytaj_liczbê'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
numers$ = 16
wynik$ = 296
numers$6 = 368
$T7 = 1224
$T8 = 1288
$T9 = 1352
$T10 = 1416
$T11 = 1480
$T12 = 1544
$T13 = 1608
$T14 = 1672
$T15 = 1736
$T16 = 1800
$T17 = 1864
$T18 = 1928
tv342 = 1944
tv340 = 1944
tv338 = 1944
tv336 = 1944
tv334 = 1944
tv332 = 1944
tv330 = 1944
tv328 = 1944
tv294 = 1944
tv72 = 1944
tv345 = 1952
tv323 = 1952
tv346 = 1960
tv325 = 1968
__$ArrayPad$ = 1976
wylosowana_liczba$ = 2016
typ_zak³adu$ = 2024
?dtor$12@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA PROC ; `Odczytaj_liczbê'::`1'::dtor$12
  00099	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0009e	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000a3	55		 push	 rbp
  000a4	57		 push	 rdi
  000a5	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000a9	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  000ad	48 8d 8d 70 01
	00 00		 lea	 rcx, QWORD PTR numers$6[rbp]
  000b4	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  000b9	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000bd	5f		 pop	 rdi
  000be	5d		 pop	 rbp
  000bf	c3		 ret	 0
?dtor$12@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA ENDP ; `Odczytaj_liczbê'::`1'::dtor$12
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
numers$ = 16
wynik$ = 296
numers$6 = 368
$T7 = 1224
$T8 = 1288
$T9 = 1352
$T10 = 1416
$T11 = 1480
$T12 = 1544
$T13 = 1608
$T14 = 1672
$T15 = 1736
$T16 = 1800
$T17 = 1864
$T18 = 1928
tv342 = 1944
tv340 = 1944
tv338 = 1944
tv336 = 1944
tv334 = 1944
tv332 = 1944
tv330 = 1944
tv328 = 1944
tv294 = 1944
tv72 = 1944
tv345 = 1952
tv323 = 1952
tv346 = 1960
tv325 = 1968
__$ArrayPad$ = 1976
wylosowana_liczba$ = 2016
typ_zak³adu$ = 2024
?dtor$13@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA PROC ; `Odczytaj_liczbê'::`1'::dtor$13
  000c0	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000c5	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000ca	55		 push	 rbp
  000cb	57		 push	 rdi
  000cc	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000d0	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  000d4	48 8d 8d 48 07
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  000db	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000e0	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000e4	5f		 pop	 rdi
  000e5	5d		 pop	 rbp
  000e6	c3		 ret	 0
?dtor$13@?0??Odczytaj_liczbê@@YAXAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA ENDP ; `Odczytaj_liczbê'::`1'::dtor$13
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?Wylosuj@@YAHAEBH0@Z
_TEXT	SEGMENT
generator$ = 4
generator$6 = 48
distribution$ = 5080
$T7 = 6648
$T8 = 6712
__$ArrayPad$ = 6728
od_liczby$ = 6768
do_liczby$ = 6776
?Wylosuj@@YAHAEBH0@Z PROC				; Wylosuj, COMDAT

; 487  : {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	b8 78 1a 00 00	 mov	 eax, 6776		; 00001a78H
  00011	e8 00 00 00 00	 call	 __chkstk
  00016	48 2b e0	 sub	 rsp, rax
  00019	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001e	48 8b fc	 mov	 rdi, rsp
  00021	b9 9e 06 00 00	 mov	 ecx, 1694		; 0000069eH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	48 8b 8c 24 98
	1a 00 00	 mov	 rcx, QWORD PTR [rsp+6808]
  00035	48 c7 85 38 1a
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T8[rbp], -2
  00040	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00047	48 33 c5	 xor	 rax, rbp
  0004a	48 89 85 48 1a
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 488  : 	random_device generator; //Generator liczb losowych, który generuje niedeterministyczne liczby losowe, jeœli s¹ obs³ugiwane.

  00051	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00058	48 8d 8d f8 19
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  0005f	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00064	90		 npad	 1
  00065	48 8d 95 f8 19
	00 00		 lea	 rdx, QWORD PTR $T7[rbp]
  0006c	48 8d 4d 04	 lea	 rcx, QWORD PTR generator$[rbp]
  00070	e8 00 00 00 00	 call	 ??0random_device@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::random_device::random_device
  00075	90		 npad	 1
  00076	48 8d 8d f8 19
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  0007d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 489  : 	if (generator.entropy() != 32) //Je¿eli entropia jest mniejsza od 32 oznacza, ¿e komputer nie dysponuje mo¿liwoœci¹ u¿ycia tego generatora liczb losowy

  00082	48 8d 4d 04	 lea	 rcx, QWORD PTR generator$[rbp]
  00086	e8 00 00 00 00	 call	 ?entropy@random_device@std@@QEAANXZ ; std::random_device::entropy
  0008b	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@4040000000000000
  00093	7a 02		 jp	 SHORT $LN5@Wylosuj
  00095	74 14		 je	 SHORT $LN2@Wylosuj
$LN5@Wylosuj:

; 490  : 	{
; 491  : #if defined(__x86_64__) || defined(_M_X64) || defined(__x86_64) || defined(__amd64) || defined(__amd64__) || defined(_M_AMD64) //Sprawdzenie czy sytem operacyjny jest 64-bitowy
; 492  : 		mt19937_64 generator((unsigned int)time(nullptr)); //Dla 64 bitowego systemu zamiast powy¿szego generatora u¿ywa generator liczb pseudolosowych Mersenne Twister 19937 w wersji 64 bitowej

  00097	33 c9		 xor	 ecx, ecx
  00099	e8 00 00 00 00	 call	 time
  0009e	8b c0		 mov	 eax, eax
  000a0	8b d0		 mov	 edx, eax
  000a2	48 8d 4d 30	 lea	 rcx, QWORD PTR generator$6[rbp]
  000a6	e8 00 00 00 00	 call	 ??0?$mersenne_twister_engine@_K$0EA@$0BDI@$0JM@$0BP@$0?EKPNJAKFFGJJOGBH@$0BN@$0FFFFFFFFFFFFFFFF@$0BB@$0HBNGHPPPONKGAAAA@$0CF@$0?IBBCAAAAAAAAA@$0CL@$0FIFBPECNEMJFHPCN@@std@@QEAA@_K@Z ; std::mersenne_twister_engine<unsigned __int64,64,312,156,31,-5403634167711393303,29,6148914691236517205,17,8202884508482404352,37,-2270628950310912,43,6364136223846793005>::mersenne_twister_engine<unsigned __int64,64,312,156,31,-5403634167711393303,29,6148914691236517205,17,8202884508482404352,37,-2270628950310912,43,6364136223846793005>
$LN2@Wylosuj:

; 493  : #else
; 494  : 		mt19937 generator((unsigned int)time(nullptr)); //Dla 32 bitowego systemu zamiast powy¿szego generatora u¿ywa generator liczb pseudolosowych Mersenne Twister 19937 w wersji 32 bitowej
; 495  : #endif
; 496  : 	}
; 497  : 	uniform_int_distribution<int> distribution(od_liczby, do_liczby); //Wsazuje zakres generowanych liczb

  000ab	48 8b 85 78 1a
	00 00		 mov	 rax, QWORD PTR do_liczby$[rbp]
  000b2	44 8b 00	 mov	 r8d, DWORD PTR [rax]
  000b5	48 8b 85 70 1a
	00 00		 mov	 rax, QWORD PTR od_liczby$[rbp]
  000bc	8b 10		 mov	 edx, DWORD PTR [rax]
  000be	48 8d 8d d8 13
	00 00		 lea	 rcx, QWORD PTR distribution$[rbp]
  000c5	e8 00 00 00 00	 call	 ??0?$uniform_int_distribution@H@std@@QEAA@HH@Z ; std::uniform_int_distribution<int>::uniform_int_distribution<int>

; 498  : 	return distribution(generator); //Zwraca wygenerowan¹ liczbê

  000ca	48 8d 55 04	 lea	 rdx, QWORD PTR generator$[rbp]
  000ce	48 8d 8d d8 13
	00 00		 lea	 rcx, QWORD PTR distribution$[rbp]
  000d5	e8 00 00 00 00	 call	 ??$?RVrandom_device@std@@@?$uniform_int@H@std@@QEBAHAEAVrandom_device@1@@Z ; std::uniform_int<int>::operator()<std::random_device>

; 499  : 	}

  000da	48 8b f8	 mov	 rdi, rax
  000dd	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?Wylosuj@@YAHAEBH0@Z$rtcFrameData
  000e8	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000ed	48 8b c7	 mov	 rax, rdi
  000f0	48 8b 8d 48 1a
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000f7	48 33 cd	 xor	 rcx, rbp
  000fa	e8 00 00 00 00	 call	 __security_check_cookie
  000ff	48 8d a5 58 1a
	00 00		 lea	 rsp, QWORD PTR [rbp+6744]
  00106	5f		 pop	 rdi
  00107	5d		 pop	 rbp
  00108	c3		 ret	 0
?Wylosuj@@YAHAEBH0@Z ENDP				; Wylosuj
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
generator$ = 4
generator$6 = 48
distribution$ = 5080
$T7 = 6648
$T8 = 6712
__$ArrayPad$ = 6728
od_liczby$ = 6768
do_liczby$ = 6776
?dtor$0@?0??Wylosuj@@YAHAEBH0@Z@4HA PROC		; `Wylosuj'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d f8 19
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??Wylosuj@@YAHAEBH0@Z@4HA ENDP		; `Wylosuj'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
generator$ = 4
generator$6 = 48
distribution$ = 5080
$T7 = 6648
$T8 = 6712
__$ArrayPad$ = 6728
od_liczby$ = 6768
do_liczby$ = 6776
?dtor$0@?0??Wylosuj@@YAHAEBH0@Z@4HA PROC		; `Wylosuj'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d f8 19
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??Wylosuj@@YAHAEBH0@Z@4HA ENDP		; `Wylosuj'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?Czy_Kontynuowaæ@@YA_NAEAH@Z
_TEXT	SEGMENT
tak_nie$ = 8
$T4 = 260
$T5 = 292
$T6 = 324
$T7 = 360
__$ArrayPad$ = 376
iloœæ_pieniêdzy$ = 416
?Czy_Kontynuowaæ@@YA_NAEAH@Z PROC			; Czy_Kontynuowaæ, COMDAT

; 440  : {

$LN12:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 6a 00 00 00	 mov	 ecx, 106		; 0000006aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+456]
  0002a	48 c7 85 68 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T7[rbp], -2
  00035	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003c	48 33 c5	 xor	 rax, rbp
  0003f	48 89 85 78 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 441  : 	string tak_nie; //Zadeklarowanie zmiennej typu string

  00046	48 8d 4d 08	 lea	 rcx, QWORD PTR tak_nie$[rbp]
  0004a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0004f	90		 npad	 1

; 442  : 
; 443  : 	if (iloœæ_pieniêdzy == 0) //Je¿eli posiadana iloœæ gotówki jest róna 0

  00050	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR iloœæ_pieniêdzy$[rbp]
  00057	83 38 00	 cmp	 DWORD PTR [rax], 0
  0005a	75 3f		 jne	 SHORT $LN2@Czy_Kontyn

; 444  : 	{
; 445  : 		cout << "Nie mo¿esz kontynuowaæ, przegra³eœ wszystko" << endl; //Poinformowanie u¿ytkownika, ¿e jest bankrutem

  0005c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@BIICBBPD@Nie?5mo?$LPesz?5kontynuowa?f?0?5przegra?$LD@
  00063	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0006a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0006f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00076	48 8b c8	 mov	 rcx, rax
  00079	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 446  : 		return false; //Zwrot wartoœci false, co oznacza, ¿e kolejna runda siê nie odbêdzie

  0007f	c6 85 04 01 00
	00 00		 mov	 BYTE PTR $T4[rbp], 0
  00086	48 8d 4d 08	 lea	 rcx, QWORD PTR tak_nie$[rbp]
  0008a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0008f	0f b6 85 04 01
	00 00		 movzx	 eax, BYTE PTR $T4[rbp]
  00096	e9 87 01 00 00	 jmp	 $LN1@Czy_Kontyn
$LN2@Czy_Kontyn:

; 447  : 	}
; 448  : 
; 449  : 	while (true) //Rozpoczêcie pêtli nieskoñczonej

  0009b	33 c0		 xor	 eax, eax
  0009d	83 f8 01	 cmp	 eax, 1
  000a0	0f 84 73 01 00
	00		 je	 $LN3@Czy_Kontyn

; 450  : 	{
; 451  : 		cout << "Na koncie masz " << iloœæ_pieniêdzy << "$, czy chcesz grac dalej('t' - tak, 'n' - nie) ?" << endl; //Pointormowanie o stanie konta i zapytanie o to czy gra dalej

  000a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@KCLBOCHC@Na?5koncie?5masz?5?$AA@
  000ad	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000b4	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  000b9	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR iloœæ_pieniêdzy$[rbp]
  000c0	8b 11		 mov	 edx, DWORD PTR [rcx]
  000c2	48 8b c8	 mov	 rcx, rax
  000c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  000cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@MONJHHJM@$?0?5czy?5chcesz?5grac?5dalej?$CI?8t?8?5?9?5t@
  000d2	48 8b c8	 mov	 rcx, rax
  000d5	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  000da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  000e1	48 8b c8	 mov	 rcx, rax
  000e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 452  : 		cin >> tak_nie; //Pobranie od u¿ytkownika odpowiedzi na powy¿sze pytanie

  000ea	48 8d 55 08	 lea	 rdx, QWORD PTR tak_nie$[rbp]
  000ee	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  000f5	e8 00 00 00 00	 call	 ??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator>><char,std::char_traits<char>,std::allocator<char> >

; 453  : 		if (tak_nie == "t" || tak_nie == "tak" || tak_nie == "Tak" || tak_nie == "TAK" || tak_nie == "n" || tak_nie == "nie" || tak_nie == "Nie" || tak_nie == "NIE") //Sprawdzenie czy odpowiedŸ pasuje do mo¿liwoœci

  000fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01PFHFFBPC@t?$AA@
  00101	48 8d 4d 08	 lea	 rcx, QWORD PTR tak_nie$[rbp]
  00105	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0010a	0f b6 c0	 movzx	 eax, al
  0010d	85 c0		 test	 eax, eax
  0010f	0f 85 a5 00 00
	00		 jne	 $LN6@Czy_Kontyn
  00115	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03PFPKAEFD@tak?$AA@
  0011c	48 8d 4d 08	 lea	 rcx, QWORD PTR tak_nie$[rbp]
  00120	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  00125	0f b6 c0	 movzx	 eax, al
  00128	85 c0		 test	 eax, eax
  0012a	0f 85 8a 00 00
	00		 jne	 $LN6@Czy_Kontyn
  00130	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03FFMIKLGN@Tak?$AA@
  00137	48 8d 4d 08	 lea	 rcx, QWORD PTR tak_nie$[rbp]
  0013b	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  00140	0f b6 c0	 movzx	 eax, al
  00143	85 c0		 test	 eax, eax
  00145	75 73		 jne	 SHORT $LN6@Czy_Kontyn
  00147	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03PIABMJCP@TAK?$AA@
  0014e	48 8d 4d 08	 lea	 rcx, QWORD PTR tak_nie$[rbp]
  00152	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  00157	0f b6 c0	 movzx	 eax, al
  0015a	85 c0		 test	 eax, eax
  0015c	75 5c		 jne	 SHORT $LN6@Czy_Kontyn
  0015e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EFFIKLCJ@n?$AA@
  00165	48 8d 4d 08	 lea	 rcx, QWORD PTR tak_nie$[rbp]
  00169	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0016e	0f b6 c0	 movzx	 eax, al
  00171	85 c0		 test	 eax, eax
  00173	75 45		 jne	 SHORT $LN6@Czy_Kontyn
  00175	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03FKMOMPJO@nie?$AA@
  0017c	48 8d 4d 08	 lea	 rcx, QWORD PTR tak_nie$[rbp]
  00180	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  00185	0f b6 c0	 movzx	 eax, al
  00188	85 c0		 test	 eax, eax
  0018a	75 2e		 jne	 SHORT $LN6@Czy_Kontyn
  0018c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03PKPMGAKA@Nie?$AA@
  00193	48 8d 4d 08	 lea	 rcx, QWORD PTR tak_nie$[rbp]
  00197	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0019c	0f b6 c0	 movzx	 eax, al
  0019f	85 c0		 test	 eax, eax
  001a1	75 17		 jne	 SHORT $LN6@Czy_Kontyn
  001a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03FHDFACOC@NIE?$AA@
  001aa	48 8d 4d 08	 lea	 rcx, QWORD PTR tak_nie$[rbp]
  001ae	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  001b3	0f b6 c0	 movzx	 eax, al
  001b6	85 c0		 test	 eax, eax
  001b8	74 5a		 je	 SHORT $LN5@Czy_Kontyn
$LN6@Czy_Kontyn:

; 454  : 			if (tak_nie[0] == 't' || tak_nie[0] == 'T') return true; //Je¿eli pasuje to sprawdzam czy pierwsza litera to t i zwracam wartoœæ true

  001ba	33 d2		 xor	 edx, edx
  001bc	48 8d 4d 08	 lea	 rcx, QWORD PTR tak_nie$[rbp]
  001c0	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  001c5	0f be 00	 movsx	 eax, BYTE PTR [rax]
  001c8	83 f8 74	 cmp	 eax, 116		; 00000074H
  001cb	74 13		 je	 SHORT $LN9@Czy_Kontyn
  001cd	33 d2		 xor	 edx, edx
  001cf	48 8d 4d 08	 lea	 rcx, QWORD PTR tak_nie$[rbp]
  001d3	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  001d8	0f be 00	 movsx	 eax, BYTE PTR [rax]
  001db	83 f8 54	 cmp	 eax, 84			; 00000054H
  001de	75 1b		 jne	 SHORT $LN7@Czy_Kontyn
$LN9@Czy_Kontyn:
  001e0	c6 85 24 01 00
	00 01		 mov	 BYTE PTR $T5[rbp], 1
  001e7	48 8d 4d 08	 lea	 rcx, QWORD PTR tak_nie$[rbp]
  001eb	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001f0	0f b6 85 24 01
	00 00		 movzx	 eax, BYTE PTR $T5[rbp]
  001f7	eb 29		 jmp	 SHORT $LN1@Czy_Kontyn
  001f9	eb 19		 jmp	 SHORT $LN5@Czy_Kontyn
$LN7@Czy_Kontyn:

; 455  : 			else return false; //W przeciwym wypadku zwracam wartoœæ false

  001fb	c6 85 44 01 00
	00 00		 mov	 BYTE PTR $T6[rbp], 0
  00202	48 8d 4d 08	 lea	 rcx, QWORD PTR tak_nie$[rbp]
  00206	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0020b	0f b6 85 44 01
	00 00		 movzx	 eax, BYTE PTR $T6[rbp]
  00212	eb 0e		 jmp	 SHORT $LN1@Czy_Kontyn
$LN5@Czy_Kontyn:

; 456  : 	}

  00214	e9 82 fe ff ff	 jmp	 $LN2@Czy_Kontyn
$LN3@Czy_Kontyn:

; 457  : }

  00219	48 8d 4d 08	 lea	 rcx, QWORD PTR tak_nie$[rbp]
  0021d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN1@Czy_Kontyn:
  00222	48 8b f8	 mov	 rdi, rax
  00225	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00229	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?Czy_Kontynuowaæ@@YA_NAEAH@Z$rtcFrameData
  00230	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00235	48 8b c7	 mov	 rax, rdi
  00238	48 8b 8d 78 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0023f	48 33 cd	 xor	 rcx, rbp
  00242	e8 00 00 00 00	 call	 __security_check_cookie
  00247	48 8d a5 88 01
	00 00		 lea	 rsp, QWORD PTR [rbp+392]
  0024e	5f		 pop	 rdi
  0024f	5d		 pop	 rbp
  00250	c3		 ret	 0
?Czy_Kontynuowaæ@@YA_NAEAH@Z ENDP			; Czy_Kontynuowaæ
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
tak_nie$ = 8
$T4 = 260
$T5 = 292
$T6 = 324
$T7 = 360
__$ArrayPad$ = 376
iloœæ_pieniêdzy$ = 416
?dtor$0@?0??Czy_Kontynuowaæ@@YA_NAEAH@Z@4HA PROC	; `Czy_Kontynuowaæ'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR tak_nie$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??Czy_Kontynuowaæ@@YA_NAEAH@Z@4HA ENDP	; `Czy_Kontynuowaæ'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
tak_nie$ = 8
$T4 = 260
$T5 = 292
$T6 = 324
$T7 = 360
__$ArrayPad$ = 376
iloœæ_pieniêdzy$ = 416
?dtor$0@?0??Czy_Kontynuowaæ@@YA_NAEAH@Z@4HA PROC	; `Czy_Kontynuowaæ'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR tak_nie$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??Czy_Kontynuowaæ@@YA_NAEAH@Z@4HA ENDP	; `Czy_Kontynuowaæ'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?SprawdŸ_Zak³ad@@YAHAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBH@Z
_TEXT	SEGMENT
wygrana$ = 4
tv225 = 212
tv209 = 212
kwota$ = 256
typ_zak³adu$ = 264
wylosowana_liczba$ = 272
?SprawdŸ_Zak³ad@@YAHAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBH@Z PROC ; SprawdŸ_Zak³ad, COMDAT

; 387  : {

$LN60:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 388  : 	int wygrana = kwota; //Deklaracja zmiennej przechowywuj¹ca kwotê wygran¹ lub zwrócon¹ przy wylosowaniu 0

  00034	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR kwota$[rbp]
  0003b	8b 00		 mov	 eax, DWORD PTR [rax]
  0003d	89 45 04	 mov	 DWORD PTR wygrana$[rbp], eax

; 389  : 
; 390  : 	if (wylosowana_liczba == 0) //Warunek sprawdzaj¹cy czy wylosowano 0

  00040	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR wylosowana_liczba$[rbp]
  00047	83 38 00	 cmp	 DWORD PTR [rax], 0
  0004a	0f 85 59 01 00
	00		 jne	 $LN2@SprawdŸ_Z

; 391  : 	{ //Je¿eli tak to
; 392  : 		if (typ_zak³adu == "p") wygrana /= 2; //Je¿eli typ zak³adu by³ p to wygrana, a dok³adniej zwrot wynosi po³owê zak³adu

  00050	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01JBBJJEPG@p?$AA@
  00057	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR typ_zak³adu$[rbp]
  0005e	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  00063	0f b6 c0	 movzx	 eax, al
  00066	85 c0		 test	 eax, eax
  00068	74 10		 je	 SHORT $LN4@SprawdŸ_Z
  0006a	8b 45 04	 mov	 eax, DWORD PTR wygrana$[rbp]
  0006d	99		 cdq
  0006e	2b c2		 sub	 eax, edx
  00070	d1 f8		 sar	 eax, 1
  00072	89 45 04	 mov	 DWORD PTR wygrana$[rbp], eax
  00075	e9 2a 01 00 00	 jmp	 $LN5@SprawdŸ_Z
$LN4@SprawdŸ_Z:

; 393  : 		else if (typ_zak³adu == "n") wygrana /= 2; //Je¿eli typ zak³adu by³ p to wygrana, a dok³adniej zwrot wynosi po³owê zak³adu

  0007a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EFFIKLCJ@n?$AA@
  00081	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR typ_zak³adu$[rbp]
  00088	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0008d	0f b6 c0	 movzx	 eax, al
  00090	85 c0		 test	 eax, eax
  00092	74 10		 je	 SHORT $LN6@SprawdŸ_Z
  00094	8b 45 04	 mov	 eax, DWORD PTR wygrana$[rbp]
  00097	99		 cdq
  00098	2b c2		 sub	 eax, edx
  0009a	d1 f8		 sar	 eax, 1
  0009c	89 45 04	 mov	 DWORD PTR wygrana$[rbp], eax
  0009f	e9 00 01 00 00	 jmp	 $LN7@SprawdŸ_Z
$LN6@SprawdŸ_Z:

; 394  : 		else if (typ_zak³adu == "r") wygrana /= 2; //Je¿eli typ zak³adu by³ r to wygrana, a dok³adniej zwrot wynosi po³owê zak³adu

  000a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01KDCPPGHE@r?$AA@
  000ab	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR typ_zak³adu$[rbp]
  000b2	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  000b7	0f b6 c0	 movzx	 eax, al
  000ba	85 c0		 test	 eax, eax
  000bc	74 10		 je	 SHORT $LN8@SprawdŸ_Z
  000be	8b 45 04	 mov	 eax, DWORD PTR wygrana$[rbp]
  000c1	99		 cdq
  000c2	2b c2		 sub	 eax, edx
  000c4	d1 f8		 sar	 eax, 1
  000c6	89 45 04	 mov	 DWORD PTR wygrana$[rbp], eax
  000c9	e9 d6 00 00 00	 jmp	 $LN9@SprawdŸ_Z
$LN8@SprawdŸ_Z:

; 395  : 		else if (typ_zak³adu == "b") wygrana /= 2; //Je¿eli typ zak³adu by³ b to wygrana, a dok³adniej zwrot wynosi po³owê zak³adu

  000ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01OJONOECF@b?$AA@
  000d5	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR typ_zak³adu$[rbp]
  000dc	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  000e1	0f b6 c0	 movzx	 eax, al
  000e4	85 c0		 test	 eax, eax
  000e6	74 10		 je	 SHORT $LN10@SprawdŸ_Z
  000e8	8b 45 04	 mov	 eax, DWORD PTR wygrana$[rbp]
  000eb	99		 cdq
  000ec	2b c2		 sub	 eax, edx
  000ee	d1 f8		 sar	 eax, 1
  000f0	89 45 04	 mov	 DWORD PTR wygrana$[rbp], eax
  000f3	e9 ac 00 00 00	 jmp	 $LN11@SprawdŸ_Z
$LN10@SprawdŸ_Z:

; 396  : 		else if (typ_zak³adu == "g") wygrana /= 2; //Je¿eli typ zak³adu by³ g to wygrana, a dok³adniej zwrot wynosi po³owê zak³adu

  000f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01JEJKBAGA@g?$AA@
  000ff	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR typ_zak³adu$[rbp]
  00106	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0010b	0f b6 c0	 movzx	 eax, al
  0010e	85 c0		 test	 eax, eax
  00110	74 10		 je	 SHORT $LN12@SprawdŸ_Z
  00112	8b 45 04	 mov	 eax, DWORD PTR wygrana$[rbp]
  00115	99		 cdq
  00116	2b c2		 sub	 eax, edx
  00118	d1 f8		 sar	 eax, 1
  0011a	89 45 04	 mov	 DWORD PTR wygrana$[rbp], eax
  0011d	e9 82 00 00 00	 jmp	 $LN13@SprawdŸ_Z
$LN12@SprawdŸ_Z:

; 397  : 		else if (typ_zak³adu == "d") wygrana /= 2; //Je¿eli typ zak³adu by³ d to wygrana, a dok³adniej zwrot wynosi po³owê zak³adu

  00122	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01LPLHEDKD@d?$AA@
  00129	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR typ_zak³adu$[rbp]
  00130	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  00135	0f b6 c0	 movzx	 eax, al
  00138	85 c0		 test	 eax, eax
  0013a	74 0d		 je	 SHORT $LN14@SprawdŸ_Z
  0013c	8b 45 04	 mov	 eax, DWORD PTR wygrana$[rbp]
  0013f	99		 cdq
  00140	2b c2		 sub	 eax, edx
  00142	d1 f8		 sar	 eax, 1
  00144	89 45 04	 mov	 DWORD PTR wygrana$[rbp], eax
  00147	eb 5b		 jmp	 SHORT $LN15@SprawdŸ_Z
$LN14@SprawdŸ_Z:

; 398  : 		else if (typ_zak³adu[0] == 'k') wygrana *= 0; //Je¿eli typ zak³adu by³ k to przegra³o siê zak³ad

  00149	33 d2		 xor	 edx, edx
  0014b	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR typ_zak³adu$[rbp]
  00152	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00157	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0015a	83 f8 6b	 cmp	 eax, 107		; 0000006bH
  0015d	75 09		 jne	 SHORT $LN16@SprawdŸ_Z
  0015f	6b 45 04 00	 imul	 eax, DWORD PTR wygrana$[rbp], 0
  00163	89 45 04	 mov	 DWORD PTR wygrana$[rbp], eax
  00166	eb 3c		 jmp	 SHORT $LN17@SprawdŸ_Z
$LN16@SprawdŸ_Z:

; 399  : 		else if (typ_zak³adu[0] == 'w') wygrana *= 0; //Je¿eli typ zak³adu by³ k to przegra³o siê zak³ad

  00168	33 d2		 xor	 edx, edx
  0016a	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR typ_zak³adu$[rbp]
  00171	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00176	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00179	83 f8 77	 cmp	 eax, 119		; 00000077H
  0017c	75 09		 jne	 SHORT $LN18@SprawdŸ_Z
  0017e	6b 45 04 00	 imul	 eax, DWORD PTR wygrana$[rbp], 0
  00182	89 45 04	 mov	 DWORD PTR wygrana$[rbp], eax
  00185	eb 1d		 jmp	 SHORT $LN19@SprawdŸ_Z
$LN18@SprawdŸ_Z:

; 400  : 		else if (typ_zak³adu[0] == '0') wygrana *= 35; //Je¿eli typ zak³adu by³ 0 to przegra³o siê zak³ad

  00187	33 d2		 xor	 edx, edx
  00189	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR typ_zak³adu$[rbp]
  00190	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00195	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00198	83 f8 30	 cmp	 eax, 48			; 00000030H
  0019b	75 07		 jne	 SHORT $LN20@SprawdŸ_Z
  0019d	6b 45 04 23	 imul	 eax, DWORD PTR wygrana$[rbp], 35 ; 00000023H
  001a1	89 45 04	 mov	 DWORD PTR wygrana$[rbp], eax
$LN20@SprawdŸ_Z:
$LN19@SprawdŸ_Z:
$LN17@SprawdŸ_Z:
$LN15@SprawdŸ_Z:
$LN13@SprawdŸ_Z:
$LN11@SprawdŸ_Z:
$LN9@SprawdŸ_Z:
$LN7@SprawdŸ_Z:
$LN5@SprawdŸ_Z:

; 401  : 	}
; 402  : 	else //Je¿eli wylosowana liczba nie jest zerem to

  001a4	e9 95 02 00 00	 jmp	 $LN3@SprawdŸ_Z
$LN2@SprawdŸ_Z:

; 403  : 	{
; 404  : 		if (typ_zak³adu == "p") //Je¿eli typ zak³adu to p

  001a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01JBBJJEPG@p?$AA@
  001b0	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR typ_zak³adu$[rbp]
  001b7	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  001bc	0f b6 c0	 movzx	 eax, al
  001bf	85 c0		 test	 eax, eax
  001c1	74 29		 je	 SHORT $LN21@SprawdŸ_Z

; 405  : 			if (wylosowana_liczba % 2 == 0) wygrana *= 1; //To sprawdzam czy wylosowana liczba jest parzysta, je¿eli tak to wygrana jest 1:1

  001c3	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR wylosowana_liczba$[rbp]
  001ca	8b 00		 mov	 eax, DWORD PTR [rax]
  001cc	99		 cdq
  001cd	83 e0 01	 and	 eax, 1
  001d0	33 c2		 xor	 eax, edx
  001d2	2b c2		 sub	 eax, edx
  001d4	85 c0		 test	 eax, eax
  001d6	75 08		 jne	 SHORT $LN23@SprawdŸ_Z
  001d8	8b 45 04	 mov	 eax, DWORD PTR wygrana$[rbp]
  001db	89 45 04	 mov	 DWORD PTR wygrana$[rbp], eax
  001de	eb 07		 jmp	 SHORT $LN24@SprawdŸ_Z
$LN23@SprawdŸ_Z:

; 406  : 			else wygrana *= 0; //Je¿eli wylosowana liczba nie jest parzysta to przegra³o siê zak³ad

  001e0	6b 45 04 00	 imul	 eax, DWORD PTR wygrana$[rbp], 0
  001e4	89 45 04	 mov	 DWORD PTR wygrana$[rbp], eax
$LN24@SprawdŸ_Z:
  001e7	e9 52 02 00 00	 jmp	 $LN22@SprawdŸ_Z
$LN21@SprawdŸ_Z:

; 407  : 		else if (typ_zak³adu == "n") //Je¿eli typ zak³adu to n

  001ec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EFFIKLCJ@n?$AA@
  001f3	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR typ_zak³adu$[rbp]
  001fa	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  001ff	0f b6 c0	 movzx	 eax, al
  00202	85 c0		 test	 eax, eax
  00204	74 2a		 je	 SHORT $LN25@SprawdŸ_Z

; 408  : 			if (wylosowana_liczba % 2 == 1) wygrana *= 1; //To sprawdzam czy wylosowana liczba jest nieparzysta, je¿eli tak to wygrana jest 1:1

  00206	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR wylosowana_liczba$[rbp]
  0020d	8b 00		 mov	 eax, DWORD PTR [rax]
  0020f	99		 cdq
  00210	83 e0 01	 and	 eax, 1
  00213	33 c2		 xor	 eax, edx
  00215	2b c2		 sub	 eax, edx
  00217	83 f8 01	 cmp	 eax, 1
  0021a	75 08		 jne	 SHORT $LN27@SprawdŸ_Z
  0021c	8b 45 04	 mov	 eax, DWORD PTR wygrana$[rbp]
  0021f	89 45 04	 mov	 DWORD PTR wygrana$[rbp], eax
  00222	eb 07		 jmp	 SHORT $LN28@SprawdŸ_Z
$LN27@SprawdŸ_Z:

; 409  : 			else wygrana *= 0; //Je¿eli obstawiony numer nie jest nieparzysta to przegra³o siê zak³ad

  00224	6b 45 04 00	 imul	 eax, DWORD PTR wygrana$[rbp], 0
  00228	89 45 04	 mov	 DWORD PTR wygrana$[rbp], eax
$LN28@SprawdŸ_Z:
  0022b	e9 0e 02 00 00	 jmp	 $LN26@SprawdŸ_Z
$LN25@SprawdŸ_Z:

; 410  : 		else if (typ_zak³adu == "r") //Je¿eli typ zak³adu to n

  00230	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01KDCPPGHE@r?$AA@
  00237	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR typ_zak³adu$[rbp]
  0023e	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  00243	0f b6 c0	 movzx	 eax, al
  00246	85 c0		 test	 eax, eax
  00248	74 2e		 je	 SHORT $LN29@SprawdŸ_Z

; 411  : 			if (Ruletka_plansza_kolor[wylosowana_liczba] == 'r') wygrana *= 1; //To sprawdzam czy wylosowana liczba jest czerwona, je¿eli tak to wygrana jest 1:1

  0024a	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR wylosowana_liczba$[rbp]
  00251	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00254	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Ruletka_plansza_kolor@@3QBDB
  0025b	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0025f	83 f8 72	 cmp	 eax, 114		; 00000072H
  00262	75 08		 jne	 SHORT $LN31@SprawdŸ_Z
  00264	8b 45 04	 mov	 eax, DWORD PTR wygrana$[rbp]
  00267	89 45 04	 mov	 DWORD PTR wygrana$[rbp], eax
  0026a	eb 07		 jmp	 SHORT $LN32@SprawdŸ_Z
$LN31@SprawdŸ_Z:

; 412  : 			else wygrana *= 0; //Je¿eli wylosowana liczba nie jest czerwony to przegra³o siê zak³ad

  0026c	6b 45 04 00	 imul	 eax, DWORD PTR wygrana$[rbp], 0
  00270	89 45 04	 mov	 DWORD PTR wygrana$[rbp], eax
$LN32@SprawdŸ_Z:
  00273	e9 c6 01 00 00	 jmp	 $LN30@SprawdŸ_Z
$LN29@SprawdŸ_Z:

; 413  : 		else if (typ_zak³adu == "b") //Je¿eli typ zak³adu to n

  00278	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01OJONOECF@b?$AA@
  0027f	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR typ_zak³adu$[rbp]
  00286	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0028b	0f b6 c0	 movzx	 eax, al
  0028e	85 c0		 test	 eax, eax
  00290	74 2e		 je	 SHORT $LN33@SprawdŸ_Z

; 414  : 			if (Ruletka_plansza_kolor[wylosowana_liczba] == 'b') wygrana *= 1; //To sprawdzam czy wylosowana liczba jest czarna, je¿eli tak to wygrana jest 1:1

  00292	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR wylosowana_liczba$[rbp]
  00299	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  0029c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Ruletka_plansza_kolor@@3QBDB
  002a3	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  002a7	83 f8 62	 cmp	 eax, 98			; 00000062H
  002aa	75 08		 jne	 SHORT $LN35@SprawdŸ_Z
  002ac	8b 45 04	 mov	 eax, DWORD PTR wygrana$[rbp]
  002af	89 45 04	 mov	 DWORD PTR wygrana$[rbp], eax
  002b2	eb 07		 jmp	 SHORT $LN36@SprawdŸ_Z
$LN35@SprawdŸ_Z:

; 415  : 			else wygrana *= 0; //Je¿eli wylosowana liczba nie jest czarny to przegra³o siê zak³ad

  002b4	6b 45 04 00	 imul	 eax, DWORD PTR wygrana$[rbp], 0
  002b8	89 45 04	 mov	 DWORD PTR wygrana$[rbp], eax
$LN36@SprawdŸ_Z:
  002bb	e9 7e 01 00 00	 jmp	 $LN34@SprawdŸ_Z
$LN33@SprawdŸ_Z:

; 416  : 		else if (typ_zak³adu == "g") //Je¿eli typ zak³adu to g

  002c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01JEJKBAGA@g?$AA@
  002c7	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR typ_zak³adu$[rbp]
  002ce	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  002d3	0f b6 c0	 movzx	 eax, al
  002d6	85 c0		 test	 eax, eax
  002d8	74 20		 je	 SHORT $LN37@SprawdŸ_Z

; 417  : 			if (wylosowana_liczba < 19) wygrana *= 1; //To sprawdzam czy wylosowana liczba jest od 1 do 18, je¿eli tak to wygrana jest 1:1

  002da	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR wylosowana_liczba$[rbp]
  002e1	83 38 13	 cmp	 DWORD PTR [rax], 19
  002e4	7d 08		 jge	 SHORT $LN39@SprawdŸ_Z
  002e6	8b 45 04	 mov	 eax, DWORD PTR wygrana$[rbp]
  002e9	89 45 04	 mov	 DWORD PTR wygrana$[rbp], eax
  002ec	eb 07		 jmp	 SHORT $LN40@SprawdŸ_Z
$LN39@SprawdŸ_Z:

; 418  : 			else wygrana *= 0; //Je¿eli wylosowana liczba nie nale¿y do przedzia³u [1,18] to przegra³o siê zak³ad

  002ee	6b 45 04 00	 imul	 eax, DWORD PTR wygrana$[rbp], 0
  002f2	89 45 04	 mov	 DWORD PTR wygrana$[rbp], eax
$LN40@SprawdŸ_Z:
  002f5	e9 44 01 00 00	 jmp	 $LN38@SprawdŸ_Z
$LN37@SprawdŸ_Z:

; 419  : 		else if (typ_zak³adu == "d") //Je¿eli typ zak³adu to d

  002fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01LPLHEDKD@d?$AA@
  00301	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR typ_zak³adu$[rbp]
  00308	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0030d	0f b6 c0	 movzx	 eax, al
  00310	85 c0		 test	 eax, eax
  00312	74 20		 je	 SHORT $LN41@SprawdŸ_Z

; 420  : 			if (wylosowana_liczba > 18) wygrana *= 1; //To sprawdzam czy wylosowana liczba jest od 19 do 36, je¿eli tak to wygrana jest 1:1

  00314	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR wylosowana_liczba$[rbp]
  0031b	83 38 12	 cmp	 DWORD PTR [rax], 18
  0031e	7e 08		 jle	 SHORT $LN43@SprawdŸ_Z
  00320	8b 45 04	 mov	 eax, DWORD PTR wygrana$[rbp]
  00323	89 45 04	 mov	 DWORD PTR wygrana$[rbp], eax
  00326	eb 07		 jmp	 SHORT $LN44@SprawdŸ_Z
$LN43@SprawdŸ_Z:

; 421  : 			else wygrana *= 0; //Je¿eli wylosowana liczba nie nale¿y do przedzia³u [19,36] to przegra³o siê zak³ad

  00328	6b 45 04 00	 imul	 eax, DWORD PTR wygrana$[rbp], 0
  0032c	89 45 04	 mov	 DWORD PTR wygrana$[rbp], eax
$LN44@SprawdŸ_Z:
  0032f	e9 0a 01 00 00	 jmp	 $LN42@SprawdŸ_Z
$LN41@SprawdŸ_Z:

; 422  : 		else if (typ_zak³adu[0] == 'k') //Je¿eli typ zak³adu to k

  00334	33 d2		 xor	 edx, edx
  00336	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR typ_zak³adu$[rbp]
  0033d	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00342	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00345	83 f8 6b	 cmp	 eax, 107		; 0000006bH
  00348	75 52		 jne	 SHORT $LN45@SprawdŸ_Z

; 423  : 			if ((wylosowana_liczba - 1) % 3 == typ_zak³adu[1] - 49) wygrana *= 2; //To sprawdzam czy wylosowana liczba jest z obstawionej kolumny, je¿eli tak to wygrana jest 2:1

  0034a	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR wylosowana_liczba$[rbp]
  00351	8b 00		 mov	 eax, DWORD PTR [rax]
  00353	ff c8		 dec	 eax
  00355	99		 cdq
  00356	b9 03 00 00 00	 mov	 ecx, 3
  0035b	f7 f9		 idiv	 ecx
  0035d	8b c2		 mov	 eax, edx
  0035f	89 85 d4 00 00
	00		 mov	 DWORD PTR tv209[rbp], eax
  00365	ba 01 00 00 00	 mov	 edx, 1
  0036a	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR typ_zak³adu$[rbp]
  00371	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00376	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00379	83 e8 31	 sub	 eax, 49			; 00000031H
  0037c	8b 8d d4 00 00
	00		 mov	 ecx, DWORD PTR tv209[rbp]
  00382	3b c8		 cmp	 ecx, eax
  00384	75 0a		 jne	 SHORT $LN47@SprawdŸ_Z
  00386	8b 45 04	 mov	 eax, DWORD PTR wygrana$[rbp]
  00389	d1 e0		 shl	 eax, 1
  0038b	89 45 04	 mov	 DWORD PTR wygrana$[rbp], eax
  0038e	eb 07		 jmp	 SHORT $LN48@SprawdŸ_Z
$LN47@SprawdŸ_Z:

; 424  : 			else wygrana *= 0; //Je¿eli wylosowana liczba nie jest z obstawionej kolumny to przegra³o siê zak³ad

  00390	6b 45 04 00	 imul	 eax, DWORD PTR wygrana$[rbp], 0
  00394	89 45 04	 mov	 DWORD PTR wygrana$[rbp], eax
$LN48@SprawdŸ_Z:
  00397	e9 a2 00 00 00	 jmp	 $LN46@SprawdŸ_Z
$LN45@SprawdŸ_Z:

; 425  : 		else if (typ_zak³adu[0] == 'w') //Je¿eli typ zak³adu to w

  0039c	33 d2		 xor	 edx, edx
  0039e	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR typ_zak³adu$[rbp]
  003a5	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  003aa	0f be 00	 movsx	 eax, BYTE PTR [rax]
  003ad	83 f8 77	 cmp	 eax, 119		; 00000077H
  003b0	75 5c		 jne	 SHORT $LN49@SprawdŸ_Z

; 426  : 			if (((wylosowana_liczba - 1) / 3 + 1) == atoi(typ_zak³adu.erase(0, 1).c_str())) wygrana *= 11; //To sprawdzam czy wylosowana liczba jest z obstawionego wiersza, je¿eli tak to wygrana jest 11:1

  003b2	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR wylosowana_liczba$[rbp]
  003b9	8b 00		 mov	 eax, DWORD PTR [rax]
  003bb	ff c8		 dec	 eax
  003bd	99		 cdq
  003be	b9 03 00 00 00	 mov	 ecx, 3
  003c3	f7 f9		 idiv	 ecx
  003c5	ff c0		 inc	 eax
  003c7	89 85 d4 00 00
	00		 mov	 DWORD PTR tv225[rbp], eax
  003cd	41 b8 01 00 00
	00		 mov	 r8d, 1
  003d3	33 d2		 xor	 edx, edx
  003d5	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR typ_zak³adu$[rbp]
  003dc	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  003e1	48 8b c8	 mov	 rcx, rax
  003e4	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  003e9	48 8b c8	 mov	 rcx, rax
  003ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  003f2	8b 8d d4 00 00
	00		 mov	 ecx, DWORD PTR tv225[rbp]
  003f8	3b c8		 cmp	 ecx, eax
  003fa	75 09		 jne	 SHORT $LN51@SprawdŸ_Z
  003fc	6b 45 04 0b	 imul	 eax, DWORD PTR wygrana$[rbp], 11
  00400	89 45 04	 mov	 DWORD PTR wygrana$[rbp], eax
  00403	eb 07		 jmp	 SHORT $LN52@SprawdŸ_Z
$LN51@SprawdŸ_Z:

; 427  : 			else wygrana *= 0; //Je¿eli wylosowana liczba nie jest z obstawionego wiersza to przegra³o siê zak³ad

  00405	6b 45 04 00	 imul	 eax, DWORD PTR wygrana$[rbp], 0
  00409	89 45 04	 mov	 DWORD PTR wygrana$[rbp], eax
$LN52@SprawdŸ_Z:
  0040c	eb 30		 jmp	 SHORT $LN50@SprawdŸ_Z
$LN49@SprawdŸ_Z:

; 428  : 		else if (wylosowana_liczba == atoi(typ_zak³adu.c_str())) wygrana *= 35; //Je¿eli typ zak³adu to liczba, to sprawdzam czy wylosowana liczba jest równa obstawionej liczbie, je¿eli tak to wygrana jest 35:1

  0040e	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR typ_zak³adu$[rbp]
  00415	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0041a	48 8b c8	 mov	 rcx, rax
  0041d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00423	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR wylosowana_liczba$[rbp]
  0042a	39 01		 cmp	 DWORD PTR [rcx], eax
  0042c	75 09		 jne	 SHORT $LN53@SprawdŸ_Z
  0042e	6b 45 04 23	 imul	 eax, DWORD PTR wygrana$[rbp], 35 ; 00000023H
  00432	89 45 04	 mov	 DWORD PTR wygrana$[rbp], eax
  00435	eb 07		 jmp	 SHORT $LN54@SprawdŸ_Z
$LN53@SprawdŸ_Z:

; 429  : 		else wygrana *= 0; //Je¿eli wylosowana liczba nie jest równa obstawionej liczbie to przegra³o siê zak³ad

  00437	6b 45 04 00	 imul	 eax, DWORD PTR wygrana$[rbp], 0
  0043b	89 45 04	 mov	 DWORD PTR wygrana$[rbp], eax
$LN54@SprawdŸ_Z:
$LN50@SprawdŸ_Z:
$LN46@SprawdŸ_Z:
$LN42@SprawdŸ_Z:
$LN38@SprawdŸ_Z:
$LN34@SprawdŸ_Z:
$LN30@SprawdŸ_Z:
$LN26@SprawdŸ_Z:
$LN22@SprawdŸ_Z:
$LN3@SprawdŸ_Z:

; 430  : 	}
; 431  : 
; 432  : 	if (wygrana >= kwota) cout << "Obstawiles poprawnie, wygrywasz " << wygrana << "$." << endl; //Je¿eli wygrana jest wiêksza lub równa obstawionej kwocie to informujê o tym, ¿e wygra³

  0043e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR kwota$[rbp]
  00445	8b 00		 mov	 eax, DWORD PTR [rax]
  00447	39 45 04	 cmp	 DWORD PTR wygrana$[rbp], eax
  0044a	7c 43		 jl	 SHORT $LN55@SprawdŸ_Z
  0044c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@MBIMKPJH@Obstawiles?5poprawnie?0?5wygrywasz?5@
  00453	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0045a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0045f	8b 55 04	 mov	 edx, DWORD PTR wygrana$[rbp]
  00462	48 8b c8	 mov	 rcx, rax
  00465	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  0046b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02DEPNMBPN@$?4?$AA@
  00472	48 8b c8	 mov	 rcx, rax
  00475	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0047a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00481	48 8b c8	 mov	 rcx, rax
  00484	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
  0048a	e9 97 00 00 00	 jmp	 $LN56@SprawdŸ_Z
$LN55@SprawdŸ_Z:

; 433  : 	else if (wygrana == kwota / 2) cout << "Obstawiles niepoprawnie lecz uda³o Ci siê, dostajesz po³owê zak³adu " << wygrana << "$." << endl; //Je¿eli wygrana jest równa po³owie obstawionej kwocie to informujê o tym, ¿e przegra³ po³owe stawki

  0048f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR kwota$[rbp]
  00496	8b 00		 mov	 eax, DWORD PTR [rax]
  00498	99		 cdq
  00499	2b c2		 sub	 eax, edx
  0049b	d1 f8		 sar	 eax, 1
  0049d	39 45 04	 cmp	 DWORD PTR wygrana$[rbp], eax
  004a0	75 40		 jne	 SHORT $LN57@SprawdŸ_Z
  004a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EF@FAPGEAPP@Obstawiles?5niepoprawnie?5lecz?5uda@
  004a9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  004b0	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  004b5	8b 55 04	 mov	 edx, DWORD PTR wygrana$[rbp]
  004b8	48 8b c8	 mov	 rcx, rax
  004bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  004c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02DEPNMBPN@$?4?$AA@
  004c8	48 8b c8	 mov	 rcx, rax
  004cb	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  004d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  004d7	48 8b c8	 mov	 rcx, rax
  004da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
  004e0	eb 44		 jmp	 SHORT $LN58@SprawdŸ_Z
$LN57@SprawdŸ_Z:

; 434  : 	else cout << "Obstawiles niepoprawnie, przegra³eœ " << kwota << "$." << endl; //Je¿eli wygrana jest równa zero to informujê o tym, ¿e przegra³

  004e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@EMPIFKEH@Obstawiles?5niepoprawnie?0?5przegra@
  004e9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  004f0	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  004f5	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR kwota$[rbp]
  004fc	8b 11		 mov	 edx, DWORD PTR [rcx]
  004fe	48 8b c8	 mov	 rcx, rax
  00501	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  00507	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02DEPNMBPN@$?4?$AA@
  0050e	48 8b c8	 mov	 rcx, rax
  00511	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00516	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  0051d	48 8b c8	 mov	 rcx, rax
  00520	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
$LN58@SprawdŸ_Z:
$LN56@SprawdŸ_Z:

; 435  : 
; 436  : 	return wygrana; //Zwracam wartoœ wygranej lub zwrotu

  00526	8b 45 04	 mov	 eax, DWORD PTR wygrana$[rbp]

; 437  : }

  00529	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00530	5f		 pop	 rdi
  00531	5d		 pop	 rbp
  00532	c3		 ret	 0
?SprawdŸ_Zak³ad@@YAHAEAHAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBH@Z ENDP ; SprawdŸ_Zak³ad
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?Zakrêæ_Ruletk¹@@YAHXZ
_TEXT	SEGMENT
iloœæ_zakrêceñ$ = 4
czas_przeskoku_kulki_szybki_opóŸnienie$ = 40
i$1 = 68
ii$2 = 100
wylosowana_pozycja$ = 132
czas_przeskoku_kulki_wolny_przyspieszenie$ = 168
i$3 = 196
$T4 = 420
$T5 = 452
$T6 = 484
$T7 = 516
$T8 = 548
?Zakrêæ_Ruletk¹@@YAHXZ PROC				; Zakrêæ_Ruletk¹, COMDAT

; 353  : {

$LN12:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 68 02
	00 00		 sub	 rsp, 616		; 00000268H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 9a 00 00 00	 mov	 ecx, 154		; 0000009aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 354  : 	int iloœæ_zakrêceñ = rand() % (iloœæ_max_dodatkowych_obrotów_ruletki + 1) + iloœæ_minimalna_obrotów_ruletki; //Deklarowanie i przpisanie zmiennej liczbowj zawieraj¹c¹ pseudolosow¹ (o niskiej pseoudolosowoœci) iloœæ obrotów ruletk¹ ((od 0 do max dodatkowych obrotów ruletki) + minimalna iloœæ obrotów ruletki) zanim nastêpi finalny obrót

  0001e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  00024	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?iloœæ_max_dodatkowych_obrotów_ruletki@@3HA ; iloœæ_max_dodatkowych_obrotów_ruletki
  0002a	ff c1		 inc	 ecx
  0002c	99		 cdq
  0002d	f7 f9		 idiv	 ecx
  0002f	8b c2		 mov	 eax, edx
  00031	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?iloœæ_minimalna_obrotów_ruletki@@3HA ; iloœæ_minimalna_obrotów_ruletki
  00037	89 45 04	 mov	 DWORD PTR iloœæ_zakrêceñ$[rbp], eax

; 355  : 	double czas_przeskoku_kulki_szybki_opóŸnienie = czas_przeskoku_kulki_szybki / (iloœæ_zakrêceñ * 37.0); //Deklarowanie i przpisanie zmiennej zmiennoprzecinkowej zawieraj¹c¹ czas o ile kolejna wartoœæ na kole ruletki powinna byæ szybciej pokazana

  0003a	f2 0f 2a 05 00
	00 00 00	 cvtsi2sd xmm0, DWORD PTR ?czas_przeskoku_kulki_szybki@@3HA ; czas_przeskoku_kulki_szybki
  00042	f2 0f 2a 4d 04	 cvtsi2sd xmm1, DWORD PTR iloœæ_zakrêceñ$[rbp]
  00047	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4042800000000000
  0004f	f2 0f 5e c1	 divsd	 xmm0, xmm1
  00053	f2 0f 11 45 28	 movsd	 QWORD PTR czas_przeskoku_kulki_szybki_opóŸnienie$[rbp], xmm0

; 356  : 	Hide_Cursor(); //Ukrycie kursora tekstowego w konsoli

  00058	e8 00 00 00 00	 call	 ?Hide_Cursor@@YAXXZ	; Hide_Cursor

; 357  : 	for (int i = 0; i < iloœæ_zakrêceñ; ++i) //Wykonanie iloœæ_zakrêceñ obrotów ruletk¹

  0005d	c7 45 44 00 00
	00 00		 mov	 DWORD PTR i$1[rbp], 0
  00064	eb 08		 jmp	 SHORT $LN4@Zakr?
$LN2@Zakr?:
  00066	8b 45 44	 mov	 eax, DWORD PTR i$1[rbp]
  00069	ff c0		 inc	 eax
  0006b	89 45 44	 mov	 DWORD PTR i$1[rbp], eax
$LN4@Zakr?:
  0006e	8b 45 04	 mov	 eax, DWORD PTR iloœæ_zakrêceñ$[rbp]
  00071	39 45 44	 cmp	 DWORD PTR i$1[rbp], eax
  00074	0f 8d d8 00 00
	00		 jge	 $LN3@Zakr?

; 358  : 		for (int ii = 0; ii < 37; ++ii) //Przejœcie przez wszystkie pozycje ruletki

  0007a	c7 45 64 00 00
	00 00		 mov	 DWORD PTR ii$2[rbp], 0
  00081	eb 08		 jmp	 SHORT $LN7@Zakr?
$LN5@Zakr?:
  00083	8b 45 64	 mov	 eax, DWORD PTR ii$2[rbp]
  00086	ff c0		 inc	 eax
  00088	89 45 64	 mov	 DWORD PTR ii$2[rbp], eax
$LN7@Zakr?:
  0008b	83 7d 64 25	 cmp	 DWORD PTR ii$2[rbp], 37	; 00000025H
  0008f	0f 8d b8 00 00
	00		 jge	 $LN6@Zakr?

; 359  : 		{
; 360  : 			Change_Col(Ruletka_plansza_kolor_col[Ruletka_ko³o[ii]]); //Zmiana koloru tekstu w konsoli zgodnie z kolorem numeru na ruletce

  00095	48 63 45 64	 movsxd	 rax, DWORD PTR ii$2[rbp]
  00099	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Ruletka_ko³o@@3QBHB
  000a0	48 63 04 81	 movsxd	 rax, DWORD PTR [rcx+rax*4]
  000a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Ruletka_plansza_kolor_col@@3PAHA ; Ruletka_plansza_kolor_col
  000ab	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  000af	48 8b c8	 mov	 rcx, rax
  000b2	e8 00 00 00 00	 call	 ?Change_Col@@YAXAEBH@Z	; Change_Col

; 361  : 			cout << Ruletka_ko³o[ii]; //Wypisanie numeru na kole ruletki na którym znajduje siê pêtla

  000b7	48 63 45 64	 movsxd	 rax, DWORD PTR ii$2[rbp]
  000bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Ruletka_ko³o@@3QBHB
  000c2	8b 14 81	 mov	 edx, DWORD PTR [rcx+rax*4]
  000c5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z

; 362  : 			Sleep((DWORD)(czas_przeskoku_kulki_szybki_opóŸnienie*((double)i*37.0 + (double)ii))); //Przestój który zwiêksza siê co zmianê pozycji pêtli

  000d2	f2 0f 2a 45 44	 cvtsi2sd xmm0, DWORD PTR i$1[rbp]
  000d7	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4042800000000000
  000df	f2 0f 2a 4d 64	 cvtsi2sd xmm1, DWORD PTR ii$2[rbp]
  000e4	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000e8	f2 0f 10 4d 28	 movsd	 xmm1, QWORD PTR czas_przeskoku_kulki_szybki_opóŸnienie$[rbp]
  000ed	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  000f1	0f 28 c1	 movaps	 xmm0, xmm1
  000f4	f2 48 0f 2c c0	 cvttsd2si rax, xmm0
  000f9	8b c8		 mov	 ecx, eax
  000fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_Sleep

; 363  : 			Change_Col(7); //Powrót do standardowego koloru tekstu w konsoli

  00101	c7 85 a4 01 00
	00 07 00 00 00	 mov	 DWORD PTR $T4[rbp], 7
  0010b	48 8d 8d a4 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00112	e8 00 00 00 00	 call	 ?Change_Col@@YAXAEBH@Z	; Change_Col

; 364  : 			cout << "\b\b" << "  " << "\b\b"; //Cofniêcie kursora tekstowego do lewej strony konsoli aby zape³niæ podem spacjami czyli niewidocznym znakiem wiersza konsoli aby widaæ przejœcie pomiêdzy liczbami na ruletce

  00117	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02MGHEPNFN@?$AI?$AI?$AA@
  0011e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00125	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0012a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02KNHHEEKP@?5?5?$AA@
  00131	48 8b c8	 mov	 rcx, rax
  00134	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00139	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02MGHEPNFN@?$AI?$AI?$AA@
  00140	48 8b c8	 mov	 rcx, rax
  00143	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 365  : 		}

  00148	e9 36 ff ff ff	 jmp	 $LN5@Zakr?
$LN6@Zakr?:
  0014d	e9 14 ff ff ff	 jmp	 $LN2@Zakr?
$LN3@Zakr?:

; 366  : 	int wylosowana_pozycja = Wylosuj(0, 36); //Deklarowanie i przpisanie zmiennej liczbowj zawieraj¹c¹ losow¹ lub pseudolosow¹ liczbê (o wysokiej pseoudolosowoœci) pozycjê na ruletce

  00152	c7 85 c4 01 00
	00 24 00 00 00	 mov	 DWORD PTR $T5[rbp], 36	; 00000024H
  0015c	c7 85 e4 01 00
	00 00 00 00 00	 mov	 DWORD PTR $T6[rbp], 0
  00166	48 8d 95 c4 01
	00 00		 lea	 rdx, QWORD PTR $T5[rbp]
  0016d	48 8d 8d e4 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  00174	e8 00 00 00 00	 call	 ?Wylosuj@@YAHAEBH0@Z	; Wylosuj
  00179	89 85 84 00 00
	00		 mov	 DWORD PTR wylosowana_pozycja$[rbp], eax

; 367  : 	double czas_przeskoku_kulki_wolny_przyspieszenie = (czas_przeskoku_kulki_wolny - czas_przeskoku_kulki_szybki) / (double)(wylosowana_pozycja); //Deklarowanie i przpisanie zmiennej zmiennoprzecinkowej zawieraj¹c¹ czas o ile kolejna wartoœæ na kole ruletki powinna byæ szybciej pokazana

  0017f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?czas_przeskoku_kulki_szybki@@3HA ; czas_przeskoku_kulki_szybki
  00185	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?czas_przeskoku_kulki_wolny@@3HA ; czas_przeskoku_kulki_wolny
  0018b	2b c8		 sub	 ecx, eax
  0018d	8b c1		 mov	 eax, ecx
  0018f	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  00193	f2 0f 2a 8d 84
	00 00 00	 cvtsi2sd xmm1, DWORD PTR wylosowana_pozycja$[rbp]
  0019b	f2 0f 5e c1	 divsd	 xmm0, xmm1
  0019f	f2 0f 11 85 a8
	00 00 00	 movsd	 QWORD PTR czas_przeskoku_kulki_wolny_przyspieszenie$[rbp], xmm0

; 368  : 	for (int i = 0; i < wylosowana_pozycja; ++i) //Przejœcie przez pozycje do pozycji o 1 mniejszej od wylosowanej pozyji na ruletce

  001a7	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR i$3[rbp], 0
  001b1	eb 0e		 jmp	 SHORT $LN10@Zakr?
$LN8@Zakr?:
  001b3	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR i$3[rbp]
  001b9	ff c0		 inc	 eax
  001bb	89 85 c4 00 00
	00		 mov	 DWORD PTR i$3[rbp], eax
$LN10@Zakr?:
  001c1	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR wylosowana_pozycja$[rbp]
  001c7	39 85 c4 00 00
	00		 cmp	 DWORD PTR i$3[rbp], eax
  001cd	0f 8d bf 00 00
	00		 jge	 $LN9@Zakr?

; 369  : 	{
; 370  : 		Change_Col(Ruletka_plansza_kolor_col[Ruletka_ko³o[i]]); //Zmiana koloru tekstu w konsoli zgodnie z kolorem numeru na ruletce

  001d3	48 63 85 c4 00
	00 00		 movsxd	 rax, DWORD PTR i$3[rbp]
  001da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Ruletka_ko³o@@3QBHB
  001e1	48 63 04 81	 movsxd	 rax, DWORD PTR [rcx+rax*4]
  001e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Ruletka_plansza_kolor_col@@3PAHA ; Ruletka_plansza_kolor_col
  001ec	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  001f0	48 8b c8	 mov	 rcx, rax
  001f3	e8 00 00 00 00	 call	 ?Change_Col@@YAXAEBH@Z	; Change_Col

; 371  : 		cout << Ruletka_ko³o[i]; //Wypisanie numeru na kole ruletki na którym znajduje siê pêtla

  001f8	48 63 85 c4 00
	00 00		 movsxd	 rax, DWORD PTR i$3[rbp]
  001ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Ruletka_ko³o@@3QBHB
  00206	8b 14 81	 mov	 edx, DWORD PTR [rcx+rax*4]
  00209	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00210	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z

; 372  : 		Sleep((DWORD)(czas_przeskoku_kulki_szybki + (czas_przeskoku_kulki_wolny_przyspieszenie*i))); //Przestój który zwiêksza siê co zmianê pozycji pêtli

  00216	f2 0f 2a 05 00
	00 00 00	 cvtsi2sd xmm0, DWORD PTR ?czas_przeskoku_kulki_szybki@@3HA ; czas_przeskoku_kulki_szybki
  0021e	f2 0f 2a 8d c4
	00 00 00	 cvtsi2sd xmm1, DWORD PTR i$3[rbp]
  00226	f2 0f 10 95 a8
	00 00 00	 movsd	 xmm2, QWORD PTR czas_przeskoku_kulki_wolny_przyspieszenie$[rbp]
  0022e	f2 0f 59 d1	 mulsd	 xmm2, xmm1
  00232	0f 28 ca	 movaps	 xmm1, xmm2
  00235	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00239	f2 48 0f 2c c0	 cvttsd2si rax, xmm0
  0023e	8b c8		 mov	 ecx, eax
  00240	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_Sleep

; 373  : 		Change_Col(7); //Powrót do standardowego koloru tekstu w konsoli

  00246	c7 85 04 02 00
	00 07 00 00 00	 mov	 DWORD PTR $T7[rbp], 7
  00250	48 8d 8d 04 02
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00257	e8 00 00 00 00	 call	 ?Change_Col@@YAXAEBH@Z	; Change_Col

; 374  : 		cout << "\b\b" << "  " << "\b\b"; //Cofniêcie kursora tekstowego do lewej strony konsoli aby zape³niæ podem spacjami czyli niewidocznym znakiem wiersza konsoli aby widaæ przejœcie pomiêdzy liczbami na ruletce

  0025c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02MGHEPNFN@?$AI?$AI?$AA@
  00263	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0026a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0026f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02KNHHEEKP@?5?5?$AA@
  00276	48 8b c8	 mov	 rcx, rax
  00279	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0027e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02MGHEPNFN@?$AI?$AI?$AA@
  00285	48 8b c8	 mov	 rcx, rax
  00288	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 375  : 	}

  0028d	e9 21 ff ff ff	 jmp	 $LN8@Zakr?
$LN9@Zakr?:

; 376  : 	cout << "Wylosowano numer "; //Poinformowanie o zakoñczeniu (wyœwietlania) losowania

  00292	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@IEHJKDDM@Wylosowano?5numer?5?$AA@
  00299	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  002a0	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 377  : 	Change_Col(Ruletka_plansza_kolor_col[Ruletka_ko³o[wylosowana_pozycja]]);//Zmiana koloru tekstu w konsoli zgodnie z kolorem numeru na ruletce

  002a5	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR wylosowana_pozycja$[rbp]
  002ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Ruletka_ko³o@@3QBHB
  002b3	48 63 04 81	 movsxd	 rax, DWORD PTR [rcx+rax*4]
  002b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Ruletka_plansza_kolor_col@@3PAHA ; Ruletka_plansza_kolor_col
  002be	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  002c2	48 8b c8	 mov	 rcx, rax
  002c5	e8 00 00 00 00	 call	 ?Change_Col@@YAXAEBH@Z	; Change_Col

; 378  : 	cout << Ruletka_ko³o[wylosowana_pozycja]; //Wypisanie liczby na wylosowanej pozycji ruletki

  002ca	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR wylosowana_pozycja$[rbp]
  002d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Ruletka_ko³o@@3QBHB
  002d8	8b 14 81	 mov	 edx, DWORD PTR [rcx+rax*4]
  002db	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  002e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z

; 379  : 	Change_Col(7); //Powrót do standardowego koloru tekstu w konsoli

  002e8	c7 85 24 02 00
	00 07 00 00 00	 mov	 DWORD PTR $T8[rbp], 7
  002f2	48 8d 8d 24 02
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  002f9	e8 00 00 00 00	 call	 ?Change_Col@@YAXAEBH@Z	; Change_Col

; 380  : 	cout << ". "; //Zakoñczenie tekstu kropk¹

  002fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02KHOJGJKF@?4?5?$AA@
  00305	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0030c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 381  : 	Show_Cursor(); //Pokazanie kursora tekstowego w konsoli

  00311	e8 00 00 00 00	 call	 ?Show_Cursor@@YAXXZ	; Show_Cursor

; 382  : 
; 383  : 	return Ruletka_ko³o[wylosowana_pozycja]; //Zwracam wartoœæ bêd¹c¹ na wylosowanym polu ruletki

  00316	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR wylosowana_pozycja$[rbp]
  0031d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Ruletka_ko³o@@3QBHB
  00324	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]

; 384  : }

  00327	48 8d a5 48 02
	00 00		 lea	 rsp, QWORD PTR [rbp+584]
  0032e	5f		 pop	 rdi
  0032f	5d		 pop	 rbp
  00330	c3		 ret	 0
?Zakrêæ_Ruletk¹@@YAHXZ ENDP				; Zakrêæ_Ruletk¹
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z
_TEXT	SEGMENT
kwota_zak³adu_s$ = 8
czy_zero$4 = 68
i$5 = 100
$T6 = 328
tv89 = 340
__$ArrayPad$ = 344
kwota_zak³adu$ = 384
iloœæ_pieniêdzy$ = 392
?Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z PROC			; Wczytaj_Kwotê_Zak³adu, COMDAT

; 311  : {

$LN22:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  0002f	48 c7 85 48 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T6[rbp], -2
  0003a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00041	48 33 c5	 xor	 rax, rbp
  00044	48 89 85 58 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 312  : 	string kwota_zak³adu_s; //Deklaracja zmiennej typu string do wczytywania kwoty aby zabezpieczyæ siê przed b³êdem wpisania do zmiennej liczbowej litery

  0004b	48 8d 4d 08	 lea	 rcx, QWORD PTR kwota_zak³adu_s$[rbp]
  0004f	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00054	90		 npad	 1
$LN2@Wczytaj_Kw:

; 313  : 
; 314  : 	while (true) //Rozpoczêcie pêtli nieskoñczonej

  00055	33 c0		 xor	 eax, eax
  00057	83 f8 01	 cmp	 eax, 1
  0005a	0f 84 32 02 00
	00		 je	 $LN3@Wczytaj_Kw

; 315  : 	{
; 316  : 		cout << "Masz " << iloœæ_pieniêdzy << "$, jak¹ kwotê chcesz obstawiæ wynik?" << endl; //Podanie akualnego stanu konta i zadanie pytania o kwotê zak³adu

  00060	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05OMMBNPEF@Masz?5?$AA@
  00067	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0006e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00073	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR iloœæ_pieniêdzy$[rbp]
  0007a	8b 11		 mov	 edx, DWORD PTR [rcx]
  0007c	48 8b c8	 mov	 rcx, rax
  0007f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  00085	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@BGACGNBA@$?0?5jak?$LJ?5kwot?j?5chcesz?5obstawi?f?5wy@
  0008c	48 8b c8	 mov	 rcx, rax
  0008f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00094	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  0009b	48 8b c8	 mov	 rcx, rax
  0009e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 317  : 		cin >> kwota_zak³adu_s; //Pobranie w tekœcie kwoty zak³¹du

  000a4	48 8d 55 08	 lea	 rdx, QWORD PTR kwota_zak³adu_s$[rbp]
  000a8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  000af	e8 00 00 00 00	 call	 ??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator>><char,std::char_traits<char>,std::allocator<char> >

; 318  : 		kwota_zak³adu = atoi(kwota_zak³adu_s.c_str()); //Zmiana stringaa na inta i wpisanie do zmiennej kwota_zak³adu

  000b4	48 8d 4d 08	 lea	 rcx, QWORD PTR kwota_zak³adu_s$[rbp]
  000b8	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  000bd	48 8b c8	 mov	 rcx, rax
  000c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  000c6	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR kwota_zak³adu$[rbp]
  000cd	89 01		 mov	 DWORD PTR [rcx], eax

; 319  : 		if (kwota_zak³adu > 0 && kwota_zak³adu <= iloœæ_pieniêdzy) //Sprawdzenie czy kwota zak³¹du jest wiêksza od zeri i mniejsza lub równa dostêpnej gotówce

  000cf	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR kwota_zak³adu$[rbp]
  000d6	83 38 00	 cmp	 DWORD PTR [rax], 0
  000d9	7e 1e		 jle	 SHORT $LN7@Wczytaj_Kw
  000db	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR kwota_zak³adu$[rbp]
  000e2	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR iloœæ_pieniêdzy$[rbp]
  000e9	8b 09		 mov	 ecx, DWORD PTR [rcx]
  000eb	39 08		 cmp	 DWORD PTR [rax], ecx
  000ed	7f 0a		 jg	 SHORT $LN7@Wczytaj_Kw

; 320  : 			break; //Je¿eli tak to zatrzymuje pêtle

  000ef	e9 9e 01 00 00	 jmp	 $LN3@Wczytaj_Kw

; 321  : 		else //W przeciwym wypadku

  000f4	e9 94 01 00 00	 jmp	 $LN8@Wczytaj_Kw
$LN7@Wczytaj_Kw:

; 322  : 			if (kwota_zak³adu == 0) //Je¿eli wynikiem zamiany na liczbê jest zero (wynikiem zamiany jest zero kiedy tekst to zero lub kiedy jest b³¹d zamiany) to

  000f9	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR kwota_zak³adu$[rbp]
  00100	83 38 00	 cmp	 DWORD PTR [rax], 0
  00103	0f 85 e4 00 00
	00		 jne	 $LN9@Wczytaj_Kw

; 323  : 			{
; 324  : 				bool czy_zero = true; //Utworzenie zmiennej informuj¹cej czy znaleziono zero w tekœcie i przypisanie jej wartoœci true

  00109	c6 45 44 01	 mov	 BYTE PTR czy_zero$4[rbp], 1

; 325  : 				for (short i = 0; i < (short)kwota_zak³adu_s.size(); ++i) //Rozpoczêcie pêtli numerowanej przez zmienn¹ i przez wszystkie znaki wczytanego tekst

  0010d	33 c0		 xor	 eax, eax
  0010f	66 89 45 64	 mov	 WORD PTR i$5[rbp], ax
  00113	eb 0b		 jmp	 SHORT $LN6@Wczytaj_Kw
$LN4@Wczytaj_Kw:
  00115	0f b7 45 64	 movzx	 eax, WORD PTR i$5[rbp]
  00119	66 ff c0	 inc	 ax
  0011c	66 89 45 64	 mov	 WORD PTR i$5[rbp], ax
$LN6@Wczytaj_Kw:
  00120	0f bf 45 64	 movsx	 eax, WORD PTR i$5[rbp]
  00124	89 85 54 01 00
	00		 mov	 DWORD PTR tv89[rbp], eax
  0012a	48 8d 4d 08	 lea	 rcx, QWORD PTR kwota_zak³adu_s$[rbp]
  0012e	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00133	98		 cwde
  00134	8b 8d 54 01 00
	00		 mov	 ecx, DWORD PTR tv89[rbp]
  0013a	3b c8		 cmp	 ecx, eax
  0013c	7d 63		 jge	 SHORT $LN5@Wczytaj_Kw

; 326  : 					if (kwota_zak³adu_s[i] != '0') //Je¿eli znak na i-tej pozycji

  0013e	48 0f bf 45 64	 movsx	 rax, WORD PTR i$5[rbp]
  00143	48 8b d0	 mov	 rdx, rax
  00146	48 8d 4d 08	 lea	 rcx, QWORD PTR kwota_zak³adu_s$[rbp]
  0014a	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0014f	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00152	83 f8 30	 cmp	 eax, 48			; 00000030H
  00155	74 45		 je	 SHORT $LN11@Wczytaj_Kw

; 327  : 					{
; 328  : 						cout << "Wprowadzi³eæ nieprawid³ow¹ wartoœæ" << endl; //Poinformowanie u¿ytkownika, ¿e nie mo¿e obstawiæ tekstowego

  00157	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@OGNPPNBN@Wprowadzi?$LDe?f?5nieprawid?$LDow?$LJ?5warto@
  0015e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00165	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0016a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00171	48 8b c8	 mov	 rcx, rax
  00174	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 329  : 						if (stan_dŸwiêków) cout << "\a"; //Wywo³anie pikniêcia w g³oœniku

  0017a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?stan_dŸwiêków@@3HA, 0 ; stan_dŸwiêków
  00181	74 13		 je	 SHORT $LN12@Wczytaj_Kw
  00183	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01PBGHHLMH@?$AH?$AA@
  0018a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00191	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
$LN12@Wczytaj_Kw:

; 330  : 						czy_zero = false; //Zmiana wartoœci zmiennej czy znaleziono zero w tekœcie na false

  00196	c6 45 44 00	 mov	 BYTE PTR czy_zero$4[rbp], 0

; 331  : 						break; //Zatrzymanie pêtli

  0019a	eb 05		 jmp	 SHORT $LN5@Wczytaj_Kw
$LN11@Wczytaj_Kw:

; 332  : 					}

  0019c	e9 74 ff ff ff	 jmp	 $LN4@Wczytaj_Kw
$LN5@Wczytaj_Kw:

; 333  : 				if (czy_zero) //Sprawdzenie czy znaleziono same zera w tekœcie, je¿eli tak to

  001a1	0f b6 45 44	 movzx	 eax, BYTE PTR czy_zero$4[rbp]
  001a5	85 c0		 test	 eax, eax
  001a7	74 3f		 je	 SHORT $LN13@Wczytaj_Kw

; 334  : 				{
; 335  : 					cout << "Nie mo¿esz obstawiæ zerowego zak³adu" << endl; //Poinformowanie u¿ytkownika, ¿e nie mo¿e obstawiæ zerowego zak³adu

  001a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@LJDHNEHM@Nie?5mo?$LPesz?5obstawi?f?5zerowego?5zak@
  001b0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001b7	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  001bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  001c3	48 8b c8	 mov	 rcx, rax
  001c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 336  : 					if (stan_dŸwiêków) cout << "\a"; //Wywo³anie pikniêcia w g³oœniku

  001cc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?stan_dŸwiêków@@3HA, 0 ; stan_dŸwiêków
  001d3	74 13		 je	 SHORT $LN13@Wczytaj_Kw
  001d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01PBGHHLMH@?$AH?$AA@
  001dc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001e3	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
$LN13@Wczytaj_Kw:

; 337  : 				}
; 338  : 			}

  001e8	e9 a0 00 00 00	 jmp	 $LN8@Wczytaj_Kw
$LN9@Wczytaj_Kw:

; 339  : 			else if (kwota_zak³adu > iloœæ_pieniêdzy) //Je¿eli u¿ytkownik chce obstawiæ za wiêcej ni¿ ma, to

  001ed	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR kwota_zak³adu$[rbp]
  001f4	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR iloœæ_pieniêdzy$[rbp]
  001fb	8b 09		 mov	 ecx, DWORD PTR [rcx]
  001fd	39 08		 cmp	 DWORD PTR [rax], ecx
  001ff	7e 41		 jle	 SHORT $LN15@Wczytaj_Kw

; 340  : 			{
; 341  : 				cout << "Nie masz tyle pieniêdzy" << endl; //Poinformowanie go o tym

  00201	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@CMKDFAEK@Nie?5masz?5tyle?5pieni?jdzy?$AA@
  00208	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0020f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00214	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  0021b	48 8b c8	 mov	 rcx, rax
  0021e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 342  : 				if (stan_dŸwiêków) cout << "\a"; //Wywo³anie pikniêcia w g³oœniku

  00224	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?stan_dŸwiêków@@3HA, 0 ; stan_dŸwiêków
  0022b	74 13		 je	 SHORT $LN17@Wczytaj_Kw
  0022d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01PBGHHLMH@?$AH?$AA@
  00234	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0023b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
$LN17@Wczytaj_Kw:

; 343  : 			}

  00240	eb 4b		 jmp	 SHORT $LN8@Wczytaj_Kw
$LN15@Wczytaj_Kw:

; 344  : 			else if (kwota_zak³adu < 0) //Je¿eli u¿ytkownik chce obstawiæ za ujemn¹ kwotê, to

  00242	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR kwota_zak³adu$[rbp]
  00249	83 38 00	 cmp	 DWORD PTR [rax], 0
  0024c	7d 3f		 jge	 SHORT $LN8@Wczytaj_Kw

; 345  : 			{
; 346  : 				cout << "Nie mo¿esz obstawiæ ujemn¹ kwot¹ zak³adu" << endl; //Poinformowanie go o tym

  0024e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@PMIHJCIC@Nie?5mo?$LPesz?5obstawi?f?5ujemn?$LJ?5kwot?$LJ@
  00255	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0025c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00261	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00268	48 8b c8	 mov	 rcx, rax
  0026b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 347  : 				if (stan_dŸwiêków) cout << "\a"; //Wywo³anie pikniêcia w g³oœniku

  00271	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?stan_dŸwiêków@@3HA, 0 ; stan_dŸwiêków
  00278	74 13		 je	 SHORT $LN8@Wczytaj_Kw
  0027a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01PBGHHLMH@?$AH?$AA@
  00281	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00288	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
$LN8@Wczytaj_Kw:

; 348  : 			}
; 349  : 	}

  0028d	e9 c3 fd ff ff	 jmp	 $LN2@Wczytaj_Kw
$LN3@Wczytaj_Kw:

; 350  : }

  00292	48 8d 4d 08	 lea	 rcx, QWORD PTR kwota_zak³adu_s$[rbp]
  00296	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0029b	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0029f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z$rtcFrameData
  002a6	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  002ab	48 8b 8d 58 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  002b2	48 33 cd	 xor	 rcx, rbp
  002b5	e8 00 00 00 00	 call	 __security_check_cookie
  002ba	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  002c1	5f		 pop	 rdi
  002c2	5d		 pop	 rbp
  002c3	c3		 ret	 0
?Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z ENDP			; Wczytaj_Kwotê_Zak³adu
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
kwota_zak³adu_s$ = 8
czy_zero$4 = 68
i$5 = 100
$T6 = 328
tv89 = 340
__$ArrayPad$ = 344
kwota_zak³adu$ = 384
iloœæ_pieniêdzy$ = 392
?dtor$0@?0??Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z@4HA PROC	; `Wczytaj_Kwotê_Zak³adu'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR kwota_zak³adu_s$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z@4HA ENDP	; `Wczytaj_Kwotê_Zak³adu'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
kwota_zak³adu_s$ = 8
czy_zero$4 = 68
i$5 = 100
$T6 = 328
tv89 = 340
__$ArrayPad$ = 344
kwota_zak³adu$ = 384
iloœæ_pieniêdzy$ = 392
?dtor$0@?0??Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z@4HA PROC	; `Wczytaj_Kwotê_Zak³adu'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR kwota_zak³adu_s$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??Wczytaj_Kwotê_Zak³adu@@YAXAEAH0@Z@4HA ENDP	; `Wczytaj_Kwotê_Zak³adu'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
zaklad_typ$ = 8
$T4 = 260
$T5 = 296
__$ArrayPad$ = 312
__$ReturnUdt$ = 352
?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; Obstaw, COMDAT

; 231  : {

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]
  0002a	48 c7 85 28 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T5[rbp], -2
  00035	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003c	48 33 c5	 xor	 rax, rbp
  0003f	48 89 85 38 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00046	c7 85 04 01 00
	00 00 00 00 00	 mov	 DWORD PTR $T4[rbp], 0

; 232  : 	string zaklad_typ; //Deklaracja zmiennej typu string przechowywuj¹cej typ zak³adu

  00050	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  00054	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00059	90		 npad	 1
$LN4@Obstaw:

; 233  : 
; 234  : 	do { //Pêtla do aby wykona³a siê conajmniej raz
; 235  : 		cout << "Jak¹ opcje chcesz obstawic ? (zgodnie z poni¿szym opisem) :" << endl; //Zadanie pytania u¿ytkownikowi

  0005a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DM@FGCBIOFJ@Jak?$LJ?5opcje?5chcesz?5obstawic?5?$DP?5?$CIzg@
  00061	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00068	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0006d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00074	48 8b c8	 mov	 rcx, rax
  00077	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 236  : 		cout << "p - parzyste" << endl; //Wskazaæ mo¿liw¹ odpowiedŸ

  0007d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@KLINIBPG@p?5?9?5parzyste?$AA@
  00084	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0008b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00090	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00097	48 8b c8	 mov	 rcx, rax
  0009a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 237  : 		cout << "n - nieparzyste" << endl; //Wskazaæ mo¿liw¹ odpowiedŸ

  000a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@GNAADEAG@n?5?9?5nieparzyste?$AA@
  000a7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000ae	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  000b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  000ba	48 8b c8	 mov	 rcx, rax
  000bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 238  : 		cout << "r - czerwone(red)" << endl; //Wskazaæ mo¿liw¹ odpowiedŸ

  000c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@GOMOHEMO@r?5?9?5czerwone?$CIred?$CJ?$AA@
  000ca	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000d1	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  000d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  000dd	48 8b c8	 mov	 rcx, rax
  000e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 239  : 		cout << "b - czarne(black)" << endl; //Wskazaæ mo¿liw¹ odpowiedŸ

  000e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@LKBFHLDI@b?5?9?5czarne?$CIblack?$CJ?$AA@
  000ed	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000f4	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  000f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00100	48 8b c8	 mov	 rcx, rax
  00103	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 240  : 		cout << "g - górna po³owa" << endl; //Wskazaæ mo¿liw¹ odpowiedŸ

  00109	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@FMNKHOJE@g?5?9?5g?srna?5po?$LDowa?$AA@
  00110	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00117	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0011c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00123	48 8b c8	 mov	 rcx, rax
  00126	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 241  : 		cout << "d - dolna po³owa" << endl; //Wskazaæ mo¿liw¹ odpowiedŸ

  0012c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@CHNPGJIO@d?5?9?5dolna?5po?$LDowa?$AA@
  00133	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0013a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0013f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00146	48 8b c8	 mov	 rcx, rax
  00149	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 242  : 		cout << "k1, k2, k3 - kolumna 1, kolumna 2, kolumna 3" << endl; //Wskazaæ mo¿liw¹ odpowiedŸ

  0014f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@EJBDEIIK@k1?0?5k2?0?5k3?5?9?5kolumna?51?0?5kolumna?5@
  00156	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0015d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00162	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00169	48 8b c8	 mov	 rcx, rax
  0016c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 243  : 		cout << "w1, w2, ..., w12 - wiersz trzech numerów" << endl; //Wskazaæ mo¿liw¹ odpowiedŸ

  00172	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@KMEGGBFA@w1?0?5w2?0?5?4?4?4?0?5w12?5?9?5wiersz?5trzech@
  00179	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00180	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00185	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  0018c	48 8b c8	 mov	 rcx, rax
  0018f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 244  : 		cout << "0 - 36 - pojedyncze pole o odpowiednim numerze" << endl; //Wskazaæ mo¿liw¹ odpowiedŸ

  00195	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@FOKBNGLG@0?5?9?536?5?9?5pojedyncze?5pole?5o?5odpow@
  0019c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001a3	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  001a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  001af	48 8b c8	 mov	 rcx, rax
  001b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 245  : 		cin >> zaklad_typ; //Pobranie od u¿ytkownika odpowiedzi na pytanie

  001b8	48 8d 55 08	 lea	 rdx, QWORD PTR zaklad_typ$[rbp]
  001bc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  001c3	e8 00 00 00 00	 call	 ??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator>><char,std::char_traits<char>,std::allocator<char> >

; 246  : 	} while ( //U¿ywam takiej sk³adni poniewa¿ jeœli masz wyra¿enie z logicznymi operatorami && lub ||, to w momencie gdy wynik wyra¿enia ju¿ jest znany, to nie jest wyliczany dalej. (Poniewa¿ C++ jest "leniwe", co zarazem jest optymalne)
; 247  : 		zaklad_typ != "p" && //Sprawdzanie czy wprowadzono zak³ad na liczby parzyste
; 248  : 		zaklad_typ != "n" && //Sprawdzanie czy wprowadzono zak³ad na liczby nieparzyste
; 249  : 		zaklad_typ != "r" && //Sprawdzanie czy wprowadzono zak³ad na czerwone liczby
; 250  : 		zaklad_typ != "b" && //Sprawdzanie czy wprowadzono zak³ad na czarne liczby
; 251  : 		zaklad_typ != "g" && //Sprawdzanie czy wprowadzono zak³ad na liczby z górnej po³ówki
; 252  : 		zaklad_typ != "d" && //Sprawdzanie czy wprowadzono zak³ad na liczby z dolnej po³ówki
; 253  : 		zaklad_typ != "k1" && //Sprawdzanie czy wprowadzono zak³ad na liczby z kolumny 1
; 254  : 		zaklad_typ != "k2" && //Sprawdzanie czy wprowadzono zak³ad na liczby z kolumny 2
; 255  : 		zaklad_typ != "k3" && //Sprawdzanie czy wprowadzono zak³ad na liczby z kolumny 3
; 256  : 		zaklad_typ != "w1" && //Sprawdzanie czy wprowadzono zak³ad na liczby z wiersza 1
; 257  : 		zaklad_typ != "w2" && //Sprawdzanie czy wprowadzono zak³ad na liczby z wiersza 2
; 258  : 		zaklad_typ != "w3" && //Sprawdzanie czy wprowadzono zak³ad na liczby z wiersza 3
; 259  : 		zaklad_typ != "w4" && //Sprawdzanie czy wprowadzono zak³ad na liczby z wiersza 4
; 260  : 		zaklad_typ != "w5" && //Sprawdzanie czy wprowadzono zak³ad na liczby z wiersza 5
; 261  : 		zaklad_typ != "w6" && //Sprawdzanie czy wprowadzono zak³ad na liczby z wiersza 6
; 262  : 		zaklad_typ != "w7" && //Sprawdzanie czy wprowadzono zak³ad na liczby z wiersza 7
; 263  : 		zaklad_typ != "w8" && //Sprawdzanie czy wprowadzono zak³ad na liczby z wiersza 8
; 264  : 		zaklad_typ != "w9" && //Sprawdzanie czy wprowadzono zak³ad na liczby z wiersza 9
; 265  : 		zaklad_typ != "w10" && //Sprawdzanie czy wprowadzono zak³ad na liczby z wiersza 10
; 266  : 		zaklad_typ != "w11" && //Sprawdzanie czy wprowadzono zak³ad na liczby z wiersza 11
; 267  : 		zaklad_typ != "w12" && //Sprawdzanie czy wprowadzono zak³ad na liczby z wiersza 12
; 268  : 		zaklad_typ != "0" && //Sprawdzanie czy wprowadzono zak³ad na cyfrê 0
; 269  : 		zaklad_typ != "1" && //Sprawdzanie czy wprowadzono zak³ad na cyfrê 1
; 270  : 		zaklad_typ != "2" && //Sprawdzanie czy wprowadzono zak³ad na cyfrê 2
; 271  : 		zaklad_typ != "3" && //Sprawdzanie czy wprowadzono zak³ad na cyfrê 3
; 272  : 		zaklad_typ != "4" && //Sprawdzanie czy wprowadzono zak³ad na cyfrê 4
; 273  : 		zaklad_typ != "5" && //Sprawdzanie czy wprowadzono zak³ad na cyfrê 5
; 274  : 		zaklad_typ != "6" && //Sprawdzanie czy wprowadzono zak³ad na cyfrê 6
; 275  : 		zaklad_typ != "7" && //Sprawdzanie czy wprowadzono zak³ad na cyfrê 7
; 276  : 		zaklad_typ != "8" && //Sprawdzanie czy wprowadzono zak³ad na cyfrê 8
; 277  : 		zaklad_typ != "9" && //Sprawdzanie czy wprowadzono zak³ad na cyfrê 9
; 278  : 		zaklad_typ != "10" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 10
; 279  : 		zaklad_typ != "11" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 11
; 280  : 		zaklad_typ != "12" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 12
; 281  : 		zaklad_typ != "13" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 13
; 282  : 		zaklad_typ != "14" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 14
; 283  : 		zaklad_typ != "15" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 15
; 284  : 		zaklad_typ != "16" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 16
; 285  : 		zaklad_typ != "17" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 17
; 286  : 		zaklad_typ != "18" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 18
; 287  : 		zaklad_typ != "19" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 19
; 288  : 		zaklad_typ != "20" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 20
; 289  : 		zaklad_typ != "21" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 21
; 290  : 		zaklad_typ != "22" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 22
; 291  : 		zaklad_typ != "23" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 23
; 292  : 		zaklad_typ != "24" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 24
; 293  : 		zaklad_typ != "25" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 25
; 294  : 		zaklad_typ != "26" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 26
; 295  : 		zaklad_typ != "27" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 27
; 296  : 		zaklad_typ != "28" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 28
; 297  : 		zaklad_typ != "29" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 29
; 298  : 		zaklad_typ != "30" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 30
; 299  : 		zaklad_typ != "31" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 31
; 300  : 		zaklad_typ != "32" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 32
; 301  : 		zaklad_typ != "33" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 33
; 302  : 		zaklad_typ != "34" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 34
; 303  : 		zaklad_typ != "35" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 35

  001c8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01JBBJJEPG@p?$AA@
  001cf	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  001d3	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  001d8	0f b6 c0	 movzx	 eax, al
  001db	85 c0		 test	 eax, eax
  001dd	0f 84 ef 05 00
	00		 je	 $LN5@Obstaw
  001e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EFFIKLCJ@n?$AA@
  001ea	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  001ee	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  001f3	0f b6 c0	 movzx	 eax, al
  001f6	85 c0		 test	 eax, eax
  001f8	0f 84 d4 05 00
	00		 je	 $LN5@Obstaw
  001fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01KDCPPGHE@r?$AA@
  00205	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  00209	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  0020e	0f b6 c0	 movzx	 eax, al
  00211	85 c0		 test	 eax, eax
  00213	0f 84 b9 05 00
	00		 je	 $LN5@Obstaw
  00219	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01OJONOECF@b?$AA@
  00220	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  00224	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00229	0f b6 c0	 movzx	 eax, al
  0022c	85 c0		 test	 eax, eax
  0022e	0f 84 9e 05 00
	00		 je	 $LN5@Obstaw
  00234	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01JEJKBAGA@g?$AA@
  0023b	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  0023f	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00244	0f b6 c0	 movzx	 eax, al
  00247	85 c0		 test	 eax, eax
  00249	0f 84 83 05 00
	00		 je	 $LN5@Obstaw
  0024f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01LPLHEDKD@d?$AA@
  00256	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  0025a	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  0025f	0f b6 c0	 movzx	 eax, al
  00262	85 c0		 test	 eax, eax
  00264	0f 84 68 05 00
	00		 je	 $LN5@Obstaw
  0026a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02ICGBAFJO@k1?$AA@
  00271	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  00275	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  0027a	0f b6 c0	 movzx	 eax, al
  0027d	85 c0		 test	 eax, eax
  0027f	0f 84 4d 05 00
	00		 je	 $LN5@Obstaw
  00285	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02KJEMFGFN@k2?$AA@
  0028c	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  00290	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00295	0f b6 c0	 movzx	 eax, al
  00298	85 c0		 test	 eax, eax
  0029a	0f 84 32 05 00
	00		 je	 $LN5@Obstaw
  002a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02LAFHGHBM@k3?$AA@
  002a7	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  002ab	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  002b0	0f b6 c0	 movzx	 eax, al
  002b3	85 c0		 test	 eax, eax
  002b5	0f 84 17 05 00
	00		 je	 $LN5@Obstaw
  002bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02JHFNFPIK@w1?$AA@
  002c2	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  002c6	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  002cb	0f b6 c0	 movzx	 eax, al
  002ce	85 c0		 test	 eax, eax
  002d0	0f 84 fc 04 00
	00		 je	 $LN5@Obstaw
  002d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02LMHAAMEJ@w2?$AA@
  002dd	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  002e1	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  002e6	0f b6 c0	 movzx	 eax, al
  002e9	85 c0		 test	 eax, eax
  002eb	0f 84 e1 04 00
	00		 je	 $LN5@Obstaw
  002f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02KFGLDNAI@w3?$AA@
  002f8	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  002fc	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00301	0f b6 c0	 movzx	 eax, al
  00304	85 c0		 test	 eax, eax
  00306	0f 84 c6 04 00
	00		 je	 $LN5@Obstaw
  0030c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02OKCKKLMP@w4?$AA@
  00313	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  00317	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  0031c	0f b6 c0	 movzx	 eax, al
  0031f	85 c0		 test	 eax, eax
  00321	0f 84 ab 04 00
	00		 je	 $LN5@Obstaw
  00327	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02PDDBJKIO@w5?$AA@
  0032e	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  00332	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00337	0f b6 c0	 movzx	 eax, al
  0033a	85 c0		 test	 eax, eax
  0033c	0f 84 90 04 00
	00		 je	 $LN5@Obstaw
  00342	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02NIBMMJEN@w6?$AA@
  00349	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  0034d	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00352	0f b6 c0	 movzx	 eax, al
  00355	85 c0		 test	 eax, eax
  00357	0f 84 75 04 00
	00		 je	 $LN5@Obstaw
  0035d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02MBAHPIAM@w7?$AA@
  00364	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  00368	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  0036d	0f b6 c0	 movzx	 eax, al
  00370	85 c0		 test	 eax, eax
  00372	0f 84 5a 04 00
	00		 je	 $LN5@Obstaw
  00378	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02EGJPOEMD@w8?$AA@
  0037f	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  00383	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00388	0f b6 c0	 movzx	 eax, al
  0038b	85 c0		 test	 eax, eax
  0038d	0f 84 3f 04 00
	00		 je	 $LN5@Obstaw
  00393	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02FPIENFIC@w9?$AA@
  0039a	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  0039e	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  003a3	0f b6 c0	 movzx	 eax, al
  003a6	85 c0		 test	 eax, eax
  003a8	0f 84 24 04 00
	00		 je	 $LN5@Obstaw
  003ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03NCLMABJC@w10?$AA@
  003b5	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  003b9	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  003be	0f b6 c0	 movzx	 eax, al
  003c1	85 c0		 test	 eax, eax
  003c3	0f 84 09 04 00
	00		 je	 $LN5@Obstaw
  003c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03MLKHDAND@w11?$AA@
  003d0	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  003d4	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  003d9	0f b6 c0	 movzx	 eax, al
  003dc	85 c0		 test	 eax, eax
  003de	0f 84 ee 03 00
	00		 je	 $LN5@Obstaw
  003e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03OAIKGDBA@w12?$AA@
  003eb	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  003ef	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  003f4	0f b6 c0	 movzx	 eax, al
  003f7	85 c0		 test	 eax, eax
  003f9	0f 84 d3 03 00
	00		 je	 $LN5@Obstaw
  003ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01GBGANLPD@0?$AA@
  00406	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  0040a	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  0040f	0f b6 c0	 movzx	 eax, al
  00412	85 c0		 test	 eax, eax
  00414	0f 84 b8 03 00
	00		 je	 $LN5@Obstaw
  0041a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01HIHLOKLC@1?$AA@
  00421	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  00425	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  0042a	0f b6 c0	 movzx	 eax, al
  0042d	85 c0		 test	 eax, eax
  0042f	0f 84 9d 03 00
	00		 je	 $LN5@Obstaw
  00435	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01FDFGLJHB@2?$AA@
  0043c	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  00440	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00445	0f b6 c0	 movzx	 eax, al
  00448	85 c0		 test	 eax, eax
  0044a	0f 84 82 03 00
	00		 je	 $LN5@Obstaw
  00450	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01EKENIIDA@3?$AA@
  00457	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  0045b	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00460	0f b6 c0	 movzx	 eax, al
  00463	85 c0		 test	 eax, eax
  00465	0f 84 67 03 00
	00		 je	 $LN5@Obstaw
  0046b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01FAMBOPH@4?$AA@
  00472	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  00476	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  0047b	0f b6 c0	 movzx	 eax, al
  0047e	85 c0		 test	 eax, eax
  00480	0f 84 4c 03 00
	00		 je	 $LN5@Obstaw
  00486	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01BMBHCPLG@5?$AA@
  0048d	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  00491	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00496	0f b6 c0	 movzx	 eax, al
  00499	85 c0		 test	 eax, eax
  0049b	0f 84 31 03 00
	00		 je	 $LN5@Obstaw
  004a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01DHDKHMHF@6?$AA@
  004a8	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  004ac	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  004b1	0f b6 c0	 movzx	 eax, al
  004b4	85 c0		 test	 eax, eax
  004b6	0f 84 16 03 00
	00		 je	 $LN5@Obstaw
  004bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01COCBENDE@7?$AA@
  004c3	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  004c7	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  004cc	0f b6 c0	 movzx	 eax, al
  004cf	85 c0		 test	 eax, eax
  004d1	0f 84 fb 02 00
	00		 je	 $LN5@Obstaw
  004d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01KJLJFBPL@8?$AA@
  004de	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  004e2	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  004e7	0f b6 c0	 movzx	 eax, al
  004ea	85 c0		 test	 eax, eax
  004ec	0f 84 e0 02 00
	00		 je	 $LN5@Obstaw
  004f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01LAKCGALK@9?$AA@
  004f9	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  004fd	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00502	0f b6 c0	 movzx	 eax, al
  00505	85 c0		 test	 eax, eax
  00507	0f 84 c5 02 00
	00		 je	 $LN5@Obstaw
  0050d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02PKFBJPLJ@10?$AA@
  00514	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  00518	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  0051d	0f b6 c0	 movzx	 eax, al
  00520	85 c0		 test	 eax, eax
  00522	0f 84 aa 02 00
	00		 je	 $LN5@Obstaw
  00528	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02ODEKKOPI@11?$AA@
  0052f	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  00533	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00538	0f b6 c0	 movzx	 eax, al
  0053b	85 c0		 test	 eax, eax
  0053d	0f 84 8f 02 00
	00		 je	 $LN5@Obstaw
  00543	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02MIGHPNDL@12?$AA@
  0054a	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  0054e	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00553	0f b6 c0	 movzx	 eax, al
  00556	85 c0		 test	 eax, eax
  00558	0f 84 74 02 00
	00		 je	 $LN5@Obstaw
  0055e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02NBHMMMHK@13?$AA@
  00565	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  00569	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  0056e	0f b6 c0	 movzx	 eax, al
  00571	85 c0		 test	 eax, eax
  00573	0f 84 59 02 00
	00		 je	 $LN5@Obstaw
  00579	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02JODNFKLN@14?$AA@
  00580	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  00584	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00589	0f b6 c0	 movzx	 eax, al
  0058c	85 c0		 test	 eax, eax
  0058e	0f 84 3e 02 00
	00		 je	 $LN5@Obstaw
  00594	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02IHCGGLPM@15?$AA@
  0059b	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  0059f	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  005a4	0f b6 c0	 movzx	 eax, al
  005a7	85 c0		 test	 eax, eax
  005a9	0f 84 23 02 00
	00		 je	 $LN5@Obstaw
  005af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02KMALDIDP@16?$AA@
  005b6	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  005ba	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  005bf	0f b6 c0	 movzx	 eax, al
  005c2	85 c0		 test	 eax, eax
  005c4	0f 84 08 02 00
	00		 je	 $LN5@Obstaw
  005ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02LFBAAJHO@17?$AA@
  005d1	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  005d5	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  005da	0f b6 c0	 movzx	 eax, al
  005dd	85 c0		 test	 eax, eax
  005df	0f 84 ed 01 00
	00		 je	 $LN5@Obstaw
  005e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02DCIIBFLB@18?$AA@
  005ec	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  005f0	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  005f5	0f b6 c0	 movzx	 eax, al
  005f8	85 c0		 test	 eax, eax
  005fa	0f 84 d2 01 00
	00		 je	 $LN5@Obstaw
  00600	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02CLJDCEPA@19?$AA@
  00607	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  0060b	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00610	0f b6 c0	 movzx	 eax, al
  00613	85 c0		 test	 eax, eax
  00615	0f 84 b7 01 00
	00		 je	 $LN5@Obstaw
  0061b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02PIBHCBOA@20?$AA@
  00622	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  00626	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  0062b	0f b6 c0	 movzx	 eax, al
  0062e	85 c0		 test	 eax, eax
  00630	0f 84 9c 01 00
	00		 je	 $LN5@Obstaw
  00636	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02OBAMBAKB@21?$AA@
  0063d	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  00641	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00646	0f b6 c0	 movzx	 eax, al
  00649	85 c0		 test	 eax, eax
  0064b	0f 84 81 01 00
	00		 je	 $LN5@Obstaw
  00651	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02MKCBEDGC@22?$AA@
  00658	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  0065c	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00661	0f b6 c0	 movzx	 eax, al
  00664	85 c0		 test	 eax, eax
  00666	0f 84 66 01 00
	00		 je	 $LN5@Obstaw
  0066c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02NDDKHCCD@23?$AA@
  00673	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  00677	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  0067c	0f b6 c0	 movzx	 eax, al
  0067f	85 c0		 test	 eax, eax
  00681	0f 84 4b 01 00
	00		 je	 $LN5@Obstaw
  00687	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02JMHLOEOE@24?$AA@
  0068e	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  00692	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00697	0f b6 c0	 movzx	 eax, al
  0069a	85 c0		 test	 eax, eax
  0069c	0f 84 30 01 00
	00		 je	 $LN5@Obstaw
  006a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02IFGANFKF@25?$AA@
  006a9	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  006ad	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  006b2	0f b6 c0	 movzx	 eax, al
  006b5	85 c0		 test	 eax, eax
  006b7	0f 84 15 01 00
	00		 je	 $LN5@Obstaw
  006bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02KOENIGGG@26?$AA@
  006c4	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  006c8	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  006cd	0f b6 c0	 movzx	 eax, al
  006d0	85 c0		 test	 eax, eax
  006d2	0f 84 fa 00 00
	00		 je	 $LN5@Obstaw
  006d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02LHFGLHCH@27?$AA@
  006df	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  006e3	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  006e8	0f b6 c0	 movzx	 eax, al
  006eb	85 c0		 test	 eax, eax
  006ed	0f 84 df 00 00
	00		 je	 $LN5@Obstaw
  006f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02DAMOKLOI@28?$AA@
  006fa	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  006fe	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00703	0f b6 c0	 movzx	 eax, al
  00706	85 c0		 test	 eax, eax
  00708	0f 84 c4 00 00
	00		 je	 $LN5@Obstaw
  0070e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02CJNFJKKJ@29?$AA@
  00715	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  00719	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  0071e	0f b6 c0	 movzx	 eax, al
  00721	85 c0		 test	 eax, eax
  00723	0f 84 a9 00 00
	00		 je	 $LN5@Obstaw
  00729	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02PJNFELNH@30?$AA@
  00730	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  00734	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00739	0f b6 c0	 movzx	 eax, al
  0073c	85 c0		 test	 eax, eax
  0073e	0f 84 8e 00 00
	00		 je	 $LN5@Obstaw
  00744	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02OAMOHKJG@31?$AA@
  0074b	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  0074f	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00754	0f b6 c0	 movzx	 eax, al
  00757	85 c0		 test	 eax, eax
  00759	74 77		 je	 SHORT $LN5@Obstaw
  0075b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02MLODCJFF@32?$AA@
  00762	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  00766	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  0076b	0f b6 c0	 movzx	 eax, al
  0076e	85 c0		 test	 eax, eax
  00770	74 60		 je	 SHORT $LN5@Obstaw
  00772	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02NCPIBIBE@33?$AA@
  00779	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  0077d	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00782	0f b6 c0	 movzx	 eax, al
  00785	85 c0		 test	 eax, eax
  00787	74 49		 je	 SHORT $LN5@Obstaw
  00789	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02JNLJIOND@34?$AA@
  00790	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  00794	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00799	0f b6 c0	 movzx	 eax, al
  0079c	85 c0		 test	 eax, eax
  0079e	74 32		 je	 SHORT $LN5@Obstaw
  007a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02IEKCLPJC@35?$AA@
  007a7	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  007ab	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  007b0	0f b6 c0	 movzx	 eax, al
  007b3	85 c0		 test	 eax, eax
  007b5	74 1b		 je	 SHORT $LN5@Obstaw
  007b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02KPIPOMFB@36?$AA@
  007be	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  007c2	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QEBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  007c7	0f b6 c0	 movzx	 eax, al
  007ca	85 c0		 test	 eax, eax
  007cc	0f 85 88 f8 ff
	ff		 jne	 $LN4@Obstaw
$LN5@Obstaw:

; 304  : 		zaklad_typ != "36" //Sprawdzanie czy wprowadzono zak³ad na liczbê 36
; 305  : 		); //Je¿eli któryœ z warunków siê niezgadza to pêtla nie jest kontynuowana
; 306  : 
; 307  : 	return zaklad_typ; //Zwracam typ zak³adu podany przez u¿ytkownika

  007d2	48 8d 55 08	 lea	 rdx, QWORD PTR zaklad_typ$[rbp]
  007d6	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  007dd	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  007e2	8b 85 04 01 00
	00		 mov	 eax, DWORD PTR $T4[rbp]
  007e8	83 c8 01	 or	 eax, 1
  007eb	89 85 04 01 00
	00		 mov	 DWORD PTR $T4[rbp], eax
  007f1	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  007f5	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  007fa	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 308  : }

  00801	48 8b f8	 mov	 rdi, rax
  00804	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00808	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$rtcFrameData
  0080f	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00814	48 8b c7	 mov	 rax, rdi
  00817	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0081e	48 33 cd	 xor	 rcx, rbp
  00821	e8 00 00 00 00	 call	 __security_check_cookie
  00826	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  0082d	5f		 pop	 rdi
  0082e	5d		 pop	 rbp
  0082f	c3		 ret	 0
?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; Obstaw
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
zaklad_typ$ = 8
$T4 = 260
$T5 = 296
__$ArrayPad$ = 312
__$ReturnUdt$ = 352
?dtor$0@?0??Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ@4HA PROC ; `Obstaw'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ@4HA ENDP ; `Obstaw'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
zaklad_typ$ = 8
$T4 = 260
$T5 = 296
__$ArrayPad$ = 312
__$ReturnUdt$ = 352
?dtor$0@?0??Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ@4HA PROC ; `Obstaw'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR zaklad_typ$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ@4HA ENDP ; `Obstaw'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ??Rrandom_device@std@@QEAAIXZ
_TEXT	SEGMENT
this$ = 224
??Rrandom_device@std@@QEAAIXZ PROC			; std::random_device::operator(), COMDAT

; 6441 : 		{	// return next value

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 6442 : 		return (_Random_device());

  0002a	e8 00 00 00 00	 call	 ?_Random_device@std@@YAIXZ ; std::_Random_device

; 6443 : 		}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??Rrandom_device@std@@QEAAIXZ ENDP			; std::random_device::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ?entropy@random_device@std@@QEAANXZ
_TEXT	SEGMENT
this$ = 224
?entropy@random_device@std@@QEAANXZ PROC		; std::random_device::entropy, COMDAT

; 6436 : 		{	// return entropy of random number source

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0000e	48 8d 6c 24 10	 lea	 rbp, QWORD PTR [rsp+16]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+248]

; 6437 : 		return (32.0);

  0002a	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4040000000000000

; 6438 : 		}

  00032	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00039	5f		 pop	 rdi
  0003a	5d		 pop	 rbp
  0003b	c3		 ret	 0
?entropy@random_device@std@@QEAANXZ ENDP		; std::random_device::entropy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ?max@random_device@std@@SAIXZ
_TEXT	SEGMENT
?max@random_device@std@@SAIXZ PROC			; std::random_device::max, COMDAT

; 6431 : 		{	// return maximum possible generated value

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000a	48 8b ec	 mov	 rbp, rsp
  0000d	48 8b fc	 mov	 rdi, rsp
  00010	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd

; 6432 : 		return ((result_type)-1);

  0001c	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH

; 6433 : 		}

  00021	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00028	5f		 pop	 rdi
  00029	5d		 pop	 rbp
  0002a	c3		 ret	 0
?max@random_device@std@@SAIXZ ENDP			; std::random_device::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ?min@random_device@std@@SAIXZ
_TEXT	SEGMENT
?min@random_device@std@@SAIXZ PROC			; std::random_device::min, COMDAT

; 6426 : 		{	// return minimum possible generated value

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000a	48 8b ec	 mov	 rbp, rsp
  0000d	48 8b fc	 mov	 rdi, rsp
  00010	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd

; 6427 : 		return (0);

  0001c	33 c0		 xor	 eax, eax

; 6428 : 		}

  0001e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00025	5f		 pop	 rdi
  00026	5d		 pop	 rbp
  00027	c3		 ret	 0
?min@random_device@std@@SAIXZ ENDP			; std::random_device::min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ??0random_device@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
this$ = 224
__formal$ = 232
??0random_device@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::random_device::random_device, COMDAT

; 6420 : 	explicit random_device(const string& = "")

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 6421 : 		{	// construct
; 6422 : 		(*this)();	// force early failure if bad engine

  0002f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00036	e8 00 00 00 00	 call	 ??Rrandom_device@std@@QEAAIXZ ; std::random_device::operator()

; 6423 : 		}

  0003b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00042	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
??0random_device@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::random_device::random_device
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ??$_Ungetc@D@std@@YA_NAEBDPEAU_iobuf@@@Z
_TEXT	SEGMENT
tv69 = 192
_Byte$ = 240
_File$ = 248
??$_Ungetc@D@std@@YA_NAEBDPEAU_iobuf@@@Z PROC		; std::_Ungetc<char>, COMDAT

; 116  : 	{	// put back a char element to a C stream

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 117  : 	return (ungetc((unsigned char)_Byte, _File) != EOF);

  0002f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Byte$[rbp]
  00036	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00039	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR _File$[rbp]
  00040	8b c8		 mov	 ecx, eax
  00042	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ungetc
  00048	83 f8 ff	 cmp	 eax, -1
  0004b	74 0c		 je	 SHORT $LN3@Ungetc
  0004d	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv69[rbp], 1
  00057	eb 0a		 jmp	 SHORT $LN4@Ungetc
$LN3@Ungetc:
  00059	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv69[rbp], 0
$LN4@Ungetc:
  00063	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv69[rbp]

; 118  : 	}

  0006a	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00071	5f		 pop	 rdi
  00072	5d		 pop	 rbp
  00073	c3		 ret	 0
??$_Ungetc@D@std@@YA_NAEBDPEAU_iobuf@@@Z ENDP		; std::_Ungetc<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ??$_Fputc@D@std@@YA_NDPEAU_iobuf@@@Z
_TEXT	SEGMENT
tv69 = 192
_Byte$ = 240
_File$ = 248
??$_Fputc@D@std@@YA_NDPEAU_iobuf@@@Z PROC		; std::_Fputc<char>, COMDAT

; 92   : 	{	// put a char element to a C stream

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	0f b6 8c 24 18
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+280]

; 93   : 	return (fputc(_Byte, _File) != EOF);

  0002e	0f be 85 f0 00
	00 00		 movsx	 eax, BYTE PTR _Byte$[rbp]
  00035	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR _File$[rbp]
  0003c	8b c8		 mov	 ecx, eax
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fputc
  00044	83 f8 ff	 cmp	 eax, -1
  00047	74 0c		 je	 SHORT $LN3@Fputc
  00049	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv69[rbp], 1
  00053	eb 0a		 jmp	 SHORT $LN4@Fputc
$LN3@Fputc:
  00055	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv69[rbp], 0
$LN4@Fputc:
  0005f	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv69[rbp]

; 94   : 	}

  00066	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0006d	5f		 pop	 rdi
  0006e	5d		 pop	 rbp
  0006f	c3		 ret	 0
??$_Fputc@D@std@@YA_NDPEAU_iobuf@@@Z ENDP		; std::_Fputc<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ??$_Fgetc@D@std@@YA_NAEADPEAU_iobuf@@@Z
_TEXT	SEGMENT
_Meta$ = 4
_Byte$ = 256
_File$ = 264
??$_Fgetc@D@std@@YA_NAEADPEAU_iobuf@@@Z PROC		; std::_Fgetc<char>, COMDAT

; 47   : 	{	// get a char element from a C stream

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 48   : 	int _Meta;
; 49   : 	if ((_Meta = fgetc(_File)) == EOF)

  0002f	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _File$[rbp]
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fgetc
  0003c	89 45 04	 mov	 DWORD PTR _Meta$[rbp], eax
  0003f	83 7d 04 ff	 cmp	 DWORD PTR _Meta$[rbp], -1
  00043	75 06		 jne	 SHORT $LN2@Fgetc

; 50   : 		return (false);

  00045	32 c0		 xor	 al, al
  00047	eb 11		 jmp	 SHORT $LN1@Fgetc

; 51   : 	else

  00049	eb 0f		 jmp	 SHORT $LN3@Fgetc
$LN2@Fgetc:

; 52   : 		{	// got one, convert to char
; 53   : 		_Byte = (char)_Meta;

  0004b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Byte$[rbp]
  00052	0f b6 4d 04	 movzx	 ecx, BYTE PTR _Meta$[rbp]
  00056	88 08		 mov	 BYTE PTR [rax], cl

; 54   : 		return (true);

  00058	b0 01		 mov	 al, 1
$LN3@Fgetc:
$LN1@Fgetc:

; 55   : 		}
; 56   : 	}

  0005a	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00061	5f		 pop	 rdi
  00062	5d		 pop	 rbp
  00063	c3		 ret	 0
??$_Fgetc@D@std@@YA_NAEADPEAU_iobuf@@@Z ENDP		; std::_Fgetc<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xlocale
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z
_TEXT	SEGMENT
_Lock$5 = 4
_Psave$6 = 40
_Id$7 = 72
_Pf$8 = 104
_Pfmod$9 = 136
$T10 = 360
$T11 = 408
$T12 = 440
__$ArrayPad$ = 456
_Loc$ = 496
??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z PROC ; std::use_facet<std::ctype<char> >, COMDAT

; 505  : 	{	// get facet reference from locale

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 01
	00 00		 sub	 rsp, 504		; 000001f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 7e 00 00 00	 mov	 ecx, 126		; 0000007eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR [rsp+536]
  0002a	48 c7 85 b8 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T12[rbp], -2
  00035	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003c	48 33 c5	 xor	 rax, rbp
  0003f	48 89 85 c8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 506  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00046	33 d2		 xor	 edx, edx
  00048	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$5[rbp]
  0004c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
  00052	90		 npad	 1

; 507  : 		const locale::facet *_Psave =
; 508  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  00053	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PEBVfacet@locale@2@EB ; std::_Facetptr<std::ctype<char> >::_Psave
  0005a	48 89 45 28	 mov	 QWORD PTR _Psave$6[rbp], rax

; 509  : 
; 510  : 		size_t _Id = _Facet::id;

  0005e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?id@?$ctype@D@std@@2V0locale@2@A
  00065	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??Bid@locale@std@@QEAA_KXZ
  0006b	48 89 45 48	 mov	 QWORD PTR _Id$7[rbp], rax

; 511  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  0006f	48 8b 55 48	 mov	 rdx, QWORD PTR _Id$7[rbp]
  00073	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR _Loc$[rbp]
  0007a	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z ; std::locale::_Getfacet
  0007f	48 89 45 68	 mov	 QWORD PTR _Pf$8[rbp], rax

; 512  : 
; 513  : 		if (_Pf != 0)

  00083	48 83 7d 68 00	 cmp	 QWORD PTR _Pf$8[rbp], 0
  00088	74 05		 je	 SHORT $LN2@use_facet
  0008a	e9 88 00 00 00	 jmp	 $LN3@use_facet
$LN2@use_facet:

; 514  : 			;	// got facet from locale
; 515  : 		else if (_Psave != 0)

  0008f	48 83 7d 28 00	 cmp	 QWORD PTR _Psave$6[rbp], 0
  00094	74 0a		 je	 SHORT $LN4@use_facet

; 516  : 			_Pf = _Psave;	// lazy facet already allocated

  00096	48 8b 45 28	 mov	 rax, QWORD PTR _Psave$6[rbp]
  0009a	48 89 45 68	 mov	 QWORD PTR _Pf$8[rbp], rax
  0009e	eb 77		 jmp	 SHORT $LN3@use_facet
$LN4@use_facet:

; 517  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000a0	48 8b 95 f0 01
	00 00		 mov	 rdx, QWORD PTR _Loc$[rbp]
  000a7	48 8d 4d 28	 lea	 rcx, QWORD PTR _Psave$6[rbp]
  000ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
  000b1	48 83 f8 ff	 cmp	 rax, -1
  000b5	75 22		 jne	 SHORT $LN6@use_facet

; 518  : 
; 519  :  #if _HAS_EXCEPTIONS
; 520  : 
; 521  : 			_THROW(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000b7	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  000be	e8 00 00 00 00	 call	 ??0bad_cast@std@@QEAA@XZ ; std::bad_cast::bad_cast
  000c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVbad_cast@std@@
  000ca	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  000d1	e8 00 00 00 00	 call	 _CxxThrowException
  000d6	90		 npad	 1

; 522  : 
; 523  :  #else /* _HAS_EXCEPTIONS */
; 524  : 			abort();	// lazy disallowed
; 525  :  #endif /* _HAS_EXCEPTIONS */
; 526  : 
; 527  : 		else

  000d7	eb 3e		 jmp	 SHORT $LN3@use_facet
$LN6@use_facet:

; 528  : 			{	// queue up lazy facet for destruction
; 529  : 			_Pf = _Psave;

  000d9	48 8b 45 28	 mov	 rax, QWORD PTR _Psave$6[rbp]
  000dd	48 89 45 68	 mov	 QWORD PTR _Pf$8[rbp], rax

; 530  : 			_Facetptr<_Facet>::_Psave = _Psave;

  000e1	48 8b 45 28	 mov	 rax, QWORD PTR _Psave$6[rbp]
  000e5	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PEBVfacet@locale@2@EB, rax ; std::_Facetptr<std::ctype<char> >::_Psave

; 531  : 
; 532  : 			locale::facet *_Pfmod = (_Facet *)_Psave;

  000ec	48 8b 45 28	 mov	 rax, QWORD PTR _Psave$6[rbp]
  000f0	48 89 85 88 00
	00 00		 mov	 QWORD PTR _Pfmod$9[rbp], rax

; 533  : 			_Pfmod->_Incref();

  000f7	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR _Pfmod$9[rbp]
  000fe	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00101	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _Pfmod$9[rbp]
  00108	ff 50 08	 call	 QWORD PTR [rax+8]

; 534  : 
; 535  :  #if defined(_M_CEE)
; 536  : 			_Facet_Register_m(_Pfmod);
; 537  : 
; 538  :  #else /* defined(_M_CEE) */
; 539  : 			_Facet_Register(_Pfmod);

  0010b	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _Pfmod$9[rbp]
  00112	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPEAV_Facet_base@1@@Z ; std::_Facet_Register
$LN3@use_facet:

; 540  :  #endif /* defined(_M_CEE) */
; 541  : 			}
; 542  : 
; 543  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00117	48 8b 45 68	 mov	 rax, QWORD PTR _Pf$8[rbp]
  0011b	48 89 85 98 01
	00 00		 mov	 QWORD PTR $T11[rbp], rax
  00122	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$5[rbp]
  00126	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0012c	48 8b 85 98 01
	00 00		 mov	 rax, QWORD PTR $T11[rbp]

; 544  : 	_END_LOCK()
; 545  : 	}	// end of use_facet body

  00133	48 8b f8	 mov	 rdi, rax
  00136	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0013a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z$rtcFrameData
  00141	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00146	48 8b c7	 mov	 rax, rdi
  00149	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00150	48 33 cd	 xor	 rcx, rbp
  00153	e8 00 00 00 00	 call	 __security_check_cookie
  00158	48 8d a5 d8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+472]
  0015f	5f		 pop	 rdi
  00160	5d		 pop	 rbp
  00161	c3		 ret	 0
$LN10@use_facet:
??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z ENDP ; std::use_facet<std::ctype<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Lock$5 = 4
_Psave$6 = 40
_Id$7 = 72
_Pf$8 = 104
_Pfmod$9 = 136
$T10 = 360
$T11 = 408
$T12 = 440
__$ArrayPad$ = 456
_Loc$ = 496
?dtor$0@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA PROC ; `std::use_facet<std::ctype<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$5[rbp]
  00018	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	5f		 pop	 rdi
  00023	5d		 pop	 rbp
  00024	c3		 ret	 0
?dtor$0@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA ENDP ; `std::use_facet<std::ctype<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_Lock$5 = 4
_Psave$6 = 40
_Id$7 = 72
_Pf$8 = 104
_Pfmod$9 = 136
$T10 = 360
$T11 = 408
$T12 = 440
__$ArrayPad$ = 456
_Loc$ = 496
?dtor$0@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA PROC ; `std::use_facet<std::ctype<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$5[rbp]
  00018	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	5f		 pop	 rdi
  00023	5d		 pop	 rbp
  00024	c3		 ret	 0
?dtor$0@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA ENDP ; `std::use_facet<std::ctype<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xlocale
;	COMDAT ?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z
_TEXT	SEGMENT
_Facptr$ = 8
_Ptr0$1 = 40
tv83 = 248
tv71 = 248
this$ = 288
_Id$ = 296
?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z PROC	; std::locale::_Getfacet, COMDAT

; 430  : 		{	// look up a facet in locale object

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]

; 431  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount

  0002f	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0003a	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0003e	48 39 85 28 01
	00 00		 cmp	 QWORD PTR _Id$[rbp], rax
  00045	73 23		 jae	 SHORT $LN6@Getfacet
  00047	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00052	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00056	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Id$[rbp]
  0005d	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00061	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv71[rbp], rax
  00068	eb 0b		 jmp	 SHORT $LN7@Getfacet
$LN6@Getfacet:
  0006a	48 c7 85 f8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR tv71[rbp], 0
$LN7@Getfacet:
  00075	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR tv71[rbp]
  0007c	48 89 45 08	 mov	 QWORD PTR _Facptr$[rbp], rax

; 432  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end
; 433  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

  00080	48 83 7d 08 00	 cmp	 QWORD PTR _Facptr$[rbp], 0
  00085	75 13		 jne	 SHORT $LN4@Getfacet
  00087	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00092	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  00096	85 c0		 test	 eax, eax
  00098	75 08		 jne	 SHORT $LN2@Getfacet
$LN4@Getfacet:

; 434  : 			return (_Facptr);	// found facet or not transparent

  0009a	48 8b 45 08	 mov	 rax, QWORD PTR _Facptr$[rbp]
  0009e	eb 4a		 jmp	 SHORT $LN1@Getfacet

; 435  : 		else

  000a0	eb 48		 jmp	 SHORT $LN3@Getfacet
$LN2@Getfacet:

; 436  : 			{	// look in current locale
; 437  : 			locale::_Locimp *_Ptr0 = _Getgloballocale();

  000a2	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPEAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  000a7	48 89 45 28	 mov	 QWORD PTR _Ptr0$1[rbp], rax

; 438  : 			return (_Id < _Ptr0->_Facetcount

  000ab	48 8b 45 28	 mov	 rax, QWORD PTR _Ptr0$1[rbp]
  000af	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  000b3	48 39 85 28 01
	00 00		 cmp	 QWORD PTR _Id$[rbp], rax
  000ba	73 1c		 jae	 SHORT $LN8@Getfacet
  000bc	48 8b 45 28	 mov	 rax, QWORD PTR _Ptr0$1[rbp]
  000c0	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000c4	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Id$[rbp]
  000cb	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  000cf	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv83[rbp], rax
  000d6	eb 0b		 jmp	 SHORT $LN9@Getfacet
$LN8@Getfacet:
  000d8	48 c7 85 f8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR tv83[rbp], 0
$LN9@Getfacet:
  000e3	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR tv83[rbp]
$LN3@Getfacet:
$LN1@Getfacet:

; 439  : 				? _Ptr0->_Facetvec[_Id]	// get from current locale
; 440  : 				: 0);	// no entry in current locale
; 441  : 			}
; 442  : 		}

  000ea	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000f1	5f		 pop	 rdi
  000f2	5d		 pop	 rbp
  000f3	c3		 ret	 0
?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z ENDP	; std::locale::_Getfacet
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xlocale
;	COMDAT ??1locale@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
$T2 = 232
$T3 = 264
tv84 = 280
this$ = 320
??1locale@std@@QEAA@XZ PROC				; std::locale::~locale, COMDAT

; 403  : 		{	// destroy the object

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]
  0002a	48 c7 85 08 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T3[rbp], -2

; 404  : 		if (_Ptr != 0)

  00035	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00041	74 69		 je	 SHORT $LN2@locale

; 405  : 			delete _Ptr->_Decref();

  00043	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004e	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00059	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0005c	ff 50 10	 call	 QWORD PTR [rax+16]
  0005f	90		 npad	 1
  00060	48 89 85 e8 00
	00 00		 mov	 QWORD PTR $T2[rbp], rax
  00067	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR $T2[rbp]
  0006e	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00075	48 83 bd c8 00
	00 00 00	 cmp	 QWORD PTR $T1[rbp], 0
  0007d	74 22		 je	 SHORT $LN4@locale
  0007f	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]
  00086	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00089	ba 01 00 00 00	 mov	 edx, 1
  0008e	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR $T1[rbp]
  00095	ff 10		 call	 QWORD PTR [rax]
  00097	90		 npad	 1
  00098	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv84[rbp], rax
  0009f	eb 0b		 jmp	 SHORT $LN2@locale
$LN4@locale:
  000a1	48 c7 85 18 01
	00 00 00 00 00
	00		 mov	 QWORD PTR tv84[rbp], 0
$LN2@locale:

; 406  : 		}

  000ac	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000b3	5f		 pop	 rdi
  000b4	5d		 pop	 rbp
  000b5	c3		 ret	 0
??1locale@std@@QEAA@XZ ENDP				; std::locale::~locale
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gbad_cast@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gbad_cast@std@@UEAAPEAXI@Z PROC			; std::bad_cast::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??1bad_cast@std@@UEAA@XZ
  0003a	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 11		 je	 SHORT $LN2@scalar
  00047	ba 18 00 00 00	 mov	 edx, 24
  0004c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??_Gbad_cast@std@@UEAAPEAXI@Z ENDP			; std::bad_cast::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_cast@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
__that$ = 232
??0bad_cast@std@@QEAA@AEBV01@@Z PROC			; std::bad_cast::bad_cast, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR __that$[rbp]
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@AEBV01@@Z ; std::exception::exception
  00042	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_cast@std@@6B@
  00050	48 89 08	 mov	 QWORD PTR [rax], rcx
  00053	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00061	5f		 pop	 rdi
  00062	5d		 pop	 rbp
  00063	c3		 ret	 0
??0bad_cast@std@@QEAA@AEBV01@@Z ENDP			; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_cast@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1bad_cast@std@@UEAA@XZ PROC				; std::bad_cast::~bad_cast, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00036	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003d	5f		 pop	 rdi
  0003e	5d		 pop	 rbp
  0003f	c3		 ret	 0
??1bad_cast@std@@UEAA@XZ ENDP				; std::bad_cast::~bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\vcruntime_typeinfo.h
;	COMDAT ??0bad_cast@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0bad_cast@std@@QEAA@XZ PROC				; std::bad_cast::bad_cast, COMDAT

; 127  :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 126  :         : exception("bad cast", 1)

  0002a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00030	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08EPJLHIJG@bad?5cast?$AA@
  00037	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003e	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@QEBDH@Z ; std::exception::exception

; 127  :     {

  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_cast@std@@6B@
  00051	48 89 08	 mov	 QWORD PTR [rax], rcx

; 128  :     }

  00054	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00062	5f		 pop	 rdi
  00063	5d		 pop	 rbp
  00064	c3		 ret	 0
??0bad_cast@std@@QEAA@XZ ENDP				; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT

; 3725 : 		{	// report a length_error

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 3726 : 		_Xlength_error("string too long");

  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00025	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPEBD@Z ; std::_Xlength_error
$LN2@Xlen:

; 3727 : 		}

  0002a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00031	5f		 pop	 rdi
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
_TEXT	SEGMENT
_My_data$ = 8
_Ptr$1 = 40
_Al$2 = 72
$T3 = 292
this$ = 352
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT

; 3706 : 		{	// initialize buffer, deallocating any storage

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]

; 3707 : 		this->_Orphan_all();

  0002a	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	e8 00 00 00 00	 call	 ?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all

; 3708 : 		auto& _My_data = this->_Get_data();

  00036	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00042	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 3709 : 		if (_My_data._Large_string_engaged())

  00046	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  0004a	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  0004f	0f b6 c0	 movzx	 eax, al
  00052	85 c0		 test	 eax, eax
  00054	74 53		 je	 SHORT $LN2@Tidy_deall

; 3710 : 			{
; 3711 : 			const pointer _Ptr = _My_data._Bx._Ptr;

  00056	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0005a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0005e	48 89 45 28	 mov	 QWORD PTR _Ptr$1[rbp], rax

; 3712 : 			auto& _Al = this->_Getal();

  00062	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00069	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  0006e	48 89 45 48	 mov	 QWORD PTR _Al$2[rbp], rax

; 3713 : 			_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));

  00072	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00076	48 83 c0 08	 add	 rax, 8
  0007a	48 8b c8	 mov	 rcx, rax
  0007d	e8 00 00 00 00	 call	 ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ; std::addressof<char * __ptr64>
  00082	48 8b d0	 mov	 rdx, rax
  00085	48 8b 4d 48	 mov	 rcx, QWORD PTR _Al$2[rbp]
  00089	e8 00 00 00 00	 call	 ??$destroy@PEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char * __ptr64>

; 3714 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0008e	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00092	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00096	48 ff c0	 inc	 rax
  00099	4c 8b c0	 mov	 r8, rax
  0009c	48 8b 55 28	 mov	 rdx, QWORD PTR _Ptr$1[rbp]
  000a0	48 8b 4d 48	 mov	 rcx, QWORD PTR _Al$2[rbp]
  000a4	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate
$LN2@Tidy_deall:

; 3715 : 			}
; 3716 : 
; 3717 : 		_My_data._Mysize = 0;

  000a9	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000ad	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 3718 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  000b5	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000b9	48 c7 40 20 0f
	00 00 00	 mov	 QWORD PTR [rax+32], 15

; 3719 : 		// the _Traits::assign is last so the codegen doesn't think the char
; 3720 : 		// write can alias this
; 3721 : 		_Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000c1	c6 85 24 01 00
	00 00		 mov	 BYTE PTR $T3[rbp], 0
  000c8	b8 01 00 00 00	 mov	 eax, 1
  000cd	48 6b c0 00	 imul	 rax, rax, 0
  000d1	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  000d5	48 8d 44 01 08	 lea	 rax, QWORD PTR [rcx+rax+8]
  000da	48 8d 95 24 01
	00 00		 lea	 rdx, QWORD PTR $T3[rbp]
  000e1	48 8b c8	 mov	 rcx, rax
  000e4	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAEADAEBD@Z ; std::char_traits<char>::assign

; 3722 : 		}

  000e9	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  000f0	5f		 pop	 rdi
  000f1	5d		 pop	 rbp
  000f2	c3		 ret	 0
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
_TEXT	SEGMENT
_My_data$ = 8
$T1 = 228
this$ = 288
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init, COMDAT

; 3696 : 		{	// initialize basic_string data members

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]

; 3697 : 		auto& _My_data = this->_Get_data();

  0002a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00036	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 3698 : 		_My_data._Mysize = 0;

  0003a	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0003e	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 3699 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00046	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0004a	48 c7 40 20 0f
	00 00 00	 mov	 QWORD PTR [rax+32], 15

; 3700 : 		// the _Traits::assign is last so the codegen doesn't think the char
; 3701 : 		// write can alias this
; 3702 : 		_Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00052	c6 85 e4 00 00
	00 00		 mov	 BYTE PTR $T1[rbp], 0
  00059	b8 01 00 00 00	 mov	 eax, 1
  0005e	48 6b c0 00	 imul	 rax, rax, 0
  00062	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00066	48 8d 44 01 08	 lea	 rax, QWORD PTR [rcx+rax+8]
  0006b	48 8d 95 e4 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  00072	48 8b c8	 mov	 rcx, rax
  00075	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAEADAEBD@Z ; std::char_traits<char>::assign

; 3703 : 		}

  0007a	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z
_TEXT	SEGMENT
_My_data$ = 8
$T1 = 228
this$ = 288
_Newsize$ = 296
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT

; 3690 : 		{	// set new length and null terminator

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]

; 3691 : 		auto& _My_data = this->_Get_data();

  0002f	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00036	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0003b	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 3692 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

  0003f	c6 85 e4 00 00
	00 00		 mov	 BYTE PTR $T1[rbp], 0
  00046	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0004a	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Newsize$[rbp]
  00051	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx
  00055	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00059	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0005e	48 03 85 28 01
	00 00		 add	 rax, QWORD PTR _Newsize$[rbp]
  00065	48 8d 95 e4 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  0006c	48 8b c8	 mov	 rcx, rax
  0006f	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAEADAEBD@Z ; std::char_traits<char>::assign

; 3693 : 		}

  00074	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0007b	5f		 pop	 rdi
  0007c	5d		 pop	 rbp
  0007d	c3		 ret	 0
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Become_small@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
_TEXT	SEGMENT
_My_data$ = 8
_Ptr$ = 40
_Al$ = 72
tv91 = 280
this$ = 320
?_Become_small@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Become_small, COMDAT

; 3676 : 		{	// release any held storage and return to small string mode

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]

; 3677 : 			// pre: *this is in large string mode
; 3678 : 			// pre: this is small enough to return to small string mode
; 3679 : 		auto& _My_data = this->_Get_data();

  0002a	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00036	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 3680 : 		_My_data._Orphan_all();

  0003a	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  0003e	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 3681 : 		const pointer _Ptr = _My_data._Bx._Ptr;

  00043	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00047	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004b	48 89 45 28	 mov	 QWORD PTR _Ptr$[rbp], rax

; 3682 : 		auto& _Al = this->_Getal();

  0004f	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00056	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  0005b	48 89 45 48	 mov	 QWORD PTR _Al$[rbp], rax

; 3683 : 		_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));

  0005f	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00063	48 83 c0 08	 add	 rax, 8
  00067	48 8b c8	 mov	 rcx, rax
  0006a	e8 00 00 00 00	 call	 ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ; std::addressof<char * __ptr64>
  0006f	48 8b d0	 mov	 rdx, rax
  00072	48 8b 4d 48	 mov	 rcx, QWORD PTR _Al$[rbp]
  00076	e8 00 00 00 00	 call	 ??$destroy@PEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char * __ptr64>

; 3684 : 		_Traits::copy(_My_data._Bx._Buf, _Unfancy(_Ptr), _My_data._Mysize + 1);

  0007b	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0007f	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00083	48 ff c0	 inc	 rax
  00086	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv91[rbp], rax
  0008d	48 8b 4d 28	 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00091	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00096	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  0009a	48 83 c1 08	 add	 rcx, 8
  0009e	48 8b 95 18 01
	00 00		 mov	 rdx, QWORD PTR tv91[rbp]
  000a5	4c 8b c2	 mov	 r8, rdx
  000a8	48 8b d0	 mov	 rdx, rax
  000ab	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z ; std::char_traits<char>::copy

; 3685 : 		_Al.deallocate(_Ptr, _My_data._Myres + 1);

  000b0	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000b4	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000b8	48 ff c0	 inc	 rax
  000bb	4c 8b c0	 mov	 r8, rax
  000be	48 8b 55 28	 mov	 rdx, QWORD PTR _Ptr$[rbp]
  000c2	48 8b 4d 48	 mov	 rcx, QWORD PTR _Al$[rbp]
  000c6	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate

; 3686 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  000cb	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000cf	48 c7 40 20 0f
	00 00 00	 mov	 QWORD PTR [rax+32], 15

; 3687 : 		}

  000d7	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000de	5f		 pop	 rdi
  000df	5d		 pop	 rbp
  000e0	c3		 ret	 0
?_Become_small@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Become_small
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z
_TEXT	SEGMENT
_Max$ = 8
_My_data$ = 40
_Masked$ = 72
_Old$ = 104
$T4 = 328
__$ArrayPad$ = 344
this$ = 384
_Requested$ = 392
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT

; 3588 : 		{	// determines the next array size to allocate

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  0002f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00036	48 33 c5	 xor	 rax, rbp
  00039	48 89 85 58 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 3589 : 		const size_type _Max = max_size();

  00040	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00047	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  0004c	48 89 45 08	 mov	 QWORD PTR _Max$[rbp], rax

; 3590 : 		auto& _My_data = this->_Get_data();

  00050	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00057	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0005c	48 89 45 28	 mov	 QWORD PTR _My_data$[rbp], rax

; 3591 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00060	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR _Requested$[rbp]
  00067	48 83 c8 0f	 or	 rax, 15
  0006b	48 89 45 48	 mov	 QWORD PTR _Masked$[rbp], rax

; 3592 : 		if (_Masked > _Max)

  0006f	48 8b 45 08	 mov	 rax, QWORD PTR _Max$[rbp]
  00073	48 39 45 48	 cmp	 QWORD PTR _Masked$[rbp], rax
  00077	76 06		 jbe	 SHORT $LN2@Calculate_

; 3593 : 			{	// the mask overflows, settle for max_size()
; 3594 : 			return (_Max);

  00079	48 8b 45 08	 mov	 rax, QWORD PTR _Max$[rbp]
  0007d	eb 62		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 3595 : 			}
; 3596 : 
; 3597 : 		const size_type _Old = _My_data._Myres;

  0007f	48 8b 45 28	 mov	 rax, QWORD PTR _My_data$[rbp]
  00083	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00087	48 89 45 68	 mov	 QWORD PTR _Old$[rbp], rax

; 3598 : 		if (_Old > _Max - _Old / 2)

  0008b	33 d2		 xor	 edx, edx
  0008d	48 8b 45 68	 mov	 rax, QWORD PTR _Old$[rbp]
  00091	b9 02 00 00 00	 mov	 ecx, 2
  00096	48 f7 f1	 div	 rcx
  00099	48 8b 4d 08	 mov	 rcx, QWORD PTR _Max$[rbp]
  0009d	48 2b c8	 sub	 rcx, rax
  000a0	48 8b c1	 mov	 rax, rcx
  000a3	48 39 45 68	 cmp	 QWORD PTR _Old$[rbp], rax
  000a7	76 06		 jbe	 SHORT $LN3@Calculate_

; 3599 : 			{	// similarly, geometric overflows
; 3600 : 			return (_Max);

  000a9	48 8b 45 08	 mov	 rax, QWORD PTR _Max$[rbp]
  000ad	eb 32		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 3601 : 			}
; 3602 : 
; 3603 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  000af	33 d2		 xor	 edx, edx
  000b1	48 8b 45 68	 mov	 rax, QWORD PTR _Old$[rbp]
  000b5	b9 02 00 00 00	 mov	 ecx, 2
  000ba	48 f7 f1	 div	 rcx
  000bd	48 8b 4d 68	 mov	 rcx, QWORD PTR _Old$[rbp]
  000c1	48 03 c8	 add	 rcx, rax
  000c4	48 8b c1	 mov	 rax, rcx
  000c7	48 89 85 48 01
	00 00		 mov	 QWORD PTR $T4[rbp], rax
  000ce	48 8d 95 48 01
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  000d5	48 8d 4d 48	 lea	 rcx, QWORD PTR _Masked$[rbp]
  000d9	e8 00 00 00 00	 call	 ??$_Max_value@_K@std@@YAAEB_KAEB_K0@Z ; std::_Max_value<unsigned __int64>
  000de	48 8b 00	 mov	 rax, QWORD PTR [rax]
$LN1@Calculate_:

; 3604 : 		}

  000e1	48 8b f8	 mov	 rdi, rax
  000e4	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z$rtcFrameData
  000ef	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000f4	48 8b c7	 mov	 rax, rdi
  000f7	48 8b 8d 58 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000fe	48 33 cd	 xor	 rcx, rbp
  00101	e8 00 00 00 00	 call	 __security_check_cookie
  00106	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  0010d	5f		 pop	 rdi
  0010e	5d		 pop	 rbp
  0010f	c3		 ret	 0
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NQEBD@Z
_TEXT	SEGMENT
_My_data$ = 8
$T1 = 232
tv71 = 248
this$ = 288
_Ptr$ = 296
?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NQEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal, COMDAT

; 3494 : 		{	// compare [0, size()) with _Ptr for equality

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002f	48 c7 85 e8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2

; 3495 : 		auto& _My_data = this->_Get_data();

  0003a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00041	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00046	90		 npad	 1
  00047	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 3496 : 		return (_Traits_equal<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Ptr, _Traits::length(_Ptr)));

  0004b	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00052	e8 00 00 00 00	 call	 ?length@?$char_traits@D@std@@SA_KQEBD@Z ; std::char_traits<char>::length
  00057	90		 npad	 1
  00058	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv71[rbp], rax
  0005f	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00063	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00068	90		 npad	 1
  00069	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR tv71[rbp]
  00070	4c 8b c9	 mov	 r9, rcx
  00073	4c 8b 85 28 01
	00 00		 mov	 r8, QWORD PTR _Ptr$[rbp]
  0007a	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  0007e	48 8b 51 18	 mov	 rdx, QWORD PTR [rcx+24]
  00082	48 8b c8	 mov	 rcx, rax
  00085	e8 00 00 00 00	 call	 ??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQEBD_K01@Z ; std::_Traits_equal<std::char_traits<char> >
  0008a	90		 npad	 1

; 3497 : 		}

  0008b	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00092	5f		 pop	 rdi
  00093	5d		 pop	 rbp
  00094	c3		 ret	 0
?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NQEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z
_TEXT	SEGMENT
_My_data$ = 8
$T1 = 232
tv71 = 248
this$ = 288
_Ptr$ = 296
_Off$ = 304
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find, COMDAT

; 3271 : 		{	// look for [_Ptr, <null>) beginning at or after _Off

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  00018	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR [rsp+344]
  00034	48 c7 85 e8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2

; 3272 : 		auto& _My_data = this->_Get_data();

  0003f	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00046	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0004b	90		 npad	 1
  0004c	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 3273 : 		return (static_cast<size_type>(

  00050	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00057	e8 00 00 00 00	 call	 ?length@?$char_traits@D@std@@SA_KQEBD@Z ; std::char_traits<char>::length
  0005c	90		 npad	 1
  0005d	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv71[rbp], rax
  00064	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00068	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0006d	90		 npad	 1
  0006e	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR tv71[rbp]
  00075	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0007a	4c 8b 8d 28 01
	00 00		 mov	 r9, QWORD PTR _Ptr$[rbp]
  00081	4c 8b 85 30 01
	00 00		 mov	 r8, QWORD PTR _Off$[rbp]
  00088	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  0008c	48 8b 51 18	 mov	 rdx, QWORD PTR [rcx+24]
  00090	48 8b c8	 mov	 rcx, rax
  00093	e8 00 00 00 00	 call	 ??$_Traits_find@U?$char_traits@D@std@@@std@@YA_KQEBD_K101@Z ; std::_Traits_find<std::char_traits<char> >
  00098	90		 npad	 1

; 3274 : 			_Traits_find<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Traits::length(_Ptr))));
; 3275 : 		}

  00099	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000a0	5f		 pop	 rdi
  000a1	5d		 pop	 rbp
  000a2	c3		 ret	 0
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z
_TEXT	SEGMENT
_My_data$ = 8
_Old_size$1 = 40
$T2 = 260
this$ = 320
_Newcap$ = 328
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve, COMDAT

; 3096 : 		{	// determine new minimum length of allocated storage

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]

; 3097 : 		auto& _My_data = this->_Get_data();

  0002f	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00036	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0003b	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 3098 : 		if (_My_data._Mysize > _Newcap)

  0003f	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00043	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR _Newcap$[rbp]
  0004a	48 39 48 18	 cmp	 QWORD PTR [rax+24], rcx
  0004e	76 05		 jbe	 SHORT $LN2@reserve

; 3099 : 			{	// requested capacity is not large enough for current size, ignore
; 3100 : 			return;	// nothing to do

  00050	e9 a2 00 00 00	 jmp	 $LN1@reserve
$LN2@reserve:

; 3101 : 			}
; 3102 : 
; 3103 : 		if (_My_data._Myres == _Newcap)

  00055	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00059	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR _Newcap$[rbp]
  00060	48 39 48 20	 cmp	 QWORD PTR [rax+32], rcx
  00064	75 05		 jne	 SHORT $LN3@reserve

; 3104 : 			{	// we're already at the requested capacity
; 3105 : 			return;	// nothing to do

  00066	e9 8c 00 00 00	 jmp	 $LN1@reserve
$LN3@reserve:

; 3106 : 			}
; 3107 : 
; 3108 : 		if (_My_data._Myres < _Newcap)

  0006b	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0006f	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR _Newcap$[rbp]
  00076	48 39 48 20	 cmp	 QWORD PTR [rax+32], rcx
  0007a	73 55		 jae	 SHORT $LN4@reserve

; 3109 : 			{	// reallocate to grow
; 3110 : 			const size_type _Old_size = _My_data._Mysize;

  0007c	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00080	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00084	48 89 45 28	 mov	 QWORD PTR _Old_size$1[rbp], rax

; 3111 : 			_Reallocate_grow_by(_Newcap - _Old_size,

  00088	48 8d 85 04 01
	00 00		 lea	 rax, QWORD PTR $T2[rbp]
  0008f	48 8b f8	 mov	 rdi, rax
  00092	33 c0		 xor	 eax, eax
  00094	b9 01 00 00 00	 mov	 ecx, 1
  00099	f3 aa		 rep stosb
  0009b	48 8b 45 28	 mov	 rax, QWORD PTR _Old_size$1[rbp]
  0009f	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR _Newcap$[rbp]
  000a6	48 2b c8	 sub	 rcx, rax
  000a9	48 8b c1	 mov	 rax, rcx
  000ac	44 0f b6 85 04
	01 00 00	 movzx	 r8d, BYTE PTR $T2[rbp]
  000b4	48 8b d0	 mov	 rdx, rax
  000b7	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000be	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@$$V@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_9013ee9e23efe4882b67eff5b0ecf103>@@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_9013ee9e23efe4882b67eff5b0ecf103> >

; 3112 : 				[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size) {
; 3113 : 				_Traits::copy(_New_ptr, _Old_ptr, _Old_size + 1);
; 3114 : 				});
; 3115 : 
; 3116 : 			_My_data._Mysize = _Old_size;

  000c3	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000c7	48 8b 4d 28	 mov	 rcx, QWORD PTR _Old_size$1[rbp]
  000cb	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 3117 : 			return;

  000cf	eb 26		 jmp	 SHORT $LN1@reserve
$LN4@reserve:

; 3118 : 			}
; 3119 : 
; 3120 : 		if (this->_BUF_SIZE > _Newcap && _My_data._Large_string_engaged())

  000d1	48 83 bd 48 01
	00 00 10	 cmp	 QWORD PTR _Newcap$[rbp], 16
  000d9	73 1c		 jae	 SHORT $LN5@reserve
  000db	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  000df	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  000e4	0f b6 c0	 movzx	 eax, al
  000e7	85 c0		 test	 eax, eax
  000e9	74 0c		 je	 SHORT $LN5@reserve

; 3121 : 			{	// deallocate everything; switch back to "small" mode
; 3122 : 			_Become_small();

  000eb	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f2	e8 00 00 00 00	 call	 ?_Become_small@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Become_small
$LN5@reserve:
$LN1@reserve:

; 3123 : 			return;
; 3124 : 			}
; 3125 : 
; 3126 : 		// ignore requests to reserve to [_BUF_SIZE, _Myres)
; 3127 : 		}

  000f7	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000fe	5f		 pop	 rdi
  000ff	5d		 pop	 rbp
  00100	c3		 ret	 0
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
_Alloc_max$ = 8
_Storage_max$ = 40
$T4 = 264
$T5 = 296
$T6 = 328
__$ArrayPad$ = 344
this$ = 384
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT

; 3066 : 		{	// return maximum possible length of sequence

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00031	48 33 c5	 xor	 rax, rbp
  00034	48 89 85 58 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 3067 : 		const size_type _Alloc_max = _Alty_traits::max_size(this->_Getal());

  0003b	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00042	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00047	48 8b c8	 mov	 rcx, rax
  0004a	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
  0004f	48 89 45 08	 mov	 QWORD PTR _Alloc_max$[rbp], rax

; 3068 : 		const size_type _Storage_max = // can always store small string
; 3069 : 			_Max_value(_Alloc_max, static_cast<size_type>(this->_BUF_SIZE));

  00053	48 c7 85 08 01
	00 00 10 00 00
	00		 mov	 QWORD PTR $T4[rbp], 16
  0005e	48 8d 95 08 01
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  00065	48 8d 4d 08	 lea	 rcx, QWORD PTR _Alloc_max$[rbp]
  00069	e8 00 00 00 00	 call	 ??$_Max_value@_K@std@@YAAEB_KAEB_K0@Z ; std::_Max_value<unsigned __int64>
  0006e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00071	48 89 45 28	 mov	 QWORD PTR _Storage_max$[rbp], rax

; 3070 : 		return (_Min_value(

  00075	48 8b 45 28	 mov	 rax, QWORD PTR _Storage_max$[rbp]
  00079	48 ff c8	 dec	 rax
  0007c	48 89 85 28 01
	00 00		 mov	 QWORD PTR $T5[rbp], rax
  00083	e8 00 00 00 00	 call	 ?max@?$numeric_limits@_J@std@@SA_JXZ ; std::numeric_limits<__int64>::max
  00088	48 89 85 48 01
	00 00		 mov	 QWORD PTR $T6[rbp], rax
  0008f	48 8d 95 28 01
	00 00		 lea	 rdx, QWORD PTR $T5[rbp]
  00096	48 8d 8d 48 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  0009d	e8 00 00 00 00	 call	 ??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z ; std::_Min_value<unsigned __int64>
  000a2	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 3071 : 			static_cast<size_type>((numeric_limits<difference_type>::max)()),
; 3072 : 			_Storage_max - 1 // -1 is for null terminator and/or npos
; 3073 : 			));
; 3074 : 
; 3075 : 		}

  000a5	48 8b f8	 mov	 rdi, rax
  000a8	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcFrameData
  000b3	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000b8	48 8b c7	 mov	 rax, rdi
  000bb	48 8b 8d 58 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000c2	48 33 cd	 xor	 rcx, rbp
  000c5	e8 00 00 00 00	 call	 __security_check_cookie
  000ca	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  000d1	5f		 pop	 rdi
  000d2	5d		 pop	 rbp
  000d3	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 224
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT

; 3061 : 		{	// return length of sequence

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 3062 : 		return (this->_Get_data()._Mysize);

  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00036	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]

; 3063 : 		}

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data, COMDAT

; 3044 : 		{	// return pointer to immutable array

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2

; 3045 : 		return (this->_Get_data()._Myptr());

  00035	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00041	90		 npad	 1
  00042	48 8b c8	 mov	 rcx, rax
  00045	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0004a	90		 npad	 1

; 3046 : 		}

  0004b	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00052	5f		 pop	 rdi
  00053	5d		 pop	 rbp
  00054	c3		 ret	 0
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT

; 3039 : 		{	// return pointer to null-terminated immutable array

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2

; 3040 : 		return (this->_Get_data()._Myptr());

  00035	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00041	90		 npad	 1
  00042	48 8b c8	 mov	 rcx, rax
  00045	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0004a	90		 npad	 1

; 3041 : 		}

  0004b	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00052	5f		 pop	 rdi
  00053	5d		 pop	 rbp
  00054	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z
_TEXT	SEGMENT
_My_data$ = 8
_Old_size$ = 40
_Ptr$1 = 72
$T2 = 292
$T3 = 324
this$ = 384
_Ch$ = 392
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back, COMDAT

; 2989 : 		{	// insert element at end

$LN4:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]

; 2990 : 		auto& _My_data = this->_Get_data();

  0002e	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0003a	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 2991 : 		const size_type _Old_size = _My_data._Mysize;

  0003e	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00042	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00046	48 89 45 28	 mov	 QWORD PTR _Old_size$[rbp], rax

; 2992 : 		if (_Old_size < _My_data._Myres)

  0004a	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0004e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00052	48 39 45 28	 cmp	 QWORD PTR _Old_size$[rbp], rax
  00056	73 5e		 jae	 SHORT $LN2@push_back

; 2993 : 			{
; 2994 : 			_My_data._Mysize = _Old_size + 1;

  00058	48 8b 45 28	 mov	 rax, QWORD PTR _Old_size$[rbp]
  0005c	48 ff c0	 inc	 rax
  0005f	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00063	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 2995 : 			_Elem * const _Ptr = _My_data._Myptr();

  00067	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  0006b	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00070	48 89 45 48	 mov	 QWORD PTR _Ptr$1[rbp], rax

; 2996 : 			_Traits::assign(_Ptr[_Old_size], _Ch);

  00074	48 8b 45 28	 mov	 rax, QWORD PTR _Old_size$[rbp]
  00078	48 8b 4d 48	 mov	 rcx, QWORD PTR _Ptr$1[rbp]
  0007c	48 03 c8	 add	 rcx, rax
  0007f	48 8b c1	 mov	 rax, rcx
  00082	48 8d 95 88 01
	00 00		 lea	 rdx, QWORD PTR _Ch$[rbp]
  00089	48 8b c8	 mov	 rcx, rax
  0008c	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAEADAEBD@Z ; std::char_traits<char>::assign

; 2997 : 			_Traits::assign(_Ptr[_Old_size + 1], _Elem());

  00091	c6 85 24 01 00
	00 00		 mov	 BYTE PTR $T2[rbp], 0
  00098	48 8b 45 48	 mov	 rax, QWORD PTR _Ptr$1[rbp]
  0009c	48 8b 4d 28	 mov	 rcx, QWORD PTR _Old_size$[rbp]
  000a0	48 8d 44 08 01	 lea	 rax, QWORD PTR [rax+rcx+1]
  000a5	48 8d 95 24 01
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  000ac	48 8b c8	 mov	 rcx, rax
  000af	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAEADAEBD@Z ; std::char_traits<char>::assign

; 2998 : 			return;

  000b4	eb 34		 jmp	 SHORT $LN1@push_back
$LN2@push_back:

; 2999 : 			}
; 3000 : 
; 3001 : 		_Reallocate_grow_by(1,

  000b6	48 8d 85 44 01
	00 00		 lea	 rax, QWORD PTR $T3[rbp]
  000bd	48 8b f8	 mov	 rdi, rax
  000c0	33 c0		 xor	 eax, eax
  000c2	b9 01 00 00 00	 mov	 ecx, 1
  000c7	f3 aa		 rep stosb
  000c9	44 0f b6 8d 88
	01 00 00	 movzx	 r9d, BYTE PTR _Ch$[rbp]
  000d1	44 0f b6 85 44
	01 00 00	 movzx	 r8d, BYTE PTR $T3[rbp]
  000d9	ba 01 00 00 00	 mov	 edx, 1
  000de	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000e5	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_319d5e083f45f90dcdce5dce53cbb275>@@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_319d5e083f45f90dcdce5dce53cbb275>,char>
$LN1@push_back:

; 3002 : 			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
; 3003 : 				const _Elem _Ch) {
; 3004 : 			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);
; 3005 : 			_Traits::assign(_New_ptr[_Old_size], _Ch);
; 3006 : 			_Traits::assign(_New_ptr[_Old_size + 1], _Elem());
; 3007 : 			}, _Ch);
; 3008 : 		}

  000ea	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  000f1	5f		 pop	 rdi
  000f2	5d		 pop	 rbp
  000f3	c3		 ret	 0
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z
_TEXT	SEGMENT
_My_data$ = 8
this$ = 256
_Off$ = 264
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT

; 2967 : 		{	// subscript mutable sequence

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  00013	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR [rsp+312]

; 2968 : 		auto& _My_data = this->_Get_data();

  0002f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00036	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0003b	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 2969 : 		_IDL_VERIFY(_Off <= _My_data._Mysize, "string subscript out of range");

  0003f	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00043	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00047	48 39 85 08 01
	00 00		 cmp	 QWORD PTR _Off$[rbp], rax
  0004e	76 43		 jbe	 SHORT $LN2@operator
  00050	41 b8 99 0b 00
	00		 mov	 r8d, 2969		; 00000b99H
  00056	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1NC@MMDHPGIM@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0005d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
  00064	e8 00 00 00 00	 call	 ?_Debug_message@std@@YAXPEB_W0I@Z ; std::_Debug_message
  00069	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00072	41 b9 99 0b 00
	00		 mov	 r9d, 2969		; 00000b99H
  00078	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NC@MMDHPGIM@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0007f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?$DM?$AAc?$AAh?$AAa?$AAr?$AA?0?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAs?$AAt@
  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
  0008d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
$LN2@operator:

; 2970 : 		return (_My_data._Myptr()[_Off]);

  00093	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00097	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0009c	48 03 85 08 01
	00 00		 add	 rax, QWORD PTR _Off$[rbp]

; 2971 : 		}

  000a3	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000aa	5f		 pop	 rdi
  000ab	5d		 pop	 rbp
  000ac	c3		 ret	 0
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
_TEXT	SEGMENT
_My_data$ = 8
$T1 = 232
this$ = 288
__$ReturnUdt$ = 296
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin, COMDAT

; 2840 : 		{	// return iterator for beginning of mutable sequence

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002f	48 c7 85 e8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2

; 2841 : 		auto _My_data = _STD addressof(this->_Get_data());

  0003a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00041	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00046	90		 npad	 1
  00047	48 8b c8	 mov	 rcx, rax
  0004a	e8 00 00 00 00	 call	 ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
  0004f	90		 npad	 1
  00050	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 2842 : 		return (iterator(_Refancy<pointer>(_My_data->_Myptr()), _My_data));

  00054	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00058	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0005d	90		 npad	 1
  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 ??$_Refancy@PEAD$0A@@std@@YAPEADPEAD@Z ; std::_Refancy<char * __ptr64,0>
  00066	90		 npad	 1
  00067	4c 8b 45 08	 mov	 r8, QWORD PTR _My_data$[rbp]
  0006b	48 8b d0	 mov	 rdx, rax
  0006e	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00075	e8 00 00 00 00	 call	 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEADPEBU_Container_base12@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
  0007a	90		 npad	 1
  0007b	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 2843 : 		}

  00082	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00089	5f		 pop	 rdi
  0008a	5d		 pop	 rbp
  0008b	c3		 ret	 0
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear, COMDAT

; 2643 : 		{	// erase all

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2

; 2644 : 		_Eos(0);

  00035	33 d2		 xor	 edx, edx
  00037	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003e	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
  00043	90		 npad	 1

; 2645 : 		}

  00044	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z
_TEXT	SEGMENT
_My_data$ = 8
_Old_size$ = 40
_My_ptr$ = 72
_Erase_at$ = 104
_New_size$ = 136
this$ = 384
_Off$ = 392
_Count$ = 400
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT

; 2614 : 		{	// erase elements [_Off, _Off + _Count)

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]

; 2615 : 		auto& _My_data = this->_Get_data();

  00034	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003b	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00040	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 2616 : 		_My_data._Check_offset(_Off);

  00044	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR _Off$[rbp]
  0004b	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  0004f	e8 00 00 00 00	 call	 ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset

; 2617 : 		_Count = _My_data._Clamp_suffix_size(_Off, _Count);

  00054	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  0005b	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR _Off$[rbp]
  00062	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00066	e8 00 00 00 00	 call	 ?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
  0006b	48 89 85 90 01
	00 00		 mov	 QWORD PTR _Count$[rbp], rax

; 2618 : 		const size_type _Old_size = _My_data._Mysize;

  00072	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00076	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0007a	48 89 45 28	 mov	 QWORD PTR _Old_size$[rbp], rax

; 2619 : 		_Elem * const _My_ptr = _My_data._Myptr();

  0007e	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00082	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00087	48 89 45 48	 mov	 QWORD PTR _My_ptr$[rbp], rax

; 2620 : 		_Elem * const _Erase_at = _My_ptr + _Off;

  0008b	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR _Off$[rbp]
  00092	48 8b 4d 48	 mov	 rcx, QWORD PTR _My_ptr$[rbp]
  00096	48 03 c8	 add	 rcx, rax
  00099	48 8b c1	 mov	 rax, rcx
  0009c	48 89 45 68	 mov	 QWORD PTR _Erase_at$[rbp], rax

; 2621 : 		const size_type _New_size = _Old_size - _Count;

  000a0	48 8b 85 90 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  000a7	48 8b 4d 28	 mov	 rcx, QWORD PTR _Old_size$[rbp]
  000ab	48 2b c8	 sub	 rcx, rax
  000ae	48 8b c1	 mov	 rax, rcx
  000b1	48 89 85 88 00
	00 00		 mov	 QWORD PTR _New_size$[rbp], rax

; 2622 : 		_My_data._Mysize = _New_size;

  000b8	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000bc	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _New_size$[rbp]
  000c3	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 2623 : 		_Traits::move(_Erase_at, _Erase_at + _Count, _New_size - _Off + 1); // move suffix + null up

  000c7	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR _Off$[rbp]
  000ce	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _New_size$[rbp]
  000d5	48 2b c8	 sub	 rcx, rax
  000d8	48 8b c1	 mov	 rax, rcx
  000db	48 ff c0	 inc	 rax
  000de	48 8b 8d 90 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  000e5	48 8b 55 68	 mov	 rdx, QWORD PTR _Erase_at$[rbp]
  000e9	48 03 d1	 add	 rdx, rcx
  000ec	48 8b ca	 mov	 rcx, rdx
  000ef	4c 8b c0	 mov	 r8, rax
  000f2	48 8b d1	 mov	 rdx, rcx
  000f5	48 8b 4d 68	 mov	 rcx, QWORD PTR _Erase_at$[rbp]
  000f9	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z ; std::char_traits<char>::move

; 2624 : 		return (*this);

  000fe	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 2625 : 		}

  00105	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  0010c	5f		 pop	 rdi
  0010d	5d		 pop	 rbp
  0010e	c3		 ret	 0
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z
_TEXT	SEGMENT
_My_data$ = 8
this$ = 256
_Off$ = 264
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT

; 2606 : 		{	// erase elements [_Off, ...)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 2607 : 		auto& _My_data = this->_Get_data();

  0002f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00036	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0003b	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 2608 : 		_My_data._Check_offset(_Off);

  0003f	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Off$[rbp]
  00046	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  0004a	e8 00 00 00 00	 call	 ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset

; 2609 : 		_Eos(_Off);

  0004f	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Off$[rbp]
  00056	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005d	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2610 : 		return (*this);

  00062	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 2611 : 		}

  00069	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00070	5f		 pop	 rdi
  00071	5d		 pop	 rbp
  00072	c3		 ret	 0
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KQEBD0@Z
_TEXT	SEGMENT
_My_data$ = 8
_Old_size$ = 40
_Old_ptr$1 = 72
_Insert_at$2 = 104
_Ptr_shifted_after$3 = 136
$T4 = 356
tv134 = 376
this$ = 416
_Off$ = 424
_Ptr$ = 432
_Count$ = 440
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KQEBD0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT

; 2512 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off

$LN9:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec b8 01
	00 00		 sub	 rsp, 440		; 000001b8H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 6e 00 00 00	 mov	 ecx, 110		; 0000006eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+472]

; 2513 : 		auto& _My_data = this->_Get_data();

  00039	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00040	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00045	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 2514 : 		_My_data._Check_offset(_Off);

  00049	48 8b 95 a8 01
	00 00		 mov	 rdx, QWORD PTR _Off$[rbp]
  00050	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00054	e8 00 00 00 00	 call	 ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset

; 2515 : 		const size_type _Old_size = _My_data._Mysize;

  00059	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0005d	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00061	48 89 45 28	 mov	 QWORD PTR _Old_size$[rbp], rax

; 2516 : 		if (_Count <= _My_data._Myres - _Old_size)

  00065	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00069	48 8b 4d 28	 mov	 rcx, QWORD PTR _Old_size$[rbp]
  0006d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00071	48 2b c1	 sub	 rax, rcx
  00074	48 39 85 b8 01
	00 00		 cmp	 QWORD PTR _Count$[rbp], rax
  0007b	0f 87 5b 01 00
	00		 ja	 $LN2@insert

; 2517 : 			{
; 2518 : 			_My_data._Mysize = _Old_size + _Count;

  00081	48 8b 85 b8 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00088	48 8b 4d 28	 mov	 rcx, QWORD PTR _Old_size$[rbp]
  0008c	48 03 c8	 add	 rcx, rax
  0008f	48 8b c1	 mov	 rax, rcx
  00092	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00096	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 2519 : 			_Elem * const _Old_ptr = _My_data._Myptr();

  0009a	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  0009e	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  000a3	48 89 45 48	 mov	 QWORD PTR _Old_ptr$1[rbp], rax

; 2520 : 			_Elem * const _Insert_at = _Old_ptr + _Off;

  000a7	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR _Off$[rbp]
  000ae	48 8b 4d 48	 mov	 rcx, QWORD PTR _Old_ptr$1[rbp]
  000b2	48 03 c8	 add	 rcx, rax
  000b5	48 8b c1	 mov	 rax, rcx
  000b8	48 89 45 68	 mov	 QWORD PTR _Insert_at$2[rbp], rax

; 2521 : 			// the range [_Ptr, _Ptr + _Ptr_shifted_after) is left alone by moving the suffix out,
; 2522 : 			// while the range [_Ptr + _Ptr_shifted_after, _Ptr + _Count) shifts down by _Count
; 2523 : 			size_type _Ptr_shifted_after;
; 2524 : 			if (_Ptr + _Count <= _Insert_at || _Ptr > _Old_ptr + _Old_size)

  000bc	48 8b 85 b8 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  000c3	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  000ca	48 03 c8	 add	 rcx, rax
  000cd	48 8b c1	 mov	 rax, rcx
  000d0	48 3b 45 68	 cmp	 rax, QWORD PTR _Insert_at$2[rbp]
  000d4	76 17		 jbe	 SHORT $LN5@insert
  000d6	48 8b 45 28	 mov	 rax, QWORD PTR _Old_size$[rbp]
  000da	48 8b 4d 48	 mov	 rcx, QWORD PTR _Old_ptr$1[rbp]
  000de	48 03 c8	 add	 rcx, rax
  000e1	48 8b c1	 mov	 rax, rcx
  000e4	48 39 85 b0 01
	00 00		 cmp	 QWORD PTR _Ptr$[rbp], rax
  000eb	76 10		 jbe	 SHORT $LN3@insert
$LN5@insert:

; 2525 : 				{	// inserted content is before the shifted region, or does not alias
; 2526 : 				_Ptr_shifted_after = _Count; // none of _Ptr's data shifts

  000ed	48 8b 85 b8 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  000f4	48 89 85 88 00
	00 00		 mov	 QWORD PTR _Ptr_shifted_after$3[rbp], rax
  000fb	eb 32		 jmp	 SHORT $LN4@insert
$LN3@insert:

; 2527 : 				}
; 2528 : 			else if (_Insert_at <= _Ptr)

  000fd	48 8b 85 b0 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  00104	48 39 45 68	 cmp	 QWORD PTR _Insert_at$2[rbp], rax
  00108	77 0d		 ja	 SHORT $LN6@insert

; 2529 : 				{	// all of [_Ptr, _Ptr + _Count) shifts
; 2530 : 				_Ptr_shifted_after = 0;

  0010a	48 c7 85 88 00
	00 00 00 00 00
	00		 mov	 QWORD PTR _Ptr_shifted_after$3[rbp], 0

; 2531 : 				}
; 2532 : 			else

  00115	eb 18		 jmp	 SHORT $LN7@insert
$LN6@insert:

; 2533 : 				{	// [_Ptr, _Ptr + _Count) contains _Insert_at, so only the part after _Insert_at shifts
; 2534 : 				_Ptr_shifted_after = static_cast<size_type>(_Insert_at - _Ptr);

  00117	48 8b 85 b0 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  0011e	48 8b 4d 68	 mov	 rcx, QWORD PTR _Insert_at$2[rbp]
  00122	48 2b c8	 sub	 rcx, rax
  00125	48 8b c1	 mov	 rax, rcx
  00128	48 89 85 88 00
	00 00		 mov	 QWORD PTR _Ptr_shifted_after$3[rbp], rax
$LN7@insert:
$LN4@insert:

; 2535 : 				}
; 2536 : 
; 2537 : 			_Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1); // move suffix + null down

  0012f	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR _Off$[rbp]
  00136	48 8b 4d 28	 mov	 rcx, QWORD PTR _Old_size$[rbp]
  0013a	48 2b c8	 sub	 rcx, rax
  0013d	48 8b c1	 mov	 rax, rcx
  00140	48 ff c0	 inc	 rax
  00143	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0014a	48 8b 55 68	 mov	 rdx, QWORD PTR _Insert_at$2[rbp]
  0014e	48 03 d1	 add	 rdx, rcx
  00151	48 8b ca	 mov	 rcx, rdx
  00154	4c 8b c0	 mov	 r8, rax
  00157	48 8b 55 68	 mov	 rdx, QWORD PTR _Insert_at$2[rbp]
  0015b	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z ; std::char_traits<char>::move

; 2538 : 			_Traits::copy(_Insert_at, _Ptr, _Ptr_shifted_after);

  00160	4c 8b 85 88 00
	00 00		 mov	 r8, QWORD PTR _Ptr_shifted_after$3[rbp]
  00167	48 8b 95 b0 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  0016e	48 8b 4d 68	 mov	 rcx, QWORD PTR _Insert_at$2[rbp]
  00172	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z ; std::char_traits<char>::copy

; 2539 : 			_Traits::copy(_Insert_at + _Ptr_shifted_after, _Ptr + _Count + _Ptr_shifted_after,

  00177	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR _Ptr_shifted_after$3[rbp]
  0017e	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  00185	48 2b c8	 sub	 rcx, rax
  00188	48 8b c1	 mov	 rax, rcx
  0018b	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  00192	48 8b 95 b0 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00199	48 03 d1	 add	 rdx, rcx
  0019c	48 8b ca	 mov	 rcx, rdx
  0019f	48 03 8d 88 00
	00 00		 add	 rcx, QWORD PTR _Ptr_shifted_after$3[rbp]
  001a6	48 8b 95 88 00
	00 00		 mov	 rdx, QWORD PTR _Ptr_shifted_after$3[rbp]
  001ad	4c 8b 45 68	 mov	 r8, QWORD PTR _Insert_at$2[rbp]
  001b1	4c 03 c2	 add	 r8, rdx
  001b4	49 8b d0	 mov	 rdx, r8
  001b7	48 89 95 78 01
	00 00		 mov	 QWORD PTR tv134[rbp], rdx
  001be	4c 8b c0	 mov	 r8, rax
  001c1	48 8b d1	 mov	 rdx, rcx
  001c4	48 8b 85 78 01
	00 00		 mov	 rax, QWORD PTR tv134[rbp]
  001cb	48 8b c8	 mov	 rcx, rax
  001ce	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z ; std::char_traits<char>::copy

; 2540 : 				_Count - _Ptr_shifted_after);
; 2541 : 			return (*this);

  001d3	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001da	eb 4d		 jmp	 SHORT $LN1@insert
$LN2@insert:

; 2542 : 			}
; 2543 : 
; 2544 : 		return (_Reallocate_grow_by(_Count,

  001dc	48 8d 85 64 01
	00 00		 lea	 rax, QWORD PTR $T4[rbp]
  001e3	48 8b f8	 mov	 rdi, rax
  001e6	33 c0		 xor	 eax, eax
  001e8	b9 01 00 00 00	 mov	 ecx, 1
  001ed	f3 aa		 rep stosb
  001ef	48 8b 85 b8 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  001f6	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001fb	48 8b 85 b0 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  00202	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00207	4c 8b 8d a8 01
	00 00		 mov	 r9, QWORD PTR _Off$[rbp]
  0020e	44 0f b6 85 64
	01 00 00	 movzx	 r8d, BYTE PTR $T4[rbp]
  00216	48 8b 95 b8 01
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  0021d	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00224	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_f3a66ab6a0570788f31503db83886f49>@@_KPEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_f3a66ab6a0570788f31503db83886f49>@@_KPEBD2@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_f3a66ab6a0570788f31503db83886f49>,unsigned __int64,char const * __ptr64,unsigned __int64>
$LN1@insert:

; 2545 : 			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
; 2546 : 				const size_type _Off, const _Elem * const _Ptr, const size_type _Count) {
; 2547 : 			_Traits::copy(_New_ptr, _Old_ptr, _Off);
; 2548 : 			_Traits::copy(_New_ptr + _Off, _Ptr, _Count);
; 2549 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);
; 2550 : 			}, _Off, _Ptr, _Count));
; 2551 : 		}

  00229	48 8d a5 88 01
	00 00		 lea	 rsp, QWORD PTR [rbp+392]
  00230	5f		 pop	 rdi
  00231	5d		 pop	 rbp
  00232	c3		 ret	 0
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KQEBD0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KAEBV12@@Z
_TEXT	SEGMENT
_Right_data$ = 8
this$ = 256
_Off$ = 264
_Right$ = 272
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KAEBV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT

; 2481 : 		{	// insert _Right at _Off

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 2482 : 		auto& _Right_data = _Right._Get_data();

  00034	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  0003b	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00040	48 89 45 08	 mov	 QWORD PTR _Right_data$[rbp], rax

; 2483 : 		return (insert(_Off, _Right_data._Myptr(), _Right_data._Mysize));

  00044	48 8b 4d 08	 mov	 rcx, QWORD PTR _Right_data$[rbp]
  00048	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0004d	48 8b 4d 08	 mov	 rcx, QWORD PTR _Right_data$[rbp]
  00051	4c 8b 49 18	 mov	 r9, QWORD PTR [rcx+24]
  00055	4c 8b c0	 mov	 r8, rax
  00058	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Off$[rbp]
  0005f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KQEBD0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 2484 : 		}

  0006b	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00072	5f		 pop	 rdi
  00073	5d		 pop	 rbp
  00074	c3		 ret	 0
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KAEBV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z
_TEXT	SEGMENT
_My_data$ = 8
_Old_ptr$1 = 40
$T2 = 260
$T3 = 292
this$ = 352
_Count$ = 360
_Ch$ = 368
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT

; 2456 : 		{	// assign _Count * _Ch

$LN4:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]

; 2457 : 		auto& _My_data = this->_Get_data();

  00034	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003b	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00040	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 2458 : 		if (_Count <= _My_data._Myres)

  00044	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00048	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0004c	48 39 85 68 01
	00 00		 cmp	 QWORD PTR _Count$[rbp], rax
  00053	77 64		 ja	 SHORT $LN2@assign

; 2459 : 			{
; 2460 : 			_Elem * const _Old_ptr = _My_data._Myptr();

  00055	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00059	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0005e	48 89 45 28	 mov	 QWORD PTR _Old_ptr$1[rbp], rax

; 2461 : 			_My_data._Mysize = _Count;

  00062	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00066	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0006d	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 2462 : 			_Traits::assign(_Old_ptr, _Count, _Ch);

  00071	44 0f b6 85 70
	01 00 00	 movzx	 r8d, BYTE PTR _Ch$[rbp]
  00079	48 8b 95 68 01
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  00080	48 8b 4d 28	 mov	 rcx, QWORD PTR _Old_ptr$1[rbp]
  00084	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAPEADQEAD_KD@Z ; std::char_traits<char>::assign

; 2463 : 			_Traits::assign(_Old_ptr[_Count], _Elem());

  00089	c6 85 04 01 00
	00 00		 mov	 BYTE PTR $T2[rbp], 0
  00090	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00097	48 8b 4d 28	 mov	 rcx, QWORD PTR _Old_ptr$1[rbp]
  0009b	48 03 c8	 add	 rcx, rax
  0009e	48 8b c1	 mov	 rax, rcx
  000a1	48 8d 95 04 01
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  000a8	48 8b c8	 mov	 rcx, rax
  000ab	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAEADAEBD@Z ; std::char_traits<char>::assign

; 2464 : 			return (*this);

  000b0	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b7	eb 36		 jmp	 SHORT $LN1@assign
$LN2@assign:

; 2465 : 			}
; 2466 : 
; 2467 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem _Ch) {

  000b9	48 8d 85 24 01
	00 00		 lea	 rax, QWORD PTR $T3[rbp]
  000c0	48 8b f8	 mov	 rdi, rax
  000c3	33 c0		 xor	 eax, eax
  000c5	b9 01 00 00 00	 mov	 ecx, 1
  000ca	f3 aa		 rep stosb
  000cc	44 0f b6 8d 70
	01 00 00	 movzx	 r9d, BYTE PTR _Ch$[rbp]
  000d4	44 0f b6 85 24
	01 00 00	 movzx	 r8d, BYTE PTR $T3[rbp]
  000dc	48 8b 95 68 01
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  000e3	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ea	e8 00 00 00 00	 call	 ??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>,char>
$LN1@assign:

; 2468 : 			_Traits::assign(_New_ptr, _Count, _Ch);
; 2469 : 			_Traits::assign(_New_ptr[_Count], _Elem());
; 2470 : 			}, _Ch));
; 2471 : 		}

  000ef	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  000f6	5f		 pop	 rdi
  000f7	5d		 pop	 rbp
  000f8	c3		 ret	 0
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z
_TEXT	SEGMENT
this$ = 224
_Ptr$ = 232
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT

; 2451 : 		{	// assign [_Ptr, <null>)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 2452 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0002f	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00036	e8 00 00 00 00	 call	 ?length@?$char_traits@D@std@@SA_KQEBD@Z ; std::char_traits<char>::length
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	e8 00 00 00 00	 call	 ??$_Convert_size@_K@std@@YA_K_K@Z ; std::_Convert_size<unsigned __int64>
  00043	4c 8b c0	 mov	 r8, rax
  00046	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  0004d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00054	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2453 : 		}

  00059	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z
_TEXT	SEGMENT
_My_data$ = 8
_Old_ptr$1 = 40
$T2 = 260
$T3 = 292
this$ = 352
_Ptr$ = 360
_Count$ = 368
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT

; 2433 : 		{	// assign [_Ptr, _Ptr + _Count)

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]

; 2434 : 		auto& _My_data = this->_Get_data();

  00034	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003b	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00040	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 2435 : 		if (_Count <= _My_data._Myres)

  00044	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00048	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0004c	48 39 85 70 01
	00 00		 cmp	 QWORD PTR _Count$[rbp], rax
  00053	77 63		 ja	 SHORT $LN2@assign

; 2436 : 			{
; 2437 : 			_Elem * const _Old_ptr = _My_data._Myptr();

  00055	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00059	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0005e	48 89 45 28	 mov	 QWORD PTR _Old_ptr$1[rbp], rax

; 2438 : 			_My_data._Mysize = _Count;

  00062	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00066	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0006d	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 2439 : 			_Traits::move(_Old_ptr, _Ptr, _Count);

  00071	4c 8b 85 70 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00078	48 8b 95 68 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  0007f	48 8b 4d 28	 mov	 rcx, QWORD PTR _Old_ptr$1[rbp]
  00083	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z ; std::char_traits<char>::move

; 2440 : 			_Traits::assign(_Old_ptr[_Count], _Elem());

  00088	c6 85 04 01 00
	00 00		 mov	 BYTE PTR $T2[rbp], 0
  0008f	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00096	48 8b 4d 28	 mov	 rcx, QWORD PTR _Old_ptr$1[rbp]
  0009a	48 03 c8	 add	 rcx, rax
  0009d	48 8b c1	 mov	 rax, rcx
  000a0	48 8d 95 04 01
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  000a7	48 8b c8	 mov	 rcx, rax
  000aa	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAEADAEBD@Z ; std::char_traits<char>::assign

; 2441 : 			return (*this);

  000af	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b6	eb 35		 jmp	 SHORT $LN1@assign
$LN2@assign:

; 2442 : 			}
; 2443 : 
; 2444 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr) {

  000b8	48 8d 85 24 01
	00 00		 lea	 rax, QWORD PTR $T3[rbp]
  000bf	48 8b f8	 mov	 rdi, rax
  000c2	33 c0		 xor	 eax, eax
  000c4	b9 01 00 00 00	 mov	 ecx, 1
  000c9	f3 aa		 rep stosb
  000cb	4c 8b 8d 68 01
	00 00		 mov	 r9, QWORD PTR _Ptr$[rbp]
  000d2	44 0f b6 85 24
	01 00 00	 movzx	 r8d, BYTE PTR $T3[rbp]
  000da	48 8b 95 70 01
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  000e1	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000e8	e8 00 00 00 00	 call	 ??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const * __ptr64>
$LN1@assign:

; 2445 : 			_Traits::copy(_New_ptr, _Ptr, _Count);
; 2446 : 			_Traits::assign(_New_ptr[_Count], _Elem());
; 2447 : 			}, _Ptr));
; 2448 : 		}

  000ed	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  000f4	5f		 pop	 rdi
  000f5	5d		 pop	 rbp
  000f6	c3		 ret	 0
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z
_TEXT	SEGMENT
_My_data$ = 8
_Old_size$ = 40
_Old_ptr$1 = 72
$T2 = 292
$T3 = 324
this$ = 384
_Count$ = 392
_Ch$ = 400
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT

; 2375 : 		{	// append _Count * _Ch

$LN4:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 98 01
	00 00		 sub	 rsp, 408		; 00000198H
  00018	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 66 00 00 00	 mov	 ecx, 102		; 00000066H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+440]

; 2376 : 		auto& _My_data = this->_Get_data();

  00034	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003b	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00040	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 2377 : 		const size_type _Old_size = _My_data._Mysize;

  00044	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00048	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0004c	48 89 45 28	 mov	 QWORD PTR _Old_size$[rbp], rax

; 2378 : 		if (_Count <= _My_data._Myres - _Old_size)

  00050	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00054	48 8b 4d 28	 mov	 rcx, QWORD PTR _Old_size$[rbp]
  00058	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0005c	48 2b c1	 sub	 rax, rcx
  0005f	48 39 85 88 01
	00 00		 cmp	 QWORD PTR _Count$[rbp], rax
  00066	0f 87 85 00 00
	00		 ja	 $LN2@append

; 2379 : 			{
; 2380 : 			_My_data._Mysize = _Old_size + _Count;

  0006c	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00073	48 8b 4d 28	 mov	 rcx, QWORD PTR _Old_size$[rbp]
  00077	48 03 c8	 add	 rcx, rax
  0007a	48 8b c1	 mov	 rax, rcx
  0007d	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00081	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 2381 : 			_Elem * const _Old_ptr = _My_data._Myptr();

  00085	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00089	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0008e	48 89 45 48	 mov	 QWORD PTR _Old_ptr$1[rbp], rax

; 2382 : 			_Traits::assign(_Old_ptr + _Old_size, _Count, _Ch);

  00092	48 8b 45 28	 mov	 rax, QWORD PTR _Old_size$[rbp]
  00096	48 8b 4d 48	 mov	 rcx, QWORD PTR _Old_ptr$1[rbp]
  0009a	48 03 c8	 add	 rcx, rax
  0009d	48 8b c1	 mov	 rax, rcx
  000a0	44 0f b6 85 90
	01 00 00	 movzx	 r8d, BYTE PTR _Ch$[rbp]
  000a8	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  000af	48 8b c8	 mov	 rcx, rax
  000b2	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAPEADQEAD_KD@Z ; std::char_traits<char>::assign

; 2383 : 			_Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  000b7	c6 85 24 01 00
	00 00		 mov	 BYTE PTR $T2[rbp], 0
  000be	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  000c5	48 8b 4d 28	 mov	 rcx, QWORD PTR _Old_size$[rbp]
  000c9	48 03 c8	 add	 rcx, rax
  000cc	48 8b c1	 mov	 rax, rcx
  000cf	48 8b 4d 48	 mov	 rcx, QWORD PTR _Old_ptr$1[rbp]
  000d3	48 03 c8	 add	 rcx, rax
  000d6	48 8b c1	 mov	 rax, rcx
  000d9	48 8d 95 24 01
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  000e0	48 8b c8	 mov	 rcx, rax
  000e3	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAEADAEBD@Z ; std::char_traits<char>::assign

; 2384 : 			return (*this);

  000e8	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ef	eb 40		 jmp	 SHORT $LN1@append
$LN2@append:

; 2385 : 			}
; 2386 : 
; 2387 : 		return (_Reallocate_grow_by(_Count,

  000f1	48 8d 85 44 01
	00 00		 lea	 rax, QWORD PTR $T3[rbp]
  000f8	48 8b f8	 mov	 rdi, rax
  000fb	33 c0		 xor	 eax, eax
  000fd	b9 01 00 00 00	 mov	 ecx, 1
  00102	f3 aa		 rep stosb
  00104	0f b6 85 90 01
	00 00		 movzx	 eax, BYTE PTR _Ch$[rbp]
  0010b	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  0010f	4c 8b 8d 88 01
	00 00		 mov	 r9, QWORD PTR _Count$[rbp]
  00116	44 0f b6 85 44
	01 00 00	 movzx	 r8d, BYTE PTR $T3[rbp]
  0011e	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  00125	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0012c	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_e1befb086ad3257e3f042a63030725f7>,unsigned __int64,char>
$LN1@append:

; 2388 : 			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
; 2389 : 				const size_type _Count, const _Elem _Ch) {
; 2390 : 			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);
; 2391 : 			_Traits::assign(_New_ptr + _Old_size, _Count, _Ch);
; 2392 : 			_Traits::assign(_New_ptr[_Old_size + _Count], _Elem());
; 2393 : 			}, _Count, _Ch));
; 2394 : 		}

  00131	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  00138	5f		 pop	 rdi
  00139	5d		 pop	 rbp
  0013a	c3		 ret	 0
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z
_TEXT	SEGMENT
this$ = 224
_Ptr$ = 232
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT

; 2370 : 		{	// append [_Ptr, <null>)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 2371 : 		return (append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0002f	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00036	e8 00 00 00 00	 call	 ?length@?$char_traits@D@std@@SA_KQEBD@Z ; std::char_traits<char>::length
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	e8 00 00 00 00	 call	 ??$_Convert_size@_K@std@@YA_K_K@Z ; std::_Convert_size<unsigned __int64>
  00043	4c 8b c0	 mov	 r8, rax
  00046	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  0004d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00054	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2372 : 		}

  00059	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z
_TEXT	SEGMENT
_My_data$ = 8
_Old_size$ = 40
_Old_ptr$1 = 72
$T2 = 292
$T3 = 324
this$ = 384
_Ptr$ = 392
_Count$ = 400
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT

; 2348 : 		{	// append [_Ptr, _Ptr + _Count)

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 98 01
	00 00		 sub	 rsp, 408		; 00000198H
  00018	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 66 00 00 00	 mov	 ecx, 102		; 00000066H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+440]

; 2349 : 		auto& _My_data = this->_Get_data();

  00034	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003b	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00040	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 2350 : 		const size_type _Old_size = _My_data._Mysize;

  00044	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00048	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0004c	48 89 45 28	 mov	 QWORD PTR _Old_size$[rbp], rax

; 2351 : 		if (_Count <= _My_data._Myres - _Old_size)

  00050	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00054	48 8b 4d 28	 mov	 rcx, QWORD PTR _Old_size$[rbp]
  00058	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0005c	48 2b c1	 sub	 rax, rcx
  0005f	48 39 85 90 01
	00 00		 cmp	 QWORD PTR _Count$[rbp], rax
  00066	0f 87 84 00 00
	00		 ja	 $LN2@append

; 2352 : 			{
; 2353 : 			_My_data._Mysize = _Old_size + _Count;

  0006c	48 8b 85 90 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00073	48 8b 4d 28	 mov	 rcx, QWORD PTR _Old_size$[rbp]
  00077	48 03 c8	 add	 rcx, rax
  0007a	48 8b c1	 mov	 rax, rcx
  0007d	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00081	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 2354 : 			_Elem * const _Old_ptr = _My_data._Myptr();

  00085	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00089	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0008e	48 89 45 48	 mov	 QWORD PTR _Old_ptr$1[rbp], rax

; 2355 : 			_Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00092	48 8b 45 28	 mov	 rax, QWORD PTR _Old_size$[rbp]
  00096	48 8b 4d 48	 mov	 rcx, QWORD PTR _Old_ptr$1[rbp]
  0009a	48 03 c8	 add	 rcx, rax
  0009d	48 8b c1	 mov	 rax, rcx
  000a0	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  000a7	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  000ae	48 8b c8	 mov	 rcx, rax
  000b1	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z ; std::char_traits<char>::move

; 2356 : 			_Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  000b6	c6 85 24 01 00
	00 00		 mov	 BYTE PTR $T2[rbp], 0
  000bd	48 8b 85 90 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  000c4	48 8b 4d 28	 mov	 rcx, QWORD PTR _Old_size$[rbp]
  000c8	48 03 c8	 add	 rcx, rax
  000cb	48 8b c1	 mov	 rax, rcx
  000ce	48 8b 4d 48	 mov	 rcx, QWORD PTR _Old_ptr$1[rbp]
  000d2	48 03 c8	 add	 rcx, rax
  000d5	48 8b c1	 mov	 rax, rcx
  000d8	48 8d 95 24 01
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  000df	48 8b c8	 mov	 rcx, rax
  000e2	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAEADAEBD@Z ; std::char_traits<char>::assign

; 2357 : 			return (*this);

  000e7	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ee	eb 41		 jmp	 SHORT $LN1@append
$LN2@append:

; 2358 : 			}
; 2359 : 
; 2360 : 		return (_Reallocate_grow_by(_Count,

  000f0	48 8d 85 44 01
	00 00		 lea	 rax, QWORD PTR $T3[rbp]
  000f7	48 8b f8	 mov	 rdi, rax
  000fa	33 c0		 xor	 eax, eax
  000fc	b9 01 00 00 00	 mov	 ecx, 1
  00101	f3 aa		 rep stosb
  00103	48 8b 85 90 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  0010a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0010f	4c 8b 8d 88 01
	00 00		 mov	 r9, QWORD PTR _Ptr$[rbp]
  00116	44 0f b6 85 44
	01 00 00	 movzx	 r8d, BYTE PTR $T3[rbp]
  0011e	48 8b 95 90 01
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  00125	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0012c	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@_KV<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_65e615be2a453ca0576c979606f46740>,char const * __ptr64,unsigned __int64>
$LN1@append:

; 2361 : 			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
; 2362 : 				const _Elem * const _Ptr, const size_type _Count) {
; 2363 : 			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);
; 2364 : 			_Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);
; 2365 : 			_Traits::assign(_New_ptr[_Old_size + _Count], _Elem());
; 2366 : 			}, _Ptr, _Count));
; 2367 : 		}

  00131	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  00138	5f		 pop	 rdi
  00139	5d		 pop	 rbp
  0013a	c3		 ret	 0
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z
_TEXT	SEGMENT
_Right_data$ = 8
this$ = 256
_Right$ = 264
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT

; 2319 : 		{	// append _Right

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 2320 : 		auto& _Right_data = _Right._Get_data();

  0002f	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00036	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0003b	48 89 45 08	 mov	 QWORD PTR _Right_data$[rbp], rax

; 2321 : 		return (append(_Right_data._Myptr(), _Right_data._Mysize));

  0003f	48 8b 4d 08	 mov	 rcx, QWORD PTR _Right_data$[rbp]
  00043	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00048	48 8b 4d 08	 mov	 rcx, QWORD PTR _Right_data$[rbp]
  0004c	4c 8b 41 18	 mov	 r8, QWORD PTR [rcx+24]
  00050	48 8b d0	 mov	 rdx, rax
  00053	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005a	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2322 : 		}

  0005f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@D@Z
_TEXT	SEGMENT
this$ = 224
_Ch$ = 232
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT

; 2313 : 		{	// append 1 * _Ch

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 2314 : 		push_back(_Ch);

  0002e	0f b6 95 e8 00
	00 00		 movzx	 edx, BYTE PTR _Ch$[rbp]
  00035	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back

; 2315 : 		return (*this);

  00041	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 2316 : 		}

  00048	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z
_TEXT	SEGMENT
this$ = 224
_Ptr$ = 232
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT

; 2308 : 		{	// append [_Ptr, <null>)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 2309 : 		return (append(_Ptr));

  0002f	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2310 : 		}

  00042	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
_Right$ = 232
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT

; 2296 : 		{	// append _Right

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 2297 : 		return (append(_Right));

  0002f	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Right$[rbp]
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2298 : 		}

  00042	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z
_TEXT	SEGMENT
this$ = 224
_Ptr$ = 232
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT

; 2281 : 		{	// assign [_Ptr, <null>)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 2282 : 		return (assign(_Ptr));

  0002f	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2283 : 		}

  00042	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z
_TEXT	SEGMENT
_Right_data$1 = 8
this$ = 256
_Right$ = 264
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT

; 2252 : 		{	// assign _Right

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 2253 : 		if (this != _STD addressof(_Right))

  0002f	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00036	e8 00 00 00 00	 call	 ??$addressof@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEBV10@@Z ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const >
  0003b	48 39 85 00 01
	00 00		 cmp	 QWORD PTR this$[rbp], rax
  00042	74 5d		 je	 SHORT $LN2@operator

; 2254 : 			{	// different, assign it
; 2255 : #pragma warning(push)
; 2256 : #pragma warning(disable: 4127)	// conditional expression is constant
; 2257 : 			if (_Alty_traits::propagate_on_container_copy_assignment::value
; 2258 : 				&& this->_Getal() != _Right._Getal())

  00044	33 c0		 xor	 eax, eax
  00046	85 c0		 test	 eax, eax
  00048	74 0c		 je	 SHORT $LN3@operator

; 2259 : 				{	// change allocator before copying
; 2260 : 				_Tidy_deallocate();

  0004a	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00051	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
$LN3@operator:

; 2261 : 				}
; 2262 : #pragma warning(pop)
; 2263 : 
; 2264 : 			this->_Copy_alloc(_Right._Getal());

  00056	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  0005d	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00062	48 8b d0	 mov	 rdx, rax
  00065	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006c	e8 00 00 00 00	 call	 ?_Copy_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEBV?$allocator@D@2@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Copy_alloc

; 2265 : 
; 2266 : 			auto& _Right_data = _Right._Get_data();

  00071	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00078	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0007d	48 89 45 08	 mov	 QWORD PTR _Right_data$1[rbp], rax

; 2267 : 			assign(_Right_data._Myptr(), _Right_data._Mysize);

  00081	48 8b 4d 08	 mov	 rcx, QWORD PTR _Right_data$1[rbp]
  00085	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0008a	48 8b 4d 08	 mov	 rcx, QWORD PTR _Right_data$1[rbp]
  0008e	4c 8b 41 18	 mov	 r8, QWORD PTR [rcx+24]
  00092	48 8b d0	 mov	 rdx, rax
  00095	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN2@operator:

; 2268 : 			}
; 2269 : 
; 2270 : 		return (*this);

  000a1	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 2271 : 		}

  000a8	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000af	5f		 pop	 rdi
  000b0	5d		 pop	 rbp
  000b1	c3		 ret	 0
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2245 : 		{	// destroy the string

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2

; 2246 : 		_Tidy_deallocate();

  00035	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
  00041	90		 npad	 1

; 2247 : 		}

  00042	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  0004e	90		 npad	 1
  0004f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00056	5f		 pop	 rdi
  00057	5d		 pop	 rbp
  00058	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEBV12@@Z
_TEXT	SEGMENT
_My_data$ = 8
_Right_data$ = 40
_Right_size$ = 72
_Right_ptr$ = 104
_Al$ = 136
_New_capacity$ = 168
_New_array$ = 200
$T4 = 424
$T5 = 456
tv146 = 472
__$ArrayPad$ = 480
this$ = 528
_Right$ = 536
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEBV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents, COMDAT

; 2181 : 		{	// assign by copying data stored in _Right

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 18 02
	00 00		 sub	 rsp, 536		; 00000218H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 86 00 00 00	 mov	 ecx, 134		; 00000086H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR [rsp+568]
  0002f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00036	48 33 c5	 xor	 rax, rbp
  00039	48 89 85 e0 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 2182 : 			// pre: this != &_Right
; 2183 : 			// pre: *this owns no memory, iterators orphaned (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2184 : 		auto& _My_data = this->_Get_data();

  00040	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00047	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0004c	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 2185 : 		auto& _Right_data = _Right._Get_data();

  00050	48 8b 8d 18 02
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00057	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0005c	48 89 45 28	 mov	 QWORD PTR _Right_data$[rbp], rax

; 2186 : 		const size_type _Right_size = _Right_data._Mysize;

  00060	48 8b 45 28	 mov	 rax, QWORD PTR _Right_data$[rbp]
  00064	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00068	48 89 45 48	 mov	 QWORD PTR _Right_size$[rbp], rax

; 2187 : 		const _Elem * const _Right_ptr = _Right_data._Myptr();

  0006c	48 8b 4d 28	 mov	 rcx, QWORD PTR _Right_data$[rbp]
  00070	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00075	48 89 45 68	 mov	 QWORD PTR _Right_ptr$[rbp], rax

; 2188 : 		if (_Right_size < this->_BUF_SIZE)

  00079	48 83 7d 48 10	 cmp	 QWORD PTR _Right_size$[rbp], 16
  0007e	73 37		 jae	 SHORT $LN2@Construct_

; 2189 : 			{   // stay small, don't allocate
; 2190 : 			_Traits::copy(_My_data._Bx._Buf, _Right_ptr, this->_BUF_SIZE);

  00080	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00084	48 83 c0 08	 add	 rax, 8
  00088	41 b8 10 00 00
	00		 mov	 r8d, 16
  0008e	48 8b 55 68	 mov	 rdx, QWORD PTR _Right_ptr$[rbp]
  00092	48 8b c8	 mov	 rcx, rax
  00095	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z ; std::char_traits<char>::copy

; 2191 : 			_My_data._Mysize = _Right_size;

  0009a	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0009e	48 8b 4d 48	 mov	 rcx, QWORD PTR _Right_size$[rbp]
  000a2	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 2192 : 			_My_data._Myres = this->_BUF_SIZE - 1;

  000a6	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  000aa	48 c7 40 20 0f
	00 00 00	 mov	 QWORD PTR [rax+32], 15

; 2193 : 			return;

  000b2	e9 e3 00 00 00	 jmp	 $LN1@Construct_
$LN2@Construct_:

; 2194 : 			}
; 2195 : 
; 2196 : 		auto& _Al = this->_Getal();

  000b7	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000be	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  000c3	48 89 85 88 00
	00 00		 mov	 QWORD PTR _Al$[rbp], rax

; 2197 : 		const size_type _New_capacity = _Min_value(_Right_size | this->_ALLOC_MASK, max_size());

  000ca	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d1	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  000d6	48 89 85 a8 01
	00 00		 mov	 QWORD PTR $T4[rbp], rax
  000dd	48 8b 45 48	 mov	 rax, QWORD PTR _Right_size$[rbp]
  000e1	48 83 c8 0f	 or	 rax, 15
  000e5	48 89 85 c8 01
	00 00		 mov	 QWORD PTR $T5[rbp], rax
  000ec	48 8d 95 a8 01
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  000f3	48 8d 8d c8 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  000fa	e8 00 00 00 00	 call	 ??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z ; std::_Min_value<unsigned __int64>
  000ff	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00102	48 89 85 a8 00
	00 00		 mov	 QWORD PTR _New_capacity$[rbp], rax

; 2198 : 		const pointer _New_array = _Al.allocate(_New_capacity + 1); // throws

  00109	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR _New_capacity$[rbp]
  00110	48 ff c0	 inc	 rax
  00113	48 8b d0	 mov	 rdx, rax
  00116	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  0011d	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ; std::allocator<char>::allocate
  00122	48 89 85 c8 00
	00 00		 mov	 QWORD PTR _New_array$[rbp], rax

; 2199 : 		_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_array);

  00129	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0012d	48 83 c0 08	 add	 rax, 8
  00131	48 8b c8	 mov	 rcx, rax
  00134	e8 00 00 00 00	 call	 ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ; std::addressof<char * __ptr64>
  00139	4c 8d 85 c8 00
	00 00		 lea	 r8, QWORD PTR _New_array$[rbp]
  00140	48 8b d0	 mov	 rdx, rax
  00143	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  0014a	e8 00 00 00 00	 call	 ??$construct@PEADAEBQEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@QEAPEADAEBQEAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char * __ptr64,char * __ptr64 const & __ptr64>

; 2200 : 		_Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  0014f	48 8b 45 48	 mov	 rax, QWORD PTR _Right_size$[rbp]
  00153	48 ff c0	 inc	 rax
  00156	48 89 85 d8 01
	00 00		 mov	 QWORD PTR tv146[rbp], rax
  0015d	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR _New_array$[rbp]
  00164	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00169	48 8b 8d d8 01
	00 00		 mov	 rcx, QWORD PTR tv146[rbp]
  00170	4c 8b c1	 mov	 r8, rcx
  00173	48 8b 55 68	 mov	 rdx, QWORD PTR _Right_ptr$[rbp]
  00177	48 8b c8	 mov	 rcx, rax
  0017a	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z ; std::char_traits<char>::copy

; 2201 : 		_My_data._Mysize = _Right_size;

  0017f	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00183	48 8b 4d 48	 mov	 rcx, QWORD PTR _Right_size$[rbp]
  00187	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 2202 : 		_My_data._Myres = _New_capacity;

  0018b	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0018f	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _New_capacity$[rbp]
  00196	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx
$LN1@Construct_:

; 2203 : 		}

  0019a	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0019e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEBV12@@Z$rtcFrameData
  001a5	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001aa	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  001b1	48 33 cd	 xor	 rcx, rbp
  001b4	e8 00 00 00 00	 call	 __security_check_cookie
  001b9	48 8d a5 f8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+504]
  001c0	5f		 pop	 rdi
  001c1	5d		 pop	 rbp
  001c2	c3		 ret	 0
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEBV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_Right_data$ = 8
_My_data_mem$ = 40
_Right_data_mem$ = 72
this$ = 320
_Right$ = 328
__formal$ = 336
?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal, COMDAT

; 2131 : 		{	// assign by stealing _Right's buffer, memcpy optimization

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]

; 2132 : 			// pre: this != &_Right
; 2133 : 			// pre: allocator propagation (POCMA) from _Right, if necessary, is complete
; 2134 : 			// pre: *this owns no memory, iterators orphaned (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2135 : 		auto& _Right_data = _Right._Get_data();

  00034	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  0003b	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00040	48 89 45 08	 mov	 QWORD PTR _Right_data$[rbp], rax

; 2136 : 
; 2137 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2138 : 		if (_Right_data._Large_string_engaged())

  00044	48 8b 4d 08	 mov	 rcx, QWORD PTR _Right_data$[rbp]
  00048	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  0004d	0f b6 c0	 movzx	 eax, al
  00050	85 c0		 test	 eax, eax
  00052	74 15		 je	 SHORT $LN2@Assign_rv_

; 2139 : 			{	// take ownership of _Right's iterators along with its buffer
; 2140 : 			this->_Swap_all(_Right);

  00054	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR _Right$[rbp]
  0005b	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00062	e8 00 00 00 00	 call	 ?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEAV12@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Swap_all

; 2141 : 			}
; 2142 : 		else

  00067	eb 0c		 jmp	 SHORT $LN3@Assign_rv_
$LN2@Assign_rv_:

; 2143 : 			{
; 2144 : 			_Right._Orphan_all();

  00069	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00070	e8 00 00 00 00	 call	 ?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all
$LN3@Assign_rv_:

; 2145 : 			}
; 2146 : #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 2147 : 
; 2148 : 		const auto _My_data_mem = reinterpret_cast<unsigned char *>(_STD addressof(this->_Get_data()))
; 2149 : 			+ _Memcpy_move_offset;

  00075	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007c	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00081	48 8b c8	 mov	 rcx, rax
  00084	e8 00 00 00 00	 call	 ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
  00089	48 83 c0 08	 add	 rax, 8
  0008d	48 89 45 28	 mov	 QWORD PTR _My_data_mem$[rbp], rax

; 2150 : 		const auto _Right_data_mem = reinterpret_cast<unsigned char *>(_STD addressof(_Right_data))
; 2151 : 			+ _Memcpy_move_offset;

  00091	48 8b 4d 08	 mov	 rcx, QWORD PTR _Right_data$[rbp]
  00095	e8 00 00 00 00	 call	 ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
  0009a	48 83 c0 08	 add	 rax, 8
  0009e	48 89 45 48	 mov	 QWORD PTR _Right_data_mem$[rbp], rax

; 2152 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  000a2	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  000a8	48 8b 55 48	 mov	 rdx, QWORD PTR _Right_data_mem$[rbp]
  000ac	48 8b 4d 28	 mov	 rcx, QWORD PTR _My_data_mem$[rbp]
  000b0	e8 00 00 00 00	 call	 memcpy

; 2153 : 		_Right._Tidy_init();

  000b5	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  000bc	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2154 : 		}

  000c1	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000c8	5f		 pop	 rdi
  000c9	5d		 pop	 rbp
  000ca	c3		 ret	 0
?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Assign_rv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
$T1 = 196
this$ = 256
_Right$ = 264
__formal$ = 272
?_Assign_rv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents, COMDAT

; 2108 : 		{	// assign either as an rvalue or as an lvalue copy, allocators always equal optimization

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 2109 : 			// pre: this != &_Right
; 2110 : 			// pre: allocator propagation (POCMA) from _Right, if necessary, is complete
; 2111 : 			// pre: *this owns no memory, iterators orphaned (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2112 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  00034	48 8d 85 c4 00
	00 00		 lea	 rax, QWORD PTR $T1[rbp]
  0003b	48 8b f8	 mov	 rdi, rax
  0003e	33 c0		 xor	 eax, eax
  00040	b9 01 00 00 00	 mov	 ecx, 1
  00045	f3 aa		 rep stosb
  00047	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  0004e	e8 00 00 00 00	 call	 ??$move@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > & __ptr64>
  00053	44 0f b6 85 c4
	00 00 00	 movzx	 r8d, BYTE PTR $T1[rbp]
  0005b	48 8b d0	 mov	 rdx, rax
  0005e	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00065	e8 00 00 00 00	 call	 ?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal

; 2113 : 		}

  0006a	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00071	5f		 pop	 rdi
  00072	5d		 pop	 rbp
  00073	c3		 ret	 0
?_Assign_rv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
_Right$ = 296
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT

; 2085 : 		{	// assign by moving _Right

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002f	48 c7 85 e8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T2[rbp], -2

; 2086 : 		if (this != _STD addressof(_Right))

  0003a	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00041	e8 00 00 00 00	 call	 ??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00046	90		 npad	 1
  00047	48 39 85 20 01
	00 00		 cmp	 QWORD PTR this$[rbp], rax
  0004e	74 62		 je	 SHORT $LN2@operator

; 2087 : 			{	// different, assign it
; 2088 : 			_Tidy_deallocate();

  00050	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00057	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
  0005c	90		 npad	 1

; 2089 : 			this->_Move_alloc(_Right._Getal());

  0005d	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00064	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00069	90		 npad	 1
  0006a	48 8b d0	 mov	 rdx, rax
  0006d	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00074	e8 00 00 00 00	 call	 ?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEAV?$allocator@D@2@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Move_alloc
  00079	90		 npad	 1

; 2090 : 			// tag dispatch to remove unnecessary exception handling codegen in the
; 2091 : 			// equal allocators case
; 2092 : 			_Assign_rv_contents(_STD move(_Right),

  0007a	48 8d 85 c4 00
	00 00		 lea	 rax, QWORD PTR $T1[rbp]
  00081	48 8b f8	 mov	 rdi, rax
  00084	33 c0		 xor	 eax, eax
  00086	b9 01 00 00 00	 mov	 ecx, 1
  0008b	f3 aa		 rep stosb
  0008d	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00094	e8 00 00 00 00	 call	 ??$move@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > & __ptr64>
  00099	90		 npad	 1
  0009a	44 0f b6 85 c4
	00 00 00	 movzx	 r8d, BYTE PTR $T1[rbp]
  000a2	48 8b d0	 mov	 rdx, rax
  000a5	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ac	e8 00 00 00 00	 call	 ?_Assign_rv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents
  000b1	90		 npad	 1
$LN2@operator:

; 2093 : 				bool_constant<_Alty_traits::propagate_on_container_move_assignment::value
; 2094 : 				|| _Alty_traits::is_always_equal::value>{});
; 2095 : 			}
; 2096 : 
; 2097 : 		return (*this);

  000b2	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 2098 : 		}

  000b9	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000c0	5f		 pop	 rdi
  000c1	5d		 pop	 rbp
  000c2	c3		 ret	 0
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
_Right$ = 296
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2054 : 		{	// construct by moving _Right

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002f	48 c7 85 e8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T2[rbp], -2

; 2053 : 		: _Mybase(_STD move(_Right._Getal()))

  0003a	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00041	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00046	90		 npad	 1
  00047	48 8b c8	 mov	 rcx, rax
  0004a	e8 00 00 00 00	 call	 ??$move@AEAV?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z ; std::move<std::allocator<char> & __ptr64>
  0004f	90		 npad	 1
  00050	48 8b d0	 mov	 rdx, rax
  00053	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005a	e8 00 00 00 00	 call	 ??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>
  0005f	90		 npad	 1

; 2055 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  00060	48 8d 85 c4 00
	00 00		 lea	 rax, QWORD PTR $T1[rbp]
  00067	48 8b f8	 mov	 rdi, rax
  0006a	33 c0		 xor	 eax, eax
  0006c	b9 01 00 00 00	 mov	 ecx, 1
  00071	f3 aa		 rep stosb
  00073	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  0007a	e8 00 00 00 00	 call	 ??$move@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > & __ptr64>
  0007f	90		 npad	 1
  00080	44 0f b6 85 c4
	00 00 00	 movzx	 r8d, BYTE PTR $T1[rbp]
  00088	48 8b d0	 mov	 rdx, rax
  0008b	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00092	e8 00 00 00 00	 call	 ?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal
  00097	90		 npad	 1

; 2056 : 		}

  00098	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009f	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000a6	5f		 pop	 rdi
  000a7	5d		 pop	 rbp
  000a8	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
_Count$ = 264
_Ch$ = 272
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 1991 : 		{	// construct from _Count * _Ch

$LN4:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00034	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2

; 1990 : 		: _Mybase()

  0003f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00046	e8 00 00 00 00	 call	 ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  0004b	90		 npad	 1

; 1992 : 		_Tidy_init();

  0004c	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 1993 : 		assign(_Count, _Ch);

  00058	44 0f b6 85 10
	01 00 00	 movzx	 r8d, BYTE PTR _Ch$[rbp]
  00060	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  00067	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00073	90		 npad	 1

; 1994 : 		}

  00074	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007b	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00082	5f		 pop	 rdi
  00083	5d		 pop	 rbp
  00084	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
_Count$ = 264
_Ch$ = 272
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
_Count$ = 264
_Ch$ = 272
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
_Ptr$ = 264
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 1977 : 		{	// construct from [_Ptr, <null>)

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2

; 1976 : 		: _Mybase()

  0003a	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00041	e8 00 00 00 00	 call	 ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  00046	90		 npad	 1

; 1978 : 		_Tidy_init();

  00047	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004e	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 1979 : 		assign(_Ptr);

  00053	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  0005a	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00061	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00066	90		 npad	 1

; 1980 : 		}

  00067	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006e	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00075	5f		 pop	 rdi
  00076	5d		 pop	 rbp
  00077	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
_Ptr$ = 264
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
_Ptr$ = 264
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
_Ptr$ = 264
_Count$ = 272
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 1962 : 		{	// construct from [_Ptr, _Ptr + _Count)

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00034	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2

; 1961 : 		: _Mybase()

  0003f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00046	e8 00 00 00 00	 call	 ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  0004b	90		 npad	 1

; 1963 : 		_Tidy_init();

  0004c	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 1964 : 		assign(_Ptr, _Count);

  00058	4c 8b 85 10 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  0005f	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00066	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00072	90		 npad	 1

; 1965 : 		}

  00073	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007a	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
_Ptr$ = 264
_Count$ = 272
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
_Ptr$ = 264
_Count$ = 272
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 1936 : 		{	// construct empty string

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2

; 1935 : 		: _Mybase()

  00035	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  00041	90		 npad	 1

; 1937 : 		_Tidy_init();

  00042	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
  0004e	90		 npad	 1

; 1938 : 		}

  0004f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00056	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005d	5f		 pop	 rdi
  0005e	5d		 pop	 rbp
  0005f	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
_Right$ = 296
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 1924 : 		{	// construct by copying _Right

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002f	48 c7 85 e8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T2[rbp], -2

; 1923 : 		: _Mybase(_Alty_traits::select_on_container_copy_construction(_Right._Getal()))

  0003a	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00041	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00046	48 8b d0	 mov	 rdx, rax
  00049	48 8d 8d c4 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00050	e8 00 00 00 00	 call	 ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
  00055	48 8b d0	 mov	 rdx, rax
  00058	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005f	e8 00 00 00 00	 call	 ??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>
  00064	90		 npad	 1

; 1925 : 		_Construct_lv_contents(_Right);

  00065	48 8b 95 28 01
	00 00		 mov	 rdx, QWORD PTR _Right$[rbp]
  0006c	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEBV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
  00078	90		 npad	 1

; 1926 : 		}

  00079	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00080	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00087	5f		 pop	 rdi
  00088	5d		 pop	 rbp
  00089	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
_Right$ = 296
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
_Right$ = 296
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
  00039	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT

; 342  : 		{	// return const reference to second

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 343  : 		return (_Myval2);

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 344  : 		}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT

; 337  : 		{	// return reference to second

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 338  : 		return (_Myval2);

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 339  : 		}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT

; 322  : 		{	// return const reference to first

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 323  : 		return (*this);

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 324  : 		}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT

; 317  : 		{	// return reference to first

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 318  : 		return (*this);

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 319  : 		}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT

; 1839 : 		{	// return const reference to _String_val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 1840 : 		return (_Mypair._Get_second());

  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second

; 1841 : 		}

  00039	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT

; 1834 : 		{	// return reference to _String_val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 1835 : 		return (_Mypair._Get_second());

  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second

; 1836 : 		}

  00039	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$allocator@D@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT

; 1829 : 		{	// return const reference to allocator

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 1830 : 		return (_Mypair._Get_first());

  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 1831 : 		}

  00039	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$allocator@D@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT

; 1824 : 		{	// return reference to allocator

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 1825 : 		return (_Mypair._Get_first());

  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 1826 : 		}

  00039	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEAV12@@Z
_TEXT	SEGMENT
tv75 = 192
this$ = 240
_Right$ = 248
?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEAV12@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Swap_all, COMDAT

; 1819 : 		{	// swap all iterators

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 1820 : 		_Get_data()._Swap_all(_Right._Get_data());

  0002f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00036	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0003b	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv75[rbp], rax
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00049	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0004e	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv75[rbp]
  00055	48 8b d1	 mov	 rdx, rcx
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 ?_Swap_all@_Container_base12@std@@QEAAXAEAU12@@Z ; std::_Container_base12::_Swap_all

; 1821 : 		}

  00060	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00067	5f		 pop	 rdi
  00068	5d		 pop	 rbp
  00069	c3		 ret	 0
?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEAV12@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Swap_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all, COMDAT

; 1814 : 		{	// orphan all iterators

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 1815 : 		_Get_data()._Orphan_all();

  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00036	48 8b c8	 mov	 rcx, rax
  00039	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1816 : 		}

  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy, COMDAT

; 1803 : 		{	// return reference to _Myproxy

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 1804 : 		return (_Get_data()._Myproxy);

  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data

; 1805 : 		}

  00036	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003d	5f		 pop	 rdi
  0003e	5d		 pop	 rbp
  0003f	c3		 ret	 0
?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
_Proxy_allocator$ = 4
__$ArrayPad$ = 216
this$ = 256
?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy, COMDAT

; 1789 : 		{	// destroy proxy

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00031	48 33 c5	 xor	 rax, rbp
  00034	48 89 85 d8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 1790 : 		_Alproxy _Proxy_allocator(_Getal());

  0003b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00042	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00047	48 8b d0	 mov	 rdx, rax
  0004a	48 8d 4d 04	 lea	 rcx, QWORD PTR _Proxy_allocator$[rbp]
  0004e	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>

; 1791 : 		_Orphan_all();

  00053	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005a	e8 00 00 00 00	 call	 ?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all

; 1792 : 		_Alproxy_traits::destroy(_Proxy_allocator, _Myproxy());

  0005f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
  0006b	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0006e	48 8d 4d 04	 lea	 rcx, QWORD PTR _Proxy_allocator$[rbp]
  00072	e8 00 00 00 00	 call	 ??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>

; 1793 : 		_Deallocate_plain(_Proxy_allocator, _Myproxy());

  00077	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007e	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
  00083	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00086	48 8d 4d 04	 lea	 rcx, QWORD PTR _Proxy_allocator$[rbp]
  0008a	e8 00 00 00 00	 call	 ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>

; 1794 : 		_Myproxy() = 0;

  0008f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00096	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
  0009b	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1795 : 		}

  000a2	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ$rtcFrameData
  000ad	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000b2	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000b9	48 33 cd	 xor	 rcx, rbp
  000bc	e8 00 00 00 00	 call	 __security_check_cookie
  000c1	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000c8	5f		 pop	 rdi
  000c9	5d		 pop	 rbp
  000ca	c3		 ret	 0
?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
_Proxy_allocator$ = 4
$T4 = 232
tv91 = 264
tv79 = 264
tv70 = 264
__$ArrayPad$ = 272
this$ = 320
?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy, COMDAT

; 1781 : 		{	// construct proxy

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]
  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00031	48 33 c5	 xor	 rax, rbp
  00034	48 89 85 10 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 1782 : 		_Alproxy _Proxy_allocator(_Getal());

  0003b	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00042	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00047	48 8b d0	 mov	 rdx, rax
  0004a	48 8d 4d 04	 lea	 rcx, QWORD PTR _Proxy_allocator$[rbp]
  0004e	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>

; 1783 : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  00053	ba 01 00 00 00	 mov	 edx, 1
  00058	48 8d 4d 04	 lea	 rcx, QWORD PTR _Proxy_allocator$[rbp]
  0005c	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
  00061	48 8b c8	 mov	 rcx, rax
  00064	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  00069	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv70[rbp], rax
  00070	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00077	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
  0007c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR tv70[rbp]
  00083	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1784 : 		_Alproxy_traits::construct(_Proxy_allocator, _Myproxy(), _Container_proxy());

  00086	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  0008d	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QEAA@XZ ; std::_Container_proxy::_Container_proxy
  00092	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv79[rbp], rax
  00099	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a0	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
  000a5	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR tv79[rbp]
  000ac	4c 8b c1	 mov	 r8, rcx
  000af	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  000b2	48 8d 4d 04	 lea	 rcx, QWORD PTR _Proxy_allocator$[rbp]
  000b6	e8 00 00 00 00	 call	 ??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@1@QEAU_Container_proxy@1@$$QEAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>

; 1785 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  000bb	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c2	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  000c7	48 8b c8	 mov	 rcx, rax
  000ca	e8 00 00 00 00	 call	 ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
  000cf	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv91[rbp], rax
  000d6	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000dd	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAPEAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
  000e2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e5	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR tv91[rbp]
  000ec	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1786 : 		}

  000ef	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ$rtcFrameData
  000fa	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000ff	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00106	48 33 cd	 xor	 rcx, rbp
  00109	e8 00 00 00 00	 call	 __security_check_cookie
  0010e	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  00115	5f		 pop	 rdi
  00116	5d		 pop	 rbp
  00117	c3		 ret	 0
?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEAV?$allocator@D@2@@Z
_TEXT	SEGMENT
_Reload$ = 4
tv72 = 212
this$ = 256
_Al$ = 264
?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEAV?$allocator@D@2@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Move_alloc, COMDAT

; 1763 : 		{	// replace old allocator

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 1764 : 		const bool _Reload = _Alty_traits::propagate_on_container_move_assignment::value
; 1765 : 			&& _Getal() != _Al;

  0002f	33 c0		 xor	 eax, eax
  00031	83 f8 01	 cmp	 eax, 1
  00034	74 2b		 je	 SHORT $LN5@Move_alloc
  00036	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00042	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Al$[rbp]
  00049	48 8b c8	 mov	 rcx, rax
  0004c	e8 00 00 00 00	 call	 ??$?9DD@std@@YA_NAEBV?$allocator@D@0@0@Z ; std::operator!=<char,char>
  00051	0f b6 c0	 movzx	 eax, al
  00054	85 c0		 test	 eax, eax
  00056	74 09		 je	 SHORT $LN5@Move_alloc
  00058	c6 85 d4 00 00
	00 01		 mov	 BYTE PTR tv72[rbp], 1
  0005f	eb 07		 jmp	 SHORT $LN6@Move_alloc
$LN5@Move_alloc:
  00061	c6 85 d4 00 00
	00 00		 mov	 BYTE PTR tv72[rbp], 0
$LN6@Move_alloc:
  00068	0f b6 85 d4 00
	00 00		 movzx	 eax, BYTE PTR tv72[rbp]
  0006f	88 45 04	 mov	 BYTE PTR _Reload$[rbp], al

; 1766 : 
; 1767 : 		if (_Reload)

  00072	0f b6 45 04	 movzx	 eax, BYTE PTR _Reload$[rbp]
  00076	85 c0		 test	 eax, eax
  00078	74 0c		 je	 SHORT $LN2@Move_alloc

; 1768 : 			{
; 1769 : 			_Free_proxy();

  0007a	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00081	e8 00 00 00 00	 call	 ?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
$LN2@Move_alloc:

; 1770 : 			}
; 1771 : 
; 1772 : 		_Pocma(_Getal(), _Al);

  00086	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008d	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00092	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Al$[rbp]
  00099	48 8b c8	 mov	 rcx, rax
  0009c	e8 00 00 00 00	 call	 ??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0@Z ; std::_Pocma<std::allocator<char> >

; 1773 : 
; 1774 : 		if (_Reload)

  000a1	0f b6 45 04	 movzx	 eax, BYTE PTR _Reload$[rbp]
  000a5	85 c0		 test	 eax, eax
  000a7	74 0c		 je	 SHORT $LN3@Move_alloc

; 1775 : 			{
; 1776 : 			_Alloc_proxy();

  000a9	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b0	e8 00 00 00 00	 call	 ?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
$LN3@Move_alloc:

; 1777 : 			}
; 1778 : 		}

  000b5	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000bc	5f		 pop	 rdi
  000bd	5d		 pop	 rbp
  000be	c3		 ret	 0
?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEAV?$allocator@D@2@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Move_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Copy_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEBV?$allocator@D@2@@Z
_TEXT	SEGMENT
_Reload$ = 4
this$ = 256
_Al$ = 264
?_Copy_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEBV?$allocator@D@2@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Copy_alloc, COMDAT

; 1745 : 		{	// replace old allocator

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 1746 : 		const bool _Reload = _Alty_traits::propagate_on_container_copy_assignment::value
; 1747 : 			&& _Getal() != _Al;

  0002f	c6 45 04 00	 mov	 BYTE PTR _Reload$[rbp], 0

; 1748 : 
; 1749 : 		if (_Reload)

  00033	33 c0		 xor	 eax, eax
  00035	85 c0		 test	 eax, eax
  00037	74 0c		 je	 SHORT $LN2@Copy_alloc

; 1750 : 			{
; 1751 : 			_Free_proxy();

  00039	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00040	e8 00 00 00 00	 call	 ?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
$LN2@Copy_alloc:

; 1752 : 			}
; 1753 : 
; 1754 : 		_Pocca(_Getal(), _Al);

  00045	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004c	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00051	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Al$[rbp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 ??$_Pocca@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@AEBV10@@Z ; std::_Pocca<std::allocator<char> >

; 1755 : 
; 1756 : 		if (_Reload)

  00060	33 c0		 xor	 eax, eax
  00062	85 c0		 test	 eax, eax
  00064	74 0c		 je	 SHORT $LN3@Copy_alloc

; 1757 : 			{
; 1758 : 			_Alloc_proxy();

  00066	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006d	e8 00 00 00 00	 call	 ?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
$LN3@Copy_alloc:

; 1759 : 			}
; 1760 : 		}

  00072	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00079	5f		 pop	 rdi
  0007a	5d		 pop	 rbp
  0007b	c3		 ret	 0
?_Copy_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEBV?$allocator@D@2@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Copy_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT

; 1740 : 		{	// destroy the object

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2

; 1741 : 		_Free_proxy();

  00035	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
  00041	90		 npad	 1

; 1742 : 		}

  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8b c8	 mov	 rcx, rax
  0004c	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
  00051	90		 npad	 1
  00052	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00059	5f		 pop	 rdi
  0005a	5d		 pop	 rbp
  0005b	c3		 ret	 0
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT

; 1726 : 		{	// default construct allocator

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002a	48 c7 85 e8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T2[rbp], -2

; 1725 : 		: _Mypair(_Zero_then_variadic_args_t())

  00035	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	0f b6 95 c4 00
	00 00		 movzx	 edx, BYTE PTR $T1[rbp]
  00043	48 8b c8	 mov	 rcx, rax
  00046	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
  0004b	90		 npad	 1

; 1727 : 		_Alloc_proxy();

  0004c	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
  00058	90		 npad	 1

; 1728 : 		}

  00059	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00060	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00067	5f		 pop	 rdi
  00068	5d		 pop	 rbp
  00069	c3		 ret	 0
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
?dtor$0@?0???0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ@4HA PROC ; `std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ@4HA ENDP ; `std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
$T2 = 232
this$ = 288
?dtor$0@?0???0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ@4HA PROC ; `std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ@4HA ENDP ; `std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 c0 08	 add	 rax, 8
  00035	48 8b c8	 mov	 rcx, rax
  00038	e8 00 00 00 00	 call	 ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
  0003d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00044	e8 00 00 00 00	 call	 ??1_Container_base12@std@@QEAA@XZ ; std::_Container_base12::~_Container_base12
  00049	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT

; 1653 : 			{	// user-provided, for fancy pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 1654 : 			}

  00028	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002f	5f		 pop	 rdi
  00030	5d		 pop	 rbp
  00031	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT

; 1648 : 		_Bxty()

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 1649 : 			{	// user-provided, for fancy pointers
; 1650 : 			}

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
_Off$ = 264
_Size$ = 272
?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z PROC ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size, COMDAT

; 1642 : 		{	// trims _Size to the longest it can be assuming a string at/after _Off

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 1643 : 		return (_Min_value(_Size, _Mysize - _Off));

  00034	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003b	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Off$[rbp]
  00042	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00046	48 2b c1	 sub	 rax, rcx
  00049	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00050	48 8d 95 c8 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  00057	48 8d 8d 10 01
	00 00		 lea	 rcx, QWORD PTR _Size$[rbp]
  0005e	e8 00 00 00 00	 call	 ??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z ; std::_Min_value<unsigned __int64>
  00063	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 1644 : 		}

  00066	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006d	5f		 pop	 rdi
  0006e	5d		 pop	 rbp
  0006f	c3		 ret	 0
?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z ENDP ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Xran, COMDAT

; 1637 : 		{	// report an out_of_range error

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1638 : 		_Xout_of_range("invalid string position");

  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00025	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPEBD@Z ; std::_Xout_of_range
$LN2@Xran:

; 1639 : 		}

  0002a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00031	5f		 pop	 rdi
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z
_TEXT	SEGMENT
this$ = 224
_Off$ = 232
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z PROC ; std::_String_val<std::_Simple_types<char> >::_Check_offset, COMDAT

; 1621 : 		{	// checks whether _Off is in the bounds of [0, this->size()]

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 1622 : 		if (_Mysize < _Off)

  0002f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Off$[rbp]
  0003d	48 39 48 18	 cmp	 QWORD PTR [rax+24], rcx
  00041	73 05		 jae	 SHORT $LN2@Check_offs

; 1623 : 			{
; 1624 : 			_Xran();

  00043	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN2@Check_offs:
$LN3@Check_offs:

; 1625 : 			}
; 1626 : 		}

  00048	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z ENDP ; std::_String_val<std::_Simple_types<char> >::_Check_offset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
tv66 = 192
this$ = 240
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged, COMDAT

; 1616 : 		{	// returns whether the large string mode (allocated memory) is engaged

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+248]

; 1617 : 		return (_BUF_SIZE <= _Myres);

  00028	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	48 83 78 20 10	 cmp	 QWORD PTR [rax+32], 16
  00034	72 0c		 jb	 SHORT $LN3@Large_stri
  00036	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv66[rbp], 1
  00040	eb 0a		 jmp	 SHORT $LN4@Large_stri
$LN3@Large_stri:
  00042	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv66[rbp], 0
$LN4@Large_stri:
  0004c	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv66[rbp]

; 1618 : 		}

  00053	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0005a	5f		 pop	 rdi
  0005b	5d		 pop	 rbp
  0005c	c3		 ret	 0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ
_TEXT	SEGMENT
_Result$ = 8
this$ = 256
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT

; 1605 : 		{	// determine current pointer to buffer for immutable string

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 1606 : 		const value_type * _Result = _Bx._Buf;

  0002a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 c0 08	 add	 rax, 8
  00035	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax

; 1607 : 		if (_Large_string_engaged())

  00039	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00040	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00045	0f b6 c0	 movzx	 eax, al
  00048	85 c0		 test	 eax, eax
  0004a	74 14		 je	 SHORT $LN2@Myptr

; 1608 : 			{
; 1609 : 			_Result = _Unfancy(_Bx._Ptr);

  0004c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00053	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00057	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  0005c	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax
$LN2@Myptr:

; 1610 : 			}
; 1611 : 
; 1612 : 		return (_Result);

  00060	48 8b 45 08	 mov	 rax, QWORD PTR _Result$[rbp]

; 1613 : 		}

  00064	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006b	5f		 pop	 rdi
  0006c	5d		 pop	 rbp
  0006d	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ
_TEXT	SEGMENT
_Result$ = 8
this$ = 256
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT

; 1594 : 		{	// determine current pointer to buffer for mutable string

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]

; 1595 : 		value_type * _Result = _Bx._Buf;

  0002a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 83 c0 08	 add	 rax, 8
  00035	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax

; 1596 : 		if (_Large_string_engaged())

  00039	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00040	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00045	0f b6 c0	 movzx	 eax, al
  00048	85 c0		 test	 eax, eax
  0004a	74 14		 je	 SHORT $LN2@Myptr

; 1597 : 			{
; 1598 : 			_Result = _Unfancy(_Bx._Ptr);

  0004c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00053	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00057	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  0005c	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax
$LN2@Myptr:

; 1599 : 			}
; 1600 : 
; 1601 : 		return (_Result);

  00060	48 8b 45 08	 mov	 rax, QWORD PTR _Result$[rbp]

; 1602 : 		}

  00064	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006b	5f		 pop	 rdi
  0006c	5d		 pop	 rbp
  0006d	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT

; 1578 : 		{	// initialize values

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QEAA@XZ ; std::_Container_base12::_Container_base12
  00041	90		 npad	 1

; 1575 : 		: _Bx(),

  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 83 c0 08	 add	 rax, 8
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty

; 1576 : 		_Mysize(0),

  00055	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005c	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 1577 : 		_Myres(0)

  00064	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006b	48 c7 40 20 00
	00 00 00	 mov	 QWORD PTR [rax+32], 0

; 1579 : 		}

  00073	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007a	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00081	5f		 pop	 rdi
  00082	5d		 pop	 rbp
  00083	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ@4HA PROC ; `std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1_Container_base12@std@@QEAA@XZ ; std::_Container_base12::~_Container_base12
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ@4HA ENDP ; `std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ@4HA PROC ; `std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1_Container_base12@std@@QEAA@XZ ; std::_Container_base12::~_Container_base12
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ@4HA ENDP ; `std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 224
_Al$ = 232
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction, COMDAT

; 871  : 		{	// get allocator to use

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 872  : 		return (_Al);

  0002d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 873  : 		}

  00034	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003b	5f		 pop	 rdi
  0003c	5d		 pop	 rbp
  0003d	c3		 ret	 0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z
_TEXT	SEGMENT
__formal$ = 224
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::max_size, COMDAT

; 866  : 		{	// get maximum size

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 867  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

  00028	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1

; 868  : 		}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z
_TEXT	SEGMENT
this$ = 224
_Count$ = 232
?allocate@?$allocator@D@std@@QEAAPEAD_K@Z PROC		; std::allocator<char>::allocate, COMDAT

; 945  : 		{	// allocate array of _Count elements

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 946  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof(_Ty))));

  0002f	41 b0 01	 mov	 r8b, 1
  00032	ba 01 00 00 00	 mov	 edx, 1
  00037	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0003e	e8 00 00 00 00	 call	 ?_Allocate@std@@YAPEAX_K0_N@Z ; std::_Allocate

; 947  : 		}

  00043	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z
_TEXT	SEGMENT
this$ = 224
_Ptr$ = 232
_Count$ = 240
?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z PROC	; std::allocator<char>::deallocate, COMDAT

; 940  : 		{	// deallocate object at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 941  : 		_Deallocate(_Ptr, _Count, sizeof(_Ty));

  00034	41 b8 01 00 00
	00		 mov	 r8d, 1
  0003a	48 8b 95 f0 00
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  00041	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00048	e8 00 00 00 00	 call	 ?_Deallocate@std@@YAXPEAX_K1@Z ; std::_Deallocate

; 942  : 		}

  0004d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00054	5f		 pop	 rdi
  00055	5d		 pop	 rbp
  00056	c3		 ret	 0
?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ENDP	; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$allocator@D@std@@QEAA@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT

; 929  : 	allocator() _NOEXCEPT

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 930  : 		{	// construct default allocator (do nothing)
; 931  : 		}

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??0?$allocator@D@std@@QEAA@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$_Convert_size@_K@std@@YA_K_K@Z
_TEXT	SEGMENT
_Len$ = 224
??$_Convert_size@_K@std@@YA_K_K@Z PROC			; std::_Convert_size<unsigned __int64>, COMDAT

; 1161 : 	{	// convert size_t to size_t, unchanged

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 1162 : 	return (_Len);

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Len$[rbp]

; 1163 : 	}

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??$_Convert_size@_K@std@@YA_K_K@Z ENDP			; std::_Convert_size<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPEAX_K1@Z
_TEXT	SEGMENT
_Ptr_user$1 = 8
_Ptr_ptr$2 = 40
_Ptr_container$3 = 72
_Ptr$ = 320
_Count$ = 328
_Sz$ = 336
?_Deallocate@std@@YAXPEAX_K1@Z PROC			; std::_Deallocate, COMDAT

; 101  : 	{	// deallocate storage for _Count elements of size _Sz

$LN16:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  00018	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR [rsp+376]

; 102  : 	if (_Count > static_cast<size_t>(-1) / _Sz)

  00034	33 d2		 xor	 edx, edx
  00036	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  0003d	48 f7 b5 50 01
	00 00		 div	 QWORD PTR _Sz$[rbp]
  00044	48 39 85 48 01
	00 00		 cmp	 QWORD PTR _Count$[rbp], rax
  0004b	76 0a		 jbe	 SHORT $LN2@Deallocate

; 103  : 		{
; 104  : 		goto _Invalid_parameter; // TRANSITION, VSO#359498

  0004d	e9 d1 00 00 00	 jmp	 $LN3@Deallocate
  00052	e9 cc 00 00 00	 jmp	 $_Invalid_parameter$17
$LN2@Deallocate:

; 105  : 		}
; 106  : 
; 107  : 	if (_BIG_ALLOCATION_THRESHOLD <= _Count * _Sz)

  00057	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  0005e	48 0f af 85 50
	01 00 00	 imul	 rax, QWORD PTR _Sz$[rbp]
  00066	48 3d 00 10 00
	00		 cmp	 rax, 4096		; 00001000H
  0006c	0f 82 a3 00 00
	00		 jb	 $LN4@Deallocate

; 108  : 		{	// deallocate large block
; 109  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);

  00072	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  00079	48 89 45 08	 mov	 QWORD PTR _Ptr_user$1[rbp], rax

; 110  : 		if ((_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) != 0)

  0007d	48 8b 45 08	 mov	 rax, QWORD PTR _Ptr_user$1[rbp]
  00081	48 83 e0 1f	 and	 rax, 31
  00085	48 85 c0	 test	 rax, rax
  00088	74 0a		 je	 SHORT $LN5@Deallocate

; 111  : 			{
; 112  : 			goto _Invalid_parameter;

  0008a	e9 94 00 00 00	 jmp	 $LN6@Deallocate
  0008f	e9 8f 00 00 00	 jmp	 $_Invalid_parameter$17
$LN5@Deallocate:

; 113  : 			}
; 114  : 
; 115  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);

  00094	48 8b 45 08	 mov	 rax, QWORD PTR _Ptr_user$1[rbp]
  00098	48 83 e8 08	 sub	 rax, 8
  0009c	48 89 45 28	 mov	 QWORD PTR _Ptr_ptr$2[rbp], rax

; 116  : 		const uintptr_t _Ptr_container =
; 117  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  000a0	48 8b 45 28	 mov	 rax, QWORD PTR _Ptr_ptr$2[rbp]
  000a4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a7	48 89 45 48	 mov	 QWORD PTR _Ptr_container$3[rbp], rax

; 118  : 
; 119  :  #ifdef _DEBUG
; 120  : 		// If the following asserts, it likely means that we are performing
; 121  : 		// an aligned delete on memory coming from an unaligned allocation.
; 122  : 		if (reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] != _BIG_ALLOCATION_SENTINEL)

  000ab	b8 08 00 00 00	 mov	 eax, 8
  000b0	48 6b c0 ff	 imul	 rax, rax, -1
  000b4	48 8b 4d 28	 mov	 rcx, QWORD PTR _Ptr_ptr$2[rbp]
  000b8	48 ba fa fa fa
	fa fa fa fa fa	 mov	 rdx, -361700864190383366 ; fafafafafafafafaH
  000c2	48 39 14 01	 cmp	 QWORD PTR [rcx+rax], rdx
  000c6	74 04		 je	 SHORT $LN7@Deallocate

; 123  : 			{
; 124  : 			goto _Invalid_parameter;

  000c8	eb 59		 jmp	 SHORT $LN8@Deallocate
  000ca	eb 57		 jmp	 SHORT $_Invalid_parameter$17
$LN7@Deallocate:

; 125  : 			}
; 126  :  #endif /* _DEBUG */
; 127  : 
; 128  : 		// Extra paranoia on aligned allocation/deallocation
; 129  : 		if (_Ptr_container >= _Ptr_user)

  000cc	48 8b 45 08	 mov	 rax, QWORD PTR _Ptr_user$1[rbp]
  000d0	48 39 45 48	 cmp	 QWORD PTR _Ptr_container$3[rbp], rax
  000d4	72 04		 jb	 SHORT $LN9@Deallocate

; 130  : 			{
; 131  : 			goto _Invalid_parameter;

  000d6	eb 4b		 jmp	 SHORT $LN10@Deallocate
  000d8	eb 49		 jmp	 SHORT $_Invalid_parameter$17
$LN9@Deallocate:

; 132  : 			}
; 133  : 
; 134  :  #ifdef _DEBUG
; 135  : 		if (2 * sizeof(void *) > _Ptr_user - _Ptr_container)

  000da	48 8b 45 48	 mov	 rax, QWORD PTR _Ptr_container$3[rbp]
  000de	48 8b 4d 08	 mov	 rcx, QWORD PTR _Ptr_user$1[rbp]
  000e2	48 2b c8	 sub	 rcx, rax
  000e5	48 8b c1	 mov	 rax, rcx
  000e8	48 83 f8 10	 cmp	 rax, 16
  000ec	73 04		 jae	 SHORT $LN11@Deallocate

; 136  :  #else /* _DEBUG */
; 137  : 		if (sizeof(void *) > _Ptr_user - _Ptr_container)
; 138  :  #endif /* _DEBUG */
; 139  : 			{
; 140  : 			goto _Invalid_parameter;

  000ee	eb 33		 jmp	 SHORT $LN12@Deallocate
  000f0	eb 31		 jmp	 SHORT $_Invalid_parameter$17
$LN11@Deallocate:

; 141  : 			}
; 142  : 
; 143  : 		if (_Ptr_user - _Ptr_container > _NON_USER_SIZE)

  000f2	48 8b 45 48	 mov	 rax, QWORD PTR _Ptr_container$3[rbp]
  000f6	48 8b 4d 08	 mov	 rcx, QWORD PTR _Ptr_user$1[rbp]
  000fa	48 2b c8	 sub	 rcx, rax
  000fd	48 8b c1	 mov	 rax, rcx
  00100	48 83 f8 2f	 cmp	 rax, 47			; 0000002fH
  00104	76 04		 jbe	 SHORT $LN13@Deallocate

; 144  : 			{
; 145  : 			goto _Invalid_parameter;

  00106	eb 1b		 jmp	 SHORT $LN14@Deallocate
  00108	eb 19		 jmp	 SHORT $_Invalid_parameter$17
$LN13@Deallocate:

; 146  : 			}
; 147  : 
; 148  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0010a	48 8b 45 48	 mov	 rax, QWORD PTR _Ptr_container$3[rbp]
  0010e	48 89 85 40 01
	00 00		 mov	 QWORD PTR _Ptr$[rbp], rax
$LN4@Deallocate:

; 149  : 		}
; 150  : 
; 151  : 	::operator delete(_Ptr);

  00115	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  0011c	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete

; 152  : 	return;

  00121	eb 30		 jmp	 SHORT $LN1@Deallocate
$LN3@Deallocate:
$LN6@Deallocate:
$LN8@Deallocate:
$LN10@Deallocate:
$LN12@Deallocate:
$LN14@Deallocate:
$_Invalid_parameter$17:

; 153  : 
; 154  : _Invalid_parameter:
; 155  : 	_SCL_SECURE_INVALID_ARGUMENT_NO_ASSERT;

  00123	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Deallocate@std@@YAXPEAX_K1@Z@4JA
  00129	83 c0 36	 add	 eax, 54			; 00000036H
  0012c	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00135	44 8b c8	 mov	 r9d, eax
  00138	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NE@GPIBOEJC@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0013f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
  00146	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
  0014d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
$LN1@Deallocate:

; 156  : 	}

  00153	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  0015a	5f		 pop	 rdi
  0015b	5d		 pop	 rbp
  0015c	c3		 ret	 0
?_Deallocate@std@@YAXPEAX_K1@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPEAX_K0_N@Z
_TEXT	SEGMENT
_Ptr$ = 8
_User_size$ = 40
_Block_size$1 = 72
_Ptr_container$2 = 104
_Count$ = 352
_Sz$ = 360
_Try_aligned_allocation$ = 368
?_Allocate@std@@YAPEAX_K0_N@Z PROC			; std::_Allocate, COMDAT

; 49   : 	{	// allocate storage for _Count elements of size _Sz

$LN13:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  00018	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 5e 00 00 00	 mov	 ecx, 94			; 0000005eH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR [rsp+408]

; 50   : 	void *_Ptr = 0;

  00034	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR _Ptr$[rbp], 0

; 51   : 
; 52   : 	if (_Count == 0)

  0003c	48 83 bd 60 01
	00 00 00	 cmp	 QWORD PTR _Count$[rbp], 0
  00044	75 09		 jne	 SHORT $LN2@Allocate

; 53   : 		{
; 54   : 		return (_Ptr);

  00046	48 8b 45 08	 mov	 rax, QWORD PTR _Ptr$[rbp]
  0004a	e9 ec 01 00 00	 jmp	 $LN1@Allocate
$LN2@Allocate:

; 55   : 		}
; 56   : 
; 57   : 	// check overflow of multiply
; 58   : 	if (static_cast<size_t>(-1) / _Sz < _Count)

  0004f	33 d2		 xor	 edx, edx
  00051	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  00058	48 f7 b5 68 01
	00 00		 div	 QWORD PTR _Sz$[rbp]
  0005f	48 3b 85 60 01
	00 00		 cmp	 rax, QWORD PTR _Count$[rbp]
  00066	73 05		 jae	 SHORT $LN3@Allocate

; 59   : 		{
; 60   : 		_Xbad_alloc();	// report no memory

  00068	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN3@Allocate:

; 61   : 		}
; 62   : 
; 63   : 	const size_t _User_size = _Count * _Sz;

  0006d	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00074	48 0f af 85 68
	01 00 00	 imul	 rax, QWORD PTR _Sz$[rbp]
  0007c	48 89 45 28	 mov	 QWORD PTR _User_size$[rbp], rax

; 64   : 
; 65   : #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00080	0f b6 85 70 01
	00 00		 movzx	 eax, BYTE PTR _Try_aligned_allocation$[rbp]
  00087	85 c0		 test	 eax, eax
  00089	0f 84 0d 01 00
	00		 je	 $LN4@Allocate
  0008f	48 81 7d 28 00
	10 00 00	 cmp	 QWORD PTR _User_size$[rbp], 4096 ; 00001000H
  00097	0f 82 ff 00 00
	00		 jb	 $LN4@Allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof(void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  0009d	48 8b 45 28	 mov	 rax, QWORD PTR _User_size$[rbp]
  000a1	48 83 c0 2f	 add	 rax, 47			; 0000002fH
  000a5	48 89 45 48	 mov	 QWORD PTR _Block_size$1[rbp], rax

; 72   : 		if (_Block_size <= _User_size)

  000a9	48 8b 45 28	 mov	 rax, QWORD PTR _User_size$[rbp]
  000ad	48 39 45 48	 cmp	 QWORD PTR _Block_size$1[rbp], rax
  000b1	77 05		 ja	 SHORT $LN5@Allocate

; 73   : 			{
; 74   : 			_Xbad_alloc();	// report no memory

  000b3	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN5@Allocate:

; 75   : 			}
; 76   : 
; 77   : 		const uintptr_t _Ptr_container =
; 78   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  000b8	48 8b 4d 48	 mov	 rcx, QWORD PTR _Block_size$1[rbp]
  000bc	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  000c1	48 89 45 68	 mov	 QWORD PTR _Ptr_container$2[rbp], rax

; 79   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  000c5	48 83 7d 68 00	 cmp	 QWORD PTR _Ptr_container$2[rbp], 0
  000ca	0f 85 83 00 00
	00		 jne	 $LN6@Allocate
  000d0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@
  000d7	48 85 c0	 test	 rax, rax
  000da	74 06		 je	 SHORT $LN9@Allocate
  000dc	33 c0		 xor	 eax, eax
  000de	85 c0		 test	 eax, eax
  000e0	75 41		 jne	 SHORT $LN10@Allocate
$LN9@Allocate:
  000e2	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Allocate@std@@YAPEAX_K0_N@Z@4JA
  000e8	83 c0 1e	 add	 eax, 30
  000eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
  000f2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
  000fe	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00103	45 33 c9	 xor	 r9d, r9d
  00106	44 8b c0	 mov	 r8d, eax
  00109	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1NE@GPIBOEJC@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00110	b9 02 00 00 00	 mov	 ecx, 2
  00115	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReportW
  0011b	83 f8 01	 cmp	 eax, 1
  0011e	75 03		 jne	 SHORT $LN10@Allocate
  00120	cc		 int	 3
  00121	33 c0		 xor	 eax, eax
$LN10@Allocate:
  00123	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Allocate@std@@YAPEAX_K0_N@Z@4JA
  00129	83 c0 1e	 add	 eax, 30
  0012c	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00135	44 8b c8	 mov	 r9d, eax
  00138	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NE@GPIBOEJC@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0013f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
  00146	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
  0014d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
$LN6@Allocate:

; 80   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00153	48 8b 45 68	 mov	 rax, QWORD PTR _Ptr_container$2[rbp]
  00157	48 83 c0 2f	 add	 rax, 47			; 0000002fH
  0015b	48 83 e0 e0	 and	 rax, -32		; ffffffffffffffe0H
  0015f	48 89 45 08	 mov	 QWORD PTR _Ptr$[rbp], rax

; 81   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00163	b8 08 00 00 00	 mov	 eax, 8
  00168	48 6b c0 ff	 imul	 rax, rax, -1
  0016c	48 8b 4d 08	 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00170	48 8b 55 68	 mov	 rdx, QWORD PTR _Ptr_container$2[rbp]
  00174	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 83   : 
; 84   :  #ifdef _DEBUG
; 85   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;

  00178	b8 08 00 00 00	 mov	 eax, 8
  0017d	48 6b c0 fe	 imul	 rax, rax, -2
  00181	48 8b 4d 08	 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00185	48 ba fa fa fa
	fa fa fa fa fa	 mov	 rdx, -361700864190383366 ; fafafafafafafafaH
  0018f	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 86   :  #endif /* _DEBUG */
; 87   :  		return (_Ptr);

  00193	48 8b 45 08	 mov	 rax, QWORD PTR _Ptr$[rbp]
  00197	e9 9f 00 00 00	 jmp	 $LN1@Allocate
$LN4@Allocate:

; 88   : 		}
; 89   : #else /* ^^^ x86/x64 hardware ^^^ // vvv ARM hardware vvv */
; 90   : 	(void)_Try_aligned_allocation;
; 91   : #endif /* defined(_M_IX86) || defined(_M_X64) */
; 92   : 
; 93   : 	_Ptr = ::operator new(_User_size);

  0019c	48 8b 4d 28	 mov	 rcx, QWORD PTR _User_size$[rbp]
  001a0	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  001a5	48 89 45 08	 mov	 QWORD PTR _Ptr$[rbp], rax

; 94   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  001a9	48 83 7d 08 00	 cmp	 QWORD PTR _Ptr$[rbp], 0
  001ae	0f 85 83 00 00
	00		 jne	 $LN7@Allocate
  001b4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_09GLJCAGLP@_Ptr?5?$CB?$DN?50?$AA@
  001bb	48 85 c0	 test	 rax, rax
  001be	74 06		 je	 SHORT $LN11@Allocate
  001c0	33 c0		 xor	 eax, eax
  001c2	85 c0		 test	 eax, eax
  001c4	75 41		 jne	 SHORT $LN12@Allocate
$LN11@Allocate:
  001c6	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Allocate@std@@YAPEAX_K0_N@Z@4JA
  001cc	83 c0 2d	 add	 eax, 45			; 0000002dH
  001cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@GKJLLHIM@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
  001d6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
  001e2	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  001e7	45 33 c9	 xor	 r9d, r9d
  001ea	44 8b c0	 mov	 r8d, eax
  001ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1NE@GPIBOEJC@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  001f4	b9 02 00 00 00	 mov	 ecx, 2
  001f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReportW
  001ff	83 f8 01	 cmp	 eax, 1
  00202	75 03		 jne	 SHORT $LN12@Allocate
  00204	cc		 int	 3
  00205	33 c0		 xor	 eax, eax
$LN12@Allocate:
  00207	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Allocate@std@@YAPEAX_K0_N@Z@4JA
  0020d	83 c0 2d	 add	 eax, 45			; 0000002dH
  00210	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00219	44 8b c8	 mov	 r9d, eax
  0021c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NE@GPIBOEJC@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00223	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
  0022a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
  00231	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
$LN7@Allocate:

; 95   : 	return (_Ptr);

  00237	48 8b 45 08	 mov	 rax, QWORD PTR _Ptr$[rbp]
$LN1@Allocate:
$LN8@Allocate:

; 96   : 	}

  0023b	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  00242	5f		 pop	 rdi
  00243	5d		 pop	 rbp
  00244	c3		 ret	 0
?_Allocate@std@@YAPEAX_K0_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Orphan_me@_Iterator_base12@std@@QEAAXXZ
_TEXT	SEGMENT
_Pnext$1 = 8
$T2 = 232
this$ = 288
?_Orphan_me@_Iterator_base12@std@@QEAAXXZ PROC		; std::_Iterator_base12::_Orphan_me, COMDAT

; 214  : 		{	// cut ties with parent

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR [rsp+344]
  0002a	48 c7 85 e8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T2[rbp], -2

; 215  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 216  : 		if (_Myproxy != 0)

  00035	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00040	0f 84 ac 00 00
	00		 je	 $LN4@Orphan_me

; 217  : 			{	// adopted, remove self from list
; 218  : 			_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

  00046	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00050	48 83 c0 08	 add	 rax, 8
  00054	48 89 45 08	 mov	 QWORD PTR _Pnext$1[rbp], rax
$LN2@Orphan_me:

; 219  : 			while (*_Pnext != 0 && *_Pnext != this)

  00058	48 8b 45 08	 mov	 rax, QWORD PTR _Pnext$1[rbp]
  0005c	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00060	74 21		 je	 SHORT $LN3@Orphan_me
  00062	48 8b 45 08	 mov	 rax, QWORD PTR _Pnext$1[rbp]
  00066	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006d	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00070	74 11		 je	 SHORT $LN3@Orphan_me

; 220  : 				_Pnext = &(*_Pnext)->_Mynextiter;

  00072	48 8b 45 08	 mov	 rax, QWORD PTR _Pnext$1[rbp]
  00076	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00079	48 83 c0 08	 add	 rax, 8
  0007d	48 89 45 08	 mov	 QWORD PTR _Pnext$1[rbp], rax
  00081	eb d5		 jmp	 SHORT $LN2@Orphan_me
$LN3@Orphan_me:

; 221  : 
; 222  : 			if (*_Pnext == 0)

  00083	48 8b 45 08	 mov	 rax, QWORD PTR _Pnext$1[rbp]
  00087	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0008b	75 45		 jne	 SHORT $LN5@Orphan_me

; 223  : 				{
; 224  : 				_DEBUG_ERROR("ITERATOR LIST CORRUPTED!");

  0008d	41 b8 e0 00 00
	00		 mov	 r8d, 224		; 000000e0H
  00093	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1NE@JCGKDBDB@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0009a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
  000a1	e8 00 00 00 00	 call	 ?_Debug_message@std@@YAXPEB_W0I@Z ; std::_Debug_message
  000a6	90		 npad	 1
  000a7	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000b0	41 b9 e0 00 00
	00		 mov	 r9d, 224		; 000000e0H
  000b6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NE@JCGKDBDB@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  000bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_?$AAb?$AAa?$AAs?$AAe?$AA1?$AA2?$AA?3?$AA?3?$AA_?$AAO?$AAr?$AAp?$AAh?$AAa?$AAn?$AA_?$AAm@
  000c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$CC?$AA?$AA@
  000cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000d1	90		 npad	 1
$LN5@Orphan_me:

; 225  : 				}
; 226  : 
; 227  : 			*_Pnext = _Mynextiter;

  000d2	48 8b 45 08	 mov	 rax, QWORD PTR _Pnext$1[rbp]
  000d6	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000dd	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000e1	48 89 08	 mov	 QWORD PTR [rax], rcx

; 228  : 			_Myproxy = 0;

  000e4	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000eb	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
$LN4@Orphan_me:

; 229  : 			}
; 230  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 231  : 		}

  000f2	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000f9	5f		 pop	 rdi
  000fa	5d		 pop	 rbp
  000fb	c3		 ret	 0
?_Orphan_me@_Iterator_base12@std@@QEAAXXZ ENDP		; std::_Iterator_base12::_Orphan_me
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ
_TEXT	SEGMENT
tv68 = 192
this$ = 240
?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT

; 204  : 		{	// get owning container

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+248]

; 205  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00028	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00033	75 0d		 jne	 SHORT $LN3@Getcont
  00035	48 c7 85 c0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR tv68[rbp], 0
  00040	eb 14		 jmp	 SHORT $LN4@Getcont
$LN3@Getcont:
  00042	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004f	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv68[rbp], rax
$LN4@Getcont:
  00056	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv68[rbp]

; 206  : 		}

  0005d	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00064	5f		 pop	 rdi
  00065	5d		 pop	 rbp
  00066	c3		 ret	 0
?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z
_TEXT	SEGMENT
_Lock$5 = 4
_Parent_proxy$6 = 40
_Lock$7 = 68
$T8 = 296
__$ArrayPad$ = 312
this$ = 352
_Parent$ = 360
?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT

; 170  : 		{	// adopt this iterator by parent

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]
  0002f	48 c7 85 28 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T8[rbp], -2
  0003a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00041	48 33 c5	 xor	 rax, rbp
  00044	48 89 85 38 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 171  : 		if (_Parent == 0)

  0004b	48 83 bd 68 01
	00 00 00	 cmp	 QWORD PTR _Parent$[rbp], 0
  00053	75 2a		 jne	 SHORT $LN2@Adopt

; 172  : 			{	// no future parent, just disown current parent
; 173  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 174  : 			_Lockit _Lock(_LOCK_DEBUG);

  00055	ba 03 00 00 00	 mov	 edx, 3
  0005a	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$5[rbp]
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
  00064	90		 npad	 1

; 175  : 			_Orphan_me();

  00065	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006c	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QEAAXXZ ; std::_Iterator_base12::_Orphan_me
  00071	90		 npad	 1

; 176  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 177  : 			}

  00072	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$5[rbp]
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0007c	90		 npad	 1

; 178  : 		else

  0007d	eb 76		 jmp	 SHORT $LN3@Adopt
$LN2@Adopt:

; 179  : 			{	// have a parent, do adoption
; 180  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;

  0007f	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR _Parent$[rbp]
  00086	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00089	48 89 45 28	 mov	 QWORD PTR _Parent_proxy$6[rbp], rax

; 181  : 
; 182  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 183  : 			if (_Myproxy != _Parent_proxy)

  0008d	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00094	48 8b 4d 28	 mov	 rcx, QWORD PTR _Parent_proxy$6[rbp]
  00098	48 39 08	 cmp	 QWORD PTR [rax], rcx
  0009b	74 58		 je	 SHORT $LN3@Adopt

; 184  : 				{	// change parentage
; 185  : 				_Lockit _Lock(_LOCK_DEBUG);

  0009d	ba 03 00 00 00	 mov	 edx, 3
  000a2	48 8d 4d 44	 lea	 rcx, QWORD PTR _Lock$7[rbp]
  000a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
  000ac	90		 npad	 1

; 186  : 				_Orphan_me();

  000ad	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b4	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QEAAXXZ ; std::_Iterator_base12::_Orphan_me
  000b9	90		 npad	 1

; 187  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;

  000ba	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c1	48 8b 4d 28	 mov	 rcx, QWORD PTR _Parent_proxy$6[rbp]
  000c5	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000c9	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 188  : 				_Parent_proxy->_Myfirstiter = this;

  000cd	48 8b 45 28	 mov	 rax, QWORD PTR _Parent_proxy$6[rbp]
  000d1	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d8	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 189  : 				_Myproxy = _Parent_proxy;

  000dc	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000e3	48 8b 4d 28	 mov	 rcx, QWORD PTR _Parent_proxy$6[rbp]
  000e7	48 89 08	 mov	 QWORD PTR [rax], rcx

; 190  : 				}

  000ea	48 8d 4d 44	 lea	 rcx, QWORD PTR _Lock$7[rbp]
  000ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  000f4	90		 npad	 1
$LN3@Adopt:

; 191  : 
; 192  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 193  : 			_Myproxy = _Parent_proxy;
; 194  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 195  : 			}
; 196  : 		}

  000f5	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z$rtcFrameData
  00100	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00105	90		 npad	 1
  00106	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0010d	48 33 cd	 xor	 rcx, rbp
  00110	e8 00 00 00 00	 call	 __security_check_cookie
  00115	90		 npad	 1
  00116	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  0011d	5f		 pop	 rdi
  0011e	5d		 pop	 rbp
  0011f	c3		 ret	 0
?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??1_Iterator_base12@std@@QEAA@XZ
_TEXT	SEGMENT
_Lock$ = 4
$T4 = 232
__$ArrayPad$ = 248
this$ = 288
??1_Iterator_base12@std@@QEAA@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT

; 162  : 		{	// destroy the iterator

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  0002a	48 c7 85 e8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T4[rbp], -2
  00035	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003c	48 33 c5	 xor	 rax, rbp
  0003f	48 89 85 f8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 163  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 164  : 		_Lockit _Lock(_LOCK_DEBUG);

  00046	ba 03 00 00 00	 mov	 edx, 3
  0004b	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$[rbp]
  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
  00055	90		 npad	 1

; 165  : 		_Orphan_me();

  00056	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005d	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QEAAXXZ ; std::_Iterator_base12::_Orphan_me
  00062	90		 npad	 1

; 166  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 167  : 		}

  00063	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$[rbp]
  00067	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0006d	90		 npad	 1
  0006e	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??1_Iterator_base12@std@@QEAA@XZ$rtcFrameData
  00079	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0007e	90		 npad	 1
  0007f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00086	48 33 cd	 xor	 rcx, rbp
  00089	e8 00 00 00 00	 call	 __security_check_cookie
  0008e	90		 npad	 1
  0008f	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
??1_Iterator_base12@std@@QEAA@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0_Iterator_base12@std@@QEAA@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT

; 135  : 		{	// construct orphaned iterator

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 134  : 		: _Myproxy(0), _Mynextiter(0)

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 136  : 		}

  00045	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00053	5f		 pop	 rdi
  00054	5d		 pop	 rbp
  00055	c3		 ret	 0
??0_Iterator_base12@std@@QEAA@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Swap_all@_Container_base12@std@@QEAAXAEAU12@@Z
_TEXT	SEGMENT
_Lock$ = 4
_Temp$ = 40
$T4 = 264
__$ArrayPad$ = 280
this$ = 320
_Right$ = 328
?_Swap_all@_Container_base12@std@@QEAAXAEAU12@@Z PROC	; std::_Container_base12::_Swap_all, COMDAT

; 254  : 	{	// swap all iterators

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]
  0002f	48 c7 85 08 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T4[rbp], -2
  0003a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00041	48 33 c5	 xor	 rax, rbp
  00044	48 89 85 18 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 255  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 256  : 	_Lockit _Lock(_LOCK_DEBUG);

  0004b	ba 03 00 00 00	 mov	 edx, 3
  00050	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$[rbp]
  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
  0005a	90		 npad	 1

; 257  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 258  : 
; 259  : 	_Container_proxy *_Temp = _Myproxy;

  0005b	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00062	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00065	48 89 45 28	 mov	 QWORD PTR _Temp$[rbp], rax

; 260  : 	_Myproxy = _Right._Myproxy;

  00069	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00070	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00077	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0007a	48 89 08	 mov	 QWORD PTR [rax], rcx

; 261  : 	_Right._Myproxy = _Temp;

  0007d	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  00084	48 8b 4d 28	 mov	 rcx, QWORD PTR _Temp$[rbp]
  00088	48 89 08	 mov	 QWORD PTR [rax], rcx

; 262  : 
; 263  : 	if (_Myproxy != 0)

  0008b	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00092	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00096	74 14		 je	 SHORT $LN2@Swap_all

; 264  : 		_Myproxy->_Mycont = (_Container_base12 *)this;

  00098	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a2	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN2@Swap_all:

; 265  : 	if (_Right._Myproxy != 0)

  000ac	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  000b3	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000b7	74 14		 je	 SHORT $LN3@Swap_all

; 266  : 		_Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;

  000b9	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  000c0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c3	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  000ca	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN3@Swap_all:

; 267  : 	}

  000cd	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$[rbp]
  000d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  000d7	90		 npad	 1
  000d8	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Swap_all@_Container_base12@std@@QEAAXAEAU12@@Z$rtcFrameData
  000e3	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000e8	90		 npad	 1
  000e9	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000f0	48 33 cd	 xor	 rcx, rbp
  000f3	e8 00 00 00 00	 call	 __security_check_cookie
  000f8	90		 npad	 1
  000f9	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  00100	5f		 pop	 rdi
  00101	5d		 pop	 rbp
  00102	c3		 ret	 0
?_Swap_all@_Container_base12@std@@QEAAXAEAU12@@Z ENDP	; std::_Container_base12::_Swap_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Orphan_all@_Container_base12@std@@QEAAXXZ
_TEXT	SEGMENT
_Lock$4 = 4
_Pnext$5 = 40
$T6 = 264
__$ArrayPad$ = 280
this$ = 320
?_Orphan_all@_Container_base12@std@@QEAAXXZ PROC	; std::_Container_base12::_Orphan_all, COMDAT

; 239  : 	{	// orphan all iterators

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]
  0002a	48 c7 85 08 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T6[rbp], -2
  00035	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003c	48 33 c5	 xor	 rax, rbp
  0003f	48 89 85 18 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 240  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 241  : 	if (_Myproxy != 0)

  00046	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004d	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00051	74 6d		 je	 SHORT $LN5@Orphan_all

; 242  : 		{	// proxy allocated, drain it
; 243  : 		_Lockit _Lock(_LOCK_DEBUG);

  00053	ba 03 00 00 00	 mov	 edx, 3
  00058	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$4[rbp]
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
  00062	90		 npad	 1

; 244  : 
; 245  : 		for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

  00063	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0006d	48 83 c0 08	 add	 rax, 8
  00071	48 89 45 28	 mov	 QWORD PTR _Pnext$5[rbp], rax
  00075	eb 12		 jmp	 SHORT $LN4@Orphan_all
$LN2@Orphan_all:

; 246  : 			*_Pnext != 0; *_Pnext = (*_Pnext)->_Mynextiter)

  00077	48 8b 45 28	 mov	 rax, QWORD PTR _Pnext$5[rbp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 4d 28	 mov	 rcx, QWORD PTR _Pnext$5[rbp]
  00082	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00086	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN4@Orphan_all:
  00089	48 8b 45 28	 mov	 rax, QWORD PTR _Pnext$5[rbp]
  0008d	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00091	74 10		 je	 SHORT $LN3@Orphan_all

; 247  : 			(*_Pnext)->_Myproxy = 0;

  00093	48 8b 45 28	 mov	 rax, QWORD PTR _Pnext$5[rbp]
  00097	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009a	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  000a1	eb d4		 jmp	 SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 248  : 		_Myproxy->_Myfirstiter = 0;

  000a3	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000aa	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ad	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 249  : 		}

  000b5	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$4[rbp]
  000b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  000bf	90		 npad	 1
$LN5@Orphan_all:

; 250  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 251  : 	}

  000c0	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Orphan_all@_Container_base12@std@@QEAAXXZ$rtcFrameData
  000cb	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000d0	90		 npad	 1
  000d1	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000d8	48 33 cd	 xor	 rcx, rbp
  000db	e8 00 00 00 00	 call	 __security_check_cookie
  000e0	90		 npad	 1
  000e1	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000e8	5f		 pop	 rdi
  000e9	5d		 pop	 rbp
  000ea	c3		 ret	 0
?_Orphan_all@_Container_base12@std@@QEAAXXZ ENDP	; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??1_Container_base12@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1_Container_base12@std@@QEAA@XZ PROC			; std::_Container_base12::~_Container_base12, COMDAT

; 115  : 		{	// destroy the container

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 116  : 		_Orphan_all();

  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 117  : 		}

  00036	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003d	5f		 pop	 rdi
  0003e	5d		 pop	 rbp
  0003f	c3		 ret	 0
??1_Container_base12@std@@QEAA@XZ ENDP			; std::_Container_base12::~_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??0_Container_base12@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0_Container_base12@std@@QEAA@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT

; 101  : 		{	// construct childless container

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 100  : 		: _Myproxy(0)

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 102  : 		}

  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00044	5f		 pop	 rdi
  00045	5d		 pop	 rbp
  00046	c3		 ret	 0
??0_Container_base12@std@@QEAA@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??0_Container_proxy@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0_Container_proxy@std@@QEAA@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT

; 89   : 		{	// construct from pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 88   : 		: _Mycont(0), _Myfirstiter(0)

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 90   : 		}

  00045	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00053	5f		 pop	 rdi
  00054	5d		 pop	 rbp
  00055	c3		 ret	 0
??0_Container_proxy@std@@QEAA@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 551  : 		{	// return end-of-file metacharacter

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000a	48 8b ec	 mov	 rbp, rsp
  0000d	48 8b fc	 mov	 rdi, rsp
  00010	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd

; 552  : 		return (EOF);

  0001c	b8 ff ff ff ff	 mov	 eax, -1

; 553  : 		}

  00021	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00028	5f		 pop	 rdi
  00029	5d		 pop	 rbp
  0002a	c3		 ret	 0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ?not_eof@?$char_traits@D@std@@SAHAEBH@Z
_TEXT	SEGMENT
tv69 = 192
tv68 = 196
_Meta$ = 240
?not_eof@?$char_traits@D@std@@SAHAEBH@Z PROC		; std::char_traits<char>::not_eof, COMDAT

; 546  : 		{	// return anything but EOF

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]

; 547  : 		return (_Meta != eof() ? _Meta : !eof());

  0002a	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0002f	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR _Meta$[rbp]
  00036	39 01		 cmp	 DWORD PTR [rcx], eax
  00038	74 11		 je	 SHORT $LN5@not_eof
  0003a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Meta$[rbp]
  00041	8b 00		 mov	 eax, DWORD PTR [rax]
  00043	89 85 c0 00 00
	00		 mov	 DWORD PTR tv69[rbp], eax
  00049	eb 2b		 jmp	 SHORT $LN6@not_eof
$LN5@not_eof:
  0004b	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00050	85 c0		 test	 eax, eax
  00052	75 0c		 jne	 SHORT $LN3@not_eof
  00054	c7 85 c4 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv68[rbp], 1
  0005e	eb 0a		 jmp	 SHORT $LN4@not_eof
$LN3@not_eof:
  00060	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv68[rbp], 0
$LN4@not_eof:
  0006a	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR tv68[rbp]
  00070	89 85 c0 00 00
	00		 mov	 DWORD PTR tv69[rbp], eax
$LN6@not_eof:
  00076	8b 85 c0 00 00
	00		 mov	 eax, DWORD PTR tv69[rbp]

; 548  : 		}

  0007c	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00083	5f		 pop	 rdi
  00084	5d		 pop	 rbp
  00085	c3		 ret	 0
?not_eof@?$char_traits@D@std@@SAHAEBH@Z ENDP		; std::char_traits<char>::not_eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z
_TEXT	SEGMENT
tv65 = 192
_Left$ = 240
_Right$ = 248
?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 541  : 		{	// test for metacharacter equality

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+248]

; 542  : 		return (_Left == _Right);

  0002d	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  00034	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  0003b	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0003d	39 08		 cmp	 DWORD PTR [rax], ecx
  0003f	75 0c		 jne	 SHORT $LN3@eq_int_typ
  00041	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv65[rbp], 1
  0004b	eb 0a		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  0004d	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv65[rbp], 0
$LN4@eq_int_typ:
  00057	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv65[rbp]

; 543  : 		}

  0005e	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00065	5f		 pop	 rdi
  00066	5d		 pop	 rbp
  00067	c3		 ret	 0
?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ?to_int_type@?$char_traits@D@std@@SAHAEBD@Z
_TEXT	SEGMENT
_Ch$ = 224
?to_int_type@?$char_traits@D@std@@SAHAEBD@Z PROC	; std::char_traits<char>::to_int_type, COMDAT

; 536  : 		{	// convert character to metacharacter

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 537  : 		return ((unsigned char)_Ch);

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ch$[rbp]
  0002f	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 538  : 		}

  00032	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00039	5f		 pop	 rdi
  0003a	5d		 pop	 rbp
  0003b	c3		 ret	 0
?to_int_type@?$char_traits@D@std@@SAHAEBD@Z ENDP	; std::char_traits<char>::to_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ?to_char_type@?$char_traits@D@std@@SADAEBH@Z
_TEXT	SEGMENT
_Meta$ = 224
?to_char_type@?$char_traits@D@std@@SADAEBH@Z PROC	; std::char_traits<char>::to_char_type, COMDAT

; 531  : 		{	// convert metacharacter to character

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 532  : 		return ((_Elem)_Meta);

  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Meta$[rbp]
  0002f	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 533  : 		}

  00032	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00039	5f		 pop	 rdi
  0003a	5d		 pop	 rbp
  0003b	c3		 ret	 0
?to_char_type@?$char_traits@D@std@@SADAEBH@Z ENDP	; std::char_traits<char>::to_char_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ?eq@?$char_traits@D@std@@SA_NAEBD0@Z
_TEXT	SEGMENT
tv67 = 192
_Left$ = 240
_Right$ = 248
?eq@?$char_traits@D@std@@SA_NAEBD0@Z PROC		; std::char_traits<char>::eq, COMDAT

; 521  : 		{	// test for element equality

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+248]

; 522  : 		return (_Left == _Right);

  0002d	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  00034	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  0003e	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  00041	3b c1		 cmp	 eax, ecx
  00043	75 0c		 jne	 SHORT $LN3@eq
  00045	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv67[rbp], 1
  0004f	eb 0a		 jmp	 SHORT $LN4@eq
$LN3@eq:
  00051	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv67[rbp], 0
$LN4@eq:
  0005b	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv67[rbp]

; 523  : 		}

  00062	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00069	5f		 pop	 rdi
  0006a	5d		 pop	 rbp
  0006b	c3		 ret	 0
?eq@?$char_traits@D@std@@SA_NAEBD0@Z ENDP		; std::char_traits<char>::eq
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAEADAEBD@Z
_TEXT	SEGMENT
_Left$ = 224
_Right$ = 232
?assign@?$char_traits@D@std@@SAXAEADAEBD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 516  : 		{	// assign an element

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 517  : 		_Left = _Right;

  0002d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  00034	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  0003b	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0003e	88 08		 mov	 BYTE PTR [rax], cl

; 518  : 		}

  00040	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00047	5f		 pop	 rdi
  00048	5d		 pop	 rbp
  00049	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAEADAEBD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAPEADQEAD_KD@Z
_TEXT	SEGMENT
_First$ = 224
_Count$ = 232
_Ch$ = 240
?assign@?$char_traits@D@std@@SAPEADQEAD_KD@Z PROC	; std::char_traits<char>::assign, COMDAT

; 511  : 		{	// assign _Count * _Ch to [_First, ...)

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 512  : 		return ((_Elem *)_CSTD memset(_First, _Ch, _Count));

  00034	0f be 85 f0 00
	00 00		 movsx	 eax, BYTE PTR _Ch$[rbp]
  0003b	4c 8b 85 e8 00
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00042	8b d0		 mov	 edx, eax
  00044	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _First$[rbp]
  0004b	e8 00 00 00 00	 call	 memset

; 513  : 		}

  00050	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00057	5f		 pop	 rdi
  00058	5d		 pop	 rbp
  00059	c3		 ret	 0
?assign@?$char_traits@D@std@@SAPEADQEAD_KD@Z ENDP	; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z
_TEXT	SEGMENT
_First1$ = 224
_First2$ = 232
_Count$ = 240
?move@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z PROC	; std::char_traits<char>::move, COMDAT

; 505  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 506  : 		return ((_Elem *)_CSTD memmove(_First1, _First2, _Count));

  00034	4c 8b 85 f0 00
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  0003b	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _First2$[rbp]
  00042	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _First1$[rbp]
  00049	e8 00 00 00 00	 call	 memmove

; 507  : 		}

  0004e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00055	5f		 pop	 rdi
  00056	5d		 pop	 rbp
  00057	c3		 ret	 0
?move@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z ENDP	; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ?find@?$char_traits@D@std@@SAPEBDQEBD_KAEBD@Z
_TEXT	SEGMENT
_First$ = 224
_Count$ = 232
_Ch$ = 240
?find@?$char_traits@D@std@@SAPEBDQEBD_KAEBD@Z PROC	; std::char_traits<char>::find, COMDAT

; 499  : 		{	// look for _Ch in [_First, _First + _Count)

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 500  : 		return ((const _Elem *)_CSTD memchr(_First, _Ch, _Count));

  00034	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Ch$[rbp]
  0003b	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0003e	4c 8b 85 e8 00
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00045	8b d0		 mov	 edx, eax
  00047	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _First$[rbp]
  0004e	e8 00 00 00 00	 call	 memchr

; 501  : 		}

  00053	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005a	5f		 pop	 rdi
  0005b	5d		 pop	 rbp
  0005c	c3		 ret	 0
?find@?$char_traits@D@std@@SAPEBDQEBD_KAEBD@Z ENDP	; std::char_traits<char>::find
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z
_TEXT	SEGMENT
_First1$ = 224
_First2$ = 232
_Count$ = 240
?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z PROC	; std::char_traits<char>::copy, COMDAT

; 485  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 486  : 		return ((_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  00034	4c 8b 85 f0 00
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  0003b	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _First2$[rbp]
  00042	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _First1$[rbp]
  00049	e8 00 00 00 00	 call	 memcpy

; 487  : 		}

  0004e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00055	5f		 pop	 rdi
  00056	5d		 pop	 rbp
  00057	c3		 ret	 0
?copy@?$char_traits@D@std@@SAPEADQEADQEBD_K@Z ENDP	; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SA_KQEBD@Z
_TEXT	SEGMENT
_First$ = 224
?length@?$char_traits@D@std@@SA_KQEBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 479  : 		{	// find length of null-terminated string

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 480  : 		return (_CSTD strlen(_First));

  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _First$[rbp]
  00031	e8 00 00 00 00	 call	 strlen

; 481  : 		}

  00036	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003d	5f		 pop	 rdi
  0003e	5d		 pop	 rbp
  0003f	c3		 ret	 0
?length@?$char_traits@D@std@@SA_KQEBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ?compare@?$char_traits@D@std@@SAHQEBD0_K@Z
_TEXT	SEGMENT
_First1$ = 224
_First2$ = 232
_Count$ = 240
?compare@?$char_traits@D@std@@SAHQEBD0_K@Z PROC		; std::char_traits<char>::compare, COMDAT

; 474  : 		{	// compare [_First1, _First1 + _Count) with [_First2, ...)

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 475  : 		return (_CSTD memcmp(_First1, _First2, _Count));

  00034	4c 8b 85 f0 00
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  0003b	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _First2$[rbp]
  00042	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _First1$[rbp]
  00049	e8 00 00 00 00	 call	 memcmp

; 476  : 		}

  0004e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00055	5f		 pop	 rdi
  00056	5d		 pop	 rbp
  00057	c3		 ret	 0
?compare@?$char_traits@D@std@@SAHQEBD0_K@Z ENDP		; std::char_traits<char>::compare
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\vcruntime_new.h
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
_Size$ = 224
_Where$ = 232
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT

; 91   :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]

; 92   :         (void)_Size;
; 93   :         return _Where;

  0002d	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Where$[rbp]

; 94   :     }

  00034	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003b	5f		 pop	 rdi
  0003c	5d		 pop	 rbp
  0003d	c3		 ret	 0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\limits
;	COMDAT ?max@?$numeric_limits@_J@std@@SA_JXZ
_TEXT	SEGMENT
?max@?$numeric_limits@_J@std@@SA_JXZ PROC		; std::numeric_limits<__int64>::max, COMDAT

; 972  : 		{	// return maximum value

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000a	48 8b ec	 mov	 rbp, rsp
  0000d	48 8b fc	 mov	 rdi, rsp
  00010	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd

; 973  : 		return (LLONG_MAX);

  0001c	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH

; 974  : 		}

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
?max@?$numeric_limits@_J@std@@SA_JXZ ENDP		; std::numeric_limits<__int64>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0003a	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 11		 je	 SHORT $LN2@scalar
  00047	ba 18 00 00 00	 mov	 edx, 24
  0004c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
tv69 = 192
this$ = 240
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 88   :     {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+248]

; 89   :         return _Data._What ? _Data._What : "Unknown exception";

  00028	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00034	74 14		 je	 SHORT $LN3@what
  00036	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00041	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
  00048	eb 0e		 jmp	 SHORT $LN4@what
$LN3@what:
  0004a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception?$AA@
  00051	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
$LN4@what:
  00058	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv69[rbp]

; 90   :     }

  0005f	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 83   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00038	48 89 08	 mov	 QWORD PTR [rax], rcx

; 84   :         __std_exception_destroy(&_Data);

  0003b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00042	48 83 c0 08	 add	 rax, 8
  00046	48 8b c8	 mov	 rcx, rax
  00049	e8 00 00 00 00	 call	 __std_exception_destroy

; 85   :     }

  0004e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00055	5f		 pop	 rdi
  00056	5d		 pop	 rbp
  00057	c3		 ret	 0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
_Other$ = 232
??0exception@std@@QEAA@AEBV01@@Z PROC			; std::exception::exception, COMDAT

; 66   :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  0003d	48 89 08	 mov	 QWORD PTR [rax], rcx

; 65   :         : _Data()

  00040	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00047	48 83 c0 08	 add	 rax, 8
  0004b	48 8b f8	 mov	 rdi, rax
  0004e	33 c0		 xor	 eax, eax
  00050	b9 10 00 00 00	 mov	 ecx, 16
  00055	f3 aa		 rep stosb

; 67   :         __std_exception_copy(&_Other._Data, &_Data);

  00057	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005e	48 83 c0 08	 add	 rax, 8
  00062	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Other$[rbp]
  00069	48 83 c1 08	 add	 rcx, 8
  0006d	48 8b d0	 mov	 rdx, rax
  00070	e8 00 00 00 00	 call	 __std_exception_copy

; 68   :     }

  00075	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00083	5f		 pop	 rdi
  00084	5d		 pop	 rbp
  00085	c3		 ret	 0
??0exception@std@@QEAA@AEBV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBDH@Z
_TEXT	SEGMENT
this$ = 224
_Message$ = 232
__formal$ = 240
??0exception@std@@QEAA@QEBDH@Z PROC			; std::exception::exception, COMDAT

; 60   :     {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00018	48 8b ec	 mov	 rbp, rsp
  0001b	48 8b fc	 mov	 rdi, rsp
  0001e	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00032	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00040	48 89 08	 mov	 QWORD PTR [rax], rcx

; 59   :         : _Data()

  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 83 c0 08	 add	 rax, 8
  0004e	48 8b f8	 mov	 rdi, rax
  00051	33 c0		 xor	 eax, eax
  00053	b9 10 00 00 00	 mov	 ecx, 16
  00058	f3 aa		 rep stosb

; 61   :         _Data._What = _Message;

  0005a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00061	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Message$[rbp]
  00068	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 62   :     }

  0006c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00073	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0007a	5f		 pop	 rdi
  0007b	5d		 pop	 rbp
  0007c	c3		 ret	 0
??0exception@std@@QEAA@QEBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\corecrt_memcpy_s.h
;	COMDAT memcpy_s
_TEXT	SEGMENT
_Expr_val$1 = 4
_Expr_val$2 = 36
_Expr_val$3 = 68
tv79 = 276
tv75 = 276
tv66 = 276
_Destination$ = 320
_DestinationSize$ = 328
_Source$ = 336
_SourceSize$ = 344
memcpy_s PROC						; COMDAT

; 41   :     {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]

; 42   :         if (_SourceSize == 0)

  00039	48 83 bd 58 01
	00 00 00	 cmp	 QWORD PTR _SourceSize$[rbp], 0
  00041	75 07		 jne	 SHORT $LN2@memcpy_s

; 43   :         {
; 44   :             return 0;

  00043	33 c0		 xor	 eax, eax
  00045	e9 37 01 00 00	 jmp	 $LN1@memcpy_s
$LN2@memcpy_s:

; 45   :         }
; 46   : 
; 47   :         _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Destination != NULL, EINVAL);

  0004a	48 83 bd 40 01
	00 00 00	 cmp	 QWORD PTR _Destination$[rbp], 0
  00052	74 0c		 je	 SHORT $LN9@memcpy_s
  00054	c7 85 14 01 00
	00 01 00 00 00	 mov	 DWORD PTR tv66[rbp], 1
  0005e	eb 0a		 jmp	 SHORT $LN10@memcpy_s
$LN9@memcpy_s:
  00060	c7 85 14 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv66[rbp], 0
$LN10@memcpy_s:
  0006a	8b 85 14 01 00
	00		 mov	 eax, DWORD PTR tv66[rbp]
  00070	89 45 04	 mov	 DWORD PTR _Expr_val$1[rbp], eax
  00073	83 7d 04 00	 cmp	 DWORD PTR _Expr_val$1[rbp], 0
  00077	75 1c		 jne	 SHORT $LN3@memcpy_s
  00079	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0007f	c7 00 16 00 00
	00		 mov	 DWORD PTR [rax], 22
  00085	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter_noinfo
  0008b	b8 16 00 00 00	 mov	 eax, 22
  00090	e9 ec 00 00 00	 jmp	 $LN1@memcpy_s
$LN3@memcpy_s:

; 48   :         if (_Source == NULL || _DestinationSize < _SourceSize)

  00095	48 83 bd 50 01
	00 00 00	 cmp	 QWORD PTR _Source$[rbp], 0
  0009d	74 14		 je	 SHORT $LN5@memcpy_s
  0009f	48 8b 85 58 01
	00 00		 mov	 rax, QWORD PTR _SourceSize$[rbp]
  000a6	48 39 85 48 01
	00 00		 cmp	 QWORD PTR _DestinationSize$[rbp], rax
  000ad	0f 83 b2 00 00
	00		 jae	 $LN4@memcpy_s
$LN5@memcpy_s:

; 49   :         {
; 50   :             memset(_Destination, 0, _DestinationSize);

  000b3	4c 8b 85 48 01
	00 00		 mov	 r8, QWORD PTR _DestinationSize$[rbp]
  000ba	33 d2		 xor	 edx, edx
  000bc	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Destination$[rbp]
  000c3	e8 00 00 00 00	 call	 memset

; 51   : 
; 52   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Source != NULL,                 EINVAL);

  000c8	48 83 bd 50 01
	00 00 00	 cmp	 QWORD PTR _Source$[rbp], 0
  000d0	74 0c		 je	 SHORT $LN11@memcpy_s
  000d2	c7 85 14 01 00
	00 01 00 00 00	 mov	 DWORD PTR tv75[rbp], 1
  000dc	eb 0a		 jmp	 SHORT $LN12@memcpy_s
$LN11@memcpy_s:
  000de	c7 85 14 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv75[rbp], 0
$LN12@memcpy_s:
  000e8	8b 85 14 01 00
	00		 mov	 eax, DWORD PTR tv75[rbp]
  000ee	89 45 24	 mov	 DWORD PTR _Expr_val$2[rbp], eax
  000f1	83 7d 24 00	 cmp	 DWORD PTR _Expr_val$2[rbp], 0
  000f5	75 19		 jne	 SHORT $LN6@memcpy_s
  000f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000fd	c7 00 16 00 00
	00		 mov	 DWORD PTR [rax], 22
  00103	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter_noinfo
  00109	b8 16 00 00 00	 mov	 eax, 22
  0010e	eb 71		 jmp	 SHORT $LN1@memcpy_s
$LN6@memcpy_s:

; 53   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_DestinationSize >= _SourceSize, ERANGE);

  00110	48 8b 85 58 01
	00 00		 mov	 rax, QWORD PTR _SourceSize$[rbp]
  00117	48 39 85 48 01
	00 00		 cmp	 QWORD PTR _DestinationSize$[rbp], rax
  0011e	72 0c		 jb	 SHORT $LN13@memcpy_s
  00120	c7 85 14 01 00
	00 01 00 00 00	 mov	 DWORD PTR tv79[rbp], 1
  0012a	eb 0a		 jmp	 SHORT $LN14@memcpy_s
$LN13@memcpy_s:
  0012c	c7 85 14 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv79[rbp], 0
$LN14@memcpy_s:
  00136	8b 85 14 01 00
	00		 mov	 eax, DWORD PTR tv79[rbp]
  0013c	89 45 44	 mov	 DWORD PTR _Expr_val$3[rbp], eax
  0013f	83 7d 44 00	 cmp	 DWORD PTR _Expr_val$3[rbp], 0
  00143	75 19		 jne	 SHORT $LN7@memcpy_s
  00145	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0014b	c7 00 22 00 00
	00		 mov	 DWORD PTR [rax], 34	; 00000022H
  00151	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter_noinfo
  00157	b8 22 00 00 00	 mov	 eax, 34			; 00000022H
  0015c	eb 23		 jmp	 SHORT $LN1@memcpy_s
$LN7@memcpy_s:

; 54   : 
; 55   :             // Unreachable, but required to suppress /analyze warnings:
; 56   :             return EINVAL;

  0015e	b8 16 00 00 00	 mov	 eax, 22
  00163	eb 1c		 jmp	 SHORT $LN1@memcpy_s
$LN4@memcpy_s:

; 57   :         }
; 58   : 
; 59   :         memcpy(_Destination, _Source, _SourceSize);

  00165	4c 8b 85 58 01
	00 00		 mov	 r8, QWORD PTR _SourceSize$[rbp]
  0016c	48 8b 95 50 01
	00 00		 mov	 rdx, QWORD PTR _Source$[rbp]
  00173	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Destination$[rbp]
  0017a	e8 00 00 00 00	 call	 memcpy

; 60   :         return 0;

  0017f	33 c0		 xor	 eax, eax
$LN1@memcpy_s:

; 61   :     }

  00181	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  00188	5f		 pop	 rdi
  00189	5d		 pop	 rbp
  0018a	c3		 ret	 0
memcpy_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\time.h
;	COMDAT time
_TEXT	SEGMENT
_Time$ = 224
time	PROC						; COMDAT

; 534  :         {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]

; 535  :             return _time64(_Time);

  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Time$[rbp]
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__time64

; 536  :         }

  00037	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003e	5f		 pop	 rdi
  0003f	5d		 pop	 rbp
  00040	c3		 ret	 0
time	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  0002d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00034	5f		 pop	 rdi
  00035	5d		 pop	 rbp
  00036	c3		 ret	 0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 224
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

; 951  : */

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b ec	 mov	 rbp, rsp
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR [rsp+232]
  00028	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002f	5f		 pop	 rdi
  00030	5d		 pop	 rbp
  00031	c3		 ret	 0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
