; Listing generated by Microsoft (R) Optimizing Compiler Version 19.11.25547.0 

	TITLE	F:\Users\Krzysztof\Documents\Szko³a\2017-2018\Informatyka\Labolatorium\Ruletka\Ruletka\main.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?iloœæ_minimalna_obrotów_ruletki@@3FA		; iloœæ_minimalna_obrotów_ruletki
PUBLIC	?iloœæ_max_dodatkowych_obrotów_ruletki@@3FA	; iloœæ_max_dodatkowych_obrotów_ruletki
PUBLIC	?czas_przeskoku_kulki_szybki@@3FA		; czas_przeskoku_kulki_szybki
PUBLIC	?czas_przeskoku_kulki_wolny@@3FA		; czas_przeskoku_kulki_wolny
PUBLIC	?czas_przerwy_dzwiêku@@3FA			; czas_przerwy_dzwiêku
PUBLIC	?styl_liczenia_wygranej@@3FA			; styl_liczenia_wygranej
PUBLIC	?kwota_pocz¹tkowa@@3HA				; kwota_pocz¹tkowa
PUBLIC	?stan_dŸwiêków@@3FA				; stan_dŸwiêków
PUBLIC	?czy_kontynuowaæ_grê@@3FA			; czy_kontynuowaæ_grê
PUBLIC	?g³os_odczytu_numeru@@3FA			; g³os_odczytu_numeru
PUBLIC	?g³os_szybkoœæ_odczytu_numeru@@3FA		; g³os_szybkoœæ_odczytu_numeru
PUBLIC	?Czas@@3U_SYSTEMTIME@@A				; Czas
PUBLIC	?G³osyKompletne@@3_NA				; G³osyKompletne
PUBLIC	?EfektyKompletne@@3_NA				; EfektyKompletne
_BSS	SEGMENT
?Czas@@3U_SYSTEMTIME@@A DB 010H DUP (?)			; Czas
_BSS	ENDS
_DATA	SEGMENT
?iloœæ_minimalna_obrotów_ruletki@@3FA DW 02H		; iloœæ_minimalna_obrotów_ruletki
?G³osyKompletne@@3_NA DB 01H				; G³osyKompletne
?EfektyKompletne@@3_NA DB 01H				; EfektyKompletne
?iloœæ_max_dodatkowych_obrotów_ruletki@@3FA DW 03H	; iloœæ_max_dodatkowych_obrotów_ruletki
	ORG $+2
?czas_przeskoku_kulki_szybki@@3FA DW 032H		; czas_przeskoku_kulki_szybki
	ORG $+2
?czas_przeskoku_kulki_wolny@@3FA DW 04bH		; czas_przeskoku_kulki_wolny
	ORG $+2
?czas_przerwy_dzwiêku@@3FA DW 01f4H			; czas_przerwy_dzwiêku
	ORG $+2
?styl_liczenia_wygranej@@3FA DW 01H			; styl_liczenia_wygranej
	ORG $+2
?kwota_pocz¹tkowa@@3HA DD 03e8H				; kwota_pocz¹tkowa
?stan_dŸwiêków@@3FA DW 01H				; stan_dŸwiêków
	ORG $+2
?czy_kontynuowaæ_grê@@3FA DW 01H			; czy_kontynuowaæ_grê
	ORG $+2
?g³os_odczytu_numeru@@3FA DW 01H			; g³os_odczytu_numeru
	ORG $+2
?g³os_szybkoœæ_odczytu_numeru@@3FA DW 04H		; g³os_szybkoœæ_odczytu_numeru
_DATA	ENDS
CONST	SEGMENT
?Ruletka_ko³o@@3QBHB DD 00H				; Ruletka_ko³o
	DD	020H
	DD	0fH
	DD	013H
	DD	04H
	DD	015H
	DD	02H
	DD	019H
	DD	011H
	DD	022H
	DD	06H
	DD	01bH
	DD	0dH
	DD	024H
	DD	0bH
	DD	01eH
	DD	08H
	DD	017H
	DD	0aH
	DD	05H
	DD	018H
	DD	010H
	DD	021H
	DD	01H
	DD	014H
	DD	0eH
	DD	01fH
	DD	09H
	DD	016H
	DD	012H
	DD	01dH
	DD	07H
	DD	01cH
	DD	0cH
	DD	023H
	DD	03H
	DD	01aH
?Ruletka_plansza_kolor@@3QBDB DB 067H			; Ruletka_plansza_kolor
	DB	072H
	DB	062H
	DB	072H
	DB	062H
	DB	072H
	DB	062H
	DB	072H
	DB	062H
	DB	072H
	DB	062H
	DB	062H
	DB	072H
	DB	062H
	DB	072H
	DB	062H
	DB	072H
	DB	062H
	DB	072H
	DB	072H
	DB	062H
	DB	072H
	DB	062H
	DB	072H
	DB	062H
	DB	072H
	DB	062H
	DB	072H
	DB	062H
	DB	062H
	DB	072H
	DB	062H
	DB	072H
	DB	062H
	DB	072H
	DB	062H
	DB	072H
	ORG $+7
?Ruletka_plansza_kolor_col@@3QBHB DD 02H		; Ruletka_plansza_kolor_col
	DD	04H
	DD	08H
	DD	04H
	DD	08H
	DD	04H
	DD	08H
	DD	04H
	DD	08H
	DD	04H
	DD	08H
	DD	08H
	DD	04H
	DD	08H
	DD	04H
	DD	08H
	DD	04H
	DD	08H
	DD	04H
	DD	04H
	DD	08H
	DD	04H
	DD	08H
	DD	04H
	DD	08H
	DD	04H
	DD	08H
	DD	04H
	DD	08H
	DD	08H
	DD	04H
	DD	08H
	DD	04H
	DD	08H
	DD	04H
	DD	08H
	DD	04H
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0exception@std@@QAE@QBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	?compare@?$char_traits@D@std@@SAHQBD0I@Z	; std::char_traits<char>::compare
PUBLIC	?length@?$char_traits@D@std@@SAIQBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADQADQBDI@Z	; std::char_traits<char>::copy
PUBLIC	?find@?$char_traits@D@std@@SAPBDQBDIABD@Z	; std::char_traits<char>::find
PUBLIC	?move@?$char_traits@D@std@@SAPADQADQBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAPADQADID@Z	; std::char_traits<char>::assign
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	?eq@?$char_traits@D@std@@SA_NABD0@Z		; std::char_traits<char>::eq
PUBLIC	?to_char_type@?$char_traits@D@std@@SADABH@Z	; std::char_traits<char>::to_char_type
PUBLIC	?to_int_type@?$char_traits@D@std@@SAHABD@Z	; std::char_traits<char>::to_int_type
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
PUBLIC	?not_eof@?$char_traits@D@std@@SAHABH@Z		; std::char_traits<char>::not_eof
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	??1_Container_base12@std@@QAE@XZ		; std::_Container_base12::~_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z	; std::_Container_base12::_Swap_all
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	?_Orphan_me@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Orphan_me
PUBLIC	?_Allocate@std@@YAPAXII_N@Z			; std::_Allocate
PUBLIC	?_Deallocate@std@@YAXPAXII@Z			; std::_Deallocate
PUBLIC	??$_Convert_size@I@std@@YAII@Z			; std::_Convert_size<unsigned int>
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXQADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
PUBLIC	?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
PUBLIC	?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEIII@Z ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
PUBLIC	??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Copy_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXABV?$allocator@D@2@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Copy_alloc
PUBLIC	?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV?$allocator@D@2@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Move_alloc
PUBLIC	?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
PUBLIC	?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
PUBLIC	?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all
PUBLIC	?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Swap_all
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	?_Assign_rv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents
PUBLIC	?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal
PUBLIC	?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear
PUBLIC	?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
PUBLIC	?_Unchecked_begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Unchecked_begin
PUBLIC	?_Unchecked_end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Unchecked_end
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
PUBLIC	?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
PUBLIC	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
PUBLIC	?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Become_small@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Become_small
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	??0bad_cast@std@@QAE@XZ				; std::bad_cast::bad_cast
PUBLIC	??1bad_cast@std@@UAE@XZ				; std::bad_cast::~bad_cast
PUBLIC	??0bad_cast@std@@QAE@ABV01@@Z			; std::bad_cast::bad_cast
PUBLIC	??_Gbad_cast@std@@UAEPAXI@Z			; std::bad_cast::`scalar deleting destructor'
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
PUBLIC	?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z	; std::locale::_Getfacet
PUBLIC	??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
PUBLIC	??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z		; std::_Fgetc<char>
PUBLIC	??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z		; std::_Fputc<char>
PUBLIC	??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z		; std::_Ungetc<char>
PUBLIC	??0random_device@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::random_device::random_device
PUBLIC	?min@random_device@std@@SAIXZ			; std::random_device::min
PUBLIC	?max@random_device@std@@SAIXZ			; std::random_device::max
PUBLIC	?entropy@random_device@std@@QAENXZ		; std::random_device::entropy
PUBLIC	??Rrandom_device@std@@QAEIXZ			; std::random_device::operator()
PUBLIC	?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; Obstaw
PUBLIC	?Wczytaj_Kwotê_Zak³adu@@YAXAAHABH@Z		; Wczytaj_Kwotê_Zak³adu
PUBLIC	?Zakrêæ_Ruletk¹@@YAHXZ				; Zakrêæ_Ruletk¹
PUBLIC	?SprawdŸ_Zak³ad@@YAHABHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; SprawdŸ_Zak³ad
PUBLIC	?Czy_Kontynuowaæ@@YA_NABH@Z			; Czy_Kontynuowaæ
PUBLIC	?Wylosuj@@YAHABH0@Z				; Wylosuj
PUBLIC	?Odczytaj_liczbê@@YAXABHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Odczytaj_liczbê
PUBLIC	?Wczytaj_z_pliku@@YAXAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AADAAH33AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; Wczytaj_z_pliku
PUBLIC	?SprawdŸ_Pliki@@YAXXZ				; SprawdŸ_Pliki
PUBLIC	?SprawdŸ_ustawienia@@YAXXZ			; SprawdŸ_ustawienia
PUBLIC	?Og³oœ_wynik@@YAXABH0AAHAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@@Z ; Og³oœ_wynik
PUBLIC	?Koniec_gry@@YAXAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AAH@Z ; Koniec_gry
PUBLIC	?Pêtla_g³ówna@@YAXAAH00AAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AADAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; Pêtla_g³ówna
PUBLIC	?Ustaw_ustawienia@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Ustaw_ustawienia
PUBLIC	?Change_Col@@YAXABH@Z				; Change_Col
PUBLIC	?Hide_Cursor@@YAXXZ				; Hide_Cursor
PUBLIC	?Show_Cursor@@YAXXZ				; Show_Cursor
PUBLIC	_main
PUBLIC	??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
PUBLIC	??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >
PUBLIC	?open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z ; std::basic_ofstream<char,std::char_traits<char> >::open
PUBLIC	??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
PUBLIC	??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
PUBLIC	?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
PUBLIC	?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
PUBLIC	?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Lock
PUBLIC	?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock
PUBLIC	?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::overflow
PUBLIC	?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail
PUBLIC	?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_filebuf<char,std::char_traits<char> >::underflow
PUBLIC	?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_filebuf<char,std::char_traits<char> >::uflow
PUBLIC	?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
PUBLIC	?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
PUBLIC	?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z ; std::basic_filebuf<char,std::char_traits<char> >::setbuf
PUBLIC	?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_filebuf<char,std::char_traits<char> >::sync
PUBLIC	?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::imbue
PUBLIC	?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init
PUBLIC	?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
PUBLIC	?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDU_Mbstatet@@@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
PUBLIC	?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
PUBLIC	?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back
PUBLIC	??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	?__autoclassinit2@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXI@Z ; std::basic_ofstream<char,std::char_traits<char> >::__autoclassinit2
PUBLIC	??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_ofstream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ofstream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_fstream<char,std::char_traits<char> >::basic_fstream<char,std::char_traits<char> >
PUBLIC	??1?$basic_fstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_fstream<char,std::char_traits<char> >::~basic_fstream<char,std::char_traits<char> >
PUBLIC	?open@?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z ; std::basic_fstream<char,std::char_traits<char> >::open
PUBLIC	?close@?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_fstream<char,std::char_traits<char> >::close
PUBLIC	?__autoclassinit2@?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXI@Z ; std::basic_fstream<char,std::char_traits<char> >::__autoclassinit2
PUBLIC	??_G?$basic_fstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_fstream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_fstream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
PUBLIC	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::~_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??0?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QAE@III@Z ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>
PUBLIC	?seed@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QAEXII@Z ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::seed
PUBLIC	??0?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@QAE@I@Z ; std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>
PUBLIC	??0?$uniform_int@H@std@@QAE@HH@Z		; std::uniform_int<int>::uniform_int<int>
PUBLIC	?_Adjust@?$uniform_int@H@std@@CAII@Z		; std::uniform_int<int>::_Adjust
PUBLIC	?_Adjust@?$uniform_int@H@std@@CAIIU?$integral_constant@_N$00@2@@Z ; std::uniform_int<int>::_Adjust
PUBLIC	??0param_type@?$uniform_int@H@std@@QAE@HH@Z	; std::uniform_int<int>::param_type::param_type
PUBLIC	?_Init@param_type@?$uniform_int@H@std@@QAEXHH@Z	; std::uniform_int<int>::param_type::_Init
PUBLIC	??0?$uniform_int_distribution@H@std@@QAE@HH@Z	; std::uniform_int_distribution<int>::uniform_int_distribution<int>
PUBLIC	??$?RVrandom_device@std@@@?$uniform_int@H@std@@QBEHAAVrandom_device@1@@Z ; std::uniform_int<int>::operator()<std::random_device>
PUBLIC	??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
PUBLIC	??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
PUBLIC	?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
PUBLIC	?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
PUBLIC	?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
PUBLIC	?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
PUBLIC	?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
PUBLIC	?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init
PUBLIC	?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
PUBLIC	??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	?__autoclassinit2@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::__autoclassinit2
PUBLIC	??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@$$QAV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
PUBLIC	??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >
PUBLIC	?open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z ; std::basic_ifstream<char,std::char_traits<char> >::open
PUBLIC	?__autoclassinit2@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXI@Z ; std::basic_ifstream<char,std::char_traits<char> >::__autoclassinit2
PUBLIC	??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_ifstream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ifstream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$size@D$0CA@@std@@YAIAAY0CA@$$CBD@Z		; std::size<char,32>
PUBLIC	??$size@D$0CG@@std@@YAIAAY0CG@$$CBD@Z		; std::size<char,38>
PUBLIC	??$size@D$0BM@@std@@YAIAAY0BM@$$CBD@Z		; std::size<char,28>
PUBLIC	??$size@D$0BL@@std@@YAIAAY0BL@$$CBD@Z		; std::size<char,27>
PUBLIC	??$size@D$0BH@@std@@YAIAAY0BH@$$CBD@Z		; std::size<char,23>
PUBLIC	??$size@D$0BB@@std@@YAIAAY0BB@$$CBD@Z		; std::size<char,17>
PUBLIC	??$size@D$0O@@std@@YAIAAY0O@$$CBD@Z		; std::size<char,14>
PUBLIC	??$size@D$0BE@@std@@YAIAAY0BE@$$CBD@Z		; std::size<char,20>
PUBLIC	??$size@D$0BN@@std@@YAIAAY0BN@$$CBD@Z		; std::size<char,29>
PUBLIC	??$_Traits_find@U?$char_traits@D@std@@@std@@YAIQBDII0I@Z ; std::_Traits_find<std::char_traits<char> >
PUBLIC	??$_Min_value@I@std@@YAABIABI0@Z		; std::_Min_value<unsigned int>
PUBLIC	??$_Unfancy@D@std@@YAPADPAD@Z			; std::_Unfancy<char>
PUBLIC	??$addressof@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const >
PUBLIC	??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z		; std::operator!=<char,char>
PUBLIC	??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
PUBLIC	??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::move<std::allocator<char> &>
PUBLIC	??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>
PUBLIC	??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z		; std::fpos<_Mbstatet>::fpos<_Mbstatet>
PUBLIC	??0?$fpos@U_Mbstatet@@@std@@QAE@U_Mbstatet@@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
PUBLIC	?state@?$fpos@U_Mbstatet@@@std@@QBE?AU_Mbstatet@@XZ ; std::fpos<_Mbstatet>::state
PUBLIC	?seekpos@?$fpos@U_Mbstatet@@@std@@QBE_JXZ	; std::fpos<_Mbstatet>::seekpos
PUBLIC	??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ		; std::fpos<_Mbstatet>::operator __int64
PUBLIC	??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
PUBLIC	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
PUBLIC	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::~_String_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	?pointer_to@?$pointer_traits@PAD@std@@SAPADAAD@Z ; std::pointer_traits<char *>::pointer_to
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z ; std::_Pocma<std::allocator<char> >
PUBLIC	??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z ; std::_Pocca<std::allocator<char> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
PUBLIC	??$addressof@PAD@std@@YAPAPADAAPAD@Z		; std::addressof<char *>
PUBLIC	??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$_Max_value@I@std@@YAABIABI0@Z		; std::_Max_value<unsigned int>
PUBLIC	??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??$_Refancy@PAD$0A@@std@@YAPADPAD@Z		; std::_Refancy<char *,0>
PUBLIC	??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$_Unfancy@$$CBD@std@@YAPBDPBD@Z		; std::_Unfancy<char const >
PUBLIC	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
PUBLIC	??$move@AAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::move<std::basic_istream<char,std::char_traits<char> > &>
PUBLIC	??$_Eval@Vrandom_device@std@@@?$uniform_int@H@std@@ABEHAAVrandom_device@1@HH@Z ; std::uniform_int<int>::_Eval<std::random_device>
PUBLIC	??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z ; std::_Insert_string<char,std::char_traits<char>,unsigned int>
PUBLIC	??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
PUBLIC	??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
PUBLIC	??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0U?$integral_constant@_N$00@0@@Z ; std::_Pocma<std::allocator<char> >
PUBLIC	??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@U?$integral_constant@_N$0A@@0@@Z ; std::_Pocca<std::allocator<char> >
PUBLIC	??$forward@ABQAD@std@@YAABQADABQAD@Z		; std::forward<char * const &>
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
PUBLIC	??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ; std::_Traits_equal<std::char_traits<char> >
PUBLIC	??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??0?$_Rng_from_urng@IVrandom_device@std@@@std@@QAE@AAVrandom_device@1@@Z ; std::_Rng_from_urng<unsigned int,std::random_device>::_Rng_from_urng<unsigned int,std::random_device>
PUBLIC	??R?$_Rng_from_urng@IVrandom_device@std@@@std@@QAEII@Z ; std::_Rng_from_urng<unsigned int,std::random_device>::operator()
PUBLIC	?_Get_all_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@QAEIXZ ; std::_Rng_from_urng<unsigned int,std::random_device>::_Get_all_bits
PUBLIC	?_Get_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@AAEIXZ ; std::_Rng_from_urng<unsigned int,std::random_device>::_Get_bits
PUBLIC	??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
PUBLIC	??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_ifstream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	??_E?$basic_fstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_fstream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception?$AA@	; `string'
PUBLIC	??_C@_1NE@JCGKDBDB@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_?$AAb?$AAa?$AAs?$AAe?$AA1?$AA2?$AA?3?$AA?3?$AA_?$AAO?$AAr?$AAp?$AAh?$AAa?$AAn?$AA_?$AAm@ ; `string'
PUBLIC	??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??_Allocate@std@@YAPAXII_N@Z@4JA	; `std::_Allocate'::`1'::__LINE__Var
PUBLIC	??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@ ; `string'
PUBLIC	??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@	; `string'
PUBLIC	??_C@_1NE@GPIBOEJC@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_09GLJCAGLP@_Ptr?5?$CB?$DN?50?$AA@		; `string'
PUBLIC	??_C@_1CC@GKJLLHIM@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?0??_Deallocate@std@@YAXPAXII@Z@4JA ; `std::_Deallocate'::`1'::__LINE__Var
PUBLIC	??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ ; `string'
PUBLIC	?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
PUBLIC	??_7bad_cast@std@@6B@				; std::bad_cast::`vftable'
PUBLIC	??_C@_08EPJLHIJG@bad?5cast?$AA@			; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_1NA@LJCFENMG@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
PUBLIC	??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`vftable'
PUBLIC	??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ofstream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ofstream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_7?$basic_fstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_fstream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_fstream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ ; std::basic_fstream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_8?$basic_fstream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ ; std::basic_fstream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_C@_06JGCGFIEG@polish?$AA@			; `string'
PUBLIC	??_C@_02PKFBJPLJ@10?$AA@			; `string'
PUBLIC	??_C@_01JBBJJEPG@p?$AA@				; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_01JEJKBAGA@g?$AA@				; `string'
PUBLIC	??_C@_02ICGBAFJO@k1?$AA@			; `string'
PUBLIC	??_C@_02JHFNFPIK@w1?$AA@			; `string'
PUBLIC	??_C@_0CE@DALNOHHC@ilo?$JM?f_minimalna_obrot?sw_ruletki?5@ ; `string'
PUBLIC	??_C@_0P@GMFAENOC@log_og?slny?4txt?$AA@		; `string'
PUBLIC	??_C@_05PDJBBECF@pause?$AA@			; `string'
PUBLIC	??_C@_0DM@FGCBIOFJ@Jak?$LJ?5opcje?5chcesz?5obstawic?5?$DP?5?$CIzg@ ; `string'
PUBLIC	??_C@_0N@KLINIBPG@p?5?9?5parzyste?$AA@		; `string'
PUBLIC	??_C@_0BA@GNAADEAG@n?5?9?5nieparzyste?$AA@	; `string'
PUBLIC	??_C@_0BC@GOMOHEMO@r?5?9?5czerwone?$CIred?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BC@LKBFHLDI@b?5?9?5czarne?$CIblack?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BB@FMNKHOJE@g?5?9?5g?srna?5po?$LDowa?$AA@ ; `string'
PUBLIC	??_C@_0BB@CHNPGJIO@d?5?9?5dolna?5po?$LDowa?$AA@	; `string'
PUBLIC	??_C@_0CN@EJBDEIIK@k1?0?5k2?0?5k3?5?9?5kolumna?51?0?5kolumna?5@ ; `string'
PUBLIC	??_C@_0CJ@KMEGGBFA@w1?0?5w2?0?5?4?4?4?0?5w12?5?9?5wiersz?5trzech@ ; `string'
PUBLIC	??_C@_0CP@FOKBNGLG@0?5?9?536?5?9?5pojedyncze?5pole?5o?5odpow@ ; `string'
PUBLIC	??_C@_01EFFIKLCJ@n?$AA@				; `string'
PUBLIC	??_C@_01OJONOECF@b?$AA@				; `string'
PUBLIC	??_C@_01LPLHEDKD@d?$AA@				; `string'
PUBLIC	??_C@_02KJEMFGFN@k2?$AA@			; `string'
PUBLIC	??_C@_02LAFHGHBM@k3?$AA@			; `string'
PUBLIC	??_C@_02LMHAAMEJ@w2?$AA@			; `string'
PUBLIC	??_C@_02KFGLDNAI@w3?$AA@			; `string'
PUBLIC	??_C@_02OKCKKLMP@w4?$AA@			; `string'
PUBLIC	??_C@_02PDDBJKIO@w5?$AA@			; `string'
PUBLIC	??_C@_02NIBMMJEN@w6?$AA@			; `string'
PUBLIC	??_C@_02MBAHPIAM@w7?$AA@			; `string'
PUBLIC	??_C@_02EGJPOEMD@w8?$AA@			; `string'
PUBLIC	??_C@_02FPIENFIC@w9?$AA@			; `string'
PUBLIC	??_C@_03NCLMABJC@w10?$AA@			; `string'
PUBLIC	??_C@_03MLKHDAND@w11?$AA@			; `string'
PUBLIC	??_C@_03OAIKGDBA@w12?$AA@			; `string'
PUBLIC	??_C@_01GBGANLPD@0?$AA@				; `string'
PUBLIC	??_C@_01HIHLOKLC@1?$AA@				; `string'
PUBLIC	??_C@_01FDFGLJHB@2?$AA@				; `string'
PUBLIC	??_C@_01EKENIIDA@3?$AA@				; `string'
PUBLIC	??_C@_01FAMBOPH@4?$AA@				; `string'
PUBLIC	??_C@_01BMBHCPLG@5?$AA@				; `string'
PUBLIC	??_C@_01DHDKHMHF@6?$AA@				; `string'
PUBLIC	??_C@_01COCBENDE@7?$AA@				; `string'
PUBLIC	??_C@_01KJLJFBPL@8?$AA@				; `string'
PUBLIC	??_C@_01LAKCGALK@9?$AA@				; `string'
PUBLIC	??_C@_02ODEKKOPI@11?$AA@			; `string'
PUBLIC	??_C@_02MIGHPNDL@12?$AA@			; `string'
PUBLIC	??_C@_02NBHMMMHK@13?$AA@			; `string'
PUBLIC	??_C@_02JODNFKLN@14?$AA@			; `string'
PUBLIC	??_C@_02IHCGGLPM@15?$AA@			; `string'
PUBLIC	??_C@_02KMALDIDP@16?$AA@			; `string'
PUBLIC	??_C@_02LFBAAJHO@17?$AA@			; `string'
PUBLIC	??_C@_02DCIIBFLB@18?$AA@			; `string'
PUBLIC	??_C@_02CLJDCEPA@19?$AA@			; `string'
PUBLIC	??_C@_02PIBHCBOA@20?$AA@			; `string'
PUBLIC	??_C@_02OBAMBAKB@21?$AA@			; `string'
PUBLIC	??_C@_02MKCBEDGC@22?$AA@			; `string'
PUBLIC	??_C@_02NDDKHCCD@23?$AA@			; `string'
PUBLIC	??_C@_02JMHLOEOE@24?$AA@			; `string'
PUBLIC	??_C@_02IFGANFKF@25?$AA@			; `string'
PUBLIC	??_C@_02KOENIGGG@26?$AA@			; `string'
PUBLIC	??_C@_02LHFGLHCH@27?$AA@			; `string'
PUBLIC	??_C@_02DAMOKLOI@28?$AA@			; `string'
PUBLIC	??_C@_02CJNFJKKJ@29?$AA@			; `string'
PUBLIC	??_C@_02PJNFELNH@30?$AA@			; `string'
PUBLIC	??_C@_02OAMOHKJG@31?$AA@			; `string'
PUBLIC	??_C@_02MLODCJFF@32?$AA@			; `string'
PUBLIC	??_C@_02NCPIBIBE@33?$AA@			; `string'
PUBLIC	??_C@_02JNLJIOND@34?$AA@			; `string'
PUBLIC	??_C@_02IEKCLPJC@35?$AA@			; `string'
PUBLIC	??_C@_02KPIPOMFB@36?$AA@			; `string'
PUBLIC	??_C@_0CF@BGACGNBA@$?0?5jak?$LJ?5kwot?j?5chcesz?5obstawi?f?5wy@ ; `string'
PUBLIC	??_C@_05OMMBNPEF@Masz?5?$AA@			; `string'
PUBLIC	??_C@_0CD@OGNPPNBN@Wprowadzi?$LDe?f?5nieprawid?$LDow?$LJ?5warto@ ; `string'
PUBLIC	??_C@_01PBGHHLMH@?$AH?$AA@			; `string'
PUBLIC	??_C@_0CF@LJDHNEHM@Nie?5mo?$LPesz?5obstawi?f?5zerowego?5zak@ ; `string'
PUBLIC	??_C@_0BI@CMKDFAEK@Nie?5masz?5tyle?5pieni?jdzy?$AA@ ; `string'
PUBLIC	??_C@_0CJ@PMIHJCIC@Nie?5mo?$LPesz?5obstawi?f?5ujemn?$LJ?5kwot?$LJ@ ; `string'
PUBLIC	??_C@_02MGHEPNFN@?$AI?$AI?$AA@			; `string'
PUBLIC	??_C@_02KNHHEEKP@?5?5?$AA@			; `string'
PUBLIC	??_C@_0BC@IEHJKDDM@Wylosowano?5numer?5?$AA@	; `string'
PUBLIC	??_C@_02KHOJGJKF@?4?5?$AA@			; `string'
PUBLIC	??_C@_02DEPNMBPN@$?4?$AA@			; `string'
PUBLIC	??_C@_0CB@MBIMKPJH@Obstawiles?5poprawnie?0?5wygrywasz?5@ ; `string'
PUBLIC	??_C@_0EF@FAPGEAPP@Obstawiles?5niepoprawnie?5lecz?5uda@ ; `string'
PUBLIC	??_C@_0CF@EMPIFKEH@Obstawiles?5niepoprawnie?0?5przegra@ ; `string'
PUBLIC	??_C@_0CM@BIICBBPD@Nie?5mo?$LPesz?5kontynuowa?f?0?5przegra?$LD@ ; `string'
PUBLIC	??_C@_0DB@MONJHHJM@$?0?5czy?5chcesz?5grac?5dalej?$CI?8t?8?5?9?5t@ ; `string'
PUBLIC	??_C@_0BA@KCLBOCHC@Na?5koncie?5masz?5?$AA@	; `string'
PUBLIC	??_C@_01PFHFFBPC@t?$AA@				; `string'
PUBLIC	??_C@_03PFPKAEFD@tak?$AA@			; `string'
PUBLIC	??_C@_03FFMIKLGN@Tak?$AA@			; `string'
PUBLIC	??_C@_03PIABMJCP@TAK?$AA@			; `string'
PUBLIC	??_C@_03FKMOMPJO@nie?$AA@			; `string'
PUBLIC	??_C@_03PKPMGAKA@Nie?$AA@			; `string'
PUBLIC	??_C@_03FHDFACOC@NIE?$AA@			; `string'
PUBLIC	??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
PUBLIC	??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
PUBLIC	??_C@_04IBLEHOMF@?4wav?$AA@			; `string'
PUBLIC	??_C@_05PNHGCFLK@p?4wav?$AA@			; `string'
PUBLIC	??_C@_05MEKKEGFB@n?4wav?$AA@			; `string'
PUBLIC	??_C@_05LALOIELB@r?4wav?$AA@			; `string'
PUBLIC	??_C@_05LDGIIGCK@b?4wav?$AA@			; `string'
PUBLIC	??_C@_05ODKFBHJJ@g?4wav?$AA@			; `string'
PUBLIC	??_C@_05GFDBGFDH@d?4wav?$AA@			; `string'
PUBLIC	??_C@_01DICPFPGM@k?$AA@				; `string'
PUBLIC	??_C@_01NOFIACDB@w?$AA@				; `string'
PUBLIC	??_C@_0BB@KLDNCCFE@log_aktualny?4txt?$AA@	; `string'
PUBLIC	??_C@_0DJ@EFIKGJBI@Uruchomiono?5ponownie?5gr?j?5z?5wy?$LD?$LJc@ ; `string'
PUBLIC	??_C@_09LFKNBKJA@Posiadasz?$AA@			; `string'
PUBLIC	??_C@_0L@DAFLKCID@Wylosowano?$AA@		; `string'
PUBLIC	??_C@_0M@DIDIAOPI@?5Wylosowano?$AA@		; `string'
PUBLIC	??_C@_0BC@EAGHPBJK@Obstawiono?5zaklad?$AA@	; `string'
PUBLIC	??_C@_0O@POHKAIHJ@Obstawiono?5za?$AA@		; `string'
PUBLIC	??_C@_0BE@CILJHICG@Gra?5rozpoczeta?5dnia?$AA@	; `string'
PUBLIC	??_C@_0N@KHLIPMCA@?5o?5godzinie?5?$AA@		; `string'
PUBLIC	??_C@_01LFCBOECM@?4?$AA@			; `string'
PUBLIC	??_C@_0BF@EHKBBICH@Gra?5rozpoczeta?5dnia?5?$AA@	; `string'
PUBLIC	??_C@_01JLIPDDHJ@?3?$AA@			; `string'
PUBLIC	??_C@_0BK@PLEOEKGI@Nowa?5gra?5rozpoczeta?5dnia?5?$AA@ ; `string'
PUBLIC	??_C@_06ECCMNMIG@Jacek?5?$AA@			; `string'
PUBLIC	??_C@_04IDLHMCEL@Ewa?5?$AA@			; `string'
PUBLIC	??_C@_05NBKDILMB@Maja?5?$AA@			; `string'
PUBLIC	??_C@_04HPMJBKOE@Jan?5?$AA@			; `string'
PUBLIC	??_C@_07OJOJFOLI@Jacek?52?$AA@			; `string'
PUBLIC	??_C@_05MPNHLKL@Ewa?52?$AA@			; `string'
PUBLIC	??_C@_06BMCAFNM@Maja?52?$AA@			; `string'
PUBLIC	??_C@_05EKGILLAK@Jan?52?$AA@			; `string'
PUBLIC	??_C@_06JIAINCN@Agata?5?$AA@			; `string'
PUBLIC	??_C@_05CMOJBPHN@G?$LDos?1?$AA@			; `string'
PUBLIC	??_C@_01IDAFKMJL@_?$AA@				; `string'
PUBLIC	??_C@_01KMDKNFGN@?1?$AA@			; `string'
PUBLIC	??_C@_0EA@BAJGLA@Brak?5wszystkich?5plik?sw?5dla?5g?$LDosu@ ; `string'
PUBLIC	??_C@_0BN@DACGNLHK@Efekty?5dzwi?jkowe?1bankrut?4wav?$AA@ ; `string'
PUBLIC	??_C@_0BO@OAKNDKAH@Efekty?5dzwi?jkowe?1wygrana1?4wav?$AA@ ; `string'
PUBLIC	??_C@_0BO@GGDJEIKJ@Efekty?5dzwi?jkowe?1wygrana2?4wav?$AA@ ; `string'
PUBLIC	??_C@_0CF@DNPALCEH@Efekty?5dzwi?jkowe?1zwielokrotnenie@ ; `string'
PUBLIC	??_C@_0GE@BGEAJNPD@Brak?5plik?sw?5dla?5efekt?sw?5d?$JPwi?jkow@ ; `string'
PUBLIC	??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ifstream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ifstream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_C@_0M@COFBHHKL@setting?4txt?$AA@		; `string'
PUBLIC	??_C@_0CC@GBEJJAFD@ilo?$JM?f_minimalna_obrot?sw_ruletki?5@ ; `string'
PUBLIC	??_C@_0CI@KGOEKJAK@ilo?$JM?f_max_dodatkowych_obrot?sw_ru@ ; `string'
PUBLIC	??_C@_0BP@NMHFMMDP@czas_przeskoku_kulki_szybki?550?$AA@ ; `string'
PUBLIC	??_C@_0BO@ELNOLLHD@czas_przeskoku_kulki_wolny?575?$AA@ ; `string'
PUBLIC	??_C@_0BJ@OHAGCGBG@czas_przerwy_dzwi?jku?5500?$AA@ ; `string'
PUBLIC	??_C@_0BJ@NJDCNPPC@styl_liczenia_wygranej?51?$AA@ ; `string'
PUBLIC	??_C@_0BG@DNDOADBI@kwota_pocz?$LJtkowa?51000?$AA@ ; `string'
PUBLIC	??_C@_0BA@ILKGKHCK@stan_d?$JPwi?jk?sw?51?$AA@	; `string'
PUBLIC	??_C@_0BG@EMABALP@czy_kontynuowa?f_gr?j?51?$AA@	; `string'
PUBLIC	??_C@_0BG@COMBOMN@g?$LDos_odczytu_numeru?51?$AA@ ; `string'
PUBLIC	??_C@_0BP@CJDLAIMM@g?$LDos_szybko?$JM?f_odczytu_numeru?54?$AA@ ; `string'
PUBLIC	??_C@_0GC@FGDMKFMP@Warto?$JM?f?5wolnego?5czasu?5przeskoku?5@ ; `string'
PUBLIC	??_C@_0BM@BFHMOJCD@Ustawiam?5domy?$JMne?5ustawienie?$AA@ ; `string'
PUBLIC	??_C@_0DL@EDLBNLFA@Ilo?$JM?f?5minimalna?5obrot?sw?5ruletki?5@ ; `string'
PUBLIC	??_C@_0DF@PACHBLM@Ilo?$JM?f?5max?5obrot?sw?5ruletki?5nie?5mo@ ; `string'
PUBLIC	??_C@_0EG@FJFKONPC@Jedna?5z?5deklaracji?5w?5sprawie?5obr@ ; `string'
PUBLIC	??_C@_0DH@EDACBMH@Styl?5liczeia?5wygranej?5przyjmuje?5@ ; `string'
PUBLIC	??_C@_0DD@CJFGHGHP@Czas?5przerwy?5d?$JPwi?jku?5nie?5mo?$LPe?5by@ ; `string'
PUBLIC	??_C@_0CP@ODEFLMCC@Kwota?5pocz?$LJtkowa?5nie?5mo?$LPe?5by?f?5mn@ ; `string'
PUBLIC	??_C@_0CP@LNDFINPO@Stan?5d?$JPwi?jk?sw?5przyjmuje?5warto?$JMci@ ; `string'
PUBLIC	??_C@_0DJ@OKKJHGDF@Opcja?5kontynuowania?5gry?5przyjmuj@ ; `string'
PUBLIC	??_C@_0EB@BADOFEHO@Opcja?5g?$LDos?5odczytu?5numeru?5przyjm@ ; `string'
PUBLIC	??_C@_0ED@HLOPCNMJ@Opcja?5szybko?$JM?f?5g?$LDosu?5odczytu?5prz@ ; `string'
PUBLIC	??_C@_01EPMOAMKG@$?$AA@				; `string'
PUBLIC	??_C@_0M@GPFIMODH@?5Wygrywasz?5?$AA@		; `string'
PUBLIC	??_C@_0M@GNFNLGIH@?5Posiadasz?5?$AA@		; `string'
PUBLIC	??_C@_07KIPBKJCE@win?4wav?$AA@			; `string'
PUBLIC	??_C@_0BL@LJEGNEAJ@?5Dostajesz?5polowe?5zak?$LDadu?5?$AA@ ; `string'
PUBLIC	??_C@_0N@NPCHEJIF@?5Przegrales?5?$AA@		; `string'
PUBLIC	??_C@_0BJ@GCHIFPGC@Ko?qczysz?5gr?j?5z?5wynikiem?5?$AA@ ; `string'
PUBLIC	??_C@_0CL@DCKMMPCF@Gratuluje?5zwi?jkszy?$LDe?$JM?5sw?sj?5zas?sb@ ; `string'
PUBLIC	??_C@_0BO@CAHFKDBP@?5krotnie?5sw?sj?5zas?sb?5finansowy?$AA@ ; `string'
PUBLIC	??_C@_0BH@GDCLDFHN@Gratuluje?5zwi?jkszy?$LDe?$JM?5?$AA@ ; `string'
PUBLIC	??_C@_0P@LMKDJHDC@Obstawiono?5za?5?$AA@		; `string'
PUBLIC	??_C@_0BD@IOLLNBIB@Obstawiono?5zak?$LDad?5?$AA@	; `string'
PUBLIC	??_C@_0BE@EKDPDLOA@?5Obstawiono?5zaklad?5?$AA@	; `string'
PUBLIC	??_C@_0DA@EJNBAHOM@Kulka?5w?5grze?0?5zaczekaj?5na?5wyloso@ ; `string'
PUBLIC	??_C@_0N@CGNKGGIC@?5Wylosowano?5?$AA@		; `string'
PUBLIC	??_C@_0CA@FGPIEHEM@ilo?$JM?f_minimalna_obrot?sw_ruletki?$AA@ ; `string'
PUBLIC	??_C@_0CG@KNEPJEMG@ilo?$JM?f_max_dodatkowych_obrot?sw_ru@ ; `string'
PUBLIC	??_C@_0BM@MMKKMDHC@czas_przeskoku_kulki_szybki?$AA@ ; `string'
PUBLIC	??_C@_0BL@LHGCEKLG@czas_przeskoku_kulki_wolny?$AA@ ; `string'
PUBLIC	??_C@_0BH@LAIPMCHF@styl_liczenia_wygranej?$AA@	; `string'
PUBLIC	??_C@_0BB@KJAOIHBF@kwota_pocz?$LJtkowa?$AA@	; `string'
PUBLIC	??_C@_0O@JDOJANCO@stan_d?$JPwi?jk?sw?$AA@	; `string'
PUBLIC	??_C@_0BE@MGBNNKM@czy_kontynuowa?f_gr?j?$AA@	; `string'
PUBLIC	??_C@_0BE@ILPCOCN@g?$LDos_odczytu_numeru?$AA@	; `string'
PUBLIC	??_C@_0BN@ECEAENDF@g?$LDos_szybko?$JM?f_odczytu_numeru?$AA@ ; `string'
PUBLIC	??_C@_1NC@MMDHPGIM@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?$DM?$AAc?$AAh?$AAa?$AAr?$AA?0?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAs?$AAt@ ; `string'
PUBLIC	??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
PUBLIC	??_C@_1GK@EPFFCEAH@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?9?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl@ ; `string'
PUBLIC	??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1GO@PNALIMBD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?9?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa@ ; `string'
PUBLIC	??_C@_1BAE@HEEJFKO@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@ ; `string'
PUBLIC	??_C@_1BAO@BGLBIONH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa@ ; `string'
PUBLIC	??_C@_1KK@GJPIMLCF@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@ ; `string'
PUBLIC	??_C@_1KO@CMPBFHAM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa@ ; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_1FM@PKOPLGBP@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAi?$AAn?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAm?$AAa?$AAx?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?5?$AAf?$AAo@ ; `string'
PUBLIC	??_C@_1FC@FNLBOEA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAu?$AAn?$AAi?$AAf?$AAo?$AAr?$AAm?$AA_?$AAi?$AAn?$AAt?$AA?$DM?$AAi?$AAn?$AAt?$AA?$DO?$AA?3?$AA?3?$AAp?$AAa?$AAr?$AAa?$AAm?$AA_?$AAt?$AAy?$AAp@ ; `string'
PUBLIC	??_C@_1GA@FJHEAOJP@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAi?$AAn?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAm?$AAa?$AAx?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?5?$AAf@ ; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::codecvt<char,char,_Mbstatet> >::_Psave
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_iostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVios_base@std@@@8			; std::ios_base `RTTI Type Descriptor'
PUBLIC	??_R3ios_base@std@@8				; std::ios_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ios_base@std@@8				; std::ios_base::`RTTI Base Class Array'
PUBLIC	??_R17?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AV?$_Iosb@H@std@@@8			; std::_Iosb<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
PUBLIC	??_R17A@3EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
PUBLIC	??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (16,-1,0,64)'
PUBLIC	??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_filebuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ifstream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ofstream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_fstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_fstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_fstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_fstream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_fstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_fstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_fstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_fstream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_fstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_fstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_cast@std@@6B@				; std::bad_cast::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_cast@std@@8				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_cast@std@@8				; std::bad_cast::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_cast@std@@8			; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@4040000000000000
PUBLIC	__real@4042800000000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___invalid_parameter_noinfo:PROC
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:PROC
EXTRN	__imp___time64:PROC
EXTRN	__imp___errno:PROC
EXTRN	__imp__srand:PROC
EXTRN	__imp__rand:PROC
EXTRN	__imp__atoi:PROC
EXTRN	__imp__system:PROC
EXTRN	__imp___get_stream_buffer_pointers:PROC
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fflush:PROC
EXTRN	__imp__fgetc:PROC
EXTRN	__imp__fgetpos:PROC
EXTRN	__imp__fputc:PROC
EXTRN	__imp__fsetpos:PROC
EXTRN	__imp___fseeki64:PROC
EXTRN	__imp__fwrite:PROC
EXTRN	__imp__remove:PROC
EXTRN	__imp__setvbuf:PROC
EXTRN	__imp__ungetc:PROC
EXTRN	__imp___lock_file:PROC
EXTRN	__imp___unlock_file:PROC
EXTRN	_memchr:PROC
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	__imp___CrtDbgReportW:PROC
EXTRN	?_Debug_message@std@@YAXPB_W0I@Z:PROC		; std::_Debug_message
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Ebad_cast@std@@UAEPAXI@Z:PROC		; std::bad_cast::`vector deleting destructor'
EXTRN	__imp__setlocale:PROC
EXTRN	?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z:PROC ; std::_Facet_Register
EXTRN	__imp_??Bid@locale@std@@QAEIXZ:PROC
EXTRN	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	__imp_?always_noconv@codecvt_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?is@?$ctype@D@std@@QBE_NFD@Z:PROC
EXTRN	__imp_?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:PROC
EXTRN	__imp_?in@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z:PROC
EXTRN	__imp_?out@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z:PROC
EXTRN	__imp_?unshift@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z:PROC
EXTRN	__imp_?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:PROC
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?eof@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?getloc@ios_base@std@@QBE?AVlocale@2@XZ:PROC
EXTRN	__imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ:PROC
EXTRN	__imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ:PROC
EXTRN	__imp_?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ:PROC
EXTRN	__imp_?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ:PROC
EXTRN	__imp_?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ:PROC
EXTRN	__imp_?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:PROC
EXTRN	__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:PROC
EXTRN	__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:PROC
EXTRN	__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:PROC
EXTRN	__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:PROC
EXTRN	__imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z:PROC
EXTRN	__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z:PROC
EXTRN	__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:PROC
EXTRN	__imp_?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ:PROC
EXTRN	__imp_?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ:PROC
EXTRN	__imp_?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z:PROC
EXTRN	__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z:PROC
EXTRN	__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z:PROC
EXTRN	__imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ:PROC
EXTRN	__imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ:PROC
EXTRN	__imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAPAD0PAH001@Z:PROC
EXTRN	__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ:PROC
EXTRN	__imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ:PROC
EXTRN	__imp_??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:PROC
EXTRN	__imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	__imp_??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:PROC
EXTRN	__imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ:PROC
EXTRN	__imp_?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z:PROC
EXTRN	__imp_??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z:PROC
EXTRN	__imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ:PROC
EXTRN	?_Fiopen@std@@YAPAU_iobuf@@PBDHH@Z:PROC		; std::_Fiopen
EXTRN	__imp___access:PROC
EXTRN	?_Random_device@std@@YAIXZ:PROC			; std::_Random_device
EXTRN	__imp__GetStdHandle@4:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp__GetSystemTime@4:PROC
EXTRN	__imp__GetConsoleCursorInfo@8:PROC
EXTRN	__imp__SetConsoleCursorInfo@8:PROC
EXTRN	__imp__SetConsoleTextAttribute@8:PROC
EXTRN	__imp__PlaySoundA@12:PROC
EXTRN	??_E?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_filebuf<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_fstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_fstream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ifstream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
EXTRN	?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
EXTRN	?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::imbue
EXTRN	?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
EXTRN	?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
EXTRN	?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::sync
EXTRN	?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::uflow
EXTRN	?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
EXTRN	?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
EXTRN	__dtoui3:PROC
EXTRN	_memset:PROC
EXTRN	__imp_?_BADOFF@std@@3_JB:QWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__imp_?id@?$ctype@D@std@@2V0locale@2@A:DWORD
EXTRN	__imp_?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A:DWORD
EXTRN	__imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 01cH DUP (?) ; G³os
_BSS	ENDS
;	COMDAT ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A
_BSS	SEGMENT
?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A DQ 01H DUP (?) ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<char> >::_Psave
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::codecvt<char,char,_Mbstatet> >::_Psave
_BSS	ENDS
CRT$XCU	SEGMENT
?G³os$initializer$@@3P6AXXZA DD FLAT:??__EG³os@@YAXXZ	; G³os$initializer$
CRT$XCU	ENDS
;	COMDAT __real@4042800000000000
CONST	SEGMENT
__real@4042800000000000 DQ 04042800000000000r	; 37
CONST	ENDS
;	COMDAT __real@4040000000000000
CONST	SEGMENT
__real@4040000000000000 DQ 04040000000000000r	; 32
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_cast@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_cast@std@@8 DD FLAT:??_R0?AVbad_cast@std@@@8 ; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_cast@std@@8
rdata$r	SEGMENT
??_R2bad_cast@std@@8 DD FLAT:??_R1A@?0A@EA@bad_cast@std@@8 ; std::bad_cast::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_cast@std@@8
rdata$r	SEGMENT
??_R3bad_cast@std@@8 DD 00H				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_cast@std@@6B@
rdata$r	SEGMENT
??_R4bad_cast@std@@6B@ DD 00H				; std::bad_cast::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_fstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_fstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_fstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_fstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_fstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_fstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_fstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_fstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_fstream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_fstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_fstream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_fstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	0aH
	DD	FLAT:??_R2?$basic_fstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_fstream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_fstream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_fstream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_fstream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_fstream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_fstream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_fstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	078H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_fstream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_fstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ofstream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	068H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ifstream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	070H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_filebuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (16,-1,0,64)'
	DD	03H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17A@3EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
	DD	00H
	DD	08H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@A@3EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
	DD	01H
	DD	00H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R2?$_Iosb@H@std@@8 DD FLAT:??_R1A@?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R3?$_Iosb@H@std@@8 DD 00H				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Iosb@H@std@@@8
data$r	SEGMENT
??_R0?AV?$_Iosb@H@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Iosb<int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$_Iosb@H@std@@', 00H
data$r	ENDS
;	COMDAT ??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ios_base@std@@8
rdata$r	SEGMENT
??_R2ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ios_base@std@@8
rdata$r	SEGMENT
??_R3ios_base@std@@8 DD 00H				; std::ios_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVios_base@std@@@8
data$r	SEGMENT
??_R0?AVios_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ios_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVios_base@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ios_base@std@@8
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD 00H	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ios@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_istream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	09H
	DD	FLAT:??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_iostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_iostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
	DD	FLAT:??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	03H
	DD	0aH
	DD	FLAT:??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$alloc'
	DB	'ator@D@2@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	068H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocato'
	DB	'r@D@2@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
data$r	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_1GA@FJHEAOJP@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAi?$AAn?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAm?$AAa?$AAx?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?5?$AAf@
CONST	SEGMENT
??_C@_1GA@FJHEAOJP@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAi?$AAn?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAm?$AAa?$AAx?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?5?$AAf@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'm', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'a'
	DB	00H, 'n', 00H, 'd', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'x', 00H
	DB	' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 's', 00H, ' ', 00H, 'f', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, 'u', 00H, 'n', 00H, 'i', 00H, 'f', 00H, 'o'
	DB	00H, 'r', 00H, 'm', 00H, '_', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'"', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@FNLBOEA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAu?$AAn?$AAi?$AAf?$AAo?$AAr?$AAm?$AA_?$AAi?$AAn?$AAt?$AA?$DM?$AAi?$AAn?$AAt?$AA?$DO?$AA?3?$AA?3?$AAp?$AAa?$AAr?$AAa?$AAm?$AA_?$AAt?$AAy?$AAp@
CONST	SEGMENT
??_C@_1FC@FNLBOEA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAu?$AAn?$AAi?$AAf?$AAo?$AAr?$AAm?$AA_?$AAi?$AAn?$AAt?$AA?$DM?$AAi?$AAn?$AAt?$AA?$DO?$AA?3?$AA?3?$AAp?$AAa?$AAr?$AAa?$AAm?$AA_?$AAt?$AAy?$AAp@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, '_', 00H, 'i'
	DB	00H, 'n', 00H, 't', 00H, '<', 00H, 'i', 00H, 'n', 00H, 't', 00H
	DB	'>', 00H, ':', 00H, ':', 00H, 'p', 00H, 'a', 00H, 'r', 00H, 'a'
	DB	00H, 'm', 00H, '_', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H
	DB	':', 00H, ':', 00H, '_', 00H, 'I', 00H, 'n', 00H, 'i', 00H, 't'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FM@PKOPLGBP@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAi?$AAn?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAm?$AAa?$AAx?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?5?$AAf?$AAo@
CONST	SEGMENT
??_C@_1FM@PKOPLGBP@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAi?$AAn?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAm?$AAa?$AAx?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?5?$AAf?$AAo@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'm', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'a', 00H, 'n'
	DB	00H, 'd', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'x', 00H, ' ', 00H
	DB	'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm', 00H, 'e', 00H, 'n'
	DB	00H, 't', 00H, 's', 00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 'u', 00H, 'n', 00H, 'i', 00H, 'f', 00H, 'o', 00H, 'r'
	DB	00H, 'm', 00H, '_', 00H, 'i', 00H, 'n', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1KO@CMPBFHAM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa@
CONST	SEGMENT
??_C@_1KO@CMPBFHAM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' '
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'c', 00H, 'a'
	DB	00H, 'u', 00H, 's', 00H, 'e', 00H, ' ', 00H, 'i', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 's', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't'
	DB	00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a', 00H
	DB	'n', 00H, 'g', 00H, 'e', 00H, ' ', 00H, '(', 00H, 'e', 00H, '.'
	DB	00H, 'g', 00H, '.', 00H, ' ', 00H, 'a', 00H, 'n', 00H, ' ', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ')', 00H
	DB	'"', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1KK@GJPIMLCF@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@
CONST	SEGMENT
??_C@_1KK@GJPIMLCF@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@ DB 'c'
	DB	00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'i'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'c', 00H, 'a', 00H, 'u'
	DB	00H, 's', 00H, 'e', 00H, ' ', 00H, 'i', 00H, 't', 00H, ' ', 00H
	DB	'i', 00H, 's', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, ' '
	DB	00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, ' ', 00H, '(', 00H, 'e', 00H, '.', 00H, 'g'
	DB	00H, '.', 00H, ' ', 00H, 'a', 00H, 'n', 00H, ' ', 00H, 'e', 00H
	DB	'n', 00H, 'd', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BAO@BGLBIONH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa@
CONST	SEGMENT
??_C@_1BAO@BGLBIONH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' '
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'c', 00H, 'a'
	DB	00H, 'u', 00H, 's', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'h', 00H
	DB	'e', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'w', 00H, 'a', 00H
	DB	's', 00H, '"', 00H, ' ', 00H, '"', 00H, ' ', 00H, 'i', 00H, 'n'
	DB	00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '(', 00H, 'e', 00H, '.'
	DB	00H, 'g', 00H, '.', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, ' ', 00H, 'o', 00H, 'c', 00H, 'c', 00H
	DB	'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'd', 00H, ',', 00H, ' '
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, ' ', 00H, 'w', 00H, 'a', 00H, 's', 00H, ' ', 00H, 'd', 00H
	DB	'e', 00H, 's', 00H, 't', 00H, 'r', 00H, 'o', 00H, 'y', 00H, 'e'
	DB	00H, 'd', 00H, ')', 00H, '"', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BAE@HEEJFKO@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@
CONST	SEGMENT
??_C@_1BAE@HEEJFKO@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@ DB 'c'
	DB	00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'i'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'c', 00H, 'a', 00H, 'u'
	DB	00H, 's', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 'w', 00H, 'a', 00H, 's', 00H
	DB	' ', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i'
	DB	00H, 'd', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'(', 00H, 'e', 00H, '.', 00H, 'g', 00H, '.', 00H, ' ', 00H, 'r'
	DB	00H, 'e', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H
	DB	'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'o'
	DB	00H, 'c', 00H, 'c', 00H, 'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H
	DB	'd', 00H, ',', 00H, ' ', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 't'
	DB	00H, 'h', 00H, 'e', 00H, ' ', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'w', 00H, 'a', 00H, 's'
	DB	00H, ' ', 00H, 'd', 00H, 'e', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'o', 00H, 'y', 00H, 'e', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GO@PNALIMBD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?9?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa@
CONST	SEGMENT
??_C@_1GO@PNALIMBD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?9?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i'
	DB	00H, 'n', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'c', 00H, 'h'
	DB	00H, 'a', 00H, 'r', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '*', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1GK@EPFFCEAH@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?9?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl@
CONST	SEGMENT
??_C@_1GK@EPFFCEAH@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?9?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl@ DB 'c'
	DB	00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'v', 00H
	DB	'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 's', 00H, 't', 00H, 'r'
	DB	00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'i', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?$DM?$AAc?$AAh?$AAa?$AAr?$AA?0?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAs?$AAt@
CONST	SEGMENT
??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?$DM?$AAc?$AAh?$AAa?$AAr?$AA?0?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAs?$AAt@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'b', 00H, 'a', 00H
	DB	's', 00H, 'i', 00H, 'c', 00H, '_', 00H, 's', 00H, 't', 00H, 'r'
	DB	00H, 'i', 00H, 'n', 00H, 'g', 00H, '<', 00H, 'c', 00H, 'h', 00H
	DB	'a', 00H, 'r', 00H, ',', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u'
	DB	00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_'
	DB	00H, 't', 00H, 'r', 00H, 'a', 00H, 'i', 00H, 't', 00H, 's', 00H
	DB	'<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '>', 00H, ','
	DB	00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' '
	DB	00H, '[', 00H, ']', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H
	DB	's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r', 00H, 'i'
	DB	00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n'
	DB	00H, 'g', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1NC@MMDHPGIM@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1NC@MMDHPGIM@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'f'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'p', 00H, 'r', 00H
	DB	'i', 00H, 's', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\'
	DB	00H, 't', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'm', 00H, 's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '1', 00H, '1', 00H, '.', 00H, '2', 00H, '5', 00H
	DB	'5', 00H, '0', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@ECEAENDF@g?$LDos_szybko?$JM?f_odczytu_numeru?$AA@
CONST	SEGMENT
??_C@_0BN@ECEAENDF@g?$LDos_szybko?$JM?f_odczytu_numeru?$AA@ DB 'g', 0b3H, 'o'
	DB	's_szybko', 09cH, 0e6H, '_odczytu_numeru', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@ILPCOCN@g?$LDos_odczytu_numeru?$AA@
CONST	SEGMENT
??_C@_0BE@ILPCOCN@g?$LDos_odczytu_numeru?$AA@ DB 'g', 0b3H, 'os_odczytu_n'
	DB	'umeru', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MGBNNKM@czy_kontynuowa?f_gr?j?$AA@
CONST	SEGMENT
??_C@_0BE@MGBNNKM@czy_kontynuowa?f_gr?j?$AA@ DB 'czy_kontynuowa', 0e6H, '_'
	DB	'gr', 0eaH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JDOJANCO@stan_d?$JPwi?jk?sw?$AA@
CONST	SEGMENT
??_C@_0O@JDOJANCO@stan_d?$JPwi?jk?sw?$AA@ DB 'stan_d', 09fH, 'wi', 0eaH, 'k'
	DB	0f3H, 'w', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KJAOIHBF@kwota_pocz?$LJtkowa?$AA@
CONST	SEGMENT
??_C@_0BB@KJAOIHBF@kwota_pocz?$LJtkowa?$AA@ DB 'kwota_pocz', 0b9H, 'tkowa'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LAIPMCHF@styl_liczenia_wygranej?$AA@
CONST	SEGMENT
??_C@_0BH@LAIPMCHF@styl_liczenia_wygranej?$AA@ DB 'styl_liczenia_wygranej'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LHGCEKLG@czas_przeskoku_kulki_wolny?$AA@
CONST	SEGMENT
??_C@_0BL@LHGCEKLG@czas_przeskoku_kulki_wolny?$AA@ DB 'czas_przeskoku_kul'
	DB	'ki_wolny', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MMKKMDHC@czas_przeskoku_kulki_szybki?$AA@
CONST	SEGMENT
??_C@_0BM@MMKKMDHC@czas_przeskoku_kulki_szybki?$AA@ DB 'czas_przeskoku_ku'
	DB	'lki_szybki', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@KNEPJEMG@ilo?$JM?f_max_dodatkowych_obrot?sw_ru@
CONST	SEGMENT
??_C@_0CG@KNEPJEMG@ilo?$JM?f_max_dodatkowych_obrot?sw_ru@ DB 'ilo', 09cH, 0e6H
	DB	'_max_dodatkowych_obrot', 0f3H, 'w_ruletki', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FGPIEHEM@ilo?$JM?f_minimalna_obrot?sw_ruletki?$AA@
CONST	SEGMENT
??_C@_0CA@FGPIEHEM@ilo?$JM?f_minimalna_obrot?sw_ruletki?$AA@ DB 'ilo', 09cH
	DB	0e6H, '_minimalna_obrot', 0f3H, 'w_ruletki', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CGNKGGIC@?5Wylosowano?5?$AA@
CONST	SEGMENT
??_C@_0N@CGNKGGIC@?5Wylosowano?5?$AA@ DB ' Wylosowano ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@EJNBAHOM@Kulka?5w?5grze?0?5zaczekaj?5na?5wyloso@
CONST	SEGMENT
??_C@_0DA@EJNBAHOM@Kulka?5w?5grze?0?5zaczekaj?5na?5wyloso@ DB 'Kulka w gr'
	DB	'ze, zaczekaj na wylosowanie numeru...', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EKDPDLOA@?5Obstawiono?5zaklad?5?$AA@
CONST	SEGMENT
??_C@_0BE@EKDPDLOA@?5Obstawiono?5zaklad?5?$AA@ DB ' Obstawiono zaklad ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IOLLNBIB@Obstawiono?5zak?$LDad?5?$AA@
CONST	SEGMENT
??_C@_0BD@IOLLNBIB@Obstawiono?5zak?$LDad?5?$AA@ DB 'Obstawiono zak', 0b3H
	DB	'ad ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LMKDJHDC@Obstawiono?5za?5?$AA@
CONST	SEGMENT
??_C@_0P@LMKDJHDC@Obstawiono?5za?5?$AA@ DB 'Obstawiono za ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GDCLDFHN@Gratuluje?5zwi?jkszy?$LDe?$JM?5?$AA@
CONST	SEGMENT
??_C@_0BH@GDCLDFHN@Gratuluje?5zwi?jkszy?$LDe?$JM?5?$AA@ DB 'Gratuluje zwi'
	DB	0eaH, 'kszy', 0b3H, 'e', 09cH, ' ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CAHFKDBP@?5krotnie?5sw?sj?5zas?sb?5finansowy?$AA@
CONST	SEGMENT
??_C@_0BO@CAHFKDBP@?5krotnie?5sw?sj?5zas?sb?5finansowy?$AA@ DB ' krotnie '
	DB	'sw', 0f3H, 'j zas', 0f3H, 'b finansowy', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@DCKMMPCF@Gratuluje?5zwi?jkszy?$LDe?$JM?5sw?sj?5zas?sb@
CONST	SEGMENT
??_C@_0CL@DCKMMPCF@Gratuluje?5zwi?jkszy?$LDe?$JM?5sw?sj?5zas?sb@ DB 'Grat'
	DB	'uluje zwi', 0eaH, 'kszy', 0b3H, 'e', 09cH, ' sw', 0f3H, 'j za'
	DB	's', 0f3H, 'b finansowy', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@GCHIFPGC@Ko?qczysz?5gr?j?5z?5wynikiem?5?$AA@
CONST	SEGMENT
??_C@_0BJ@GCHIFPGC@Ko?qczysz?5gr?j?5z?5wynikiem?5?$AA@ DB 'Ko', 0f1H, 'cz'
	DB	'ysz gr', 0eaH, ' z wynikiem ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NPCHEJIF@?5Przegrales?5?$AA@
CONST	SEGMENT
??_C@_0N@NPCHEJIF@?5Przegrales?5?$AA@ DB ' Przegrales ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LJEGNEAJ@?5Dostajesz?5polowe?5zak?$LDadu?5?$AA@
CONST	SEGMENT
??_C@_0BL@LJEGNEAJ@?5Dostajesz?5polowe?5zak?$LDadu?5?$AA@ DB ' Dostajesz '
	DB	'polowe zak', 0b3H, 'adu ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KIPBKJCE@win?4wav?$AA@
CONST	SEGMENT
??_C@_07KIPBKJCE@win?4wav?$AA@ DB 'win.wav', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GNFNLGIH@?5Posiadasz?5?$AA@
CONST	SEGMENT
??_C@_0M@GNFNLGIH@?5Posiadasz?5?$AA@ DB ' Posiadasz ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GPFIMODH@?5Wygrywasz?5?$AA@
CONST	SEGMENT
??_C@_0M@GPFIMODH@?5Wygrywasz?5?$AA@ DB ' Wygrywasz ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01EPMOAMKG@$?$AA@
CONST	SEGMENT
??_C@_01EPMOAMKG@$?$AA@ DB '$', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@HLOPCNMJ@Opcja?5szybko?$JM?f?5g?$LDosu?5odczytu?5prz@
CONST	SEGMENT
??_C@_0ED@HLOPCNMJ@Opcja?5szybko?$JM?f?5g?$LDosu?5odczytu?5prz@ DB 'Opcja'
	DB	' szybko', 09cH, 0e6H, ' g', 0b3H, 'osu odczytu przyjmuje wart'
	DB	'o', 09cH, 'ci w przedziale <0;5>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@BADOFEHO@Opcja?5g?$LDos?5odczytu?5numeru?5przyjm@
CONST	SEGMENT
??_C@_0EB@BADOFEHO@Opcja?5g?$LDos?5odczytu?5numeru?5przyjm@ DB 'Opcja g', 0b3H
	DB	'os odczytu numeru przyjmuje warto', 09cH, 'ci w przedziale <0'
	DB	';10>', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@OKKJHGDF@Opcja?5kontynuowania?5gry?5przyjmuj@
CONST	SEGMENT
??_C@_0DJ@OKKJHGDF@Opcja?5kontynuowania?5gry?5przyjmuj@ DB 'Opcja kontynu'
	DB	'owania gry przyjmuje warto', 09cH, 'ci tylko 0 lub 1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@LNDFINPO@Stan?5d?$JPwi?jk?sw?5przyjmuje?5warto?$JMci@
CONST	SEGMENT
??_C@_0CP@LNDFINPO@Stan?5d?$JPwi?jk?sw?5przyjmuje?5warto?$JMci@ DB 'Stan '
	DB	'd', 09fH, 'wi', 0eaH, 'k', 0f3H, 'w przyjmuje warto', 09cH, 'c'
	DB	'i tylko 0 lub 1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@ODEFLMCC@Kwota?5pocz?$LJtkowa?5nie?5mo?$LPe?5by?f?5mn@
CONST	SEGMENT
??_C@_0CP@ODEFLMCC@Kwota?5pocz?$LJtkowa?5nie?5mo?$LPe?5by?f?5mn@ DB 'Kwot'
	DB	'a pocz', 0b9H, 'tkowa nie mo', 0bfH, 'e by', 0e6H, ' mniejsza'
	DB	' od zera', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@CJFGHGHP@Czas?5przerwy?5d?$JPwi?jku?5nie?5mo?$LPe?5by@
CONST	SEGMENT
??_C@_0DD@CJFGHGHP@Czas?5przerwy?5d?$JPwi?jku?5nie?5mo?$LPe?5by@ DB 'Czas'
	DB	' przerwy d', 09fH, 'wi', 0eaH, 'ku nie mo', 0bfH, 'e by', 0e6H
	DB	' mniejszy od zera', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@EDACBMH@Styl?5liczeia?5wygranej?5przyjmuje?5@
CONST	SEGMENT
??_C@_0DH@EDACBMH@Styl?5liczeia?5wygranej?5przyjmuje?5@ DB 'Styl liczeia '
	DB	'wygranej przyjmuje warto', 09cH, 'ci tylko 0 lub 1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@FJFKONPC@Jedna?5z?5deklaracji?5w?5sprawie?5obr@
CONST	SEGMENT
??_C@_0EG@FJFKONPC@Jedna?5z?5deklaracji?5w?5sprawie?5obr@ DB 'Jedna z dek'
	DB	'laracji w sprawie obrot', 0f3H, 'w ruletki musi by', 0e6H, ' '
	DB	'wi', 0eaH, 'ksza od zera', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@PACHBLM@Ilo?$JM?f?5max?5obrot?sw?5ruletki?5nie?5mo@
CONST	SEGMENT
??_C@_0DF@PACHBLM@Ilo?$JM?f?5max?5obrot?sw?5ruletki?5nie?5mo@ DB 'Ilo', 09cH
	DB	0e6H, ' max obrot', 0f3H, 'w ruletki nie mo', 0bfH, 'e by', 0e6H
	DB	' mniejsza od 0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@EDLBNLFA@Ilo?$JM?f?5minimalna?5obrot?sw?5ruletki?5@
CONST	SEGMENT
??_C@_0DL@EDLBNLFA@Ilo?$JM?f?5minimalna?5obrot?sw?5ruletki?5@ DB 'Ilo', 09cH
	DB	0e6H, ' minimalna obrot', 0f3H, 'w ruletki nie mo', 0bfH, 'e b'
	DB	'y', 0e6H, ' mniejsza od 0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BFHMOJCD@Ustawiam?5domy?$JMne?5ustawienie?$AA@
CONST	SEGMENT
??_C@_0BM@BFHMOJCD@Ustawiam?5domy?$JMne?5ustawienie?$AA@ DB 'Ustawiam dom'
	DB	'y', 09cH, 'ne ustawienie', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@FGDMKFMP@Warto?$JM?f?5wolnego?5czasu?5przeskoku?5@
CONST	SEGMENT
??_C@_0GC@FGDMKFMP@Warto?$JM?f?5wolnego?5czasu?5przeskoku?5@ DB 'Warto', 09cH
	DB	0e6H, ' wolnego czasu przeskoku kulki musi by', 0e6H, ' ni', 0bfH
	DB	'sza ni', 0bfH, ' warto', 09cH, 0e6H, ' szybkiego czasu przesk'
	DB	'oku kulki', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@CJDLAIMM@g?$LDos_szybko?$JM?f_odczytu_numeru?54?$AA@
CONST	SEGMENT
??_C@_0BP@CJDLAIMM@g?$LDos_szybko?$JM?f_odczytu_numeru?54?$AA@ DB 'g', 0b3H
	DB	'os_szybko', 09cH, 0e6H, '_odczytu_numeru 4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@COMBOMN@g?$LDos_odczytu_numeru?51?$AA@
CONST	SEGMENT
??_C@_0BG@COMBOMN@g?$LDos_odczytu_numeru?51?$AA@ DB 'g', 0b3H, 'os_odczyt'
	DB	'u_numeru 1', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EMABALP@czy_kontynuowa?f_gr?j?51?$AA@
CONST	SEGMENT
??_C@_0BG@EMABALP@czy_kontynuowa?f_gr?j?51?$AA@ DB 'czy_kontynuowa', 0e6H
	DB	'_gr', 0eaH, ' 1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ILKGKHCK@stan_d?$JPwi?jk?sw?51?$AA@
CONST	SEGMENT
??_C@_0BA@ILKGKHCK@stan_d?$JPwi?jk?sw?51?$AA@ DB 'stan_d', 09fH, 'wi', 0eaH
	DB	'k', 0f3H, 'w 1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DNDOADBI@kwota_pocz?$LJtkowa?51000?$AA@
CONST	SEGMENT
??_C@_0BG@DNDOADBI@kwota_pocz?$LJtkowa?51000?$AA@ DB 'kwota_pocz', 0b9H, 't'
	DB	'kowa 1000', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NJDCNPPC@styl_liczenia_wygranej?51?$AA@
CONST	SEGMENT
??_C@_0BJ@NJDCNPPC@styl_liczenia_wygranej?51?$AA@ DB 'styl_liczenia_wygra'
	DB	'nej 1', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OHAGCGBG@czas_przerwy_dzwi?jku?5500?$AA@
CONST	SEGMENT
??_C@_0BJ@OHAGCGBG@czas_przerwy_dzwi?jku?5500?$AA@ DB 'czas_przerwy_dzwi', 0eaH
	DB	'ku 500', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@ELNOLLHD@czas_przeskoku_kulki_wolny?575?$AA@
CONST	SEGMENT
??_C@_0BO@ELNOLLHD@czas_przeskoku_kulki_wolny?575?$AA@ DB 'czas_przeskoku'
	DB	'_kulki_wolny 75', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@NMHFMMDP@czas_przeskoku_kulki_szybki?550?$AA@
CONST	SEGMENT
??_C@_0BP@NMHFMMDP@czas_przeskoku_kulki_szybki?550?$AA@ DB 'czas_przeskok'
	DB	'u_kulki_szybki 50', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KGOEKJAK@ilo?$JM?f_max_dodatkowych_obrot?sw_ru@
CONST	SEGMENT
??_C@_0CI@KGOEKJAK@ilo?$JM?f_max_dodatkowych_obrot?sw_ru@ DB 'ilo', 09cH, 0e6H
	DB	'_max_dodatkowych_obrot', 0f3H, 'w_ruletki 3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@GBEJJAFD@ilo?$JM?f_minimalna_obrot?sw_ruletki?5@
CONST	SEGMENT
??_C@_0CC@GBEJJAFD@ilo?$JM?f_minimalna_obrot?sw_ruletki?5@ DB 'ilo', 09cH
	DB	0e6H, '_minimalna_obrot', 0f3H, 'w_ruletki 2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@COFBHHKL@setting?4txt?$AA@
CONST	SEGMENT
??_C@_0M@COFBHHKL@setting?4txt?$AA@ DB 'setting.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ifstream<char,std::char_traits<char> >::`vbtable'
	DD	070H
CONST	ENDS
;	COMDAT ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ifstream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_0GE@BGEAJNPD@Brak?5plik?sw?5dla?5efekt?sw?5d?$JPwi?jkow@
CONST	SEGMENT
??_C@_0GE@BGEAJNPD@Brak?5plik?sw?5dla?5efekt?sw?5d?$JPwi?jkow@ DB 'Brak p'
	DB	'lik', 0f3H, 'w dla efekt', 0f3H, 'w d', 09fH, 'wi', 0eaH, 'ko'
	DB	'wych, wy', 0b3H, 0b9H, 'czono efekty d', 09fH, 'wi', 0eaH, 'k'
	DB	'owe muzyczne, w', 0b3H, 0b9H, 'czono efekty systemowe', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DNPALCEH@Efekty?5dzwi?jkowe?1zwielokrotnenie@
CONST	SEGMENT
??_C@_0CF@DNPALCEH@Efekty?5dzwi?jkowe?1zwielokrotnenie@ DB 'Efekty dzwi', 0eaH
	DB	'kowe/zwielokrotnenie.wav', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GGDJEIKJ@Efekty?5dzwi?jkowe?1wygrana2?4wav?$AA@
CONST	SEGMENT
??_C@_0BO@GGDJEIKJ@Efekty?5dzwi?jkowe?1wygrana2?4wav?$AA@ DB 'Efekty dzwi'
	DB	0eaH, 'kowe/wygrana2.wav', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@OAKNDKAH@Efekty?5dzwi?jkowe?1wygrana1?4wav?$AA@
CONST	SEGMENT
??_C@_0BO@OAKNDKAH@Efekty?5dzwi?jkowe?1wygrana1?4wav?$AA@ DB 'Efekty dzwi'
	DB	0eaH, 'kowe/wygrana1.wav', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DACGNLHK@Efekty?5dzwi?jkowe?1bankrut?4wav?$AA@
CONST	SEGMENT
??_C@_0BN@DACGNLHK@Efekty?5dzwi?jkowe?1bankrut?4wav?$AA@ DB 'Efekty dzwi', 0eaH
	DB	'kowe/bankrut.wav', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@BAJGLA@Brak?5wszystkich?5plik?sw?5dla?5g?$LDosu@
CONST	SEGMENT
??_C@_0EA@BAJGLA@Brak?5wszystkich?5plik?sw?5dla?5g?$LDosu@ DB 'Brak wszys'
	DB	'tkich plik', 0f3H, 'w dla g', 0b3H, 'osu, wy', 0b3H, 0b9H, 'c'
	DB	'zono odczytywanie wyniku', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KMDKNFGN@?1?$AA@
CONST	SEGMENT
??_C@_01KMDKNFGN@?1?$AA@ DB '/', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01IDAFKMJL@_?$AA@
CONST	SEGMENT
??_C@_01IDAFKMJL@_?$AA@ DB '_', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05CMOJBPHN@G?$LDos?1?$AA@
CONST	SEGMENT
??_C@_05CMOJBPHN@G?$LDos?1?$AA@ DB 'G', 0b3H, 'os/', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06JIAINCN@Agata?5?$AA@
CONST	SEGMENT
??_C@_06JIAINCN@Agata?5?$AA@ DB 'Agata ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EKGILLAK@Jan?52?$AA@
CONST	SEGMENT
??_C@_05EKGILLAK@Jan?52?$AA@ DB 'Jan 2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BMCAFNM@Maja?52?$AA@
CONST	SEGMENT
??_C@_06BMCAFNM@Maja?52?$AA@ DB 'Maja 2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MPNHLKL@Ewa?52?$AA@
CONST	SEGMENT
??_C@_05MPNHLKL@Ewa?52?$AA@ DB 'Ewa 2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OJOJFOLI@Jacek?52?$AA@
CONST	SEGMENT
??_C@_07OJOJFOLI@Jacek?52?$AA@ DB 'Jacek 2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04HPMJBKOE@Jan?5?$AA@
CONST	SEGMENT
??_C@_04HPMJBKOE@Jan?5?$AA@ DB 'Jan ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NBKDILMB@Maja?5?$AA@
CONST	SEGMENT
??_C@_05NBKDILMB@Maja?5?$AA@ DB 'Maja ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IDLHMCEL@Ewa?5?$AA@
CONST	SEGMENT
??_C@_04IDLHMCEL@Ewa?5?$AA@ DB 'Ewa ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ECCMNMIG@Jacek?5?$AA@
CONST	SEGMENT
??_C@_06ECCMNMIG@Jacek?5?$AA@ DB 'Jacek ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PLEOEKGI@Nowa?5gra?5rozpoczeta?5dnia?5?$AA@
CONST	SEGMENT
??_C@_0BK@PLEOEKGI@Nowa?5gra?5rozpoczeta?5dnia?5?$AA@ DB 'Nowa gra rozpoc'
	DB	'zeta dnia ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01JLIPDDHJ@?3?$AA@
CONST	SEGMENT
??_C@_01JLIPDDHJ@?3?$AA@ DB ':', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EHKBBICH@Gra?5rozpoczeta?5dnia?5?$AA@
CONST	SEGMENT
??_C@_0BF@EHKBBICH@Gra?5rozpoczeta?5dnia?5?$AA@ DB 'Gra rozpoczeta dnia ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4?$AA@
CONST	SEGMENT
??_C@_01LFCBOECM@?4?$AA@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KHLIPMCA@?5o?5godzinie?5?$AA@
CONST	SEGMENT
??_C@_0N@KHLIPMCA@?5o?5godzinie?5?$AA@ DB ' o godzinie ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CILJHICG@Gra?5rozpoczeta?5dnia?$AA@
CONST	SEGMENT
??_C@_0BE@CILJHICG@Gra?5rozpoczeta?5dnia?$AA@ DB 'Gra rozpoczeta dnia', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@POHKAIHJ@Obstawiono?5za?$AA@
CONST	SEGMENT
??_C@_0O@POHKAIHJ@Obstawiono?5za?$AA@ DB 'Obstawiono za', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EAGHPBJK@Obstawiono?5zaklad?$AA@
CONST	SEGMENT
??_C@_0BC@EAGHPBJK@Obstawiono?5zaklad?$AA@ DB 'Obstawiono zaklad', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DIDIAOPI@?5Wylosowano?$AA@
CONST	SEGMENT
??_C@_0M@DIDIAOPI@?5Wylosowano?$AA@ DB ' Wylosowano', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DAFLKCID@Wylosowano?$AA@
CONST	SEGMENT
??_C@_0L@DAFLKCID@Wylosowano?$AA@ DB 'Wylosowano', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LFKNBKJA@Posiadasz?$AA@
CONST	SEGMENT
??_C@_09LFKNBKJA@Posiadasz?$AA@ DB 'Posiadasz', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@EFIKGJBI@Uruchomiono?5ponownie?5gr?j?5z?5wy?$LD?$LJc@
CONST	SEGMENT
??_C@_0DJ@EFIKGJBI@Uruchomiono?5ponownie?5gr?j?5z?5wy?$LD?$LJc@ DB 'Uruch'
	DB	'omiono ponownie gr', 0eaH, ' z wy', 0b3H, 0b9H, 'czon', 0b9H, ' '
	DB	'opcj', 0b9H, ' kontynuowania', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KLDNCCFE@log_aktualny?4txt?$AA@
CONST	SEGMENT
??_C@_0BB@KLDNCCFE@log_aktualny?4txt?$AA@ DB 'log_aktualny.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w?$AA@
CONST	SEGMENT
??_C@_01NOFIACDB@w?$AA@ DB 'w', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01DICPFPGM@k?$AA@
CONST	SEGMENT
??_C@_01DICPFPGM@k?$AA@ DB 'k', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05GFDBGFDH@d?4wav?$AA@
CONST	SEGMENT
??_C@_05GFDBGFDH@d?4wav?$AA@ DB 'd.wav', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05ODKFBHJJ@g?4wav?$AA@
CONST	SEGMENT
??_C@_05ODKFBHJJ@g?4wav?$AA@ DB 'g.wav', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LDGIIGCK@b?4wav?$AA@
CONST	SEGMENT
??_C@_05LDGIIGCK@b?4wav?$AA@ DB 'b.wav', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LALOIELB@r?4wav?$AA@
CONST	SEGMENT
??_C@_05LALOIELB@r?4wav?$AA@ DB 'r.wav', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MEKKEGFB@n?4wav?$AA@
CONST	SEGMENT
??_C@_05MEKKEGFB@n?4wav?$AA@ DB 'n.wav', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PNHGCFLK@p?4wav?$AA@
CONST	SEGMENT
??_C@_05PNHGCFLK@p?4wav?$AA@ DB 'p.wav', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IBLEHOMF@?4wav?$AA@
CONST	SEGMENT
??_C@_04IBLEHOMF@?4wav?$AA@ DB '.wav', 00H		; `string'
CONST	ENDS
;	COMDAT ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
	DD	058H
CONST	ENDS
;	COMDAT ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
	DD	068H
CONST	ENDS
;	COMDAT ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD FLAT:??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DD	FLAT:??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD FLAT:??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DD	FLAT:??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	DD	FLAT:?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z
	DD	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_C@_03FHDFACOC@NIE?$AA@
CONST	SEGMENT
??_C@_03FHDFACOC@NIE?$AA@ DB 'NIE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PKPMGAKA@Nie?$AA@
CONST	SEGMENT
??_C@_03PKPMGAKA@Nie?$AA@ DB 'Nie', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FKMOMPJO@nie?$AA@
CONST	SEGMENT
??_C@_03FKMOMPJO@nie?$AA@ DB 'nie', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PIABMJCP@TAK?$AA@
CONST	SEGMENT
??_C@_03PIABMJCP@TAK?$AA@ DB 'TAK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FFMIKLGN@Tak?$AA@
CONST	SEGMENT
??_C@_03FFMIKLGN@Tak?$AA@ DB 'Tak', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PFPKAEFD@tak?$AA@
CONST	SEGMENT
??_C@_03PFPKAEFD@tak?$AA@ DB 'tak', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01PFHFFBPC@t?$AA@
CONST	SEGMENT
??_C@_01PFHFFBPC@t?$AA@ DB 't', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KCLBOCHC@Na?5koncie?5masz?5?$AA@
CONST	SEGMENT
??_C@_0BA@KCLBOCHC@Na?5koncie?5masz?5?$AA@ DB 'Na koncie masz ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@MONJHHJM@$?0?5czy?5chcesz?5grac?5dalej?$CI?8t?8?5?9?5t@
CONST	SEGMENT
??_C@_0DB@MONJHHJM@$?0?5czy?5chcesz?5grac?5dalej?$CI?8t?8?5?9?5t@ DB '$, '
	DB	'czy chcesz grac dalej(''t'' - tak, ''n'' - nie) ?', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@BIICBBPD@Nie?5mo?$LPesz?5kontynuowa?f?0?5przegra?$LD@
CONST	SEGMENT
??_C@_0CM@BIICBBPD@Nie?5mo?$LPesz?5kontynuowa?f?0?5przegra?$LD@ DB 'Nie m'
	DB	'o', 0bfH, 'esz kontynuowa', 0e6H, ', przegra', 0b3H, 'e', 09cH
	DB	' wszystko', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@EMPIFKEH@Obstawiles?5niepoprawnie?0?5przegra@
CONST	SEGMENT
??_C@_0CF@EMPIFKEH@Obstawiles?5niepoprawnie?0?5przegra@ DB 'Obstawiles ni'
	DB	'epoprawnie, przegra', 0b3H, 'e', 09cH, ' ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@FAPGEAPP@Obstawiles?5niepoprawnie?5lecz?5uda@
CONST	SEGMENT
??_C@_0EF@FAPGEAPP@Obstawiles?5niepoprawnie?5lecz?5uda@ DB 'Obstawiles ni'
	DB	'epoprawnie lecz uda', 0b3H, 'o Ci si', 0eaH, ', dostajesz po', 0b3H
	DB	'ow', 0eaH, ' zak', 0b3H, 'adu ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MBIMKPJH@Obstawiles?5poprawnie?0?5wygrywasz?5@
CONST	SEGMENT
??_C@_0CB@MBIMKPJH@Obstawiles?5poprawnie?0?5wygrywasz?5@ DB 'Obstawiles p'
	DB	'oprawnie, wygrywasz ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DEPNMBPN@$?4?$AA@
CONST	SEGMENT
??_C@_02DEPNMBPN@$?4?$AA@ DB '$.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KHOJGJKF@?4?5?$AA@
CONST	SEGMENT
??_C@_02KHOJGJKF@?4?5?$AA@ DB '. ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IEHJKDDM@Wylosowano?5numer?5?$AA@
CONST	SEGMENT
??_C@_0BC@IEHJKDDM@Wylosowano?5numer?5?$AA@ DB 'Wylosowano numer ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KNHHEEKP@?5?5?$AA@
CONST	SEGMENT
??_C@_02KNHHEEKP@?5?5?$AA@ DB '  ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MGHEPNFN@?$AI?$AI?$AA@
CONST	SEGMENT
??_C@_02MGHEPNFN@?$AI?$AI?$AA@ DB 08H, 08H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@PMIHJCIC@Nie?5mo?$LPesz?5obstawi?f?5ujemn?$LJ?5kwot?$LJ@
CONST	SEGMENT
??_C@_0CJ@PMIHJCIC@Nie?5mo?$LPesz?5obstawi?f?5ujemn?$LJ?5kwot?$LJ@ DB 'Ni'
	DB	'e mo', 0bfH, 'esz obstawi', 0e6H, ' ujemn', 0b9H, ' kwot', 0b9H
	DB	' zak', 0b3H, 'adu', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CMKDFAEK@Nie?5masz?5tyle?5pieni?jdzy?$AA@
CONST	SEGMENT
??_C@_0BI@CMKDFAEK@Nie?5masz?5tyle?5pieni?jdzy?$AA@ DB 'Nie masz tyle pie'
	DB	'ni', 0eaH, 'dzy', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@LJDHNEHM@Nie?5mo?$LPesz?5obstawi?f?5zerowego?5zak@
CONST	SEGMENT
??_C@_0CF@LJDHNEHM@Nie?5mo?$LPesz?5obstawi?f?5zerowego?5zak@ DB 'Nie mo', 0bfH
	DB	'esz obstawi', 0e6H, ' zerowego zak', 0b3H, 'adu', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01PBGHHLMH@?$AH?$AA@
CONST	SEGMENT
??_C@_01PBGHHLMH@?$AH?$AA@ DB 07H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@OGNPPNBN@Wprowadzi?$LDe?f?5nieprawid?$LDow?$LJ?5warto@
CONST	SEGMENT
??_C@_0CD@OGNPPNBN@Wprowadzi?$LDe?f?5nieprawid?$LDow?$LJ?5warto@ DB 'Wpro'
	DB	'wadzi', 0b3H, 'e', 0e6H, ' nieprawid', 0b3H, 'ow', 0b9H, ' wa'
	DB	'rto', 09cH, 0e6H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OMMBNPEF@Masz?5?$AA@
CONST	SEGMENT
??_C@_05OMMBNPEF@Masz?5?$AA@ DB 'Masz ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BGACGNBA@$?0?5jak?$LJ?5kwot?j?5chcesz?5obstawi?f?5wy@
CONST	SEGMENT
??_C@_0CF@BGACGNBA@$?0?5jak?$LJ?5kwot?j?5chcesz?5obstawi?f?5wy@ DB '$, ja'
	DB	'k', 0b9H, ' kwot', 0eaH, ' chcesz obstawi', 0e6H, ' wynik?', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KPIPOMFB@36?$AA@
CONST	SEGMENT
??_C@_02KPIPOMFB@36?$AA@ DB '36', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02IEKCLPJC@35?$AA@
CONST	SEGMENT
??_C@_02IEKCLPJC@35?$AA@ DB '35', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JNLJIOND@34?$AA@
CONST	SEGMENT
??_C@_02JNLJIOND@34?$AA@ DB '34', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02NCPIBIBE@33?$AA@
CONST	SEGMENT
??_C@_02NCPIBIBE@33?$AA@ DB '33', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MLODCJFF@32?$AA@
CONST	SEGMENT
??_C@_02MLODCJFF@32?$AA@ DB '32', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OAMOHKJG@31?$AA@
CONST	SEGMENT
??_C@_02OAMOHKJG@31?$AA@ DB '31', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PJNFELNH@30?$AA@
CONST	SEGMENT
??_C@_02PJNFELNH@30?$AA@ DB '30', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02CJNFJKKJ@29?$AA@
CONST	SEGMENT
??_C@_02CJNFJKKJ@29?$AA@ DB '29', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DAMOKLOI@28?$AA@
CONST	SEGMENT
??_C@_02DAMOKLOI@28?$AA@ DB '28', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LHFGLHCH@27?$AA@
CONST	SEGMENT
??_C@_02LHFGLHCH@27?$AA@ DB '27', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KOENIGGG@26?$AA@
CONST	SEGMENT
??_C@_02KOENIGGG@26?$AA@ DB '26', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02IFGANFKF@25?$AA@
CONST	SEGMENT
??_C@_02IFGANFKF@25?$AA@ DB '25', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JMHLOEOE@24?$AA@
CONST	SEGMENT
??_C@_02JMHLOEOE@24?$AA@ DB '24', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02NDDKHCCD@23?$AA@
CONST	SEGMENT
??_C@_02NDDKHCCD@23?$AA@ DB '23', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MKCBEDGC@22?$AA@
CONST	SEGMENT
??_C@_02MKCBEDGC@22?$AA@ DB '22', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OBAMBAKB@21?$AA@
CONST	SEGMENT
??_C@_02OBAMBAKB@21?$AA@ DB '21', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PIBHCBOA@20?$AA@
CONST	SEGMENT
??_C@_02PIBHCBOA@20?$AA@ DB '20', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02CLJDCEPA@19?$AA@
CONST	SEGMENT
??_C@_02CLJDCEPA@19?$AA@ DB '19', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DCIIBFLB@18?$AA@
CONST	SEGMENT
??_C@_02DCIIBFLB@18?$AA@ DB '18', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LFBAAJHO@17?$AA@
CONST	SEGMENT
??_C@_02LFBAAJHO@17?$AA@ DB '17', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KMALDIDP@16?$AA@
CONST	SEGMENT
??_C@_02KMALDIDP@16?$AA@ DB '16', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02IHCGGLPM@15?$AA@
CONST	SEGMENT
??_C@_02IHCGGLPM@15?$AA@ DB '15', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JODNFKLN@14?$AA@
CONST	SEGMENT
??_C@_02JODNFKLN@14?$AA@ DB '14', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02NBHMMMHK@13?$AA@
CONST	SEGMENT
??_C@_02NBHMMMHK@13?$AA@ DB '13', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MIGHPNDL@12?$AA@
CONST	SEGMENT
??_C@_02MIGHPNDL@12?$AA@ DB '12', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02ODEKKOPI@11?$AA@
CONST	SEGMENT
??_C@_02ODEKKOPI@11?$AA@ DB '11', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LAKCGALK@9?$AA@
CONST	SEGMENT
??_C@_01LAKCGALK@9?$AA@ DB '9', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KJLJFBPL@8?$AA@
CONST	SEGMENT
??_C@_01KJLJFBPL@8?$AA@ DB '8', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01COCBENDE@7?$AA@
CONST	SEGMENT
??_C@_01COCBENDE@7?$AA@ DB '7', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01DHDKHMHF@6?$AA@
CONST	SEGMENT
??_C@_01DHDKHMHF@6?$AA@ DB '6', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01BMBHCPLG@5?$AA@
CONST	SEGMENT
??_C@_01BMBHCPLG@5?$AA@ DB '5', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FAMBOPH@4?$AA@
CONST	SEGMENT
??_C@_01FAMBOPH@4?$AA@ DB '4', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EKENIIDA@3?$AA@
CONST	SEGMENT
??_C@_01EKENIIDA@3?$AA@ DB '3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FDFGLJHB@2?$AA@
CONST	SEGMENT
??_C@_01FDFGLJHB@2?$AA@ DB '2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01HIHLOKLC@1?$AA@
CONST	SEGMENT
??_C@_01HIHLOKLC@1?$AA@ DB '1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
CONST	SEGMENT
??_C@_01GBGANLPD@0?$AA@ DB '0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03OAIKGDBA@w12?$AA@
CONST	SEGMENT
??_C@_03OAIKGDBA@w12?$AA@ DB 'w12', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MLKHDAND@w11?$AA@
CONST	SEGMENT
??_C@_03MLKHDAND@w11?$AA@ DB 'w11', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NCLMABJC@w10?$AA@
CONST	SEGMENT
??_C@_03NCLMABJC@w10?$AA@ DB 'w10', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FPIENFIC@w9?$AA@
CONST	SEGMENT
??_C@_02FPIENFIC@w9?$AA@ DB 'w9', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EGJPOEMD@w8?$AA@
CONST	SEGMENT
??_C@_02EGJPOEMD@w8?$AA@ DB 'w8', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MBAHPIAM@w7?$AA@
CONST	SEGMENT
??_C@_02MBAHPIAM@w7?$AA@ DB 'w7', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02NIBMMJEN@w6?$AA@
CONST	SEGMENT
??_C@_02NIBMMJEN@w6?$AA@ DB 'w6', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PDDBJKIO@w5?$AA@
CONST	SEGMENT
??_C@_02PDDBJKIO@w5?$AA@ DB 'w5', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OKCKKLMP@w4?$AA@
CONST	SEGMENT
??_C@_02OKCKKLMP@w4?$AA@ DB 'w4', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KFGLDNAI@w3?$AA@
CONST	SEGMENT
??_C@_02KFGLDNAI@w3?$AA@ DB 'w3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LMHAAMEJ@w2?$AA@
CONST	SEGMENT
??_C@_02LMHAAMEJ@w2?$AA@ DB 'w2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LAFHGHBM@k3?$AA@
CONST	SEGMENT
??_C@_02LAFHGHBM@k3?$AA@ DB 'k3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KJEMFGFN@k2?$AA@
CONST	SEGMENT
??_C@_02KJEMFGFN@k2?$AA@ DB 'k2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LPLHEDKD@d?$AA@
CONST	SEGMENT
??_C@_01LPLHEDKD@d?$AA@ DB 'd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01OJONOECF@b?$AA@
CONST	SEGMENT
??_C@_01OJONOECF@b?$AA@ DB 'b', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EFFIKLCJ@n?$AA@
CONST	SEGMENT
??_C@_01EFFIKLCJ@n?$AA@ DB 'n', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@FOKBNGLG@0?5?9?536?5?9?5pojedyncze?5pole?5o?5odpow@
CONST	SEGMENT
??_C@_0CP@FOKBNGLG@0?5?9?536?5?9?5pojedyncze?5pole?5o?5odpow@ DB '0 - 36 '
	DB	'- pojedyncze pole o odpowiednim numerze', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@KMEGGBFA@w1?0?5w2?0?5?4?4?4?0?5w12?5?9?5wiersz?5trzech@
CONST	SEGMENT
??_C@_0CJ@KMEGGBFA@w1?0?5w2?0?5?4?4?4?0?5w12?5?9?5wiersz?5trzech@ DB 'w1,'
	DB	' w2, ..., w12 - wiersz trzech numer', 0f3H, 'w', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@EJBDEIIK@k1?0?5k2?0?5k3?5?9?5kolumna?51?0?5kolumna?5@
CONST	SEGMENT
??_C@_0CN@EJBDEIIK@k1?0?5k2?0?5k3?5?9?5kolumna?51?0?5kolumna?5@ DB 'k1, k'
	DB	'2, k3 - kolumna 1, kolumna 2, kolumna 3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CHNPGJIO@d?5?9?5dolna?5po?$LDowa?$AA@
CONST	SEGMENT
??_C@_0BB@CHNPGJIO@d?5?9?5dolna?5po?$LDowa?$AA@ DB 'd - dolna po', 0b3H, 'o'
	DB	'wa', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FMNKHOJE@g?5?9?5g?srna?5po?$LDowa?$AA@
CONST	SEGMENT
??_C@_0BB@FMNKHOJE@g?5?9?5g?srna?5po?$LDowa?$AA@ DB 'g - g', 0f3H, 'rna p'
	DB	'o', 0b3H, 'owa', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LKBFHLDI@b?5?9?5czarne?$CIblack?$CJ?$AA@
CONST	SEGMENT
??_C@_0BC@LKBFHLDI@b?5?9?5czarne?$CIblack?$CJ?$AA@ DB 'b - czarne(black)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GOMOHEMO@r?5?9?5czerwone?$CIred?$CJ?$AA@
CONST	SEGMENT
??_C@_0BC@GOMOHEMO@r?5?9?5czerwone?$CIred?$CJ?$AA@ DB 'r - czerwone(red)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GNAADEAG@n?5?9?5nieparzyste?$AA@
CONST	SEGMENT
??_C@_0BA@GNAADEAG@n?5?9?5nieparzyste?$AA@ DB 'n - nieparzyste', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KLINIBPG@p?5?9?5parzyste?$AA@
CONST	SEGMENT
??_C@_0N@KLINIBPG@p?5?9?5parzyste?$AA@ DB 'p - parzyste', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@FGCBIOFJ@Jak?$LJ?5opcje?5chcesz?5obstawic?5?$DP?5?$CIzg@
CONST	SEGMENT
??_C@_0DM@FGCBIOFJ@Jak?$LJ?5opcje?5chcesz?5obstawic?5?$DP?5?$CIzg@ DB 'Ja'
	DB	'k', 0b9H, ' opcje chcesz obstawic ? (zgodnie z poni', 0bfH, 's'
	DB	'zym opisem) :', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05PDJBBECF@pause?$AA@
CONST	SEGMENT
??_C@_05PDJBBECF@pause?$AA@ DB 'pause', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GMFAENOC@log_og?slny?4txt?$AA@
CONST	SEGMENT
??_C@_0P@GMFAENOC@log_og?slny?4txt?$AA@ DB 'log_og', 0f3H, 'lny.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@DALNOHHC@ilo?$JM?f_minimalna_obrot?sw_ruletki?5@
CONST	SEGMENT
??_C@_0CE@DALNOHHC@ilo?$JM?f_minimalna_obrot?sw_ruletki?5@ DB 'ilo', 09cH
	DB	0e6H, '_minimalna_obrot', 0f3H, 'w_ruletki 000', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02JHFNFPIK@w1?$AA@
CONST	SEGMENT
??_C@_02JHFNFPIK@w1?$AA@ DB 'w1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02ICGBAFJO@k1?$AA@
CONST	SEGMENT
??_C@_02ICGBAFJO@k1?$AA@ DB 'k1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01JEJKBAGA@g?$AA@
CONST	SEGMENT
??_C@_01JEJKBAGA@g?$AA@ DB 'g', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01JBBJJEPG@p?$AA@
CONST	SEGMENT
??_C@_01JBBJJEPG@p?$AA@ DB 'p', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PKFBJPLJ@10?$AA@
CONST	SEGMENT
??_C@_02PKFBJPLJ@10?$AA@ DB '10', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06JGCGFIEG@polish?$AA@
CONST	SEGMENT
??_C@_06JGCGFIEG@polish?$AA@ DB 'polish', 00H		; `string'
CONST	ENDS
;	COMDAT ??_8?$basic_fstream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_fstream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_fstream<char,std::char_traits<char> >::`vbtable'
	DD	068H
CONST	ENDS
;	COMDAT ??_8?$basic_fstream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
CONST	SEGMENT
??_8?$basic_fstream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@ DD 00H ; std::basic_fstream<char,std::char_traits<char> >::`vbtable'
	DD	078H
CONST	ENDS
;	COMDAT ??_7?$basic_fstream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_fstream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_fstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_fstream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_fstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ofstream<char,std::char_traits<char> >::`vbtable'
	DD	068H
CONST	ENDS
;	COMDAT ??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ofstream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	DD	FLAT:?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z
	DD	FLAT:?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_C@_1NA@LJCFENMG@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1NA@LJCFENMG@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'f'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'p', 00H, 'r', 00H
	DB	'i', 00H, 's', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\'
	DB	00H, 't', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'm', 00H, 's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '1', 00H, '1', 00H, '.', 00H, '2', 00H, '5', 00H
	DB	'5', 00H, '0', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'r', 00H
	DB	'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast?$AA@ DB 'bad cast', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7bad_cast@std@@6B@
CONST	SEGMENT
??_7bad_cast@std@@6B@ DD FLAT:??_R4bad_cast@std@@6B@	; std::bad_cast::`vftable'
	DD	FLAT:??_Ebad_cast@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
CONST	SEGMENT
?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB DD 0ffffffffH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
CONST	ENDS
;	COMDAT ??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'D', 00H
	DB	'e', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Deallocate@std@@YAXPAXII@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Deallocate@std@@YAXPAXII@Z@4JA DD 065H ; `std::_Deallocate'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CC@GKJLLHIM@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@GKJLLHIM@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ DB '"'
	DB	00H, '_', 00H, 'P', 00H, 't', 00H, 'r', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, '"', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09GLJCAGLP@_Ptr?5?$CB?$DN?50?$AA@
CONST	SEGMENT
??_C@_09GLJCAGLP@_Ptr?5?$CB?$DN?50?$AA@ DB '_Ptr != 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@GPIBOEJC@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1NE@GPIBOEJC@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'f'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'p', 00H, 'r', 00H
	DB	'i', 00H, 's', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\'
	DB	00H, 't', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'm', 00H, 's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '1', 00H, '1', 00H, '.', 00H, '2', 00H, '5', 00H
	DB	'5', 00H, '0', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, '0'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@ DB '%', 00H, 'l', 00H, 's', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@ DB '"'
	DB	00H, '_', 00H, 'P', 00H, 't', 00H, 'r', 00H, '_', 00H, 'c', 00H
	DB	'o', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	'"', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@
CONST	SEGMENT
??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@ DB '_Ptr_container !='
	DB	' 0', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Allocate@std@@YAPAXII_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Allocate@std@@YAPAXII_N@Z@4JA DD 031H	; `std::_Allocate'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'I', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H
	DB	'O', 00H, 'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, ' ', 00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H
	DB	'P', 00H, 'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_?$AAb?$AAa?$AAs?$AAe?$AA1?$AA2?$AA?3?$AA?3?$AA_?$AAO?$AAr?$AAp?$AAh?$AAa?$AAn?$AA_?$AAm@
CONST	SEGMENT
??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_?$AAb?$AAa?$AAs?$AAe?$AA1?$AA2?$AA?3?$AA?3?$AA_?$AAO?$AAr?$AAp?$AAh?$AAa?$AAn?$AA_?$AAm@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'I', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '_', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, '1', 00H
	DB	'2', 00H, ':', 00H, ':', 00H, '_', 00H, 'O', 00H, 'r', 00H, 'p'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, '_', 00H, 'm', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ DB 'I'
	DB	00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H, 'O', 00H
	DB	'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T', 00H, ' '
	DB	00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H, 'P', 00H
	DB	'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@JCGKDBDB@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1NE@JCGKDBDB@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'f'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'p', 00H, 'r', 00H
	DB	'i', 00H, 's', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\'
	DB	00H, 't', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'm', 00H, 's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '1', 00H, '1', 00H, '.', 00H, '2', 00H, '5', 00H
	DB	'5', 00H, '0', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception?$AA@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception?$AA@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z$0
__ehfuncinfo$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$0
__tryblocktable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$3
__unwindtable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$0
__tryblocktable$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$3
__unwindtable$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z$0
__ehfuncinfo$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@XZ$1
__ehfuncinfo$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z$0
__ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0
__ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1
__ehfuncinfo$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$0
__tryblocktable$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$4
__unwindtable$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QAE@XZ$1
__ehfuncinfo$??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$3
	DD	00H
	DD	FLAT:__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$3
	DD	00H
	DD	FLAT:__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$4
	DD	00H
	DD	FLAT:__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z$0
__ehfuncinfo$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z$0
__ehfuncinfo$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ$1
__ehfuncinfo$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$_main DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$_main
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$_main DD 0ffffffffH
	DD	FLAT:__unwindfunclet$_main$0
	DD	00H
	DD	FLAT:__unwindfunclet$_main$1
	DD	01H
	DD	FLAT:__unwindfunclet$_main$2
	DD	02H
	DD	FLAT:__unwindfunclet$_main$3
	DD	03H
	DD	FLAT:__unwindfunclet$_main$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SprawdŸ_ustawienia@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SprawdŸ_ustawienia@@YAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SprawdŸ_ustawienia@@YAXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SprawdŸ_ustawienia@@YAXXZ$2
__ehfuncinfo$?SprawdŸ_ustawienia@@YAXXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?SprawdŸ_ustawienia@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?SprawdŸ_Pliki@@YAXXZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$?SprawdŸ_Pliki@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?SprawdŸ_Pliki@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SprawdŸ_Pliki@@YAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SprawdŸ_Pliki@@YAXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?SprawdŸ_Pliki@@YAXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?SprawdŸ_Pliki@@YAXXZ$3
	DD	01H
	DD	FLAT:__unwindfunclet$?SprawdŸ_Pliki@@YAXXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?SprawdŸ_Pliki@@YAXXZ$5
	DD	01H
	DD	FLAT:__unwindfunclet$?SprawdŸ_Pliki@@YAXXZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$?SprawdŸ_Pliki@@YAXXZ$7
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?Wczytaj_z_pliku@@YAXAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AADAAH33AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?Wczytaj_z_pliku@@YAXAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AADAAH33AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Wczytaj_z_pliku@@YAXAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AADAAH33AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Wczytaj_z_pliku@@YAXAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AADAAH33AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Wczytaj_z_pliku@@YAXAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AADAAH33AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Wczytaj_z_pliku@@YAXAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AADAAH33AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?Wczytaj_z_pliku@@YAXAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AADAAH33AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?Wczytaj_z_pliku@@YAXAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AADAAH33AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$4
	DD	01H
	DD	FLAT:__unwindfunclet$?Wczytaj_z_pliku@@YAXAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AADAAH33AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?Odczytaj_liczbê@@YAXABHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$?Odczytaj_liczbê@@YAXABHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Odczytaj_liczbê@@YAXABHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Odczytaj_liczbê@@YAXABHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Odczytaj_liczbê@@YAXABHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Odczytaj_liczbê@@YAXABHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?Odczytaj_liczbê@@YAXABHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?Odczytaj_liczbê@@YAXABHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?Odczytaj_liczbê@@YAXABHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3
	DD	05H
	DD	FLAT:__unwindfunclet$?Odczytaj_liczbê@@YAXABHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$12
	DD	06H
	DD	FLAT:__unwindfunclet$?Odczytaj_liczbê@@YAXABHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$13
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Wylosuj@@YAHABH0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Wylosuj@@YAHABH0@Z$0
__ehfuncinfo$?Wylosuj@@YAHABH0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Wylosuj@@YAHABH0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Czy_Kontynuowaæ@@YA_NABH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Czy_Kontynuowaæ@@YA_NABH@Z$0
__ehfuncinfo$?Czy_Kontynuowaæ@@YA_NABH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Czy_Kontynuowaæ@@YA_NABH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SprawdŸ_Zak³ad@@YAHABHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SprawdŸ_Zak³ad@@YAHABHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0
__ehfuncinfo$?SprawdŸ_Zak³ad@@YAHABHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SprawdŸ_Zak³ad@@YAHABHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Wczytaj_Kwotê_Zak³adu@@YAXAAHABH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Wczytaj_Kwotê_Zak³adu@@YAXAAHABH@Z$0
__ehfuncinfo$?Wczytaj_Kwotê_Zak³adu@@YAXAAHABH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Wczytaj_Kwotê_Zak³adu@@YAXAAHABH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0
__ehfuncinfo$?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1locale@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Unchecked_end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Unchecked_begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Orphan_me@_Iterator_base12@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_E?$basic_fstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_fstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_fstream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_fstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
??_E?$basic_fstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_fstream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Get_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@AAEIXZ
_TEXT	SEGMENT
__Val$1 = -20						; size = 4
_this$ = -8						; size = 4
?_Get_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@AAEIXZ PROC ; std::_Rng_from_urng<unsigned int,std::random_device>::_Get_bits, COMDAT
; _this$ = ecx

; 3527 : 		{	// return a random value within [0, _Bmask]

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
$LN4@Get_bits:

; 3528 : 		for (; ; )
; 3529 : 			{	// repeat until random value is in range
; 3530 : 			_Udiff _Val = _Ref() - (_Urng::min)();

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 08		 mov	 ecx, DWORD PTR [eax]
  00028	e8 00 00 00 00	 call	 ??Rrandom_device@std@@QAEIXZ ; std::random_device::operator()
  0002d	8b f0		 mov	 esi, eax
  0002f	e8 00 00 00 00	 call	 ?min@random_device@std@@SAIXZ ; std::random_device::min
  00034	2b f0		 sub	 esi, eax
  00036	89 75 ec	 mov	 DWORD PTR __Val$1[ebp], esi

; 3531 : 
; 3532 : 			if (_Val <= _Bmask)

  00039	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b 4d ec	 mov	 ecx, DWORD PTR __Val$1[ebp]
  0003f	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00042	77 05		 ja	 SHORT $LN5@Get_bits

; 3533 : 				return (_Val);

  00044	8b 45 ec	 mov	 eax, DWORD PTR __Val$1[ebp]
  00047	eb 02		 jmp	 SHORT $LN1@Get_bits
$LN5@Get_bits:

; 3534 : 			}

  00049	eb d8		 jmp	 SHORT $LN4@Get_bits
$LN1@Get_bits:

; 3535 : 		}

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00054	3b ec		 cmp	 ebp, esp
  00056	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
?_Get_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@AAEIXZ ENDP ; std::_Rng_from_urng<unsigned int,std::random_device>::_Get_bits
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Get_all_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@QAEIXZ
_TEXT	SEGMENT
__Num$1 = -32						; size = 4
__Ret$ = -20						; size = 4
_this$ = -8						; size = 4
?_Get_all_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@QAEIXZ PROC ; std::_Rng_from_urng<unsigned int,std::random_device>::_Get_all_bits, COMDAT
; _this$ = ecx

; 3508 : 		{	// return a random value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00013	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3509 : 		_Udiff _Ret = 0;

  00023	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Ret$[ebp], 0

; 3510 : 
; 3511 : 		for (size_t _Num = 0; _Num < CHAR_BIT * sizeof (_Udiff);

  0002a	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR __Num$1[ebp], 0
  00031	eb 0c		 jmp	 SHORT $LN4@Get_all_bi
$LN2@Get_all_bi:

; 3512 : 			_Num += _Bits)

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 4d e0	 mov	 ecx, DWORD PTR __Num$1[ebp]
  00039	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0003c	89 4d e0	 mov	 DWORD PTR __Num$1[ebp], ecx
$LN4@Get_all_bi:

; 3510 : 
; 3511 : 		for (size_t _Num = 0; _Num < CHAR_BIT * sizeof (_Udiff);

  0003f	83 7d e0 20	 cmp	 DWORD PTR __Num$1[ebp], 32 ; 00000020H
  00043	73 29		 jae	 SHORT $LN3@Get_all_bi

; 3513 : 			{	// don't mask away any bits
; 3514 : 			_Ret <<= _Bits - 1;	// avoid full shift

  00045	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00048	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004b	83 e9 01	 sub	 ecx, 1
  0004e	8b 55 ec	 mov	 edx, DWORD PTR __Ret$[ebp]
  00051	d3 e2		 shl	 edx, cl
  00053	89 55 ec	 mov	 DWORD PTR __Ret$[ebp], edx

; 3515 : 			_Ret <<= 1;

  00056	8b 45 ec	 mov	 eax, DWORD PTR __Ret$[ebp]
  00059	d1 e0		 shl	 eax, 1
  0005b	89 45 ec	 mov	 DWORD PTR __Ret$[ebp], eax

; 3516 : 			_Ret |= _Get_bits();

  0005e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?_Get_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@AAEIXZ ; std::_Rng_from_urng<unsigned int,std::random_device>::_Get_bits
  00066	0b 45 ec	 or	 eax, DWORD PTR __Ret$[ebp]
  00069	89 45 ec	 mov	 DWORD PTR __Ret$[ebp], eax

; 3517 : 			}

  0006c	eb c5		 jmp	 SHORT $LN2@Get_all_bi
$LN3@Get_all_bi:

; 3518 : 
; 3519 : 		return (_Ret);

  0006e	8b 45 ec	 mov	 eax, DWORD PTR __Ret$[ebp]

; 3520 : 		}

  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0007a	3b ec		 cmp	 ebp, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
?_Get_all_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@QAEIXZ ENDP ; std::_Rng_from_urng<unsigned int,std::random_device>::_Get_all_bits
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??R?$_Rng_from_urng@IVrandom_device@std@@@std@@QAEII@Z
_TEXT	SEGMENT
__Mask$1 = -32						; size = 4
__Ret$2 = -20						; size = 4
_this$ = -8						; size = 4
__Index$ = 8						; size = 4
??R?$_Rng_from_urng@IVrandom_device@std@@@std@@QAEII@Z PROC ; std::_Rng_from_urng<unsigned int,std::random_device>::operator(), COMDAT
; _this$ = ecx

; 3484 : 		{	// adapt _Urng closed range to [0, _Index)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00013	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
$LN4@operator:

; 3485 : 		for (; ; )
; 3486 : 			{	// try a sample random value
; 3487 : 			_Udiff _Ret = 0;	// random bits

  00023	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Ret$2[ebp], 0

; 3488 : 			_Udiff _Mask = 0;	// 2^N - 1, _Ret is within [0, _Mask]

  0002a	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR __Mask$1[ebp], 0
$LN5@operator:

; 3489 : 
; 3490 : 			while (_Mask < _Udiff(_Index - 1))

  00031	8b 45 08	 mov	 eax, DWORD PTR __Index$[ebp]
  00034	83 e8 01	 sub	 eax, 1
  00037	39 45 e0	 cmp	 DWORD PTR __Mask$1[ebp], eax
  0003a	73 4e		 jae	 SHORT $LN6@operator

; 3491 : 				{	// need more random bits
; 3492 : 				_Ret <<= _Bits - 1;	// avoid full shift

  0003c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00042	83 e9 01	 sub	 ecx, 1
  00045	8b 55 ec	 mov	 edx, DWORD PTR __Ret$2[ebp]
  00048	d3 e2		 shl	 edx, cl
  0004a	89 55 ec	 mov	 DWORD PTR __Ret$2[ebp], edx

; 3493 : 				_Ret <<= 1;

  0004d	8b 45 ec	 mov	 eax, DWORD PTR __Ret$2[ebp]
  00050	d1 e0		 shl	 eax, 1
  00052	89 45 ec	 mov	 DWORD PTR __Ret$2[ebp], eax

; 3494 : 				_Ret |= _Get_bits();

  00055	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ?_Get_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@AAEIXZ ; std::_Rng_from_urng<unsigned int,std::random_device>::_Get_bits
  0005d	0b 45 ec	 or	 eax, DWORD PTR __Ret$2[ebp]
  00060	89 45 ec	 mov	 DWORD PTR __Ret$2[ebp], eax

; 3495 : 				_Mask <<= _Bits - 1;	// avoid full shift

  00063	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00066	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00069	83 e9 01	 sub	 ecx, 1
  0006c	8b 55 e0	 mov	 edx, DWORD PTR __Mask$1[ebp]
  0006f	d3 e2		 shl	 edx, cl
  00071	89 55 e0	 mov	 DWORD PTR __Mask$1[ebp], edx

; 3496 : 				_Mask <<= 1;

  00074	8b 45 e0	 mov	 eax, DWORD PTR __Mask$1[ebp]
  00077	d1 e0		 shl	 eax, 1
  00079	89 45 e0	 mov	 DWORD PTR __Mask$1[ebp], eax

; 3497 : 				_Mask |= _Bmask;

  0007c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	8b 4d e0	 mov	 ecx, DWORD PTR __Mask$1[ebp]
  00082	0b 48 08	 or	 ecx, DWORD PTR [eax+8]
  00085	89 4d e0	 mov	 DWORD PTR __Mask$1[ebp], ecx

; 3498 : 				}

  00088	eb a7		 jmp	 SHORT $LN5@operator
$LN6@operator:

; 3499 : 
; 3500 : 			// _Ret is [0, _Mask], _Index - 1 <= _Mask, return if unbiased
; 3501 : 			if (_Ret / _Index < _Mask / _Index
; 3502 : 				|| _Mask % _Index == _Udiff(_Index - 1))

  0008a	8b 45 ec	 mov	 eax, DWORD PTR __Ret$2[ebp]
  0008d	33 d2		 xor	 edx, edx
  0008f	f7 75 08	 div	 DWORD PTR __Index$[ebp]
  00092	8b c8		 mov	 ecx, eax
  00094	8b 45 e0	 mov	 eax, DWORD PTR __Mask$1[ebp]
  00097	33 d2		 xor	 edx, edx
  00099	f7 75 08	 div	 DWORD PTR __Index$[ebp]
  0009c	3b c8		 cmp	 ecx, eax
  0009e	72 12		 jb	 SHORT $LN8@operator
  000a0	8b 45 e0	 mov	 eax, DWORD PTR __Mask$1[ebp]
  000a3	33 d2		 xor	 edx, edx
  000a5	f7 75 08	 div	 DWORD PTR __Index$[ebp]
  000a8	8b 45 08	 mov	 eax, DWORD PTR __Index$[ebp]
  000ab	83 e8 01	 sub	 eax, 1
  000ae	3b d0		 cmp	 edx, eax
  000b0	75 0c		 jne	 SHORT $LN7@operator
$LN8@operator:

; 3503 : 				return (_Ret % _Index);

  000b2	8b 45 ec	 mov	 eax, DWORD PTR __Ret$2[ebp]
  000b5	33 d2		 xor	 edx, edx
  000b7	f7 75 08	 div	 DWORD PTR __Index$[ebp]
  000ba	8b c2		 mov	 eax, edx
  000bc	eb 05		 jmp	 SHORT $LN1@operator
$LN7@operator:

; 3504 : 			}

  000be	e9 60 ff ff ff	 jmp	 $LN4@operator
$LN1@operator:

; 3505 : 		}

  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5b		 pop	 ebx
  000c6	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000cc	3b ec		 cmp	 ebp, esp
  000ce	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c2 04 00	 ret	 4
??R?$_Rng_from_urng@IVrandom_device@std@@@std@@QAEII@Z ENDP ; std::_Rng_from_urng<unsigned int,std::random_device>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??0?$_Rng_from_urng@IVrandom_device@std@@@std@@QAE@AAVrandom_device@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Func$ = 8						; size = 4
??0?$_Rng_from_urng@IVrandom_device@std@@@std@@QAE@AAVrandom_device@1@@Z PROC ; std::_Rng_from_urng<unsigned int,std::random_device>::_Rng_from_urng<unsigned int,std::random_device>, COMDAT
; _this$ = ecx

; 3478 : 		{	// construct from URNG

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3477 : 		: _Ref(_Func), _Bits(CHAR_BIT * sizeof (_Udiff)), _Bmask(_Udiff(-1))

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR __Func$[ebp]
  00029	89 08		 mov	 DWORD PTR [eax], ecx
  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 40 04 20 00
	00 00		 mov	 DWORD PTR [eax+4], 32	; 00000020H
  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	c7 40 08 ff ff
	ff ff		 mov	 DWORD PTR [eax+8], -1

; 3479 : 		for (; (_Urng::max)() - (_Urng::min)() < _Bmask; _Bmask >>= 1)

  0003f	eb 0e		 jmp	 SHORT $LN4@Rng_from_u
$LN2@Rng_from_u:
  00041	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00044	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00047	d1 e9		 shr	 ecx, 1
  00049	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0004c	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$LN4@Rng_from_u:
  0004f	e8 00 00 00 00	 call	 ?max@random_device@std@@SAIXZ ; std::random_device::max
  00054	8b f0		 mov	 esi, eax
  00056	e8 00 00 00 00	 call	 ?min@random_device@std@@SAIXZ ; std::random_device::min
  0005b	2b f0		 sub	 esi, eax
  0005d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00060	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00063	73 11		 jae	 SHORT $LN1@Rng_from_u

; 3480 : 			--_Bits;

  00065	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00068	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006b	83 e9 01	 sub	 ecx, 1
  0006e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00071	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00074	eb cb		 jmp	 SHORT $LN2@Rng_from_u
$LN1@Rng_from_u:

; 3481 : 		}

  00076	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
  0007c	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00082	3b ec		 cmp	 ebp, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 04 00	 ret	 4
??0?$_Rng_from_urng@IVrandom_device@std@@@std@@QAE@AAVrandom_device@1@@Z ENDP ; std::_Rng_from_urng<unsigned int,std::random_device>::_Rng_from_urng<unsigned int,std::random_device>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\istream
;	COMDAT ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 121  : 			{	// test if _Ipfx succeeded

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 122  : 			return (_Ok);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 123  : 			}

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\istream
;	COMDAT ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Istr$ = 8						; size = 4
__Noskip$ = 12						; size = 1
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 116  : 			{	// construct locking and calling _Ipfx

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 115  : 			: _Sentry_base(_Istr)

  00042	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00045	50		 push	 eax
  00046	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 117  : 			_Ok = this->_Myistr._Ipfx(_Noskip);

  00055	8b f4		 mov	 esi, esp
  00057	0f b6 45 0c	 movzx	 eax, BYTE PTR __Noskip$[ebp]
  0005b	50		 push	 eax
  0005c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
  00067	3b f4		 cmp	 esi, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006e	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00071	88 42 04	 mov	 BYTE PTR [edx+4], al

; 118  : 			}

  00074	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0007b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00081	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00088	59		 pop	 ecx
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00092	3b ec		 cmp	 ebp, esp
  00094	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\istream
;	COMDAT ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv92 = -224						; size = 4
tv86 = -220						; size = 4
tv72 = -220						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 99   : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00021	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 100  : 			if (_Myistr.rdbuf() != 0)

  00042	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 08		 mov	 ecx, DWORD PTR [eax]
  00047	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  0004d	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv72[ebp]
  00053	8b 02		 mov	 eax, DWORD PTR [edx]
  00055	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv72[ebp]
  0005b	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0005e	8b f4		 mov	 esi, esp
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00066	3b f4		 cmp	 esi, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	85 c0		 test	 eax, eax
  0006f	74 4d		 je	 SHORT $LN3@Sentry_bas

; 101  : 				_Myistr.rdbuf()->_Unlock();

  00071	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 08		 mov	 ecx, DWORD PTR [eax]
  00076	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv86[ebp], ecx
  0007c	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv86[ebp]
  00082	8b 02		 mov	 eax, DWORD PTR [edx]
  00084	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv86[ebp]
  0008a	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0008d	8b f4		 mov	 esi, esp
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00095	3b f4		 cmp	 esi, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009c	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv92[ebp], eax
  000a2	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv92[ebp]
  000a8	8b 11		 mov	 edx, DWORD PTR [ecx]
  000aa	8b f4		 mov	 esi, esp
  000ac	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv92[ebp]
  000b2	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000b5	ff d0		 call	 eax
  000b7	3b f4		 cmp	 esi, esp
  000b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Sentry_bas:

; 102  : 			}

  000be	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c8	59		 pop	 ecx
  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	81 c4 e0 00 00
	00		 add	 esp, 224		; 000000e0H
  000d2	3b ec		 cmp	 ebp, esp
  000d4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 1c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-228]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\istream
;	COMDAT ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv93 = -212						; size = 4
tv87 = -208						; size = 4
tv73 = -208						; size = 4
_this$ = -8						; size = 4
__Istr$ = 8						; size = 4
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 93   : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 2c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-212]
  00013	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 92   : 			: _Myistr(_Istr)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00029	89 08		 mov	 DWORD PTR [eax], ecx

; 94   : 			if (_Myistr.rdbuf() != 0)

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  00036	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv73[ebp]
  0003c	8b 02		 mov	 eax, DWORD PTR [edx]
  0003e	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  00044	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00047	8b f4		 mov	 esi, esp
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	85 c0		 test	 eax, eax
  00058	74 4d		 je	 SHORT $LN1@Sentry_bas

; 95   : 				_Myistr.rdbuf()->_Lock();

  0005a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005f	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv87[ebp], ecx
  00065	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv87[ebp]
  0006b	8b 02		 mov	 eax, DWORD PTR [edx]
  0006d	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv87[ebp]
  00073	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00076	8b f4		 mov	 esi, esp
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv93[ebp], eax
  0008b	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv93[ebp]
  00091	8b 11		 mov	 edx, DWORD PTR [ecx]
  00093	8b f4		 mov	 esi, esp
  00095	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv93[ebp]
  0009b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0009e	ff d0		 call	 eax
  000a0	3b f4		 cmp	 esi, esp
  000a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Sentry_bas:

; 96   : 			}

  000a7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	81 c4 d4 00 00
	00		 add	 esp, 212		; 000000d4H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@Z
_TEXT	SEGMENT
__Old_ptr$1 = -120					; size = 4
__Raw_new$ = -108					; size = 4
__New_ptr$ = -96					; size = 4
__Al$ = -84						; size = 4
__New_capacity$ = -72					; size = 4
__Old_capacity$ = -60					; size = 4
__New_size$ = -48					; size = 4
__Old_size$ = -36					; size = 4
__My_data$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
_<_Args_2>$ = 24					; size = 4
??$_Reallocate_grow_by@V<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_4d79bb85f269e6e8002a4599002d832c>,unsigned int,char const *,unsigned int>, COMDAT
; _this$ = ecx

; 3641 : 		{	// reallocate to increase size by _Size_increase elements, new buffer prepared by

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd c4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-316]
  00013	b9 4f 00 00 00	 mov	 ecx, 79			; 0000004fH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 3642 : 			// _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 3643 : 		auto& _My_data = this->_Get_data();

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00035	89 45 e8	 mov	 DWORD PTR __My_data$[ebp], eax

; 3644 : 		const size_type _Old_size = _My_data._Mysize;

  00038	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0003e	89 4d dc	 mov	 DWORD PTR __Old_size$[ebp], ecx

; 3645 : 		if (max_size() - _Old_size < _Size_increase)

  00041	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00049	2b 45 dc	 sub	 eax, DWORD PTR __Old_size$[ebp]
  0004c	3b 45 08	 cmp	 eax, DWORD PTR __Size_increase$[ebp]
  0004f	73 05		 jae	 SHORT $LN2@Reallocate

; 3646 : 			{
; 3647 : 			_Xlen();	// result too long

  00051	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 3648 : 			}
; 3649 : 
; 3650 : 		const size_type _New_size = _Old_size + _Size_increase;

  00056	8b 45 dc	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00059	03 45 08	 add	 eax, DWORD PTR __Size_increase$[ebp]
  0005c	89 45 d0	 mov	 DWORD PTR __New_size$[ebp], eax

; 3651 : 		const size_type _Old_capacity = _My_data._Myres;

  0005f	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00062	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00065	89 4d c4	 mov	 DWORD PTR __Old_capacity$[ebp], ecx

; 3652 : 		const size_type _New_capacity = _Calculate_growth(_New_size);

  00068	8b 45 d0	 mov	 eax, DWORD PTR __New_size$[ebp]
  0006b	50		 push	 eax
  0006c	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  00074	89 45 b8	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 3653 : 		auto& _Al = this->_Getal();

  00077	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  0007f	89 45 ac	 mov	 DWORD PTR __Al$[ebp], eax

; 3654 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00082	33 c0		 xor	 eax, eax
  00084	8b 4d b8	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  00087	83 c1 01	 add	 ecx, 1
  0008a	0f 92 c0	 setb	 al
  0008d	f7 d8		 neg	 eax
  0008f	0b c1		 or	 eax, ecx
  00091	50		 push	 eax
  00092	8b 4d ac	 mov	 ecx, DWORD PTR __Al$[ebp]
  00095	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  0009a	89 45 a0	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 3655 : 		_My_data._Orphan_all();

  0009d	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000a0	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3656 : 		_My_data._Mysize = _New_size;

  000a5	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000a8	8b 4d d0	 mov	 ecx, DWORD PTR __New_size$[ebp]
  000ab	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 3657 : 		_My_data._Myres = _New_capacity;

  000ae	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000b1	8b 4d b8	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  000b4	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 3658 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  000b7	8b 45 a0	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000c0	83 c4 04	 add	 esp, 4
  000c3	89 45 94	 mov	 DWORD PTR __Raw_new$[ebp], eax

; 3659 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000c6	83 7d c4 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  000ca	72 50		 jb	 SHORT $LN3@Reallocate

; 3660 : 			{
; 3661 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  000cc	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000cf	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d2	89 4d 88	 mov	 DWORD PTR __Old_ptr$1[ebp], ecx

; 3662 : 			_Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

  000d5	8b 45 18	 mov	 eax, DWORD PTR _<_Args_2>$[ebp]
  000d8	50		 push	 eax
  000d9	8b 4d 14	 mov	 ecx, DWORD PTR _<_Args_1>$[ebp]
  000dc	51		 push	 ecx
  000dd	8b 55 10	 mov	 edx, DWORD PTR _<_Args_0>$[ebp]
  000e0	52		 push	 edx
  000e1	8b 45 dc	 mov	 eax, DWORD PTR __Old_size$[ebp]
  000e4	50		 push	 eax
  000e5	8b 4d 88	 mov	 ecx, DWORD PTR __Old_ptr$1[ebp]
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000ee	83 c4 04	 add	 esp, 4
  000f1	50		 push	 eax
  000f2	8b 55 94	 mov	 edx, DWORD PTR __Raw_new$[ebp]
  000f5	52		 push	 edx
  000f6	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  000f9	e8 00 00 00 00	 call	 ??R<lambda_4d79bb85f269e6e8002a4599002d832c>@@QBE@QADQBDII1I@Z ; <lambda_4d79bb85f269e6e8002a4599002d832c>::operator()

; 3663 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000fe	8b 45 c4	 mov	 eax, DWORD PTR __Old_capacity$[ebp]
  00101	83 c0 01	 add	 eax, 1
  00104	50		 push	 eax
  00105	8b 4d 88	 mov	 ecx, DWORD PTR __Old_ptr$1[ebp]
  00108	51		 push	 ecx
  00109	8b 4d ac	 mov	 ecx, DWORD PTR __Al$[ebp]
  0010c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 3664 : 			_My_data._Bx._Ptr = _New_ptr;

  00111	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00114	8b 4d a0	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  00117	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 3665 : 			}
; 3666 : 		else

  0011a	eb 43		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 3667 : 			{
; 3668 : 			_Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

  0011c	8b 45 18	 mov	 eax, DWORD PTR _<_Args_2>$[ebp]
  0011f	50		 push	 eax
  00120	8b 4d 14	 mov	 ecx, DWORD PTR _<_Args_1>$[ebp]
  00123	51		 push	 ecx
  00124	8b 55 10	 mov	 edx, DWORD PTR _<_Args_0>$[ebp]
  00127	52		 push	 edx
  00128	8b 45 dc	 mov	 eax, DWORD PTR __Old_size$[ebp]
  0012b	50		 push	 eax
  0012c	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0012f	83 c1 04	 add	 ecx, 4
  00132	51		 push	 ecx
  00133	8b 55 94	 mov	 edx, DWORD PTR __Raw_new$[ebp]
  00136	52		 push	 edx
  00137	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  0013a	e8 00 00 00 00	 call	 ??R<lambda_4d79bb85f269e6e8002a4599002d832c>@@QBE@QADQBDII1I@Z ; <lambda_4d79bb85f269e6e8002a4599002d832c>::operator()

; 3669 : 			_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_ptr);

  0013f	8d 45 a0	 lea	 eax, DWORD PTR __New_ptr$[ebp]
  00142	50		 push	 eax
  00143	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00146	83 c1 04	 add	 ecx, 4
  00149	51		 push	 ecx
  0014a	e8 00 00 00 00	 call	 ??$addressof@PAD@std@@YAPAPADAAPAD@Z ; std::addressof<char *>
  0014f	83 c4 04	 add	 esp, 4
  00152	50		 push	 eax
  00153	8b 55 ac	 mov	 edx, DWORD PTR __Al$[ebp]
  00156	52		 push	 edx
  00157	e8 00 00 00 00	 call	 ??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
  0015c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@Reallocate:

; 3670 : 			}
; 3671 : 
; 3672 : 		return (*this);

  0015f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 3673 : 		}

  00162	52		 push	 edx
  00163	8b cd		 mov	 ecx, ebp
  00165	50		 push	 eax
  00166	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Reallocate
  0016c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00171	58		 pop	 eax
  00172	5a		 pop	 edx
  00173	5f		 pop	 edi
  00174	5e		 pop	 esi
  00175	5b		 pop	 ebx
  00176	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00179	33 cd		 xor	 ecx, ebp
  0017b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00180	81 c4 3c 01 00
	00		 add	 esp, 316		; 0000013cH
  00186	3b ec		 cmp	 ebp, esp
  00188	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0018d	8b e5		 mov	 esp, ebp
  0018f	5d		 pop	 ebp
  00190	c2 14 00	 ret	 20			; 00000014H
  00193	90		 npad	 1
$LN8@Reallocate:
  00194	01 00 00 00	 DD	 1
  00198	00 00 00 00	 DD	 $LN7@Reallocate
$LN7@Reallocate:
  0019c	a0 ff ff ff	 DD	 -96			; ffffffa0H
  001a0	04 00 00 00	 DD	 4
  001a4	00 00 00 00	 DD	 $LN6@Reallocate
$LN6@Reallocate:
  001a8	5f		 DB	 95			; 0000005fH
  001a9	4e		 DB	 78			; 0000004eH
  001aa	65		 DB	 101			; 00000065H
  001ab	77		 DB	 119			; 00000077H
  001ac	5f		 DB	 95			; 0000005fH
  001ad	70		 DB	 112			; 00000070H
  001ae	74		 DB	 116			; 00000074H
  001af	72		 DB	 114			; 00000072H
  001b0	00		 DB	 0
??$_Reallocate_grow_by@V<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_4d79bb85f269e6e8002a4599002d832c>,unsigned int,char const *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??R<lambda_4d79bb85f269e6e8002a4599002d832c>@@QBE@QADQBDII1I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
__Off$ = 20						; size = 4
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
??R<lambda_4d79bb85f269e6e8002a4599002d832c>@@QBE@QADQBDII1I@Z PROC ; <lambda_4d79bb85f269e6e8002a4599002d832c>::operator(), COMDAT
; _this$ = ecx

; 2546 : 				const size_type _Off, const _Elem * const _Ptr, const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2547 : 			_Traits::copy(_New_ptr, _Old_ptr, _Off);

  00023	8b 45 14	 mov	 eax, DWORD PTR __Off$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 0c	 mov	 ecx, DWORD PTR __Old_ptr$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2548 : 			_Traits::copy(_New_ptr + _Off, _Ptr, _Count);

  00037	8b 45 1c	 mov	 eax, DWORD PTR __Count$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 18	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0003e	51		 push	 ecx
  0003f	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  00042	03 55 14	 add	 edx, DWORD PTR __Off$[ebp]
  00045	52		 push	 edx
  00046	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2549 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  0004e	8b 45 10	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00051	2b 45 14	 sub	 eax, DWORD PTR __Off$[ebp]
  00054	83 c0 01	 add	 eax, 1
  00057	50		 push	 eax
  00058	8b 4d 0c	 mov	 ecx, DWORD PTR __Old_ptr$[ebp]
  0005b	03 4d 14	 add	 ecx, DWORD PTR __Off$[ebp]
  0005e	51		 push	 ecx
  0005f	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  00062	03 55 14	 add	 edx, DWORD PTR __Off$[ebp]
  00065	03 55 1c	 add	 edx, DWORD PTR __Count$[ebp]
  00068	52		 push	 edx
  00069	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  0006e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2550 : 			}, _Off, _Ptr, _Count));

  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0007a	3b ec		 cmp	 ebp, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 18 00	 ret	 24			; 00000018H
??R<lambda_4d79bb85f269e6e8002a4599002d832c>@@QBE@QADQBDII1I@Z ENDP ; <lambda_4d79bb85f269e6e8002a4599002d832c>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_67d87d4aa1269033985980465fd1d824>@@$$V@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_67d87d4aa1269033985980465fd1d824>@@@Z
_TEXT	SEGMENT
__Old_ptr$1 = -120					; size = 4
__Raw_new$ = -108					; size = 4
__New_ptr$ = -96					; size = 4
__Al$ = -84						; size = 4
__New_capacity$ = -72					; size = 4
__Old_capacity$ = -60					; size = 4
__New_size$ = -48					; size = 4
__Old_size$ = -36					; size = 4
__My_data$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
??$_Reallocate_grow_by@V<lambda_67d87d4aa1269033985980465fd1d824>@@$$V@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_67d87d4aa1269033985980465fd1d824>@@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_67d87d4aa1269033985980465fd1d824> >, COMDAT
; _this$ = ecx

; 3641 : 		{	// reallocate to increase size by _Size_increase elements, new buffer prepared by

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd c4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-316]
  00013	b9 4f 00 00 00	 mov	 ecx, 79			; 0000004fH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 3642 : 			// _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 3643 : 		auto& _My_data = this->_Get_data();

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00035	89 45 e8	 mov	 DWORD PTR __My_data$[ebp], eax

; 3644 : 		const size_type _Old_size = _My_data._Mysize;

  00038	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0003e	89 4d dc	 mov	 DWORD PTR __Old_size$[ebp], ecx

; 3645 : 		if (max_size() - _Old_size < _Size_increase)

  00041	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00049	2b 45 dc	 sub	 eax, DWORD PTR __Old_size$[ebp]
  0004c	3b 45 08	 cmp	 eax, DWORD PTR __Size_increase$[ebp]
  0004f	73 05		 jae	 SHORT $LN2@Reallocate

; 3646 : 			{
; 3647 : 			_Xlen();	// result too long

  00051	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 3648 : 			}
; 3649 : 
; 3650 : 		const size_type _New_size = _Old_size + _Size_increase;

  00056	8b 45 dc	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00059	03 45 08	 add	 eax, DWORD PTR __Size_increase$[ebp]
  0005c	89 45 d0	 mov	 DWORD PTR __New_size$[ebp], eax

; 3651 : 		const size_type _Old_capacity = _My_data._Myres;

  0005f	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00062	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00065	89 4d c4	 mov	 DWORD PTR __Old_capacity$[ebp], ecx

; 3652 : 		const size_type _New_capacity = _Calculate_growth(_New_size);

  00068	8b 45 d0	 mov	 eax, DWORD PTR __New_size$[ebp]
  0006b	50		 push	 eax
  0006c	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  00074	89 45 b8	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 3653 : 		auto& _Al = this->_Getal();

  00077	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  0007f	89 45 ac	 mov	 DWORD PTR __Al$[ebp], eax

; 3654 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00082	33 c0		 xor	 eax, eax
  00084	8b 4d b8	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  00087	83 c1 01	 add	 ecx, 1
  0008a	0f 92 c0	 setb	 al
  0008d	f7 d8		 neg	 eax
  0008f	0b c1		 or	 eax, ecx
  00091	50		 push	 eax
  00092	8b 4d ac	 mov	 ecx, DWORD PTR __Al$[ebp]
  00095	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  0009a	89 45 a0	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 3655 : 		_My_data._Orphan_all();

  0009d	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000a0	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3656 : 		_My_data._Mysize = _New_size;

  000a5	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000a8	8b 4d d0	 mov	 ecx, DWORD PTR __New_size$[ebp]
  000ab	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 3657 : 		_My_data._Myres = _New_capacity;

  000ae	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000b1	8b 4d b8	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  000b4	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 3658 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  000b7	8b 45 a0	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000c0	83 c4 04	 add	 esp, 4
  000c3	89 45 94	 mov	 DWORD PTR __Raw_new$[ebp], eax

; 3659 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000c6	83 7d c4 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  000ca	72 44		 jb	 SHORT $LN3@Reallocate

; 3660 : 			{
; 3661 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  000cc	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000cf	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d2	89 4d 88	 mov	 DWORD PTR __Old_ptr$1[ebp], ecx

; 3662 : 			_Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

  000d5	8b 45 dc	 mov	 eax, DWORD PTR __Old_size$[ebp]
  000d8	50		 push	 eax
  000d9	8b 4d 88	 mov	 ecx, DWORD PTR __Old_ptr$1[ebp]
  000dc	51		 push	 ecx
  000dd	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000e2	83 c4 04	 add	 esp, 4
  000e5	50		 push	 eax
  000e6	8b 55 94	 mov	 edx, DWORD PTR __Raw_new$[ebp]
  000e9	52		 push	 edx
  000ea	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  000ed	e8 00 00 00 00	 call	 ??R<lambda_67d87d4aa1269033985980465fd1d824>@@QBE@QADQBDI@Z ; <lambda_67d87d4aa1269033985980465fd1d824>::operator()

; 3663 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000f2	8b 45 c4	 mov	 eax, DWORD PTR __Old_capacity$[ebp]
  000f5	83 c0 01	 add	 eax, 1
  000f8	50		 push	 eax
  000f9	8b 4d 88	 mov	 ecx, DWORD PTR __Old_ptr$1[ebp]
  000fc	51		 push	 ecx
  000fd	8b 4d ac	 mov	 ecx, DWORD PTR __Al$[ebp]
  00100	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 3664 : 			_My_data._Bx._Ptr = _New_ptr;

  00105	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00108	8b 4d a0	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  0010b	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 3665 : 			}
; 3666 : 		else

  0010e	eb 37		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 3667 : 			{
; 3668 : 			_Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

  00110	8b 45 dc	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00113	50		 push	 eax
  00114	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00117	83 c1 04	 add	 ecx, 4
  0011a	51		 push	 ecx
  0011b	8b 55 94	 mov	 edx, DWORD PTR __Raw_new$[ebp]
  0011e	52		 push	 edx
  0011f	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  00122	e8 00 00 00 00	 call	 ??R<lambda_67d87d4aa1269033985980465fd1d824>@@QBE@QADQBDI@Z ; <lambda_67d87d4aa1269033985980465fd1d824>::operator()

; 3669 : 			_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_ptr);

  00127	8d 45 a0	 lea	 eax, DWORD PTR __New_ptr$[ebp]
  0012a	50		 push	 eax
  0012b	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0012e	83 c1 04	 add	 ecx, 4
  00131	51		 push	 ecx
  00132	e8 00 00 00 00	 call	 ??$addressof@PAD@std@@YAPAPADAAPAD@Z ; std::addressof<char *>
  00137	83 c4 04	 add	 esp, 4
  0013a	50		 push	 eax
  0013b	8b 55 ac	 mov	 edx, DWORD PTR __Al$[ebp]
  0013e	52		 push	 edx
  0013f	e8 00 00 00 00	 call	 ??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
  00144	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@Reallocate:

; 3670 : 			}
; 3671 : 
; 3672 : 		return (*this);

  00147	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 3673 : 		}

  0014a	52		 push	 edx
  0014b	8b cd		 mov	 ecx, ebp
  0014d	50		 push	 eax
  0014e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Reallocate
  00154	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00159	58		 pop	 eax
  0015a	5a		 pop	 edx
  0015b	5f		 pop	 edi
  0015c	5e		 pop	 esi
  0015d	5b		 pop	 ebx
  0015e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00161	33 cd		 xor	 ecx, ebp
  00163	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00168	81 c4 3c 01 00
	00		 add	 esp, 316		; 0000013cH
  0016e	3b ec		 cmp	 ebp, esp
  00170	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00175	8b e5		 mov	 esp, ebp
  00177	5d		 pop	 ebp
  00178	c2 08 00	 ret	 8
  0017b	90		 npad	 1
$LN8@Reallocate:
  0017c	01 00 00 00	 DD	 1
  00180	00 00 00 00	 DD	 $LN7@Reallocate
$LN7@Reallocate:
  00184	a0 ff ff ff	 DD	 -96			; ffffffa0H
  00188	04 00 00 00	 DD	 4
  0018c	00 00 00 00	 DD	 $LN6@Reallocate
$LN6@Reallocate:
  00190	5f		 DB	 95			; 0000005fH
  00191	4e		 DB	 78			; 0000004eH
  00192	65		 DB	 101			; 00000065H
  00193	77		 DB	 119			; 00000077H
  00194	5f		 DB	 95			; 0000005fH
  00195	70		 DB	 112			; 00000070H
  00196	74		 DB	 116			; 00000074H
  00197	72		 DB	 114			; 00000072H
  00198	00		 DB	 0
??$_Reallocate_grow_by@V<lambda_67d87d4aa1269033985980465fd1d824>@@$$V@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_67d87d4aa1269033985980465fd1d824>@@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_67d87d4aa1269033985980465fd1d824> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??R<lambda_67d87d4aa1269033985980465fd1d824>@@QBE@QADQBDI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
??R<lambda_67d87d4aa1269033985980465fd1d824>@@QBE@QADQBDI@Z PROC ; <lambda_67d87d4aa1269033985980465fd1d824>::operator(), COMDAT
; _this$ = ecx

; 3112 : 				[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3113 : 				_Traits::copy(_New_ptr, _Old_ptr, _Old_size + 1);

  00023	8b 45 10	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00026	83 c0 01	 add	 eax, 1
  00029	50		 push	 eax
  0002a	8b 4d 0c	 mov	 ecx, DWORD PTR __Old_ptr$[ebp]
  0002d	51		 push	 ecx
  0002e	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3114 : 				});

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 0c 00	 ret	 12			; 0000000cH
??R<lambda_67d87d4aa1269033985980465fd1d824>@@QBE@QADQBDI@Z ENDP ; <lambda_67d87d4aa1269033985980465fd1d824>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z
_TEXT	SEGMENT
tv70 = -196						; size = 4
__Left$ = 8						; size = 4
__Left_size$ = 12					; size = 4
__Right$ = 16						; size = 4
__Right_size$ = 20					; size = 4
??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z PROC ; std::_Traits_equal<std::char_traits<char> >, COMDAT

; 24   : 	{	// compare [_Left, _Left + _Left_size) to [_Right, _Right + _Right_size) for equality using _Traits

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 25   : 	return (_Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0);

  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Left_size$[ebp]
  00021	3b 45 14	 cmp	 eax, DWORD PTR __Right_size$[ebp]
  00024	75 24		 jne	 SHORT $LN3@Traits_equ
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR __Left_size$[ebp]
  00029	51		 push	 ecx
  0002a	8b 55 10	 mov	 edx, DWORD PTR __Right$[ebp]
  0002d	52		 push	 edx
  0002e	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHQBD0I@Z ; std::char_traits<char>::compare
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	85 c0		 test	 eax, eax
  0003c	75 0c		 jne	 SHORT $LN3@Traits_equ
  0003e	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv70[ebp], 1
  00048	eb 0a		 jmp	 SHORT $LN4@Traits_equ
$LN3@Traits_equ:
  0004a	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv70[ebp], 0
$LN4@Traits_equ:
  00054	8a 85 3c ff ff
	ff		 mov	 al, BYTE PTR tv70[ebp]

; 26   : 	}

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00063	3b ec		 cmp	 ebp, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ENDP ; std::_Traits_equal<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\type_traits
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT

; 1591 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1592 : 	return (static_cast<_Ty&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1593 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\type_traits
;	COMDAT ??$forward@ABQAD@std@@YAABQADABQAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAD@std@@YAABQADABQAD@Z PROC		; std::forward<char * const &>, COMDAT

; 1591 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1592 : 	return (static_cast<_Ty&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1593 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward@ABQAD@std@@YAABQADABQAD@Z ENDP		; std::forward<char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Pocca<std::allocator<char> >, COMDAT

; 1028 : 	{	// (don't) propagate on container copy assignment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1029 : 	}

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Pocca<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0U?$integral_constant@_N$00@0@@Z PROC ; std::_Pocma<std::allocator<char> >, COMDAT

; 1041 : 	{	// propagate on container move assignment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1042 : 	_Left = _STD move(_Right);

  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::move<std::allocator<char> &>
  00027	83 c4 04	 add	 esp, 4

; 1043 : 	}

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0U?$integral_constant@_N$00@0@@Z ENDP ; std::_Pocma<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >, COMDAT
; _this$ = ecx

; 312  : 		{	// construct from forwarded values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 310  : 		: _Ty1(_STD forward<_Other1>(_Val1)),

  00023	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
  0002c	83 c4 04	 add	 esp, 4

; 311  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

  0002f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 313  : 		}

  00037	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\type_traits
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 1591 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1592 : 	return (static_cast<_Ty&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1593 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring_insert.h
;	COMDAT ??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
_TEXT	SEGMENT
tv406 = -332						; size = 8
tv290 = -324						; size = 4
tv287 = -324						; size = 8
tv285 = -324						; size = 4
tv134 = -324						; size = 4
tv324 = -320						; size = 8
tv289 = -320						; size = 4
tv284 = -320						; size = 4
tv286 = -316						; size = 4
tv136 = -316						; size = 4
tv288 = -313						; size = 1
tv283 = -313						; size = 1
$T2 = -308						; size = 4
$T3 = -296						; size = 4
$T4 = -284						; size = 4
$T5 = -272						; size = 4
$T6 = -260						; size = 4
__Ok$ = -56						; size = 8
__Pad$ = -40						; size = 4
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Data$ = 12						; size = 4
__Size$ = 16						; size = 4
??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z PROC ; std::_Insert_string<char,std::char_traits<char>,unsigned int>, COMDAT

; 24   : 	{	// insert a character-type sequence into _Ostr as if through a basic_string copy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd b4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-332]
  00021	b9 4f 00 00 00	 mov	 ecx, 79			; 0000004fH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 25   : 	ios_base::iostate _State = ios_base::goodbit;

  00044	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 26   : 	_SizeT _Pad = _Ostr.width() <= 0 || static_cast<_SizeT>(_Ostr.width()) <= _Size

  0004b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00053	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00056	8b f4		 mov	 esi, esp
  00058	8b ca		 mov	 ecx, edx
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  00060	3b f4		 cmp	 esi, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	89 85 c0 fe ff
	ff		 mov	 DWORD PTR tv324[ebp], eax
  0006d	89 95 c4 fe ff
	ff		 mov	 DWORD PTR tv324[ebp+4], edx
  00073	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR tv324[ebp+4], 0
  0007a	7c 53		 jl	 SHORT $LN17@Insert_str
  0007c	7f 09		 jg	 SHORT $LN24@Insert_str
  0007e	83 bd c0 fe ff
	ff 00		 cmp	 DWORD PTR tv324[ebp], 0
  00085	76 48		 jbe	 SHORT $LN17@Insert_str
$LN24@Insert_str:
  00087	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0008a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008c	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0008f	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00092	8b f4		 mov	 esi, esp
  00094	8b ca		 mov	 ecx, edx
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  0009c	3b f4		 cmp	 esi, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a3	3b 45 10	 cmp	 eax, DWORD PTR __Size$[ebp]
  000a6	76 27		 jbe	 SHORT $LN17@Insert_str
  000a8	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000ab	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ad	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000b0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000b3	8b f4		 mov	 esi, esp
  000b5	8b ca		 mov	 ecx, edx
  000b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000bd	3b f4		 cmp	 esi, esp
  000bf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c4	2b 45 10	 sub	 eax, DWORD PTR __Size$[ebp]
  000c7	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv134[ebp], eax
  000cd	eb 0a		 jmp	 SHORT $LN18@Insert_str
$LN17@Insert_str:
  000cf	c7 85 bc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv134[ebp], 0
$LN18@Insert_str:
  000d9	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR tv134[ebp]
  000df	89 45 d8	 mov	 DWORD PTR __Pad$[ebp], eax

; 27   : 		? 0 : static_cast<_SizeT>(_Ostr.width()) - _Size;
; 28   : 	const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

  000e2	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000e5	50		 push	 eax
  000e6	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000e9	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  000ee	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 29   : 
; 30   : 	if (!_Ok)

  000f5	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000f8	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  000fd	0f b6 c0	 movzx	 eax, al
  00100	85 c0		 test	 eax, eax
  00102	75 0e		 jne	 SHORT $LN8@Insert_str

; 31   : 		_State |= ios_base::badbit;

  00104	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00107	83 c8 04	 or	 eax, 4
  0010a	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 32   : 	else

  0010d	e9 a5 02 00 00	 jmp	 $LN9@Insert_str
$LN8@Insert_str:

; 33   : 		{	// state okay, insert characters
; 34   : 		_TRY_IO_BEGIN

  00112	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 35   : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  00116	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00119	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011b	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0011e	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00121	8b f4		 mov	 esi, esp
  00123	8b ca		 mov	 ecx, edx
  00125	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  0012b	3b f4		 cmp	 esi, esp
  0012d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00132	89 85 c4 fe ff
	ff		 mov	 DWORD PTR tv136[ebp], eax
  00138	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR tv136[ebp]
  0013e	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00143	83 f8 40	 cmp	 eax, 64			; 00000040H
  00146	0f 84 c0 00 00
	00		 je	 $LN11@Insert_str

; 36   : 			for (; 0 < _Pad; --_Pad)	// pad on left

  0014c	eb 09		 jmp	 SHORT $LN4@Insert_str
$LN2@Insert_str:
  0014e	8b 45 d8	 mov	 eax, DWORD PTR __Pad$[ebp]
  00151	83 e8 01	 sub	 eax, 1
  00154	89 45 d8	 mov	 DWORD PTR __Pad$[ebp], eax
$LN4@Insert_str:
  00157	83 7d d8 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  0015b	0f 86 ab 00 00
	00		 jbe	 $LN11@Insert_str

; 37   : 				if (_Traits::eq_int_type(_Traits::eof(),

  00161	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00164	8b 08		 mov	 ecx, DWORD PTR [eax]
  00166	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00169	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0016c	8b f4		 mov	 esi, esp
  0016e	8b ca		 mov	 ecx, edx
  00170	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  00176	3b f4		 cmp	 esi, esp
  00178	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0017d	88 85 c7 fe ff
	ff		 mov	 BYTE PTR tv283[ebp], al
  00183	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00186	8b 08		 mov	 ecx, DWORD PTR [eax]
  00188	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0018b	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0018e	8b f4		 mov	 esi, esp
  00190	8b ca		 mov	 ecx, edx
  00192	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00198	3b f4		 cmp	 esi, esp
  0019a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0019f	89 85 c0 fe ff
	ff		 mov	 DWORD PTR tv284[ebp], eax
  001a5	8b f4		 mov	 esi, esp
  001a7	0f b6 85 c7 fe
	ff ff		 movzx	 eax, BYTE PTR tv283[ebp]
  001ae	50		 push	 eax
  001af	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR tv284[ebp]
  001b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  001bb	3b f4		 cmp	 esi, esp
  001bd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001c2	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv285[ebp], eax
  001c8	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR tv285[ebp]
  001ce	89 8d fc fe ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
  001d4	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  001d9	89 85 f0 fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  001df	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  001e5	52		 push	 edx
  001e6	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  001ec	50		 push	 eax
  001ed	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  001f2	83 c4 08	 add	 esp, 8
  001f5	0f b6 c8	 movzx	 ecx, al
  001f8	85 c9		 test	 ecx, ecx
  001fa	74 0b		 je	 SHORT $LN12@Insert_str

; 38   : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 39   : 					{	// insertion failed, quit
; 40   : 					_State |= ios_base::badbit;

  001fc	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  001ff	83 c8 04	 or	 eax, 4
  00202	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 41   : 					break;

  00205	eb 05		 jmp	 SHORT $LN11@Insert_str
$LN12@Insert_str:

; 42   : 					}
; 43   : 
; 44   : 		if (_State == ios_base::goodbit

  00207	e9 42 ff ff ff	 jmp	 $LN2@Insert_str
$LN11@Insert_str:

; 45   : 			&& _Ostr.rdbuf()->sputn(_Data, (streamsize)_Size)

  0020c	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  00210	0f 85 89 00 00
	00		 jne	 $LN13@Insert_str
  00216	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00219	8b 08		 mov	 ecx, DWORD PTR [eax]
  0021b	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0021e	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00221	8b f4		 mov	 esi, esp
  00223	8b ca		 mov	 ecx, edx
  00225	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0022b	3b f4		 cmp	 esi, esp
  0022d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00232	89 85 c4 fe ff
	ff		 mov	 DWORD PTR tv286[ebp], eax
  00238	8b 45 10	 mov	 eax, DWORD PTR __Size$[ebp]
  0023b	33 c9		 xor	 ecx, ecx
  0023d	8b f4		 mov	 esi, esp
  0023f	51		 push	 ecx
  00240	50		 push	 eax
  00241	8b 55 0c	 mov	 edx, DWORD PTR __Data$[ebp]
  00244	52		 push	 edx
  00245	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR tv286[ebp]
  0024b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  00251	3b f4		 cmp	 esi, esp
  00253	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00258	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv287[ebp], eax
  0025e	89 95 c0 fe ff
	ff		 mov	 DWORD PTR tv287[ebp+4], edx
  00264	8b 45 10	 mov	 eax, DWORD PTR __Size$[ebp]
  00267	33 c9		 xor	 ecx, ecx
  00269	89 85 b4 fe ff
	ff		 mov	 DWORD PTR tv406[ebp], eax
  0026f	89 8d b8 fe ff
	ff		 mov	 DWORD PTR tv406[ebp+4], ecx
  00275	8b 95 bc fe ff
	ff		 mov	 edx, DWORD PTR tv287[ebp]
  0027b	3b 95 b4 fe ff
	ff		 cmp	 edx, DWORD PTR tv406[ebp]
  00281	75 0e		 jne	 SHORT $LN25@Insert_str
  00283	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR tv287[ebp+4]
  00289	3b 85 b8 fe ff
	ff		 cmp	 eax, DWORD PTR tv406[ebp+4]
  0028f	74 0e		 je	 SHORT $LN13@Insert_str
$LN25@Insert_str:

; 46   : 				!= (streamsize)_Size)
; 47   : 				_State |= ios_base::badbit;

  00291	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00294	83 c8 04	 or	 eax, 4
  00297	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 48   : 		else

  0029a	e9 c0 00 00 00	 jmp	 $LN14@Insert_str
$LN13@Insert_str:

; 49   : 			for (; 0 < _Pad; --_Pad)	// pad on right

  0029f	eb 09		 jmp	 SHORT $LN7@Insert_str
$LN5@Insert_str:
  002a1	8b 45 d8	 mov	 eax, DWORD PTR __Pad$[ebp]
  002a4	83 e8 01	 sub	 eax, 1
  002a7	89 45 d8	 mov	 DWORD PTR __Pad$[ebp], eax
$LN7@Insert_str:
  002aa	83 7d d8 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  002ae	0f 86 ab 00 00
	00		 jbe	 $LN14@Insert_str

; 50   : 				if (_Traits::eq_int_type(_Traits::eof(),

  002b4	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002b7	8b 08		 mov	 ecx, DWORD PTR [eax]
  002b9	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002bc	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002bf	8b f4		 mov	 esi, esp
  002c1	8b ca		 mov	 ecx, edx
  002c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  002c9	3b f4		 cmp	 esi, esp
  002cb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002d0	88 85 c7 fe ff
	ff		 mov	 BYTE PTR tv288[ebp], al
  002d6	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002d9	8b 08		 mov	 ecx, DWORD PTR [eax]
  002db	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002de	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002e1	8b f4		 mov	 esi, esp
  002e3	8b ca		 mov	 ecx, edx
  002e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  002eb	3b f4		 cmp	 esi, esp
  002ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002f2	89 85 c0 fe ff
	ff		 mov	 DWORD PTR tv289[ebp], eax
  002f8	8b f4		 mov	 esi, esp
  002fa	0f b6 85 c7 fe
	ff ff		 movzx	 eax, BYTE PTR tv288[ebp]
  00301	50		 push	 eax
  00302	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR tv289[ebp]
  00308	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  0030e	3b f4		 cmp	 esi, esp
  00310	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00315	89 85 bc fe ff
	ff		 mov	 DWORD PTR tv290[ebp], eax
  0031b	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR tv290[ebp]
  00321	89 8d e4 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], ecx
  00327	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0032c	89 85 d8 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00332	8d 95 e4 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  00338	52		 push	 edx
  00339	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0033f	50		 push	 eax
  00340	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  00345	83 c4 08	 add	 esp, 8
  00348	0f b6 c8	 movzx	 ecx, al
  0034b	85 c9		 test	 ecx, ecx
  0034d	74 0b		 je	 SHORT $LN15@Insert_str

; 51   : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 52   : 					{	// insertion failed, quit
; 53   : 					_State |= ios_base::badbit;

  0034f	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00352	83 c8 04	 or	 eax, 4
  00355	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 54   : 					break;

  00358	eb 05		 jmp	 SHORT $LN14@Insert_str
$LN15@Insert_str:

; 55   : 					}

  0035a	e9 42 ff ff ff	 jmp	 $LN5@Insert_str
$LN14@Insert_str:

; 56   : 		_Ostr.width(0);

  0035f	8b f4		 mov	 esi, esp
  00361	6a 00		 push	 0
  00363	6a 00		 push	 0
  00365	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00368	8b 08		 mov	 ecx, DWORD PTR [eax]
  0036a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0036d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00370	8b ca		 mov	 ecx, edx
  00372	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  00378	3b f4		 cmp	 esi, esp
  0037a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0037f	eb 26		 jmp	 SHORT $LN19@Insert_str
__catch$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$0:

; 57   : 		_CATCH_IO_(_Ostr)

  00381	8b f4		 mov	 esi, esp
  00383	6a 01		 push	 1
  00385	6a 04		 push	 4
  00387	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0038a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0038c	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0038f	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00392	8b ca		 mov	 ecx, edx
  00394	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  0039a	3b f4		 cmp	 esi, esp
  0039c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003a1	b8 00 00 00 00	 mov	 eax, $LN23@Insert_str
  003a6	c3		 ret	 0
$LN19@Insert_str:
  003a7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  003ae	eb 07		 jmp	 SHORT $LN9@Insert_str
$LN23@Insert_str:
  003b0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN9@Insert_str:

; 58   : 		}
; 59   : 
; 60   : 	_Ostr.setstate(_State);

  003b7	8b f4		 mov	 esi, esp
  003b9	6a 00		 push	 0
  003bb	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  003be	50		 push	 eax
  003bf	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003c2	8b 11		 mov	 edx, DWORD PTR [ecx]
  003c4	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003c7	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  003ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003d0	3b f4		 cmp	 esi, esp
  003d2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 61   : 	return (_Ostr);

  003d7	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003da	89 85 cc fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  003e0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  003e7	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  003ea	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  003ef	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 62   : 	}

  003f5	52		 push	 edx
  003f6	8b cd		 mov	 ecx, ebp
  003f8	50		 push	 eax
  003f9	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN29@Insert_str
  003ff	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00404	58		 pop	 eax
  00405	5a		 pop	 edx
  00406	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00409	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00410	59		 pop	 ecx
  00411	5f		 pop	 edi
  00412	5e		 pop	 esi
  00413	5b		 pop	 ebx
  00414	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00417	33 cd		 xor	 ecx, ebp
  00419	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0041e	81 c4 4c 01 00
	00		 add	 esp, 332		; 0000014cH
  00424	3b ec		 cmp	 ebp, esp
  00426	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0042b	8b e5		 mov	 esp, ebp
  0042d	5d		 pop	 ebp
  0042e	c3		 ret	 0
  0042f	90		 npad	 1
$LN29@Insert_str:
  00430	01 00 00 00	 DD	 1
  00434	00 00 00 00	 DD	 $LN28@Insert_str
$LN28@Insert_str:
  00438	c8 ff ff ff	 DD	 -56			; ffffffc8H
  0043c	08 00 00 00	 DD	 8
  00440	00 00 00 00	 DD	 $LN26@Insert_str
$LN26@Insert_str:
  00444	5f		 DB	 95			; 0000005fH
  00445	4f		 DB	 79			; 0000004fH
  00446	6b		 DB	 107			; 0000006bH
  00447	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$2:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a b0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-336]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z ENDP ; std::_Insert_string<char,std::char_traits<char>,unsigned int>
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\string
;	COMDAT ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
_TEXT	SEGMENT
tv201 = -308						; size = 4
tv199 = -308						; size = 4
tv202 = -304						; size = 4
tv200 = -304						; size = 4
tv65 = -304						; size = 4
$T2 = -296						; size = 4
$T3 = -284						; size = 4
__Meta$4 = -80						; size = 4
__Metadelim$5 = -68					; size = 4
__Ok$ = -56						; size = 8
__Changed$ = -37					; size = 1
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
__Delim$ = 16						; size = 1
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z PROC ; std::getline<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 75   : 	{	// get characters into string, discard delimiter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd cc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-308]
  00021	b9 49 00 00 00	 mov	 ecx, 73			; 00000049H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 76   : 	typedef basic_istream<_Elem, _Traits> _Myis;
; 77   : 
; 78   : 	ios_base::iostate _State = ios_base::goodbit;

  00044	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 79   : 	bool _Changed = false;

  0004b	c6 45 db 00	 mov	 BYTE PTR __Changed$[ebp], 0

; 80   : 	const typename _Myis::sentry _Ok(_Istr, true);

  0004f	6a 01		 push	 1
  00051	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00054	50		 push	 eax
  00055	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00058	e8 00 00 00 00	 call	 ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 81   : 
; 82   : 	if (_Ok)

  00064	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00067	e8 00 00 00 00	 call	 ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
  0006c	0f b6 c0	 movzx	 eax, al
  0006f	85 c0		 test	 eax, eax
  00071	0f 84 b5 01 00
	00		 je	 $LN5@getline

; 83   : 		{	// state okay, extract characters
; 84   : 		_TRY_IO_BEGIN

  00077	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 85   : 		_Str.erase();

  0007b	6a 00		 push	 0
  0007d	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00080	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 86   : 		const typename _Traits::int_type _Metadelim =
; 87   : 			_Traits::to_int_type(_Delim);

  00085	8d 45 10	 lea	 eax, DWORD PTR __Delim$[ebp]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  0008e	83 c4 04	 add	 esp, 4
  00091	89 45 bc	 mov	 DWORD PTR __Metadelim$5[ebp], eax

; 88   : 		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  00094	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00097	8b 08		 mov	 ecx, DWORD PTR [eax]
  00099	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  0009c	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0009f	8b f4		 mov	 esi, esp
  000a1	8b ca		 mov	 ecx, edx
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  000a9	3b f4		 cmp	 esi, esp
  000ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b0	89 85 d0 fe ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  000b6	8b f4		 mov	 esi, esp
  000b8	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR tv65[ebp]
  000be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
  000c4	3b f4		 cmp	 esi, esp
  000c6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cb	89 85 cc fe ff
	ff		 mov	 DWORD PTR tv199[ebp], eax
  000d1	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR tv199[ebp]
  000d7	89 45 b0	 mov	 DWORD PTR __Meta$4[ebp], eax
  000da	eb 46		 jmp	 SHORT $LN4@getline
$LN2@getline:

; 89   : 
; 90   : 		for (; ; _Meta = _Istr.rdbuf()->snextc())

  000dc	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  000df	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e1	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  000e4	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000e7	8b f4		 mov	 esi, esp
  000e9	8b ca		 mov	 ecx, edx
  000eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  000f1	3b f4		 cmp	 esi, esp
  000f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f8	89 85 d0 fe ff
	ff		 mov	 DWORD PTR tv200[ebp], eax
  000fe	8b f4		 mov	 esi, esp
  00100	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR tv200[ebp]
  00106	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
  0010c	3b f4		 cmp	 esi, esp
  0010e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00113	89 85 cc fe ff
	ff		 mov	 DWORD PTR tv201[ebp], eax
  00119	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR tv201[ebp]
  0011f	89 45 b0	 mov	 DWORD PTR __Meta$4[ebp], eax
$LN4@getline:

; 91   : 			if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  00122	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00127	89 85 e4 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  0012d	8d 45 b0	 lea	 eax, DWORD PTR __Meta$4[ebp]
  00130	50		 push	 eax
  00131	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00137	51		 push	 ecx
  00138	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0013d	83 c4 08	 add	 esp, 8
  00140	0f b6 d0	 movzx	 edx, al
  00143	85 d2		 test	 edx, edx
  00145	74 13		 je	 SHORT $LN7@getline

; 92   : 				{	// end of file, quit
; 93   : 				_State |= ios_base::eofbit;

  00147	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  0014a	83 c8 01	 or	 eax, 1
  0014d	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 94   : 				break;

  00150	e9 9f 00 00 00	 jmp	 $LN3@getline
  00155	e9 95 00 00 00	 jmp	 $LN8@getline
$LN7@getline:

; 95   : 				}
; 96   : 			else if (_Traits::eq_int_type(_Meta, _Metadelim))

  0015a	8d 45 bc	 lea	 eax, DWORD PTR __Metadelim$5[ebp]
  0015d	50		 push	 eax
  0015e	8d 4d b0	 lea	 ecx, DWORD PTR __Meta$4[ebp]
  00161	51		 push	 ecx
  00162	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  00167	83 c4 08	 add	 esp, 8
  0016a	0f b6 d0	 movzx	 edx, al
  0016d	85 d2		 test	 edx, edx
  0016f	74 3f		 je	 SHORT $LN9@getline

; 97   : 				{	// got a delimiter, discard it and quit
; 98   : 				_Changed = true;

  00171	c6 45 db 01	 mov	 BYTE PTR __Changed$[ebp], 1

; 99   : 				_Istr.rdbuf()->sbumpc();

  00175	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00178	8b 08		 mov	 ecx, DWORD PTR [eax]
  0017a	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  0017d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00180	8b f4		 mov	 esi, esp
  00182	8b ca		 mov	 ecx, edx
  00184	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0018a	3b f4		 cmp	 esi, esp
  0018c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00191	89 85 d0 fe ff
	ff		 mov	 DWORD PTR tv202[ebp], eax
  00197	8b f4		 mov	 esi, esp
  00199	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR tv202[ebp]
  0019f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
  001a5	3b f4		 cmp	 esi, esp
  001a7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 100  : 				break;

  001ac	eb 46		 jmp	 SHORT $LN3@getline
  001ae	eb 3f		 jmp	 SHORT $LN8@getline
$LN9@getline:

; 101  : 				}
; 102  : 			else if (_Str.max_size() <= _Str.size())

  001b0	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  001b3	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  001b8	8b f0		 mov	 esi, eax
  001ba	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  001bd	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  001c2	3b c6		 cmp	 eax, esi
  001c4	77 0d		 ja	 SHORT $LN11@getline

; 103  : 				{	// string too large, quit
; 104  : 				_State |= ios_base::failbit;

  001c6	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  001c9	83 c8 02	 or	 eax, 2
  001cc	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 105  : 				break;

  001cf	eb 23		 jmp	 SHORT $LN3@getline

; 106  : 				}
; 107  : 			else

  001d1	eb 1c		 jmp	 SHORT $LN8@getline
$LN11@getline:

; 108  : 				{	// got a character, add it to string
; 109  : 				_Str += _Traits::to_char_type(_Meta);

  001d3	8d 45 b0	 lea	 eax, DWORD PTR __Meta$4[ebp]
  001d6	50		 push	 eax
  001d7	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  001dc	83 c4 04	 add	 esp, 4
  001df	0f b6 c8	 movzx	 ecx, al
  001e2	51		 push	 ecx
  001e3	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  001e6	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 110  : 				_Changed = true;

  001eb	c6 45 db 01	 mov	 BYTE PTR __Changed$[ebp], 1
$LN8@getline:

; 111  : 				}

  001ef	e9 e8 fe ff ff	 jmp	 $LN2@getline
$LN3@getline:
  001f4	eb 26		 jmp	 SHORT $LN15@getline
__catch$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$0:

; 112  : 		_CATCH_IO_(_Istr)

  001f6	8b f4		 mov	 esi, esp
  001f8	6a 01		 push	 1
  001fa	6a 04		 push	 4
  001fc	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  001ff	8b 08		 mov	 ecx, DWORD PTR [eax]
  00201	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00204	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00207	8b ca		 mov	 ecx, edx
  00209	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  0020f	3b f4		 cmp	 esi, esp
  00211	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00216	b8 00 00 00 00	 mov	 eax, $LN19@getline
  0021b	c3		 ret	 0
$LN15@getline:
  0021c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00223	eb 07		 jmp	 SHORT $LN5@getline
$LN19@getline:
  00225	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN5@getline:

; 113  : 		}
; 114  : 
; 115  : 	if (!_Changed)

  0022c	0f b6 45 db	 movzx	 eax, BYTE PTR __Changed$[ebp]
  00230	85 c0		 test	 eax, eax
  00232	75 09		 jne	 SHORT $LN13@getline

; 116  : 		_State |= ios_base::failbit;

  00234	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00237	83 c8 02	 or	 eax, 2
  0023a	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN13@getline:

; 117  : 	_Istr.setstate(_State);

  0023d	8b f4		 mov	 esi, esp
  0023f	6a 00		 push	 0
  00241	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00244	50		 push	 eax
  00245	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00248	8b 11		 mov	 edx, DWORD PTR [ecx]
  0024a	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  0024d	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00250	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00256	3b f4		 cmp	 esi, esp
  00258	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 118  : 	return (_Istr);

  0025d	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00260	89 85 d8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00266	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0026d	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00270	e8 00 00 00 00	 call	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00275	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 119  : 	}

  0027b	52		 push	 edx
  0027c	8b cd		 mov	 ecx, ebp
  0027e	50		 push	 eax
  0027f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN25@getline
  00285	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0028a	58		 pop	 eax
  0028b	5a		 pop	 edx
  0028c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0028f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00296	59		 pop	 ecx
  00297	5f		 pop	 edi
  00298	5e		 pop	 esi
  00299	5b		 pop	 ebx
  0029a	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0029d	33 cd		 xor	 ecx, ebp
  0029f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002a4	81 c4 34 01 00
	00		 add	 esp, 308		; 00000134H
  002aa	3b ec		 cmp	 ebp, esp
  002ac	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002b1	8b e5		 mov	 esp, ebp
  002b3	5d		 pop	 ebp
  002b4	c3		 ret	 0
  002b5	0f 1f 00	 npad	 3
$LN25@getline:
  002b8	03 00 00 00	 DD	 3
  002bc	00 00 00 00	 DD	 $LN24@getline
$LN24@getline:
  002c0	c8 ff ff ff	 DD	 -56			; ffffffc8H
  002c4	08 00 00 00	 DD	 8
  002c8	00 00 00 00	 DD	 $LN20@getline
  002cc	bc ff ff ff	 DD	 -68			; ffffffbcH
  002d0	04 00 00 00	 DD	 4
  002d4	00 00 00 00	 DD	 $LN21@getline
  002d8	b0 ff ff ff	 DD	 -80			; ffffffb0H
  002dc	04 00 00 00	 DD	 4
  002e0	00 00 00 00	 DD	 $LN22@getline
$LN22@getline:
  002e4	5f		 DB	 95			; 0000005fH
  002e5	4d		 DB	 77			; 0000004dH
  002e6	65		 DB	 101			; 00000065H
  002e7	74		 DB	 116			; 00000074H
  002e8	61		 DB	 97			; 00000061H
  002e9	00		 DB	 0
$LN21@getline:
  002ea	5f		 DB	 95			; 0000005fH
  002eb	4d		 DB	 77			; 0000004dH
  002ec	65		 DB	 101			; 00000065H
  002ed	74		 DB	 116			; 00000074H
  002ee	61		 DB	 97			; 00000061H
  002ef	64		 DB	 100			; 00000064H
  002f0	65		 DB	 101			; 00000065H
  002f1	6c		 DB	 108			; 0000006cH
  002f2	69		 DB	 105			; 00000069H
  002f3	6d		 DB	 109			; 0000006dH
  002f4	00		 DB	 0
$LN20@getline:
  002f5	5f		 DB	 95			; 0000005fH
  002f6	4f		 DB	 79			; 0000004fH
  002f7	6b		 DB	 107			; 0000006bH
  002f8	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$2:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
__ehhandler$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a c8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-312]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z ENDP ; std::getline<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ??$_Eval@Vrandom_device@std@@@?$uniform_int@H@std@@ABEHAAVrandom_device@1@HH@Z
_TEXT	SEGMENT
__Uret$ = -68						; size = 4
__Umax$ = -56						; size = 4
__Umin$ = -44						; size = 4
__Rng$ = -32						; size = 12
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__Eng$ = 8						; size = 4
__Min$ = 12						; size = 4
__Max$ = 16						; size = 4
??$_Eval@Vrandom_device@std@@@?$uniform_int@H@std@@ABEHAAVrandom_device@1@HH@Z PROC ; std::uniform_int<int>::_Eval<std::random_device>, COMDAT
; _this$ = ecx

; 2352 : 		{	// compute next value in range [_Min, _Max]

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00013	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 2353 : 		_Rng_from_urng<_Uty, _Engine> _Rng(_Eng);

  0002d	8b 45 08	 mov	 eax, DWORD PTR __Eng$[ebp]
  00030	50		 push	 eax
  00031	8d 4d e0	 lea	 ecx, DWORD PTR __Rng$[ebp]
  00034	e8 00 00 00 00	 call	 ??0?$_Rng_from_urng@IVrandom_device@std@@@std@@QAE@AAVrandom_device@1@@Z ; std::_Rng_from_urng<unsigned int,std::random_device>::_Rng_from_urng<unsigned int,std::random_device>

; 2354 : 
; 2355 : 		const _Uty _Umin = _Adjust(_Uty(_Min));

  00039	8b 45 0c	 mov	 eax, DWORD PTR __Min$[ebp]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?_Adjust@?$uniform_int@H@std@@CAII@Z ; std::uniform_int<int>::_Adjust
  00042	83 c4 04	 add	 esp, 4
  00045	89 45 d4	 mov	 DWORD PTR __Umin$[ebp], eax

; 2356 : 		const _Uty _Umax = _Adjust(_Uty(_Max));

  00048	8b 45 10	 mov	 eax, DWORD PTR __Max$[ebp]
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?_Adjust@?$uniform_int@H@std@@CAII@Z ; std::uniform_int<int>::_Adjust
  00051	83 c4 04	 add	 esp, 4
  00054	89 45 c8	 mov	 DWORD PTR __Umax$[ebp], eax

; 2357 : 
; 2358 : 		_Uty _Uret = 0;

  00057	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR __Uret$[ebp], 0

; 2359 : 
; 2360 : 		if (_Umax - _Umin == _Uty(-1))

  0005e	8b 45 c8	 mov	 eax, DWORD PTR __Umax$[ebp]
  00061	2b 45 d4	 sub	 eax, DWORD PTR __Umin$[ebp]
  00064	83 f8 ff	 cmp	 eax, -1
  00067	75 0d		 jne	 SHORT $LN2@Eval

; 2361 : 			_Uret = static_cast<_Uty>(_Rng._Get_all_bits());

  00069	8d 4d e0	 lea	 ecx, DWORD PTR __Rng$[ebp]
  0006c	e8 00 00 00 00	 call	 ?_Get_all_bits@?$_Rng_from_urng@IVrandom_device@std@@@std@@QAEIXZ ; std::_Rng_from_urng<unsigned int,std::random_device>::_Get_all_bits
  00071	89 45 bc	 mov	 DWORD PTR __Uret$[ebp], eax

; 2362 : 		else

  00074	eb 15		 jmp	 SHORT $LN3@Eval
$LN2@Eval:

; 2363 : 			_Uret = static_cast<_Uty>(_Rng(_Umax - _Umin + 1));

  00076	8b 45 c8	 mov	 eax, DWORD PTR __Umax$[ebp]
  00079	2b 45 d4	 sub	 eax, DWORD PTR __Umin$[ebp]
  0007c	83 c0 01	 add	 eax, 1
  0007f	50		 push	 eax
  00080	8d 4d e0	 lea	 ecx, DWORD PTR __Rng$[ebp]
  00083	e8 00 00 00 00	 call	 ??R?$_Rng_from_urng@IVrandom_device@std@@@std@@QAEII@Z ; std::_Rng_from_urng<unsigned int,std::random_device>::operator()
  00088	89 45 bc	 mov	 DWORD PTR __Uret$[ebp], eax
$LN3@Eval:

; 2364 : 
; 2365 : 		return (_Ty(_Adjust(_Uret + _Umin)));

  0008b	8b 45 bc	 mov	 eax, DWORD PTR __Uret$[ebp]
  0008e	03 45 d4	 add	 eax, DWORD PTR __Umin$[ebp]
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ?_Adjust@?$uniform_int@H@std@@CAII@Z ; std::uniform_int<int>::_Adjust
  00097	83 c4 04	 add	 esp, 4

; 2366 : 		}

  0009a	52		 push	 edx
  0009b	8b cd		 mov	 ecx, ebp
  0009d	50		 push	 eax
  0009e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@Eval
  000a4	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000a9	58		 pop	 eax
  000aa	5a		 pop	 edx
  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
  000ad	5b		 pop	 ebx
  000ae	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b1	33 cd		 xor	 ecx, ebp
  000b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b8	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  000be	3b ec		 cmp	 ebp, esp
  000c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c2 0c 00	 ret	 12			; 0000000cH
  000cb	90		 npad	 1
$LN7@Eval:
  000cc	01 00 00 00	 DD	 1
  000d0	00 00 00 00	 DD	 $LN6@Eval
$LN6@Eval:
  000d4	e0 ff ff ff	 DD	 -32			; ffffffe0H
  000d8	0c 00 00 00	 DD	 12			; 0000000cH
  000dc	00 00 00 00	 DD	 $LN5@Eval
$LN5@Eval:
  000e0	5f		 DB	 95			; 0000005fH
  000e1	52		 DB	 82			; 00000052H
  000e2	6e		 DB	 110			; 0000006eH
  000e3	67		 DB	 103			; 00000067H
  000e4	00		 DB	 0
??$_Eval@Vrandom_device@std@@@?$uniform_int@H@std@@ABEHAAVrandom_device@1@HH@Z ENDP ; std::uniform_int<int>::_Eval<std::random_device>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\type_traits
;	COMDAT ??$move@AAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::move<std::basic_istream<char,std::char_traits<char> > &>, COMDAT

; 1606 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1607 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1608 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$move@AAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::move<std::basic_istream<char,std::char_traits<char> > &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>, COMDAT
; _this$ = ecx

; 936  : 		{	// construct from a related allocator (do nothing)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 937  : 		}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstddef
;	COMDAT ??$_Unfancy@$$CBD@std@@YAPBDPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@$$CBD@std@@YAPBDPBD@Z PROC			; std::_Unfancy<char const >, COMDAT

; 264  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 265  : 	return (_Ptr);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 266  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Unfancy@$$CBD@std@@YAPBDPBD@Z ENDP			; std::_Unfancy<char const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT

; 854  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 855  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00021	50		 push	 eax
  00022	6a 08		 push	 8
  00024	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00029	83 c4 08	 add	 esp, 8
  0002c	89 85 38 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00032	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00035	51		 push	 ecx
  00036	e8 00 00 00 00	 call	 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
  0003b	83 c4 04	 add	 esp, 4
  0003e	8b 10		 mov	 edx, DWORD PTR [eax]
  00040	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00043	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  00049	89 11		 mov	 DWORD PTR [ecx], edx
  0004b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 856  : 			_Objty(_STD forward<_Types>(_Args)...);
; 857  : 		}

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00057	3b ec		 cmp	 ebp, esp
  00059	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 264  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 265  : 	return (_Ptr);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 266  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>, COMDAT

; 1220 : 	{	// deallocate a plain pointer using an allocator, non-fancy pointers special case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1221 : 	allocator_traits<_Alloc>::deallocate(_Al, _Ptr, 1);

  0001e	6a 01		 push	 1
  00020	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1222 : 	}

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT

; 861  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 862  : 		_Ptr->~_Uty();
; 863  : 		}

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 847  : 		{	// deallocate _Count elements at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 848  : 		_Deallocate(_Ptr, _Count, sizeof(value_type));

  0001e	6a 08		 push	 8
  00020	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 ?_Deallocate@std@@YAXPAXII@Z ; std::_Deallocate
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 849  : 		}

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 945  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 946  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof(_Ty))));

  00023	6a 01		 push	 1
  00025	6a 08		 push	 8
  00027	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?_Allocate@std@@YAPAXII_N@Z ; std::_Allocate
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 947  : 		}

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>, COMDAT

; 854  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 855  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00021	50		 push	 eax
  00022	6a 04		 push	 4
  00024	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00029	83 c4 08	 add	 esp, 8
  0002c	89 85 38 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00032	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00035	51		 push	 ecx
  00036	e8 00 00 00 00	 call	 ??$forward@ABQAD@std@@YAABQADABQAD@Z ; std::forward<char * const &>
  0003b	83 c4 04	 add	 esp, 4
  0003e	8b 95 38 ff ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  00044	8b 00		 mov	 eax, DWORD PTR [eax]
  00046	89 02		 mov	 DWORD PTR [edx], eax

; 856  : 			_Objty(_STD forward<_Types>(_Args)...);
; 857  : 		}

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z
_TEXT	SEGMENT
__Old_ptr$1 = -120					; size = 4
__Raw_new$ = -108					; size = 4
__New_ptr$ = -96					; size = 4
__Al$ = -84						; size = 4
__New_capacity$ = -72					; size = 4
__Old_capacity$ = -60					; size = 4
__New_size$ = -48					; size = 4
__Old_size$ = -36					; size = 4
__My_data$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>, COMDAT
; _this$ = ecx

; 3641 : 		{	// reallocate to increase size by _Size_increase elements, new buffer prepared by

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd c4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-316]
  00013	b9 4f 00 00 00	 mov	 ecx, 79			; 0000004fH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 3642 : 			// _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 3643 : 		auto& _My_data = this->_Get_data();

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00035	89 45 e8	 mov	 DWORD PTR __My_data$[ebp], eax

; 3644 : 		const size_type _Old_size = _My_data._Mysize;

  00038	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0003e	89 4d dc	 mov	 DWORD PTR __Old_size$[ebp], ecx

; 3645 : 		if (max_size() - _Old_size < _Size_increase)

  00041	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00049	2b 45 dc	 sub	 eax, DWORD PTR __Old_size$[ebp]
  0004c	3b 45 08	 cmp	 eax, DWORD PTR __Size_increase$[ebp]
  0004f	73 05		 jae	 SHORT $LN2@Reallocate

; 3646 : 			{
; 3647 : 			_Xlen();	// result too long

  00051	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 3648 : 			}
; 3649 : 
; 3650 : 		const size_type _New_size = _Old_size + _Size_increase;

  00056	8b 45 dc	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00059	03 45 08	 add	 eax, DWORD PTR __Size_increase$[ebp]
  0005c	89 45 d0	 mov	 DWORD PTR __New_size$[ebp], eax

; 3651 : 		const size_type _Old_capacity = _My_data._Myres;

  0005f	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00062	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00065	89 4d c4	 mov	 DWORD PTR __Old_capacity$[ebp], ecx

; 3652 : 		const size_type _New_capacity = _Calculate_growth(_New_size);

  00068	8b 45 d0	 mov	 eax, DWORD PTR __New_size$[ebp]
  0006b	50		 push	 eax
  0006c	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  00074	89 45 b8	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 3653 : 		auto& _Al = this->_Getal();

  00077	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  0007f	89 45 ac	 mov	 DWORD PTR __Al$[ebp], eax

; 3654 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00082	33 c0		 xor	 eax, eax
  00084	8b 4d b8	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  00087	83 c1 01	 add	 ecx, 1
  0008a	0f 92 c0	 setb	 al
  0008d	f7 d8		 neg	 eax
  0008f	0b c1		 or	 eax, ecx
  00091	50		 push	 eax
  00092	8b 4d ac	 mov	 ecx, DWORD PTR __Al$[ebp]
  00095	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  0009a	89 45 a0	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 3655 : 		_My_data._Orphan_all();

  0009d	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000a0	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3656 : 		_My_data._Mysize = _New_size;

  000a5	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000a8	8b 4d d0	 mov	 ecx, DWORD PTR __New_size$[ebp]
  000ab	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 3657 : 		_My_data._Myres = _New_capacity;

  000ae	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000b1	8b 4d b8	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  000b4	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 3658 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  000b7	8b 45 a0	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000c0	83 c4 04	 add	 esp, 4
  000c3	89 45 94	 mov	 DWORD PTR __Raw_new$[ebp], eax

; 3659 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000c6	83 7d c4 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  000ca	72 4c		 jb	 SHORT $LN3@Reallocate

; 3660 : 			{
; 3661 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  000cc	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000cf	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d2	89 4d 88	 mov	 DWORD PTR __Old_ptr$1[ebp], ecx

; 3662 : 			_Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

  000d5	8b 45 14	 mov	 eax, DWORD PTR _<_Args_1>$[ebp]
  000d8	50		 push	 eax
  000d9	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  000dc	51		 push	 ecx
  000dd	8b 55 dc	 mov	 edx, DWORD PTR __Old_size$[ebp]
  000e0	52		 push	 edx
  000e1	8b 45 88	 mov	 eax, DWORD PTR __Old_ptr$1[ebp]
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000ea	83 c4 04	 add	 esp, 4
  000ed	50		 push	 eax
  000ee	8b 4d 94	 mov	 ecx, DWORD PTR __Raw_new$[ebp]
  000f1	51		 push	 ecx
  000f2	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  000f5	e8 00 00 00 00	 call	 ??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()

; 3663 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000fa	8b 45 c4	 mov	 eax, DWORD PTR __Old_capacity$[ebp]
  000fd	83 c0 01	 add	 eax, 1
  00100	50		 push	 eax
  00101	8b 4d 88	 mov	 ecx, DWORD PTR __Old_ptr$1[ebp]
  00104	51		 push	 ecx
  00105	8b 4d ac	 mov	 ecx, DWORD PTR __Al$[ebp]
  00108	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 3664 : 			_My_data._Bx._Ptr = _New_ptr;

  0010d	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00110	8b 4d a0	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  00113	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 3665 : 			}
; 3666 : 		else

  00116	eb 3f		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 3667 : 			{
; 3668 : 			_Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

  00118	8b 45 14	 mov	 eax, DWORD PTR _<_Args_1>$[ebp]
  0011b	50		 push	 eax
  0011c	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0011f	51		 push	 ecx
  00120	8b 55 dc	 mov	 edx, DWORD PTR __Old_size$[ebp]
  00123	52		 push	 edx
  00124	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00127	83 c0 04	 add	 eax, 4
  0012a	50		 push	 eax
  0012b	8b 4d 94	 mov	 ecx, DWORD PTR __Raw_new$[ebp]
  0012e	51		 push	 ecx
  0012f	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  00132	e8 00 00 00 00	 call	 ??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()

; 3669 : 			_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_ptr);

  00137	8d 45 a0	 lea	 eax, DWORD PTR __New_ptr$[ebp]
  0013a	50		 push	 eax
  0013b	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0013e	83 c1 04	 add	 ecx, 4
  00141	51		 push	 ecx
  00142	e8 00 00 00 00	 call	 ??$addressof@PAD@std@@YAPAPADAAPAD@Z ; std::addressof<char *>
  00147	83 c4 04	 add	 esp, 4
  0014a	50		 push	 eax
  0014b	8b 55 ac	 mov	 edx, DWORD PTR __Al$[ebp]
  0014e	52		 push	 edx
  0014f	e8 00 00 00 00	 call	 ??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
  00154	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@Reallocate:

; 3670 : 			}
; 3671 : 
; 3672 : 		return (*this);

  00157	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 3673 : 		}

  0015a	52		 push	 edx
  0015b	8b cd		 mov	 ecx, ebp
  0015d	50		 push	 eax
  0015e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Reallocate
  00164	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00169	58		 pop	 eax
  0016a	5a		 pop	 edx
  0016b	5f		 pop	 edi
  0016c	5e		 pop	 esi
  0016d	5b		 pop	 ebx
  0016e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00171	33 cd		 xor	 ecx, ebp
  00173	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00178	81 c4 3c 01 00
	00		 add	 esp, 316		; 0000013cH
  0017e	3b ec		 cmp	 ebp, esp
  00180	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00185	8b e5		 mov	 esp, ebp
  00187	5d		 pop	 ebp
  00188	c2 10 00	 ret	 16			; 00000010H
  0018b	90		 npad	 1
$LN8@Reallocate:
  0018c	01 00 00 00	 DD	 1
  00190	00 00 00 00	 DD	 $LN7@Reallocate
$LN7@Reallocate:
  00194	a0 ff ff ff	 DD	 -96			; ffffffa0H
  00198	04 00 00 00	 DD	 4
  0019c	00 00 00 00	 DD	 $LN6@Reallocate
$LN6@Reallocate:
  001a0	5f		 DB	 95			; 0000005fH
  001a1	4e		 DB	 78			; 0000004eH
  001a2	65		 DB	 101			; 00000065H
  001a3	77		 DB	 119			; 00000077H
  001a4	5f		 DB	 95			; 0000005fH
  001a5	70		 DB	 112			; 00000070H
  001a6	74		 DB	 116			; 00000074H
  001a7	72		 DB	 114			; 00000072H
  001a8	00		 DB	 0
??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
__Ptr$ = 20						; size = 4
__Count$ = 24						; size = 4
??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z PROC ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator(), COMDAT
; _this$ = ecx

; 2362 : 				const _Elem * const _Ptr, const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2363 : 			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);

  00023	8b 45 10	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 0c	 mov	 ecx, DWORD PTR __Old_ptr$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2364 : 			_Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);

  00037	8b 45 18	 mov	 eax, DWORD PTR __Count$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 14	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0003e	51		 push	 ecx
  0003f	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  00042	03 55 10	 add	 edx, DWORD PTR __Old_size$[ebp]
  00045	52		 push	 edx
  00046	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2365 : 			_Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0004e	c6 85 2f ff ff
	ff 00		 mov	 BYTE PTR $T1[ebp], 0
  00055	8d 85 2f ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0005b	50		 push	 eax
  0005c	8b 4d 10	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  0005f	03 4d 18	 add	 ecx, DWORD PTR __Count$[ebp]
  00062	03 4d 08	 add	 ecx, DWORD PTR __New_ptr$[ebp]
  00065	51		 push	 ecx
  00066	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  0006b	83 c4 08	 add	 esp, 8

; 2366 : 			}, _Ptr, _Count));

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00077	3b ec		 cmp	 ebp, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 14 00	 ret	 20			; 00000014H
??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z ENDP ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@Z
_TEXT	SEGMENT
__Old_ptr$1 = -120					; size = 4
__Raw_new$ = -108					; size = 4
__New_ptr$ = -96					; size = 4
__Al$ = -84						; size = 4
__New_capacity$ = -72					; size = 4
__Old_capacity$ = -60					; size = 4
__New_size$ = -48					; size = 4
__Old_size$ = -36					; size = 4
__My_data$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 1
??$_Reallocate_grow_by@V<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_c1b8c41cb4019640539cfd828748c4d4>,unsigned int,char>, COMDAT
; _this$ = ecx

; 3641 : 		{	// reallocate to increase size by _Size_increase elements, new buffer prepared by

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd c4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-316]
  00013	b9 4f 00 00 00	 mov	 ecx, 79			; 0000004fH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 3642 : 			// _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 3643 : 		auto& _My_data = this->_Get_data();

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00035	89 45 e8	 mov	 DWORD PTR __My_data$[ebp], eax

; 3644 : 		const size_type _Old_size = _My_data._Mysize;

  00038	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0003e	89 4d dc	 mov	 DWORD PTR __Old_size$[ebp], ecx

; 3645 : 		if (max_size() - _Old_size < _Size_increase)

  00041	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00049	2b 45 dc	 sub	 eax, DWORD PTR __Old_size$[ebp]
  0004c	3b 45 08	 cmp	 eax, DWORD PTR __Size_increase$[ebp]
  0004f	73 05		 jae	 SHORT $LN2@Reallocate

; 3646 : 			{
; 3647 : 			_Xlen();	// result too long

  00051	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 3648 : 			}
; 3649 : 
; 3650 : 		const size_type _New_size = _Old_size + _Size_increase;

  00056	8b 45 dc	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00059	03 45 08	 add	 eax, DWORD PTR __Size_increase$[ebp]
  0005c	89 45 d0	 mov	 DWORD PTR __New_size$[ebp], eax

; 3651 : 		const size_type _Old_capacity = _My_data._Myres;

  0005f	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00062	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00065	89 4d c4	 mov	 DWORD PTR __Old_capacity$[ebp], ecx

; 3652 : 		const size_type _New_capacity = _Calculate_growth(_New_size);

  00068	8b 45 d0	 mov	 eax, DWORD PTR __New_size$[ebp]
  0006b	50		 push	 eax
  0006c	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  00074	89 45 b8	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 3653 : 		auto& _Al = this->_Getal();

  00077	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  0007f	89 45 ac	 mov	 DWORD PTR __Al$[ebp], eax

; 3654 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00082	33 c0		 xor	 eax, eax
  00084	8b 4d b8	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  00087	83 c1 01	 add	 ecx, 1
  0008a	0f 92 c0	 setb	 al
  0008d	f7 d8		 neg	 eax
  0008f	0b c1		 or	 eax, ecx
  00091	50		 push	 eax
  00092	8b 4d ac	 mov	 ecx, DWORD PTR __Al$[ebp]
  00095	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  0009a	89 45 a0	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 3655 : 		_My_data._Orphan_all();

  0009d	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000a0	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3656 : 		_My_data._Mysize = _New_size;

  000a5	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000a8	8b 4d d0	 mov	 ecx, DWORD PTR __New_size$[ebp]
  000ab	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 3657 : 		_My_data._Myres = _New_capacity;

  000ae	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000b1	8b 4d b8	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  000b4	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 3658 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  000b7	8b 45 a0	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000c0	83 c4 04	 add	 esp, 4
  000c3	89 45 94	 mov	 DWORD PTR __Raw_new$[ebp], eax

; 3659 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000c6	83 7d c4 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  000ca	72 4d		 jb	 SHORT $LN3@Reallocate

; 3660 : 			{
; 3661 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  000cc	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000cf	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d2	89 4d 88	 mov	 DWORD PTR __Old_ptr$1[ebp], ecx

; 3662 : 			_Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

  000d5	0f b6 45 14	 movzx	 eax, BYTE PTR _<_Args_1>$[ebp]
  000d9	50		 push	 eax
  000da	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  000dd	51		 push	 ecx
  000de	8b 55 dc	 mov	 edx, DWORD PTR __Old_size$[ebp]
  000e1	52		 push	 edx
  000e2	8b 45 88	 mov	 eax, DWORD PTR __Old_ptr$1[ebp]
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000eb	83 c4 04	 add	 esp, 4
  000ee	50		 push	 eax
  000ef	8b 4d 94	 mov	 ecx, DWORD PTR __Raw_new$[ebp]
  000f2	51		 push	 ecx
  000f3	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  000f6	e8 00 00 00 00	 call	 ??R<lambda_c1b8c41cb4019640539cfd828748c4d4>@@QBE@QADQBDIID@Z ; <lambda_c1b8c41cb4019640539cfd828748c4d4>::operator()

; 3663 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000fb	8b 45 c4	 mov	 eax, DWORD PTR __Old_capacity$[ebp]
  000fe	83 c0 01	 add	 eax, 1
  00101	50		 push	 eax
  00102	8b 4d 88	 mov	 ecx, DWORD PTR __Old_ptr$1[ebp]
  00105	51		 push	 ecx
  00106	8b 4d ac	 mov	 ecx, DWORD PTR __Al$[ebp]
  00109	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 3664 : 			_My_data._Bx._Ptr = _New_ptr;

  0010e	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00111	8b 4d a0	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  00114	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 3665 : 			}
; 3666 : 		else

  00117	eb 40		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 3667 : 			{
; 3668 : 			_Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

  00119	0f b6 45 14	 movzx	 eax, BYTE PTR _<_Args_1>$[ebp]
  0011d	50		 push	 eax
  0011e	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00121	51		 push	 ecx
  00122	8b 55 dc	 mov	 edx, DWORD PTR __Old_size$[ebp]
  00125	52		 push	 edx
  00126	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00129	83 c0 04	 add	 eax, 4
  0012c	50		 push	 eax
  0012d	8b 4d 94	 mov	 ecx, DWORD PTR __Raw_new$[ebp]
  00130	51		 push	 ecx
  00131	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  00134	e8 00 00 00 00	 call	 ??R<lambda_c1b8c41cb4019640539cfd828748c4d4>@@QBE@QADQBDIID@Z ; <lambda_c1b8c41cb4019640539cfd828748c4d4>::operator()

; 3669 : 			_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_ptr);

  00139	8d 45 a0	 lea	 eax, DWORD PTR __New_ptr$[ebp]
  0013c	50		 push	 eax
  0013d	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00140	83 c1 04	 add	 ecx, 4
  00143	51		 push	 ecx
  00144	e8 00 00 00 00	 call	 ??$addressof@PAD@std@@YAPAPADAAPAD@Z ; std::addressof<char *>
  00149	83 c4 04	 add	 esp, 4
  0014c	50		 push	 eax
  0014d	8b 55 ac	 mov	 edx, DWORD PTR __Al$[ebp]
  00150	52		 push	 edx
  00151	e8 00 00 00 00	 call	 ??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
  00156	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@Reallocate:

; 3670 : 			}
; 3671 : 
; 3672 : 		return (*this);

  00159	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 3673 : 		}

  0015c	52		 push	 edx
  0015d	8b cd		 mov	 ecx, ebp
  0015f	50		 push	 eax
  00160	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Reallocate
  00166	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0016b	58		 pop	 eax
  0016c	5a		 pop	 edx
  0016d	5f		 pop	 edi
  0016e	5e		 pop	 esi
  0016f	5b		 pop	 ebx
  00170	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00173	33 cd		 xor	 ecx, ebp
  00175	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0017a	81 c4 3c 01 00
	00		 add	 esp, 316		; 0000013cH
  00180	3b ec		 cmp	 ebp, esp
  00182	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00187	8b e5		 mov	 esp, ebp
  00189	5d		 pop	 ebp
  0018a	c2 10 00	 ret	 16			; 00000010H
  0018d	0f 1f 00	 npad	 3
$LN8@Reallocate:
  00190	01 00 00 00	 DD	 1
  00194	00 00 00 00	 DD	 $LN7@Reallocate
$LN7@Reallocate:
  00198	a0 ff ff ff	 DD	 -96			; ffffffa0H
  0019c	04 00 00 00	 DD	 4
  001a0	00 00 00 00	 DD	 $LN6@Reallocate
$LN6@Reallocate:
  001a4	5f		 DB	 95			; 0000005fH
  001a5	4e		 DB	 78			; 0000004eH
  001a6	65		 DB	 101			; 00000065H
  001a7	77		 DB	 119			; 00000077H
  001a8	5f		 DB	 95			; 0000005fH
  001a9	70		 DB	 112			; 00000070H
  001aa	74		 DB	 116			; 00000074H
  001ab	72		 DB	 114			; 00000072H
  001ac	00		 DB	 0
??$_Reallocate_grow_by@V<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_c1b8c41cb4019640539cfd828748c4d4>,unsigned int,char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??R<lambda_c1b8c41cb4019640539cfd828748c4d4>@@QBE@QADQBDIID@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
__Count$ = 20						; size = 4
__Ch$ = 24						; size = 1
??R<lambda_c1b8c41cb4019640539cfd828748c4d4>@@QBE@QADQBDIID@Z PROC ; <lambda_c1b8c41cb4019640539cfd828748c4d4>::operator(), COMDAT
; _this$ = ecx

; 2389 : 				const size_type _Count, const _Elem _Ch) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2390 : 			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);

  00023	8b 45 10	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 0c	 mov	 ecx, DWORD PTR __Old_ptr$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2391 : 			_Traits::assign(_New_ptr + _Old_size, _Count, _Ch);

  00037	0f b6 45 18	 movzx	 eax, BYTE PTR __Ch$[ebp]
  0003b	50		 push	 eax
  0003c	8b 4d 14	 mov	 ecx, DWORD PTR __Count$[ebp]
  0003f	51		 push	 ecx
  00040	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  00043	03 55 10	 add	 edx, DWORD PTR __Old_size$[ebp]
  00046	52		 push	 edx
  00047	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAPADQADID@Z ; std::char_traits<char>::assign
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2392 : 			_Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0004f	c6 85 2f ff ff
	ff 00		 mov	 BYTE PTR $T1[ebp], 0
  00056	8d 85 2f ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0005c	50		 push	 eax
  0005d	8b 4d 10	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  00060	03 4d 14	 add	 ecx, DWORD PTR __Count$[ebp]
  00063	03 4d 08	 add	 ecx, DWORD PTR __New_ptr$[ebp]
  00066	51		 push	 ecx
  00067	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  0006c	83 c4 08	 add	 esp, 8

; 2393 : 			}, _Count, _Ch));

  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 14 00	 ret	 20			; 00000014H
??R<lambda_c1b8c41cb4019640539cfd828748c4d4>@@QBE@QADQBDIID@Z ENDP ; <lambda_c1b8c41cb4019640539cfd828748c4d4>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z
_TEXT	SEGMENT
__New_ptr$ = -72					; size = 4
__Al$ = -60						; size = 4
__New_capacity$ = -48					; size = 4
__Old_capacity$ = -36					; size = 4
__My_data$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>, COMDAT
; _this$ = ecx

; 3609 : 		{	// reallocate to store exactly _New_size elements, new buffer prepared by

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-268]
  00013	b9 43 00 00 00	 mov	 ecx, 67			; 00000043H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 3610 : 			// _Fn(_New_ptr, _New_size, _Args...)
; 3611 : 		if (_New_size > max_size())

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00035	39 45 08	 cmp	 DWORD PTR __New_size$[ebp], eax
  00038	76 05		 jbe	 SHORT $LN2@Reallocate

; 3612 : 			{
; 3613 : 			_Xlen();	// result too long

  0003a	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 3614 : 			}
; 3615 : 
; 3616 : 		auto& _My_data = this->_Get_data();

  0003f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00047	89 45 e8	 mov	 DWORD PTR __My_data$[ebp], eax

; 3617 : 		const size_type _Old_capacity = _My_data._Myres;

  0004a	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0004d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00050	89 4d dc	 mov	 DWORD PTR __Old_capacity$[ebp], ecx

; 3618 : 		const size_type _New_capacity = _Calculate_growth(_New_size);

  00053	8b 45 08	 mov	 eax, DWORD PTR __New_size$[ebp]
  00056	50		 push	 eax
  00057	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  0005f	89 45 d0	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 3619 : 		auto& _Al = this->_Getal();

  00062	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  0006a	89 45 c4	 mov	 DWORD PTR __Al$[ebp], eax

; 3620 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  0006d	33 c0		 xor	 eax, eax
  0006f	8b 4d d0	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  00072	83 c1 01	 add	 ecx, 1
  00075	0f 92 c0	 setb	 al
  00078	f7 d8		 neg	 eax
  0007a	0b c1		 or	 eax, ecx
  0007c	50		 push	 eax
  0007d	8b 4d c4	 mov	 ecx, DWORD PTR __Al$[ebp]
  00080	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  00085	89 45 b8	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 3621 : 		_My_data._Orphan_all();

  00088	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0008b	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3622 : 		_My_data._Mysize = _New_size;

  00090	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00093	8b 4d 08	 mov	 ecx, DWORD PTR __New_size$[ebp]
  00096	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 3623 : 		_My_data._Myres = _New_capacity;

  00099	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0009c	8b 4d d0	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  0009f	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 3624 : 		_Fn(_Unfancy(_New_ptr), _New_size, _Args...);

  000a2	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  000a5	50		 push	 eax
  000a6	8b 4d 08	 mov	 ecx, DWORD PTR __New_size$[ebp]
  000a9	51		 push	 ecx
  000aa	8b 55 b8	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  000ad	52		 push	 edx
  000ae	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000b3	83 c4 04	 add	 esp, 4
  000b6	50		 push	 eax
  000b7	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  000ba	e8 00 00 00 00	 call	 ??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()

; 3625 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000bf	83 7d dc 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  000c3	72 21		 jb	 SHORT $LN3@Reallocate

; 3626 : 			{
; 3627 : 			_Al.deallocate(_My_data._Bx._Ptr, _Old_capacity + 1);

  000c5	8b 45 dc	 mov	 eax, DWORD PTR __Old_capacity$[ebp]
  000c8	83 c0 01	 add	 eax, 1
  000cb	50		 push	 eax
  000cc	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d2	52		 push	 edx
  000d3	8b 4d c4	 mov	 ecx, DWORD PTR __Al$[ebp]
  000d6	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 3628 : 			_My_data._Bx._Ptr = _New_ptr;

  000db	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000de	8b 4d b8	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  000e1	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 3629 : 			}
; 3630 : 		else

  000e4	eb 20		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 3631 : 			{
; 3632 : 			_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_ptr);

  000e6	8d 45 b8	 lea	 eax, DWORD PTR __New_ptr$[ebp]
  000e9	50		 push	 eax
  000ea	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000ed	83 c1 04	 add	 ecx, 4
  000f0	51		 push	 ecx
  000f1	e8 00 00 00 00	 call	 ??$addressof@PAD@std@@YAPAPADAAPAD@Z ; std::addressof<char *>
  000f6	83 c4 04	 add	 esp, 4
  000f9	50		 push	 eax
  000fa	8b 55 c4	 mov	 edx, DWORD PTR __Al$[ebp]
  000fd	52		 push	 edx
  000fe	e8 00 00 00 00	 call	 ??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
  00103	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@Reallocate:

; 3633 : 			}
; 3634 : 
; 3635 : 		return (*this);

  00106	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 3636 : 		}

  00109	52		 push	 edx
  0010a	8b cd		 mov	 ecx, ebp
  0010c	50		 push	 eax
  0010d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Reallocate
  00113	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00118	58		 pop	 eax
  00119	5a		 pop	 edx
  0011a	5f		 pop	 edi
  0011b	5e		 pop	 esi
  0011c	5b		 pop	 ebx
  0011d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00120	33 cd		 xor	 ecx, ebp
  00122	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00127	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  0012d	3b ec		 cmp	 ebp, esp
  0012f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00134	8b e5		 mov	 esp, ebp
  00136	5d		 pop	 ebp
  00137	c2 0c 00	 ret	 12			; 0000000cH
  0013a	66 90		 npad	 2
$LN8@Reallocate:
  0013c	01 00 00 00	 DD	 1
  00140	00 00 00 00	 DD	 $LN7@Reallocate
$LN7@Reallocate:
  00144	b8 ff ff ff	 DD	 -72			; ffffffb8H
  00148	04 00 00 00	 DD	 4
  0014c	00 00 00 00	 DD	 $LN6@Reallocate
$LN6@Reallocate:
  00150	5f		 DB	 95			; 0000005fH
  00151	4e		 DB	 78			; 0000004eH
  00152	65		 DB	 101			; 00000065H
  00153	77		 DB	 119			; 00000077H
  00154	5f		 DB	 95			; 0000005fH
  00155	70		 DB	 112			; 00000070H
  00156	74		 DB	 116			; 00000074H
  00157	72		 DB	 114			; 00000072H
  00158	00		 DB	 0
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
__New_ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z PROC ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator(), COMDAT
; _this$ = ecx

; 2444 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2445 : 			_Traits::copy(_New_ptr, _Ptr, _Count);

  00023	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2446 : 			_Traits::assign(_New_ptr[_Count], _Elem());

  00037	c6 85 2f ff ff
	ff 00		 mov	 BYTE PTR $T1[ebp], 0
  0003e	8d 85 2f ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00044	50		 push	 eax
  00045	8b 4d 08	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  00048	03 4d 0c	 add	 ecx, DWORD PTR __Count$[ebp]
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  00051	83 c4 08	 add	 esp, 8

; 2447 : 			}, _Ptr));

  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0005d	3b ec		 cmp	 ebp, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 0c 00	 ret	 12			; 0000000cH
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z ENDP ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@Z
_TEXT	SEGMENT
__New_ptr$ = -72					; size = 4
__Al$ = -60						; size = 4
__New_capacity$ = -48					; size = 4
__Old_capacity$ = -36					; size = 4
__My_data$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 1
??$_Reallocate_for@V<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_c6753c90be971fc9cc00b4f35f237a75>,char>, COMDAT
; _this$ = ecx

; 3609 : 		{	// reallocate to store exactly _New_size elements, new buffer prepared by

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-268]
  00013	b9 43 00 00 00	 mov	 ecx, 67			; 00000043H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 3610 : 			// _Fn(_New_ptr, _New_size, _Args...)
; 3611 : 		if (_New_size > max_size())

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00035	39 45 08	 cmp	 DWORD PTR __New_size$[ebp], eax
  00038	76 05		 jbe	 SHORT $LN2@Reallocate

; 3612 : 			{
; 3613 : 			_Xlen();	// result too long

  0003a	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 3614 : 			}
; 3615 : 
; 3616 : 		auto& _My_data = this->_Get_data();

  0003f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00047	89 45 e8	 mov	 DWORD PTR __My_data$[ebp], eax

; 3617 : 		const size_type _Old_capacity = _My_data._Myres;

  0004a	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0004d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00050	89 4d dc	 mov	 DWORD PTR __Old_capacity$[ebp], ecx

; 3618 : 		const size_type _New_capacity = _Calculate_growth(_New_size);

  00053	8b 45 08	 mov	 eax, DWORD PTR __New_size$[ebp]
  00056	50		 push	 eax
  00057	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  0005f	89 45 d0	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 3619 : 		auto& _Al = this->_Getal();

  00062	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  0006a	89 45 c4	 mov	 DWORD PTR __Al$[ebp], eax

; 3620 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  0006d	33 c0		 xor	 eax, eax
  0006f	8b 4d d0	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  00072	83 c1 01	 add	 ecx, 1
  00075	0f 92 c0	 setb	 al
  00078	f7 d8		 neg	 eax
  0007a	0b c1		 or	 eax, ecx
  0007c	50		 push	 eax
  0007d	8b 4d c4	 mov	 ecx, DWORD PTR __Al$[ebp]
  00080	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  00085	89 45 b8	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 3621 : 		_My_data._Orphan_all();

  00088	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0008b	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3622 : 		_My_data._Mysize = _New_size;

  00090	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00093	8b 4d 08	 mov	 ecx, DWORD PTR __New_size$[ebp]
  00096	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 3623 : 		_My_data._Myres = _New_capacity;

  00099	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0009c	8b 4d d0	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  0009f	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 3624 : 		_Fn(_Unfancy(_New_ptr), _New_size, _Args...);

  000a2	0f b6 45 10	 movzx	 eax, BYTE PTR _<_Args_0>$[ebp]
  000a6	50		 push	 eax
  000a7	8b 4d 08	 mov	 ecx, DWORD PTR __New_size$[ebp]
  000aa	51		 push	 ecx
  000ab	8b 55 b8	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  000ae	52		 push	 edx
  000af	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000b4	83 c4 04	 add	 esp, 4
  000b7	50		 push	 eax
  000b8	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  000bb	e8 00 00 00 00	 call	 ??R<lambda_c6753c90be971fc9cc00b4f35f237a75>@@QBE@QADID@Z ; <lambda_c6753c90be971fc9cc00b4f35f237a75>::operator()

; 3625 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000c0	83 7d dc 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  000c4	72 21		 jb	 SHORT $LN3@Reallocate

; 3626 : 			{
; 3627 : 			_Al.deallocate(_My_data._Bx._Ptr, _Old_capacity + 1);

  000c6	8b 45 dc	 mov	 eax, DWORD PTR __Old_capacity$[ebp]
  000c9	83 c0 01	 add	 eax, 1
  000cc	50		 push	 eax
  000cd	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000d0	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d3	52		 push	 edx
  000d4	8b 4d c4	 mov	 ecx, DWORD PTR __Al$[ebp]
  000d7	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 3628 : 			_My_data._Bx._Ptr = _New_ptr;

  000dc	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000df	8b 4d b8	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  000e2	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 3629 : 			}
; 3630 : 		else

  000e5	eb 20		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 3631 : 			{
; 3632 : 			_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_ptr);

  000e7	8d 45 b8	 lea	 eax, DWORD PTR __New_ptr$[ebp]
  000ea	50		 push	 eax
  000eb	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000ee	83 c1 04	 add	 ecx, 4
  000f1	51		 push	 ecx
  000f2	e8 00 00 00 00	 call	 ??$addressof@PAD@std@@YAPAPADAAPAD@Z ; std::addressof<char *>
  000f7	83 c4 04	 add	 esp, 4
  000fa	50		 push	 eax
  000fb	8b 55 c4	 mov	 edx, DWORD PTR __Al$[ebp]
  000fe	52		 push	 edx
  000ff	e8 00 00 00 00	 call	 ??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
  00104	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@Reallocate:

; 3633 : 			}
; 3634 : 
; 3635 : 		return (*this);

  00107	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 3636 : 		}

  0010a	52		 push	 edx
  0010b	8b cd		 mov	 ecx, ebp
  0010d	50		 push	 eax
  0010e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Reallocate
  00114	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00119	58		 pop	 eax
  0011a	5a		 pop	 edx
  0011b	5f		 pop	 edi
  0011c	5e		 pop	 esi
  0011d	5b		 pop	 ebx
  0011e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00121	33 cd		 xor	 ecx, ebp
  00123	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00128	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  0012e	3b ec		 cmp	 ebp, esp
  00130	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00135	8b e5		 mov	 esp, ebp
  00137	5d		 pop	 ebp
  00138	c2 0c 00	 ret	 12			; 0000000cH
  0013b	90		 npad	 1
$LN8@Reallocate:
  0013c	01 00 00 00	 DD	 1
  00140	00 00 00 00	 DD	 $LN7@Reallocate
$LN7@Reallocate:
  00144	b8 ff ff ff	 DD	 -72			; ffffffb8H
  00148	04 00 00 00	 DD	 4
  0014c	00 00 00 00	 DD	 $LN6@Reallocate
$LN6@Reallocate:
  00150	5f		 DB	 95			; 0000005fH
  00151	4e		 DB	 78			; 0000004eH
  00152	65		 DB	 101			; 00000065H
  00153	77		 DB	 119			; 00000077H
  00154	5f		 DB	 95			; 0000005fH
  00155	70		 DB	 112			; 00000070H
  00156	74		 DB	 116			; 00000074H
  00157	72		 DB	 114			; 00000072H
  00158	00		 DB	 0
??$_Reallocate_for@V<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_c6753c90be971fc9cc00b4f35f237a75>,char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??R<lambda_c6753c90be971fc9cc00b4f35f237a75>@@QBE@QADID@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
__New_ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
??R<lambda_c6753c90be971fc9cc00b4f35f237a75>@@QBE@QADID@Z PROC ; <lambda_c6753c90be971fc9cc00b4f35f237a75>::operator(), COMDAT
; _this$ = ecx

; 2467 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem _Ch) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2468 : 			_Traits::assign(_New_ptr, _Count, _Ch);

  00023	0f b6 45 10	 movzx	 eax, BYTE PTR __Ch$[ebp]
  00027	50		 push	 eax
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0002b	51		 push	 ecx
  0002c	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  0002f	52		 push	 edx
  00030	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAPADQADID@Z ; std::char_traits<char>::assign
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2469 : 			_Traits::assign(_New_ptr[_Count], _Elem());

  00038	c6 85 2f ff ff
	ff 00		 mov	 BYTE PTR $T1[ebp], 0
  0003f	8d 85 2f ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00045	50		 push	 eax
  00046	8b 4d 08	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  00049	03 4d 0c	 add	 ecx, DWORD PTR __Count$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  00052	83 c4 08	 add	 esp, 8

; 2470 : 			}, _Ch));

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 0c 00	 ret	 12			; 0000000cH
??R<lambda_c6753c90be971fc9cc00b4f35f237a75>@@QBE@QADID@Z ENDP ; <lambda_c6753c90be971fc9cc00b4f35f237a75>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$_Refancy@PAD$0A@@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Refancy@PAD$0A@@std@@YAPADPAD@Z PROC		; std::_Refancy<char *,0>, COMDAT

; 343  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 344  : 	return (_Ptr);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 345  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Refancy@PAD$0A@@std@@YAPADPAD@Z ENDP		; std::_Refancy<char *,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstddef
;	COMDAT ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<char> > >, COMDAT

; 248  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 249  : 	return (__builtin_addressof(_Val));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 250  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_15711c68e099a15a58f4d77303cb286d>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_15711c68e099a15a58f4d77303cb286d>@@D@Z
_TEXT	SEGMENT
__Old_ptr$1 = -120					; size = 4
__Raw_new$ = -108					; size = 4
__New_ptr$ = -96					; size = 4
__Al$ = -84						; size = 4
__New_capacity$ = -72					; size = 4
__Old_capacity$ = -60					; size = 4
__New_size$ = -48					; size = 4
__Old_size$ = -36					; size = 4
__My_data$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 1
??$_Reallocate_grow_by@V<lambda_15711c68e099a15a58f4d77303cb286d>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_15711c68e099a15a58f4d77303cb286d>@@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_15711c68e099a15a58f4d77303cb286d>,char>, COMDAT
; _this$ = ecx

; 3641 : 		{	// reallocate to increase size by _Size_increase elements, new buffer prepared by

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd c4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-316]
  00013	b9 4f 00 00 00	 mov	 ecx, 79			; 0000004fH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 3642 : 			// _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 3643 : 		auto& _My_data = this->_Get_data();

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00035	89 45 e8	 mov	 DWORD PTR __My_data$[ebp], eax

; 3644 : 		const size_type _Old_size = _My_data._Mysize;

  00038	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0003e	89 4d dc	 mov	 DWORD PTR __Old_size$[ebp], ecx

; 3645 : 		if (max_size() - _Old_size < _Size_increase)

  00041	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00049	2b 45 dc	 sub	 eax, DWORD PTR __Old_size$[ebp]
  0004c	3b 45 08	 cmp	 eax, DWORD PTR __Size_increase$[ebp]
  0004f	73 05		 jae	 SHORT $LN2@Reallocate

; 3646 : 			{
; 3647 : 			_Xlen();	// result too long

  00051	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 3648 : 			}
; 3649 : 
; 3650 : 		const size_type _New_size = _Old_size + _Size_increase;

  00056	8b 45 dc	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00059	03 45 08	 add	 eax, DWORD PTR __Size_increase$[ebp]
  0005c	89 45 d0	 mov	 DWORD PTR __New_size$[ebp], eax

; 3651 : 		const size_type _Old_capacity = _My_data._Myres;

  0005f	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00062	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00065	89 4d c4	 mov	 DWORD PTR __Old_capacity$[ebp], ecx

; 3652 : 		const size_type _New_capacity = _Calculate_growth(_New_size);

  00068	8b 45 d0	 mov	 eax, DWORD PTR __New_size$[ebp]
  0006b	50		 push	 eax
  0006c	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  00074	89 45 b8	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 3653 : 		auto& _Al = this->_Getal();

  00077	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  0007f	89 45 ac	 mov	 DWORD PTR __Al$[ebp], eax

; 3654 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00082	33 c0		 xor	 eax, eax
  00084	8b 4d b8	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  00087	83 c1 01	 add	 ecx, 1
  0008a	0f 92 c0	 setb	 al
  0008d	f7 d8		 neg	 eax
  0008f	0b c1		 or	 eax, ecx
  00091	50		 push	 eax
  00092	8b 4d ac	 mov	 ecx, DWORD PTR __Al$[ebp]
  00095	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  0009a	89 45 a0	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 3655 : 		_My_data._Orphan_all();

  0009d	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000a0	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3656 : 		_My_data._Mysize = _New_size;

  000a5	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000a8	8b 4d d0	 mov	 ecx, DWORD PTR __New_size$[ebp]
  000ab	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 3657 : 		_My_data._Myres = _New_capacity;

  000ae	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000b1	8b 4d b8	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  000b4	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 3658 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  000b7	8b 45 a0	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000c0	83 c4 04	 add	 esp, 4
  000c3	89 45 94	 mov	 DWORD PTR __Raw_new$[ebp], eax

; 3659 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000c6	83 7d c4 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  000ca	72 49		 jb	 SHORT $LN3@Reallocate

; 3660 : 			{
; 3661 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  000cc	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000cf	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d2	89 4d 88	 mov	 DWORD PTR __Old_ptr$1[ebp], ecx

; 3662 : 			_Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

  000d5	0f b6 45 10	 movzx	 eax, BYTE PTR _<_Args_0>$[ebp]
  000d9	50		 push	 eax
  000da	8b 4d dc	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  000dd	51		 push	 ecx
  000de	8b 55 88	 mov	 edx, DWORD PTR __Old_ptr$1[ebp]
  000e1	52		 push	 edx
  000e2	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000e7	83 c4 04	 add	 esp, 4
  000ea	50		 push	 eax
  000eb	8b 45 94	 mov	 eax, DWORD PTR __Raw_new$[ebp]
  000ee	50		 push	 eax
  000ef	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  000f2	e8 00 00 00 00	 call	 ??R<lambda_15711c68e099a15a58f4d77303cb286d>@@QBE@QADQBDID@Z ; <lambda_15711c68e099a15a58f4d77303cb286d>::operator()

; 3663 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000f7	8b 45 c4	 mov	 eax, DWORD PTR __Old_capacity$[ebp]
  000fa	83 c0 01	 add	 eax, 1
  000fd	50		 push	 eax
  000fe	8b 4d 88	 mov	 ecx, DWORD PTR __Old_ptr$1[ebp]
  00101	51		 push	 ecx
  00102	8b 4d ac	 mov	 ecx, DWORD PTR __Al$[ebp]
  00105	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 3664 : 			_My_data._Bx._Ptr = _New_ptr;

  0010a	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0010d	8b 4d a0	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  00110	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 3665 : 			}
; 3666 : 		else

  00113	eb 3c		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 3667 : 			{
; 3668 : 			_Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

  00115	0f b6 45 10	 movzx	 eax, BYTE PTR _<_Args_0>$[ebp]
  00119	50		 push	 eax
  0011a	8b 4d dc	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  0011d	51		 push	 ecx
  0011e	8b 55 e8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00121	83 c2 04	 add	 edx, 4
  00124	52		 push	 edx
  00125	8b 45 94	 mov	 eax, DWORD PTR __Raw_new$[ebp]
  00128	50		 push	 eax
  00129	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  0012c	e8 00 00 00 00	 call	 ??R<lambda_15711c68e099a15a58f4d77303cb286d>@@QBE@QADQBDID@Z ; <lambda_15711c68e099a15a58f4d77303cb286d>::operator()

; 3669 : 			_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_ptr);

  00131	8d 45 a0	 lea	 eax, DWORD PTR __New_ptr$[ebp]
  00134	50		 push	 eax
  00135	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00138	83 c1 04	 add	 ecx, 4
  0013b	51		 push	 ecx
  0013c	e8 00 00 00 00	 call	 ??$addressof@PAD@std@@YAPAPADAAPAD@Z ; std::addressof<char *>
  00141	83 c4 04	 add	 esp, 4
  00144	50		 push	 eax
  00145	8b 55 ac	 mov	 edx, DWORD PTR __Al$[ebp]
  00148	52		 push	 edx
  00149	e8 00 00 00 00	 call	 ??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
  0014e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@Reallocate:

; 3670 : 			}
; 3671 : 
; 3672 : 		return (*this);

  00151	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 3673 : 		}

  00154	52		 push	 edx
  00155	8b cd		 mov	 ecx, ebp
  00157	50		 push	 eax
  00158	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Reallocate
  0015e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00163	58		 pop	 eax
  00164	5a		 pop	 edx
  00165	5f		 pop	 edi
  00166	5e		 pop	 esi
  00167	5b		 pop	 ebx
  00168	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016b	33 cd		 xor	 ecx, ebp
  0016d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00172	81 c4 3c 01 00
	00		 add	 esp, 316		; 0000013cH
  00178	3b ec		 cmp	 ebp, esp
  0017a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c2 0c 00	 ret	 12			; 0000000cH
  00185	0f 1f 00	 npad	 3
$LN8@Reallocate:
  00188	01 00 00 00	 DD	 1
  0018c	00 00 00 00	 DD	 $LN7@Reallocate
$LN7@Reallocate:
  00190	a0 ff ff ff	 DD	 -96			; ffffffa0H
  00194	04 00 00 00	 DD	 4
  00198	00 00 00 00	 DD	 $LN6@Reallocate
$LN6@Reallocate:
  0019c	5f		 DB	 95			; 0000005fH
  0019d	4e		 DB	 78			; 0000004eH
  0019e	65		 DB	 101			; 00000065H
  0019f	77		 DB	 119			; 00000077H
  001a0	5f		 DB	 95			; 0000005fH
  001a1	70		 DB	 112			; 00000070H
  001a2	74		 DB	 116			; 00000074H
  001a3	72		 DB	 114			; 00000072H
  001a4	00		 DB	 0
??$_Reallocate_grow_by@V<lambda_15711c68e099a15a58f4d77303cb286d>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_15711c68e099a15a58f4d77303cb286d>@@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_15711c68e099a15a58f4d77303cb286d>,char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??R<lambda_15711c68e099a15a58f4d77303cb286d>@@QBE@QADQBDID@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
__Ch$ = 20						; size = 1
??R<lambda_15711c68e099a15a58f4d77303cb286d>@@QBE@QADQBDID@Z PROC ; <lambda_15711c68e099a15a58f4d77303cb286d>::operator(), COMDAT
; _this$ = ecx

; 3003 : 				const _Elem _Ch) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3004 : 			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);

  00023	8b 45 10	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 0c	 mov	 ecx, DWORD PTR __Old_ptr$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3005 : 			_Traits::assign(_New_ptr[_Old_size], _Ch);

  00037	8d 45 14	 lea	 eax, DWORD PTR __Ch$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  0003e	03 4d 10	 add	 ecx, DWORD PTR __Old_size$[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  00047	83 c4 08	 add	 esp, 8

; 3006 : 			_Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  0004a	c6 85 2f ff ff
	ff 00		 mov	 BYTE PTR $T1[ebp], 0
  00051	8d 85 2f ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00057	50		 push	 eax
  00058	8b 4d 10	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  0005b	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  0005e	8d 44 0a 01	 lea	 eax, DWORD PTR [edx+ecx+1]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  00068	83 c4 08	 add	 esp, 8

; 3007 : 			}, _Ch);

  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 10 00	 ret	 16			; 00000010H
??R<lambda_15711c68e099a15a58f4d77303cb286d>@@QBE@QADQBDID@Z ENDP ; <lambda_15711c68e099a15a58f4d77303cb286d>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\utility
;	COMDAT ??$_Max_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -208						; size = 4
$T1 = -200						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Max_value@I@std@@YAABIABI0@Z PROC			; std::_Max_value<unsigned int>, COMDAT

; 31   : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 32   : 	return (_Left < _Right ? _Right : _Left);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00024	8b 10		 mov	 edx, DWORD PTR [eax]
  00026	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00028	73 0b		 jae	 SHORT $LN3@Max_value
  0002a	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0002d	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  00033	eb 09		 jmp	 SHORT $LN4@Max_value
$LN3@Max_value:
  00035	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00038	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], ecx
$LN4@Max_value:
  0003e	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv65[ebp]
  00044	89 95 38 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], edx
  0004a	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]

; 33   : 	}

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
??$_Max_value@I@std@@YAABIABI0@Z ENDP			; std::_Max_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 861  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 862  : 		_Ptr->~_Uty();
; 863  : 		}

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstddef
;	COMDAT ??$addressof@PAD@std@@YAPAPADAAPAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAD@std@@YAPAPADAAPAD@Z PROC		; std::addressof<char *>, COMDAT

; 248  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 249  : 	return (__builtin_addressof(_Val));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 250  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$addressof@PAD@std@@YAPAPADAAPAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT
; _this$ = ecx

; 303  : 		{	// construct from forwarded values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 302  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>
  0002b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 304  : 		}

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z
_TEXT	SEGMENT
__Tag$ = -5						; size = 1
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z PROC ; std::_Pocca<std::allocator<char> >, COMDAT

; 1033 : 	{	// (maybe) propagate on container copy assignment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1034 : 	typename allocator_traits<_Alloc>::propagate_on_container_copy_assignment _Tag;
; 1035 : 	_Pocca(_Left, _Right, _Tag);

  0001e	0f b6 45 fb	 movzx	 eax, BYTE PTR __Tag$[ebp]
  00022	50		 push	 eax
  00023	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00026	51		 push	 ecx
  00027	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]
  0002a	52		 push	 edx
  0002b	e8 00 00 00 00	 call	 ??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@U?$integral_constant@_N$0A@@0@@Z ; std::_Pocca<std::allocator<char> >
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1036 : 	}

  00033	52		 push	 edx
  00034	8b cd		 mov	 ecx, ebp
  00036	50		 push	 eax
  00037	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Pocca
  0003d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00042	58		 pop	 eax
  00043	5a		 pop	 edx
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004d	3b ec		 cmp	 ebp, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
$LN5@Pocca:
  00058	01 00 00 00	 DD	 1
  0005c	00 00 00 00	 DD	 $LN4@Pocca
$LN4@Pocca:
  00060	fb ff ff ff	 DD	 -5			; fffffffbH
  00064	01 00 00 00	 DD	 1
  00068	00 00 00 00	 DD	 $LN3@Pocca
$LN3@Pocca:
  0006c	5f		 DB	 95			; 0000005fH
  0006d	54		 DB	 84			; 00000054H
  0006e	61		 DB	 97			; 00000061H
  0006f	67		 DB	 103			; 00000067H
  00070	00		 DB	 0
??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z ENDP ; std::_Pocca<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z
_TEXT	SEGMENT
__Tag$ = -5						; size = 1
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z PROC ; std::_Pocma<std::allocator<char> >, COMDAT

; 1052 : 	{	// (maybe) propagate on container move assignment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1053 : 	typename allocator_traits<_Alloc>::propagate_on_container_move_assignment _Tag;
; 1054 : 	_Pocma(_Left, _Right, _Tag);

  0001e	0f b6 45 fb	 movzx	 eax, BYTE PTR __Tag$[ebp]
  00022	50		 push	 eax
  00023	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00026	51		 push	 ecx
  00027	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]
  0002a	52		 push	 edx
  0002b	e8 00 00 00 00	 call	 ??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0U?$integral_constant@_N$00@0@@Z ; std::_Pocma<std::allocator<char> >
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1055 : 	}

  00033	52		 push	 edx
  00034	8b cd		 mov	 ecx, ebp
  00036	50		 push	 eax
  00037	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Pocma
  0003d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00042	58		 pop	 eax
  00043	5a		 pop	 edx
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004d	3b ec		 cmp	 ebp, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
$LN5@Pocma:
  00058	01 00 00 00	 DD	 1
  0005c	00 00 00 00	 DD	 $LN4@Pocma
$LN4@Pocma:
  00060	fb ff ff ff	 DD	 -5			; fffffffbH
  00064	01 00 00 00	 DD	 1
  00068	00 00 00 00	 DD	 $LN3@Pocma
$LN3@Pocma:
  0006c	5f		 DB	 95			; 0000005fH
  0006d	54		 DB	 84			; 00000054H
  0006e	61		 DB	 97			; 00000061H
  0006f	67		 DB	 103			; 00000067H
  00070	00		 DB	 0
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z ENDP ; std::_Pocma<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 248  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 249  : 	return (__builtin_addressof(_Val));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 250  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 140  : 			{	// test if stream state okay

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 141  : 			return (_Ok);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 142  : 			}

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 129  : 			{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 130  :  #if _HAS_EXCEPTIONS
; 131  : 			if (!_STD uncaught_exception())

  00042	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00047	0f b6 c0	 movzx	 eax, al
  0004a	85 c0		 test	 eax, eax
  0004c	75 14		 jne	 SHORT $LN1@sentry

; 132  : 				this->_Myostr._Osfx();

  0004e	8b f4		 mov	 esi, esp
  00050	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 08		 mov	 ecx, DWORD PTR [eax]
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0005b	3b f4		 cmp	 esi, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@sentry:

; 133  : 
; 134  :  #else /* _HAS_EXCEPTIONS */
; 135  : 			this->_Myostr._Osfx();
; 136  :  #endif /* _HAS_EXCEPTIONS */
; 137  : 			}

  00062	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0007e	3b ec		 cmp	 ebp, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 122  : 			{	// construct locking and testing stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 121  : 			: _Sentry_base(_Ostr)

  00042	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00045	50		 push	 eax
  00046	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 123  : 			if (_Ostr.good() && _Ostr.tie() != 0 && _Ostr.tie() != &_Ostr)

  00055	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0005d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00060	8b f4		 mov	 esi, esp
  00062	8b ca		 mov	 ecx, edx
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	0f b6 c0	 movzx	 eax, al
  00074	85 c0		 test	 eax, eax
  00076	74 6e		 je	 SHORT $LN2@sentry
  00078	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0007b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00080	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00083	8b f4		 mov	 esi, esp
  00085	8b ca		 mov	 ecx, edx
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  0008d	3b f4		 cmp	 esi, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	85 c0		 test	 eax, eax
  00096	74 4e		 je	 SHORT $LN2@sentry
  00098	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0009b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000a0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000a3	8b f4		 mov	 esi, esp
  000a5	8b ca		 mov	 ecx, edx
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000ad	3b f4		 cmp	 esi, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b4	3b 45 08	 cmp	 eax, DWORD PTR __Ostr$[ebp]
  000b7	74 2d		 je	 SHORT $LN2@sentry

; 124  : 				_Ostr.tie()->flush();

  000b9	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000bc	8b 08		 mov	 ecx, DWORD PTR [eax]
  000be	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000c1	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000c4	8b f4		 mov	 esi, esp
  000c6	8b ca		 mov	 ecx, edx
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000ce	3b f4		 cmp	 esi, esp
  000d0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d5	8b f4		 mov	 esi, esp
  000d7	8b c8		 mov	 ecx, eax
  000d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  000df	3b f4		 cmp	 esi, esp
  000e1	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@sentry:

; 125  : 			_Ok = _Ostr.good();	// store test only after flushing tie

  000e6	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000e9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000eb	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000ee	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000f1	8b f4		 mov	 esi, esp
  000f3	8b ca		 mov	 ecx, edx
  000f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000fb	3b f4		 cmp	 esi, esp
  000fd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00102	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00105	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 126  : 			}

  00108	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0010f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00112	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00115	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011c	59		 pop	 ecx
  0011d	5f		 pop	 edi
  0011e	5e		 pop	 esi
  0011f	5b		 pop	 ebx
  00120	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00126	3b ec		 cmp	 ebp, esp
  00128	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012d	8b e5		 mov	 esp, ebp
  0012f	5d		 pop	 ebp
  00130	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv92 = -224						; size = 4
tv86 = -220						; size = 4
tv72 = -220						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 105  : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00021	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 106  : 			if (_Myostr.rdbuf() != 0)

  00042	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 08		 mov	 ecx, DWORD PTR [eax]
  00047	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  0004d	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv72[ebp]
  00053	8b 02		 mov	 eax, DWORD PTR [edx]
  00055	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv72[ebp]
  0005b	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0005e	8b f4		 mov	 esi, esp
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00066	3b f4		 cmp	 esi, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	85 c0		 test	 eax, eax
  0006f	74 4d		 je	 SHORT $LN3@Sentry_bas

; 107  : 				_Myostr.rdbuf()->_Unlock();

  00071	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 08		 mov	 ecx, DWORD PTR [eax]
  00076	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv86[ebp], ecx
  0007c	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv86[ebp]
  00082	8b 02		 mov	 eax, DWORD PTR [edx]
  00084	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv86[ebp]
  0008a	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0008d	8b f4		 mov	 esi, esp
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00095	3b f4		 cmp	 esi, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009c	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv92[ebp], eax
  000a2	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv92[ebp]
  000a8	8b 11		 mov	 edx, DWORD PTR [ecx]
  000aa	8b f4		 mov	 esi, esp
  000ac	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv92[ebp]
  000b2	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000b5	ff d0		 call	 eax
  000b7	3b f4		 cmp	 esi, esp
  000b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Sentry_bas:

; 108  : 			}

  000be	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c8	59		 pop	 ecx
  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	81 c4 e0 00 00
	00		 add	 esp, 224		; 000000e0H
  000d2	3b ec		 cmp	 ebp, esp
  000d4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 1c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-228]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv93 = -212						; size = 4
tv87 = -208						; size = 4
tv73 = -208						; size = 4
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 99   : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 2c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-212]
  00013	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 98   : 			: _Myostr(_Ostr)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00029	89 08		 mov	 DWORD PTR [eax], ecx

; 100  : 			if (_Myostr.rdbuf() != 0)

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  00036	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv73[ebp]
  0003c	8b 02		 mov	 eax, DWORD PTR [edx]
  0003e	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  00044	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00047	8b f4		 mov	 esi, esp
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	85 c0		 test	 eax, eax
  00058	74 4d		 je	 SHORT $LN1@Sentry_bas

; 101  : 				_Myostr.rdbuf()->_Lock();

  0005a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005f	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv87[ebp], ecx
  00065	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv87[ebp]
  0006b	8b 02		 mov	 eax, DWORD PTR [edx]
  0006d	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv87[ebp]
  00073	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00076	8b f4		 mov	 esi, esp
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv93[ebp], eax
  0008b	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv93[ebp]
  00091	8b 11		 mov	 edx, DWORD PTR [ecx]
  00093	8b f4		 mov	 esi, esp
  00095	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv93[ebp]
  0009b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0009e	ff d0		 call	 eax
  000a0	3b f4		 cmp	 esi, esp
  000a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Sentry_bas:

; 102  : 			}

  000a7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	81 c4 d4 00 00
	00		 add	 esp, 212		; 000000d4H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PAD@std@@SAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PAD@std@@SAPADAAD@Z PROC	; std::pointer_traits<char *>::pointer_to, COMDAT

; 322  : 		{	// convert raw reference to pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 323  : 		return (_STD addressof(_Val));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>
  00027	83 c4 04	 add	 esp, 4

; 324  : 		}

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?pointer_to@?$pointer_traits@PAD@std@@SAPADAAD@Z ENDP	; std::pointer_traits<char *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::~_String_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::~_String_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*, COMDAT
; _this$ = ecx

; 1432 : 		{	// return designated object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1433 : 		return ((reference)**(_Mybase *)this);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*

; 1434 : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx

; 1426 : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1425 : 		: _Mybase(_Parg, _Pstring)

  00023	8b 45 0c	 mov	 eax, DWORD PTR __Pstring$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >

; 1427 : 		}

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xlocale
;	COMDAT ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -296						; size = 4
$T3 = -284						; size = 12
__Pfmod$4 = -72						; size = 4
__Pf$5 = -60						; size = 4
__Id$6 = -48						; size = 4
__Psave$7 = -36						; size = 4
__Lock$8 = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z PROC ; std::use_facet<std::codecvt<char,char,_Mbstatet> >, COMDAT

; 505  : 	{	// get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd d4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-300]
  00020	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 506  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00040	8b f4		 mov	 esi, esp
  00042	6a 00		 push	 0
  00044	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 507  : 		const locale::facet *_Psave =
; 508  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::codecvt<char,char,_Mbstatet> >::_Psave
  00060	89 45 dc	 mov	 DWORD PTR __Psave$7[ebp], eax

; 509  : 
; 510  : 		size_t _Id = _Facet::id;

  00063	8b f4		 mov	 esi, esp
  00065	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Bid@locale@std@@QAEIXZ
  00071	3b f4		 cmp	 esi, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	89 45 d0	 mov	 DWORD PTR __Id$6[ebp], eax

; 511  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  0007b	8b 45 d0	 mov	 eax, DWORD PTR __Id$6[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00082	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ; std::locale::_Getfacet
  00087	89 45 c4	 mov	 DWORD PTR __Pf$5[ebp], eax

; 512  : 
; 513  : 		if (_Pf != 0)

  0008a	83 7d c4 00	 cmp	 DWORD PTR __Pf$5[ebp], 0
  0008e	74 05		 je	 SHORT $LN2@use_facet
  00090	e9 81 00 00 00	 jmp	 $LN3@use_facet
$LN2@use_facet:

; 514  : 			;	// got facet from locale
; 515  : 		else if (_Psave != 0)

  00095	83 7d dc 00	 cmp	 DWORD PTR __Psave$7[ebp], 0
  00099	74 08		 je	 SHORT $LN4@use_facet

; 516  : 			_Pf = _Psave;	// lazy facet already allocated

  0009b	8b 45 dc	 mov	 eax, DWORD PTR __Psave$7[ebp]
  0009e	89 45 c4	 mov	 DWORD PTR __Pf$5[ebp], eax
  000a1	eb 73		 jmp	 SHORT $LN3@use_facet
$LN4@use_facet:

; 517  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000a3	8b f4		 mov	 esi, esp
  000a5	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  000a8	50		 push	 eax
  000a9	8d 4d dc	 lea	 ecx, DWORD PTR __Psave$7[ebp]
  000ac	51		 push	 ecx
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  000b3	83 c4 08	 add	 esp, 8
  000b6	3b f4		 cmp	 esi, esp
  000b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bd	83 f8 ff	 cmp	 eax, -1
  000c0	75 1e		 jne	 SHORT $LN6@use_facet

; 518  : 
; 519  :  #if _HAS_EXCEPTIONS
; 520  : 
; 521  : 			_THROW(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000c2	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  000c8	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@XZ	; std::bad_cast::bad_cast
  000cd	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000d2	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 __CxxThrowException@8

; 522  : 
; 523  :  #else /* _HAS_EXCEPTIONS */
; 524  : 			abort();	// lazy disallowed
; 525  :  #endif /* _HAS_EXCEPTIONS */
; 526  : 
; 527  : 		else

  000de	eb 36		 jmp	 SHORT $LN3@use_facet
$LN6@use_facet:

; 528  : 			{	// queue up lazy facet for destruction
; 529  : 			_Pf = _Psave;

  000e0	8b 45 dc	 mov	 eax, DWORD PTR __Psave$7[ebp]
  000e3	89 45 c4	 mov	 DWORD PTR __Pf$5[ebp], eax

; 530  : 			_Facetptr<_Facet>::_Psave = _Psave;

  000e6	8b 45 dc	 mov	 eax, DWORD PTR __Psave$7[ebp]
  000e9	a3 00 00 00 00	 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B, eax ; std::_Facetptr<std::codecvt<char,char,_Mbstatet> >::_Psave

; 531  : 
; 532  : 			locale::facet *_Pfmod = (_Facet *)_Psave;

  000ee	8b 45 dc	 mov	 eax, DWORD PTR __Psave$7[ebp]
  000f1	89 45 b8	 mov	 DWORD PTR __Pfmod$4[ebp], eax

; 533  : 			_Pfmod->_Incref();

  000f4	8b 45 b8	 mov	 eax, DWORD PTR __Pfmod$4[ebp]
  000f7	8b 10		 mov	 edx, DWORD PTR [eax]
  000f9	8b f4		 mov	 esi, esp
  000fb	8b 4d b8	 mov	 ecx, DWORD PTR __Pfmod$4[ebp]
  000fe	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00101	ff d0		 call	 eax
  00103	3b f4		 cmp	 esi, esp
  00105	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 534  : 
; 535  :  #if defined(_M_CEE)
; 536  : 			_Facet_Register_m(_Pfmod);
; 537  : 
; 538  :  #else /* defined(_M_CEE) */
; 539  : 			_Facet_Register(_Pfmod);

  0010a	8b 45 b8	 mov	 eax, DWORD PTR __Pfmod$4[ebp]
  0010d	50		 push	 eax
  0010e	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register
  00113	83 c4 04	 add	 esp, 4
$LN3@use_facet:

; 540  :  #endif /* defined(_M_CEE) */
; 541  : 			}
; 542  : 
; 543  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00116	8b 45 c4	 mov	 eax, DWORD PTR __Pf$5[ebp]
  00119	89 85 d8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0011f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00126	8b f4		 mov	 esi, esp
  00128	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  0012b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00131	3b f4		 cmp	 esi, esp
  00133	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00138	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
$LN8@use_facet:

; 544  : 	_END_LOCK()
; 545  : 	}	// end of use_facet body

  0013e	52		 push	 edx
  0013f	8b cd		 mov	 ecx, ebp
  00141	50		 push	 eax
  00142	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN14@use_facet
  00148	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0014d	58		 pop	 eax
  0014e	5a		 pop	 edx
  0014f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00152	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00159	59		 pop	 ecx
  0015a	5f		 pop	 edi
  0015b	5e		 pop	 esi
  0015c	5b		 pop	 ebx
  0015d	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	81 c4 2c 01 00
	00		 add	 esp, 300		; 0000012cH
  0016d	3b ec		 cmp	 ebp, esp
  0016f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00174	8b e5		 mov	 esp, ebp
  00176	5d		 pop	 ebp
  00177	c3		 ret	 0
$LN14@use_facet:
  00178	02 00 00 00	 DD	 2
  0017c	00 00 00 00	 DD	 $LN13@use_facet
$LN13@use_facet:
  00180	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00184	04 00 00 00	 DD	 4
  00188	00 00 00 00	 DD	 $LN10@use_facet
  0018c	dc ff ff ff	 DD	 -36			; ffffffdcH
  00190	04 00 00 00	 DD	 4
  00194	00 00 00 00	 DD	 $LN11@use_facet
$LN11@use_facet:
  00198	5f		 DB	 95			; 0000005fH
  00199	50		 DB	 80			; 00000050H
  0019a	73		 DB	 115			; 00000073H
  0019b	61		 DB	 97			; 00000061H
  0019c	76		 DB	 118			; 00000076H
  0019d	65		 DB	 101			; 00000065H
  0019e	00		 DB	 0
$LN10@use_facet:
  0019f	5f		 DB	 95			; 0000005fH
  001a0	4c		 DB	 76			; 0000004cH
  001a1	6f		 DB	 111			; 0000006fH
  001a2	63		 DB	 99			; 00000063H
  001a3	6b		 DB	 107			; 0000006bH
  001a4	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z$0:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a d0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-304]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ PROC		; std::fpos<_Mbstatet>::operator __int64, COMDAT
; _this$ = ecx

; 65   : 		{	// return offset

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 66   : 		return (_Myoff + _Fpos);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	8b 10		 mov	 edx, DWORD PTR [eax]
  0002b	03 51 08	 add	 edx, DWORD PTR [ecx+8]
  0002e	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00031	13 71 0c	 adc	 esi, DWORD PTR [ecx+12]
  00034	8b c2		 mov	 eax, edx
  00036	8b d6		 mov	 edx, esi

; 67   : 		}

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ ENDP		; std::fpos<_Mbstatet>::operator __int64
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ?seekpos@?$fpos@U_Mbstatet@@@std@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?seekpos@?$fpos@U_Mbstatet@@@std@@QBE_JXZ PROC		; std::fpos<_Mbstatet>::seekpos, COMDAT
; _this$ = ecx

; 60   : 		{	// return C file position

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 61   : 		return (_Fpos);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00029	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]

; 62   : 		}

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?seekpos@?$fpos@U_Mbstatet@@@std@@QBE_JXZ ENDP		; std::fpos<_Mbstatet>::seekpos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ?state@?$fpos@U_Mbstatet@@@std@@QBE?AU_Mbstatet@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?state@?$fpos@U_Mbstatet@@@std@@QBE?AU_Mbstatet@@XZ PROC ; std::fpos<_Mbstatet>::state, COMDAT
; _this$ = ecx

; 50   : 		{	// return conversion state

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 51   : 		return (_Mystate);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00029	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0002c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002f	89 08		 mov	 DWORD PTR [eax], ecx
  00031	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00034	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 52   : 		}

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?state@?$fpos@U_Mbstatet@@@std@@QBE?AU_Mbstatet@@XZ ENDP ; std::fpos<_Mbstatet>::state
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ??0?$fpos@U_Mbstatet@@@std@@QAE@U_Mbstatet@@_J@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__State$ = 8						; size = 8
__Fileposition$ = 16					; size = 8
??0?$fpos@U_Mbstatet@@@std@@QAE@U_Mbstatet@@_J@Z PROC	; std::fpos<_Mbstatet>::fpos<_Mbstatet>, COMDAT
; _this$ = ecx

; 46   : 		{	// construct with conversion state and C file position

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 45   : 		: _Myoff(0), _Fpos(_Fileposition), _Mystate(_State)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0002c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 4d 10	 mov	 ecx, DWORD PTR __Fileposition$[ebp]
  00039	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0003c	8b 55 14	 mov	 edx, DWORD PTR __Fileposition$[ebp+4]
  0003f	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00042	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 4d 08	 mov	 ecx, DWORD PTR __State$[ebp]
  00048	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0004b	8b 55 0c	 mov	 edx, DWORD PTR __State$[ebp+4]
  0004e	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 47   : 		}

  00051	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 10 00	 ret	 16			; 00000010H
??0?$fpos@U_Mbstatet@@@std@@QAE@U_Mbstatet@@_J@Z ENDP	; std::fpos<_Mbstatet>::fpos<_Mbstatet>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Off$ = 8						; size = 8
??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z PROC		; std::fpos<_Mbstatet>::fpos<_Mbstatet>, COMDAT
; _this$ = ecx

; 41   : 		{	// construct with stream offset

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 40   : 		: _Myoff(_Off), _Fpos(0), _Mystate()

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00029	89 08		 mov	 DWORD PTR [eax], ecx
  0002b	8b 55 0c	 mov	 edx, DWORD PTR __Off$[ebp+4]
  0002e	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00031	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0003b	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00042	33 c0		 xor	 eax, eax
  00044	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	83 c1 10	 add	 ecx, 16			; 00000010H
  0004a	89 01		 mov	 DWORD PTR [ecx], eax
  0004c	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 42   : 		}

  0004f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 08 00	 ret	 8
??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z ENDP		; std::fpos<_Mbstatet>::fpos<_Mbstatet>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z
_TEXT	SEGMENT
$T2 = -221						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>, COMDAT
; _this$ = ecx

; 1735 : 		{	// construct allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1733 : 		: _Mypair(_One_then_variadic_args_t(),

  00042	8b 45 08	 mov	 eax, DWORD PTR __Al$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
  0004b	83 c4 04	 add	 esp, 4
  0004e	50		 push	 eax
  0004f	0f b6 8d 23 ff
	ff ff		 movzx	 ecx, BYTE PTR $T2[ebp]
  00056	51		 push	 ecx
  00057	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	e8 00 00 00 00	 call	 ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
  0005f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1736 : 		_Alloc_proxy();

  00066	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy

; 1737 : 		}

  0006e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00075	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00078	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00082	59		 pop	 ecx
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0008c	3b ec		 cmp	 ebp, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
__ehhandler$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\type_traits
;	COMDAT ??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::move<std::allocator<char> &>, COMDAT

; 1606 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1607 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1608 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::move<std::allocator<char> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\type_traits
;	COMDAT ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>, COMDAT

; 1606 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1607 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1608 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstddef
;	COMDAT ??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 248  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 249  : 	return (__builtin_addressof(_Val));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 250  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z PROC		; std::operator!=<char,char>, COMDAT

; 1015 : 	{	// test for allocator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1016 : 	return (false);

  0001e	32 c0		 xor	 al, al

; 1017 : 	}

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z ENDP		; std::operator!=<char,char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstddef
;	COMDAT ??$addressof@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z PROC ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const >, COMDAT

; 248  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 249  : 	return (__builtin_addressof(_Val));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 250  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$addressof@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ENDP ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@D@std@@YAPADPAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 264  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 265  : 	return (_Ptr);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 266  : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Unfancy@D@std@@YAPADPAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\utility
;	COMDAT ??$_Min_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -208						; size = 4
$T1 = -200						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Min_value@I@std@@YAABIABI0@Z PROC			; std::_Min_value<unsigned int>, COMDAT

; 22   : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 23   : 	return (_Right < _Left ? _Right : _Left);

  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00021	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00024	8b 10		 mov	 edx, DWORD PTR [eax]
  00026	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00028	73 0b		 jae	 SHORT $LN3@Min_value
  0002a	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0002d	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  00033	eb 09		 jmp	 SHORT $LN4@Min_value
$LN3@Min_value:
  00035	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00038	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], ecx
$LN4@Min_value:
  0003e	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv65[ebp]
  00044	89 95 38 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], edx
  0004a	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]

; 24   : 	}

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
??$_Min_value@I@std@@YAABIABI0@Z ENDP			; std::_Min_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??$_Traits_find@U?$char_traits@D@std@@@std@@YAIQBDII0I@Z
_TEXT	SEGMENT
__Match_try$1 = -20					; size = 4
__Possible_matches_end$ = -8				; size = 4
__Haystack$ = 8						; size = 4
__Hay_size$ = 12					; size = 4
__Start_at$ = 16					; size = 4
__Needle$ = 20						; size = 4
__Needle_size$ = 24					; size = 4
??$_Traits_find@U?$char_traits@D@std@@@std@@YAIQBDII0I@Z PROC ; std::_Traits_find<std::char_traits<char> >, COMDAT

; 56   : 	{	// search [_Haystack, _Haystack + _Hay_size) for [_Needle, _Needle + _Needle_size), at/after _Start_at

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 57   : 	if (_Needle_size > _Hay_size || _Start_at > _Hay_size - _Needle_size)

  0001e	8b 45 18	 mov	 eax, DWORD PTR __Needle_size$[ebp]
  00021	3b 45 0c	 cmp	 eax, DWORD PTR __Hay_size$[ebp]
  00024	77 0b		 ja	 SHORT $LN6@Traits_fin
  00026	8b 45 0c	 mov	 eax, DWORD PTR __Hay_size$[ebp]
  00029	2b 45 18	 sub	 eax, DWORD PTR __Needle_size$[ebp]
  0002c	39 45 10	 cmp	 DWORD PTR __Start_at$[ebp], eax
  0002f	76 05		 jbe	 SHORT $LN5@Traits_fin
$LN6@Traits_fin:

; 58   : 		{	// xpos cannot exist, report failure
; 59   : 			// N4659 24.3.2.7.2 [string.find]/1 says:
; 60   : 			// 1. _Start_at <= xpos
; 61   : 			// 2. xpos + _Needle_size <= _Hay_size;
; 62   : 			// therefore:
; 63   : 			// 3. _Needle_size <= _Hay_size (by 2) (checked above)
; 64   : 			// 4. _Start_at + _Needle_size <= _Hay_size (substitute 1 into 2)
; 65   : 			// 5. _Start_at <= _Hay_size - _Needle_size (4, move _Needle_size to other side) (also checked above)
; 66   : 		return (static_cast<size_t>(-1));

  00031	83 c8 ff	 or	 eax, -1
  00034	eb 76		 jmp	 SHORT $LN10@Traits_fin
$LN5@Traits_fin:

; 67   : 		}
; 68   : 
; 69   : 	if (_Needle_size == 0)

  00036	83 7d 18 00	 cmp	 DWORD PTR __Needle_size$[ebp], 0
  0003a	75 05		 jne	 SHORT $LN7@Traits_fin

; 70   : 		{	// empty string always matches if xpos is possible
; 71   : 		return (_Start_at);

  0003c	8b 45 10	 mov	 eax, DWORD PTR __Start_at$[ebp]
  0003f	eb 6b		 jmp	 SHORT $LN10@Traits_fin
$LN7@Traits_fin:

; 72   : 		}
; 73   : 
; 74   : 	const auto _Possible_matches_end = _Haystack + (_Hay_size - _Needle_size) + 1;

  00041	8b 45 0c	 mov	 eax, DWORD PTR __Hay_size$[ebp]
  00044	2b 45 18	 sub	 eax, DWORD PTR __Needle_size$[ebp]
  00047	8b 4d 08	 mov	 ecx, DWORD PTR __Haystack$[ebp]
  0004a	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  0004e	89 55 f8	 mov	 DWORD PTR __Possible_matches_end$[ebp], edx

; 75   : 	for (auto _Match_try = _Haystack + _Start_at; ; ++_Match_try)

  00051	8b 45 08	 mov	 eax, DWORD PTR __Haystack$[ebp]
  00054	03 45 10	 add	 eax, DWORD PTR __Start_at$[ebp]
  00057	89 45 ec	 mov	 DWORD PTR __Match_try$1[ebp], eax
  0005a	eb 09		 jmp	 SHORT $LN4@Traits_fin
$LN2@Traits_fin:
  0005c	8b 45 ec	 mov	 eax, DWORD PTR __Match_try$1[ebp]
  0005f	83 c0 01	 add	 eax, 1
  00062	89 45 ec	 mov	 DWORD PTR __Match_try$1[ebp], eax
$LN4@Traits_fin:

; 76   : 		{
; 77   : 		_Match_try = _Traits::find(_Match_try, _Possible_matches_end - _Match_try, *_Needle);

  00065	8b 45 14	 mov	 eax, DWORD PTR __Needle$[ebp]
  00068	50		 push	 eax
  00069	8b 4d f8	 mov	 ecx, DWORD PTR __Possible_matches_end$[ebp]
  0006c	2b 4d ec	 sub	 ecx, DWORD PTR __Match_try$1[ebp]
  0006f	51		 push	 ecx
  00070	8b 55 ec	 mov	 edx, DWORD PTR __Match_try$1[ebp]
  00073	52		 push	 edx
  00074	e8 00 00 00 00	 call	 ?find@?$char_traits@D@std@@SAPBDQBDIABD@Z ; std::char_traits<char>::find
  00079	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007c	89 45 ec	 mov	 DWORD PTR __Match_try$1[ebp], eax

; 78   : 		if (!_Match_try)

  0007f	83 7d ec 00	 cmp	 DWORD PTR __Match_try$1[ebp], 0
  00083	75 05		 jne	 SHORT $LN8@Traits_fin

; 79   : 			{	// didn't find first character; report failure
; 80   : 			return (static_cast<size_t>(-1));

  00085	83 c8 ff	 or	 eax, -1
  00088	eb 22		 jmp	 SHORT $LN10@Traits_fin
$LN8@Traits_fin:

; 81   : 			}
; 82   : 
; 83   : 		if (_Traits::compare(_Match_try, _Needle, _Needle_size) == 0)

  0008a	8b 45 18	 mov	 eax, DWORD PTR __Needle_size$[ebp]
  0008d	50		 push	 eax
  0008e	8b 4d 14	 mov	 ecx, DWORD PTR __Needle$[ebp]
  00091	51		 push	 ecx
  00092	8b 55 ec	 mov	 edx, DWORD PTR __Match_try$1[ebp]
  00095	52		 push	 edx
  00096	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHQBD0I@Z ; std::char_traits<char>::compare
  0009b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009e	85 c0		 test	 eax, eax
  000a0	75 08		 jne	 SHORT $LN9@Traits_fin

; 84   : 			{	// found match
; 85   : 			return (_Match_try - _Haystack);

  000a2	8b 45 ec	 mov	 eax, DWORD PTR __Match_try$1[ebp]
  000a5	2b 45 08	 sub	 eax, DWORD PTR __Haystack$[ebp]
  000a8	eb 02		 jmp	 SHORT $LN10@Traits_fin
$LN9@Traits_fin:

; 86   : 			}
; 87   : 		}

  000aa	eb b0		 jmp	 SHORT $LN2@Traits_fin
$LN10@Traits_fin:

; 88   : 	}

  000ac	5f		 pop	 edi
  000ad	5e		 pop	 esi
  000ae	5b		 pop	 ebx
  000af	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  000b5	3b ec		 cmp	 ebp, esp
  000b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
??$_Traits_find@U?$char_traits@D@std@@@std@@YAIQBDII0I@Z ENDP ; std::_Traits_find<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??$size@D$0BN@@std@@YAIAAY0BN@$$CBD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$size@D$0BN@@std@@YAIAAY0BN@$$CBD@Z PROC		; std::size<char,29>, COMDAT

; 1473 : 	{	// get dimension for array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1474 : 	return (_Size);

  0001e	b8 1d 00 00 00	 mov	 eax, 29			; 0000001dH

; 1475 : 	}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$size@D$0BN@@std@@YAIAAY0BN@$$CBD@Z ENDP		; std::size<char,29>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??$size@D$0BE@@std@@YAIAAY0BE@$$CBD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$size@D$0BE@@std@@YAIAAY0BE@$$CBD@Z PROC		; std::size<char,20>, COMDAT

; 1473 : 	{	// get dimension for array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1474 : 	return (_Size);

  0001e	b8 14 00 00 00	 mov	 eax, 20			; 00000014H

; 1475 : 	}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$size@D$0BE@@std@@YAIAAY0BE@$$CBD@Z ENDP		; std::size<char,20>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??$size@D$0O@@std@@YAIAAY0O@$$CBD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$size@D$0O@@std@@YAIAAY0O@$$CBD@Z PROC		; std::size<char,14>, COMDAT

; 1473 : 	{	// get dimension for array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1474 : 	return (_Size);

  0001e	b8 0e 00 00 00	 mov	 eax, 14			; 0000000eH

; 1475 : 	}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$size@D$0O@@std@@YAIAAY0O@$$CBD@Z ENDP		; std::size<char,14>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??$size@D$0BB@@std@@YAIAAY0BB@$$CBD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$size@D$0BB@@std@@YAIAAY0BB@$$CBD@Z PROC		; std::size<char,17>, COMDAT

; 1473 : 	{	// get dimension for array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1474 : 	return (_Size);

  0001e	b8 11 00 00 00	 mov	 eax, 17			; 00000011H

; 1475 : 	}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$size@D$0BB@@std@@YAIAAY0BB@$$CBD@Z ENDP		; std::size<char,17>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??$size@D$0BH@@std@@YAIAAY0BH@$$CBD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$size@D$0BH@@std@@YAIAAY0BH@$$CBD@Z PROC		; std::size<char,23>, COMDAT

; 1473 : 	{	// get dimension for array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1474 : 	return (_Size);

  0001e	b8 17 00 00 00	 mov	 eax, 23			; 00000017H

; 1475 : 	}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$size@D$0BH@@std@@YAIAAY0BH@$$CBD@Z ENDP		; std::size<char,23>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??$size@D$0BL@@std@@YAIAAY0BL@$$CBD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$size@D$0BL@@std@@YAIAAY0BL@$$CBD@Z PROC		; std::size<char,27>, COMDAT

; 1473 : 	{	// get dimension for array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1474 : 	return (_Size);

  0001e	b8 1b 00 00 00	 mov	 eax, 27			; 0000001bH

; 1475 : 	}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$size@D$0BL@@std@@YAIAAY0BL@$$CBD@Z ENDP		; std::size<char,27>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??$size@D$0BM@@std@@YAIAAY0BM@$$CBD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$size@D$0BM@@std@@YAIAAY0BM@$$CBD@Z PROC		; std::size<char,28>, COMDAT

; 1473 : 	{	// get dimension for array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1474 : 	return (_Size);

  0001e	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH

; 1475 : 	}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$size@D$0BM@@std@@YAIAAY0BM@$$CBD@Z ENDP		; std::size<char,28>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??$size@D$0CG@@std@@YAIAAY0CG@$$CBD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$size@D$0CG@@std@@YAIAAY0CG@$$CBD@Z PROC		; std::size<char,38>, COMDAT

; 1473 : 	{	// get dimension for array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1474 : 	return (_Size);

  0001e	b8 26 00 00 00	 mov	 eax, 38			; 00000026H

; 1475 : 	}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$size@D$0CG@@std@@YAIAAY0CG@$$CBD@Z ENDP		; std::size<char,38>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??$size@D$0CA@@std@@YAIAAY0CA@$$CBD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$size@D$0CA@@std@@YAIAAY0CA@$$CBD@Z PROC		; std::size<char,32>, COMDAT

; 1473 : 	{	// get dimension for array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1474 : 	return (_Size);

  0001e	b8 20 00 00 00	 mov	 eax, 32			; 00000020H

; 1475 : 	}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$size@D$0CA@@std@@YAIAAY0CA@$$CBD@Z ENDP		; std::size<char,32>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\string
;	COMDAT ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 168  : 	{	// insert a string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 169  : 	return (_Insert_string(_Ostr, _Str.data(), _Str.size()));

  0001e	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00021	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00026	50		 push	 eax
  00027	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  0002a	e8 00 00 00 00	 call	 ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
  0002f	50		 push	 eax
  00030	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z ; std::_Insert_string<char,std::char_traits<char>,unsigned int>
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 170  : 	}

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ifstream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 c1 70	 add	 ecx, 112		; 00000070H
  00029	e8 00 00 00 00	 call	 ??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	83 c1 70	 add	 ecx, 112		; 00000070H
  00034	8b f4		 mov	 esi, esp
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  0003c	3b f4		 cmp	 esi, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ifstream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 e9 70	 sub	 ecx, 112		; 00000070H
  00029	e8 00 00 00 00	 call	 ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0002e	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00031	83 e0 01	 and	 eax, 1
  00034	74 14		 je	 SHORT $LN2@scalar
  00036	68 b8 00 00 00	 push	 184			; 000000b8H
  0003b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	83 e8 70	 sub	 eax, 112		; 00000070H
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00047	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0004a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	83 e8 70	 sub	 eax, 112		; 00000070H
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00059	3b ec		 cmp	 ebp, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__autoclassinit2@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_classSize$ = 8						; size = 4
?__autoclassinit2@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXI@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 08	 mov	 eax, DWORD PTR _classSize$[ebp]
  00026	50		 push	 eax
  00027	6a 00		 push	 0
  00029	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 _memset
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?__autoclassinit2@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXI@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Filename$ = 8						; size = 4
__Mode$ = 12						; size = 4
__Prot$ = 16						; size = 4
?open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::open, COMDAT
; _this$ = ecx

; 921  : 		{	// open a C stream with specified mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 922  : 		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)

  00023	8b 45 10	 mov	 eax, DWORD PTR __Prot$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 0c	 mov	 ecx, DWORD PTR __Mode$[ebp]
  0002a	83 c9 01	 or	 ecx, 1
  0002d	51		 push	 ecx
  0002e	8b 55 08	 mov	 edx, DWORD PTR __Filename$[ebp]
  00031	52		 push	 edx
  00032	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	83 c1 10	 add	 ecx, 16			; 00000010H
  00038	e8 00 00 00 00	 call	 ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
  0003d	85 c0		 test	 eax, eax
  0003f	75 22		 jne	 SHORT $LN2@open

; 923  : 			_Myios::setstate(ios_base::failbit);

  00041	8b f4		 mov	 esi, esp
  00043	6a 00		 push	 0
  00045	6a 02		 push	 2
  00047	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0004f	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00052	8b ca		 mov	 ecx, edx
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  0005a	3b f4		 cmp	 esi, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 924  : 		else

  00061	eb 20		 jmp	 SHORT $LN1@open
$LN2@open:

; 925  : 			_Myios::clear();	// added with C++11

  00063	8b f4		 mov	 esi, esp
  00065	6a 00		 push	 0
  00067	6a 00		 push	 0
  00069	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00071	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00074	8b ca		 mov	 ecx, edx
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  0007c	3b f4		 cmp	 esi, esp
  0007e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@open:

; 926  : 		}

  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0008c	3b ec		 cmp	 ebp, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 0c 00	 ret	 12			; 0000000cH
?open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::open
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 905  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 90	 mov	 ecx, DWORD PTR [eax-112]
  00029	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 44 10 90 00
	00 00 00	 mov	 DWORD PTR [eax+edx-112], OFFSET ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
  00037	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 48 90	 mov	 ecx, DWORD PTR [eax-112]
  0003d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00040	83 ea 70	 sub	 edx, 112		; 00000070H
  00043	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00046	8b 48 90	 mov	 ecx, DWORD PTR [eax-112]
  00049	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	89 54 01 8c	 mov	 DWORD PTR [ecx+eax-116], edx

; 906  : 		}

  00053	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	83 e9 60	 sub	 ecx, 96			; 00000060H
  00059	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  0005e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	83 e9 58	 sub	 ecx, 88			; 00000058H
  00064	8b f4		 mov	 esi, esp
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
  0006c	3b f4		 cmp	 esi, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0007c	3b ec		 cmp	 ebp, esp
  0007e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_$initVBases$ = 8					; size = 4
??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 759  : 		{	// construct unopened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0
  0004c	83 7d 08 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  00050	74 34		 je	 SHORT $LN2@basic_ifst
  00052	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00055	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@
  0005b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	83 c1 70	 add	 ecx, 112		; 00000070H
  00061	8b f4		 mov	 esi, esp
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
  00069	3b f4		 cmp	 esi, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00077	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  0007d	83 c8 01	 or	 eax, 1
  00080	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
$LN2@basic_ifst:

; 758  : 		: _Mybase(&_Filebuffer)

  00086	8b f4		 mov	 esi, esp
  00088	6a 00		 push	 0
  0008a	6a 00		 push	 0
  0008c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0008f	83 c0 10	 add	 eax, 16			; 00000010H
  00092	50		 push	 eax
  00093	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  0009c	3b f4		 cmp	 esi, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a3	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 759  : 		{	// construct unopened

  000aa	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  000af	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000b2	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000b5	c7 04 10 00 00
	00 00		 mov	 DWORD PTR [eax+edx], OFFSET ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
  000bc	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000bf	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000c4	83 ea 70	 sub	 edx, 112		; 00000070H
  000c7	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000ca	8b 08		 mov	 ecx, DWORD PTR [eax]
  000cc	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000cf	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000d2	89 54 01 fc	 mov	 DWORD PTR [ecx+eax-4], edx
  000d6	6a 00		 push	 0
  000d8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	83 c1 10	 add	 ecx, 16			; 00000010H
  000de	e8 00 00 00 00	 call	 ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >

; 760  : 		}

  000e3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ea	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000ed	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f7	59		 pop	 ecx
  000f8	5f		 pop	 edi
  000f9	5e		 pop	 esi
  000fa	5b		 pop	 ebx
  000fb	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00101	3b ec		 cmp	 ebp, esp
  00103	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@XZ$0:
  00000	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00006	83 e0 01	 and	 eax, 1
  00009	0f 84 1c 00 00
	00		 je	 $LN5@basic_ifst
  0000f	83 a5 20 ff ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00016	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 70	 add	 ecx, 112		; 00000070H
  0001c	8b f4		 mov	 esi, esp
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  00024	3b f4		 cmp	 esi, esp
  00026	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$LN5@basic_ifst:
  0002b	c3		 ret	 0
__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@XZ$1:
  0002c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 18	 add	 ecx, 24			; 00000018H
  00032	8b f4		 mov	 esi, esp
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
  0003a	3b f4		 cmp	 esi, esp
  0003c	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00041	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00045	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00048	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0004e	33 c8		 xor	 ecx, eax
  00050	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00055	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0005a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\string
;	COMDAT ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::getline<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 158  : 	{	// get characters into string, discard newline

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 159  : 	return (getline(_STD move(_Istr), _Str, _Istr.widen('\n')));

  0001e	8b f4		 mov	 esi, esp
  00020	6a 0a		 push	 10			; 0000000aH
  00022	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  0002a	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0002d	8b ca		 mov	 ecx, edx
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	0f b6 c0	 movzx	 eax, al
  0003f	50		 push	 eax
  00040	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00043	51		 push	 ecx
  00044	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00047	52		 push	 edx
  00048	e8 00 00 00 00	 call	 ??$move@AAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::move<std::basic_istream<char,std::char_traits<char> > &>
  0004d	83 c4 04	 add	 esp, 4
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 160  : 	}

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00062	3b ec		 cmp	 ebp, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::getline<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z
_TEXT	SEGMENT
$T2 = -252						; size = 4
__Ans$ = -48						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 3799 : 	{	// return string + NTCTS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec f4 00 00
	00		 sub	 esp, 244		; 000000f4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 00 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-256]
  00020	b9 3d 00 00 00	 mov	 ecx, 61			; 0000003dH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 3800 : 	using _String_type = basic_string<_Elem, _Traits, _Alloc>;
; 3801 : 	using _Size_type = typename _String_type::size_type;
; 3802 : 	_String_type _Ans;

  0004a	8d 4d d0	 lea	 ecx, DWORD PTR __Ans$[ebp]
  0004d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 3803 : 	_Ans.reserve(_Convert_size<_Size_type>(_Left.size() + _Traits::length(_Right)));

  00059	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  0005c	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00061	8b f0		 mov	 esi, eax
  00063	8b 45 10	 mov	 eax, DWORD PTR __Right$[ebp]
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ?length@?$char_traits@D@std@@SAIQBD@Z ; std::char_traits<char>::length
  0006c	83 c4 04	 add	 esp, 4
  0006f	03 f0		 add	 esi, eax
  00071	56		 push	 esi
  00072	e8 00 00 00 00	 call	 ??$_Convert_size@I@std@@YAII@Z ; std::_Convert_size<unsigned int>
  00077	83 c4 04	 add	 esp, 4
  0007a	50		 push	 eax
  0007b	8d 4d d0	 lea	 ecx, DWORD PTR __Ans$[ebp]
  0007e	e8 00 00 00 00	 call	 ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve

; 3804 : 	_Ans += _Left;

  00083	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00086	50		 push	 eax
  00087	8d 4d d0	 lea	 ecx, DWORD PTR __Ans$[ebp]
  0008a	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 3805 : 	_Ans += _Right;

  0008f	8b 45 10	 mov	 eax, DWORD PTR __Right$[ebp]
  00092	50		 push	 eax
  00093	8d 4d d0	 lea	 ecx, DWORD PTR __Ans$[ebp]
  00096	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 3806 : 	return (_Ans);

  0009b	8d 45 d0	 lea	 eax, DWORD PTR __Ans$[ebp]
  0009e	50		 push	 eax
  0009f	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000a2	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000a7	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  000ad	83 c9 01	 or	 ecx, 1
  000b0	89 8d 04 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  000b6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000bd	8d 4d d0	 lea	 ecx, DWORD PTR __Ans$[ebp]
  000c0	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000c5	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3807 : 	}

  000c8	52		 push	 edx
  000c9	8b cd		 mov	 ecx, ebp
  000cb	50		 push	 eax
  000cc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@operator
  000d2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000d7	58		 pop	 eax
  000d8	5a		 pop	 edx
  000d9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000dc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e3	59		 pop	 ecx
  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	5b		 pop	 ebx
  000e7	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ea	33 cd		 xor	 ecx, ebp
  000ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f1	81 c4 00 01 00
	00		 add	 esp, 256		; 00000100H
  000f7	3b ec		 cmp	 ebp, esp
  000f9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fe	8b e5		 mov	 esp, ebp
  00100	5d		 pop	 ebp
  00101	c3		 ret	 0
  00102	66 90		 npad	 2
$LN9@operator:
  00104	01 00 00 00	 DD	 1
  00108	00 00 00 00	 DD	 $LN8@operator
$LN8@operator:
  0010c	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00110	1c 00 00 00	 DD	 28			; 0000001cH
  00114	00 00 00 00	 DD	 $LN6@operator
$LN6@operator:
  00118	5f		 DB	 95			; 0000005fH
  00119	41		 DB	 65			; 00000041H
  0011a	6e		 DB	 110			; 0000006eH
  0011b	73		 DB	 115			; 00000073H
  0011c	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Ans$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a fc fe ff
	ff		 mov	 ecx, DWORD PTR [edx-260]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 3884 : 	{	// return string + NTCTS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp], 0

; 3885 : 	return (_STD move(_Left.append(_Right)));

  00028	8b 45 10	 mov	 eax, DWORD PTR __Right$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  0002f	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
  0003a	83 c4 04	 add	 esp, 4
  0003d	50		 push	 eax
  0003e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00041	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00046	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  0004c	83 c9 01	 or	 ecx, 1
  0004f	89 8d 38 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00055	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3886 : 	}

  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00061	3b ec		 cmp	 ebp, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@$$QAV10@@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@$$QAV10@@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 3829 : 	{	// return string + string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp], 0

; 3830 : 	return (_STD move(_Right.insert(0, _Left)));

  00028	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  0002b	50		 push	 eax
  0002c	6a 00		 push	 0
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR __Right$[ebp]
  00031	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
  0003c	83 c4 04	 add	 esp, 4
  0003f	50		 push	 eax
  00040	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00043	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00048	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  0004e	83 c9 01	 or	 ecx, 1
  00051	89 8d 38 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00057	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3831 : 	}

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00063	3b ec		 cmp	 ebp, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@$$QAV10@@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 c1 68	 add	 ecx, 104		; 00000068H
  00029	e8 00 00 00 00	 call	 ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	83 c1 68	 add	 ecx, 104		; 00000068H
  00034	8b f4		 mov	 esi, esp
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  0003c	3b f4		 cmp	 esi, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 e9 68	 sub	 ecx, 104		; 00000068H
  00029	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
  0002e	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00031	83 e0 01	 and	 eax, 1
  00034	74 14		 je	 SHORT $LN2@scalar
  00036	68 b0 00 00 00	 push	 176			; 000000b0H
  0003b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	83 e8 68	 sub	 eax, 104		; 00000068H
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00047	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0004a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	83 e8 68	 sub	 eax, 104		; 00000068H
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00059	3b ec		 cmp	 ebp, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__autoclassinit2@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_classSize$ = 8						; size = 4
?__autoclassinit2@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 08	 mov	 eax, DWORD PTR _classSize$[ebp]
  00026	50		 push	 eax
  00027	6a 00		 push	 0
  00029	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 _memset
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?__autoclassinit2@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 01	 and	 eax, 1
  00031	74 0e		 je	 SHORT $LN2@scalar
  00033	6a 44		 push	 68			; 00000044H
  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003e	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00041	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004d	3b ec		 cmp	 ebp, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\sstream
;	COMDAT ?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z
_TEXT	SEGMENT
__State$ = -20						; size = 4
_this$ = -8						; size = 4
__Mode$ = 8						; size = 4
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate, COMDAT
; _this$ = ecx

; 356  : 		{	// convert open mode to stream state bits

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 357  : 		_Strstate _State = (_Strstate)0;

  00023	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 358  : 		if (!(_Mode & ios_base::in))

  0002a	8b 45 08	 mov	 eax, DWORD PTR __Mode$[ebp]
  0002d	83 e0 01	 and	 eax, 1
  00030	75 09		 jne	 SHORT $LN2@Getstate

; 359  : 			_State |= _Noread;

  00032	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  00035	83 c8 04	 or	 eax, 4
  00038	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax
$LN2@Getstate:

; 360  : 		if (!(_Mode & ios_base::out))

  0003b	8b 45 08	 mov	 eax, DWORD PTR __Mode$[ebp]
  0003e	83 e0 02	 and	 eax, 2
  00041	75 09		 jne	 SHORT $LN3@Getstate

; 361  : 			_State |= _Constant;

  00043	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  00046	83 c8 02	 or	 eax, 2
  00049	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax
$LN3@Getstate:

; 362  : 		if (_Mode & ios_base::app)

  0004c	8b 45 08	 mov	 eax, DWORD PTR __Mode$[ebp]
  0004f	83 e0 08	 and	 eax, 8
  00052	74 09		 je	 SHORT $LN4@Getstate

; 363  : 			_State |= _Append;

  00054	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  00057	83 c8 08	 or	 eax, 8
  0005a	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax
$LN4@Getstate:

; 364  : 		if (_Mode & ios_base::ate)

  0005d	8b 45 08	 mov	 eax, DWORD PTR __Mode$[ebp]
  00060	83 e0 04	 and	 eax, 4
  00063	74 09		 je	 SHORT $LN5@Getstate

; 365  : 			_State |= _Atend;

  00065	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  00068	83 c8 10	 or	 eax, 16			; 00000010H
  0006b	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax
$LN5@Getstate:

; 366  : 		return (_State);

  0006e	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]

; 367  : 		}

  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\sstream
;	COMDAT ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ
_TEXT	SEGMENT
tv88 = -208						; size = 4
_this$ = -8						; size = 4
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 337  : 		{	// discard any allocated buffer and clear pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 338  : 		if (_Mystate & _Allocated)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00029	83 e1 01	 and	 ecx, 1
  0002c	0f 84 8a 00 00
	00		 je	 $LN2@Tidy

; 339  : 			_Al.deallocate(pointer_traits<_Ptrty>::pointer_to(*_Mysb::eback()),

  00032	8b f4		 mov	 esi, esp
  00034	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0003d	3b f4		 cmp	 esi, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	85 c0		 test	 eax, eax
  00046	74 1a		 je	 SHORT $LN4@Tidy
  00048	8b f4		 mov	 esi, esp
  0004a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00053	3b f4		 cmp	 esi, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv88[ebp], eax
  00060	eb 18		 jmp	 SHORT $LN5@Tidy
$LN4@Tidy:
  00062	8b f4		 mov	 esi, esp
  00064	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0006d	3b f4		 cmp	 esi, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv88[ebp], eax
$LN5@Tidy:
  0007a	8b f4		 mov	 esi, esp
  0007c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00085	3b f4		 cmp	 esi, esp
  00087	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008c	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv88[ebp]
  00092	2b c8		 sub	 ecx, eax
  00094	51		 push	 ecx
  00095	8b f4		 mov	 esi, esp
  00097	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000a0	3b f4		 cmp	 esi, esp
  000a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 ?pointer_to@?$pointer_traits@PAD@std@@SAPADAAD@Z ; std::pointer_traits<char *>::pointer_to
  000ad	83 c4 04	 add	 esp, 4
  000b0	50		 push	 eax
  000b1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b4	83 c1 40	 add	 ecx, 64			; 00000040H
  000b7	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate
$LN2@Tidy:

; 340  : 				(_Mysb::pptr() != 0 ? _Mysb::epptr()
; 341  : 					: _Mysb::egptr()) - _Mysb::eback());
; 342  : 		_Mysb::setg(0, 0, 0);

  000bc	8b f4		 mov	 esi, esp
  000be	6a 00		 push	 0
  000c0	6a 00		 push	 0
  000c2	6a 00		 push	 0
  000c4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  000cd	3b f4		 cmp	 esi, esp
  000cf	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 343  : 		_Mysb::setp(0, 0);

  000d4	8b f4		 mov	 esi, esp
  000d6	6a 00		 push	 0
  000d8	6a 00		 push	 0
  000da	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z
  000e3	3b f4		 cmp	 esi, esp
  000e5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 344  : 		_Seekhigh = 0;

  000ea	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000ed	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 345  : 		_Mystate &= ~_Allocated;

  000f4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000f7	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  000fa	83 e1 fe	 and	 ecx, -2			; fffffffeH
  000fd	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00100	89 4a 3c	 mov	 DWORD PTR [edx+60], ecx

; 346  : 		}

  00103	5f		 pop	 edi
  00104	5e		 pop	 esi
  00105	5b		 pop	 ebx
  00106	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0010c	3b ec		 cmp	 ebp, esp
  0010e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c3		 ret	 0
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\sstream
;	COMDAT ?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z
_TEXT	SEGMENT
tv142 = -220						; size = 4
__Pnew$1 = -20						; size = 4
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__State$ = 16						; size = 4
?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init, COMDAT
; _this$ = ecx

; 310  : 		{	// initialize buffer to [_Ptr, _Ptr + _Count), set state

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00013	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 311  : 		_Seekhigh = 0;

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 312  : 		_Mystate = _State;

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 10	 mov	 ecx, DWORD PTR __State$[ebp]
  00033	89 48 3c	 mov	 DWORD PTR [eax+60], ecx

; 313  : 
; 314  : 		if (_Count != 0
; 315  : 			&& (_Mystate & (_Noread | _Constant)) != (_Noread | _Constant))

  00036	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  0003a	0f 84 0b 01 00
	00		 je	 $LN1@Init
  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00046	83 e1 06	 and	 ecx, 6
  00049	83 f9 06	 cmp	 ecx, 6
  0004c	0f 84 f9 00 00
	00		 je	 $LN1@Init

; 316  : 			{	// finite buffer that can be read or written, set it up
; 317  : 			_Elem *_Pnew = _Unfancy(_Al.allocate(_Count));

  00052	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00055	50		 push	 eax
  00056	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	83 c1 40	 add	 ecx, 64			; 00000040H
  0005c	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  00067	83 c4 04	 add	 esp, 4
  0006a	89 45 ec	 mov	 DWORD PTR __Pnew$1[ebp], eax

; 318  : 			_Traits::copy(_Pnew, _Ptr, _Count);

  0006d	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00070	50		 push	 eax
  00071	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00074	51		 push	 ecx
  00075	8b 55 ec	 mov	 edx, DWORD PTR __Pnew$1[ebp]
  00078	52		 push	 edx
  00079	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 319  : 			_Seekhigh = _Pnew + _Count;

  00081	8b 45 ec	 mov	 eax, DWORD PTR __Pnew$1[ebp]
  00084	03 45 0c	 add	 eax, DWORD PTR __Count$[ebp]
  00087	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 320  : 
; 321  : 			if (!(_Mystate & _Noread))

  0008d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00090	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00093	83 e1 04	 and	 ecx, 4
  00096	75 21		 jne	 SHORT $LN3@Init

; 322  : 				_Mysb::setg(_Pnew, _Pnew,

  00098	8b 45 ec	 mov	 eax, DWORD PTR __Pnew$1[ebp]
  0009b	03 45 0c	 add	 eax, DWORD PTR __Count$[ebp]
  0009e	8b f4		 mov	 esi, esp
  000a0	50		 push	 eax
  000a1	8b 4d ec	 mov	 ecx, DWORD PTR __Pnew$1[ebp]
  000a4	51		 push	 ecx
  000a5	8b 55 ec	 mov	 edx, DWORD PTR __Pnew$1[ebp]
  000a8	52		 push	 edx
  000a9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  000b2	3b f4		 cmp	 esi, esp
  000b4	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Init:

; 323  : 					_Pnew + _Count);	// setup read buffer
; 324  : 			if (!(_Mystate & _Constant))

  000b9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000bc	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  000bf	83 e1 02	 and	 ecx, 2
  000c2	75 78		 jne	 SHORT $LN4@Init

; 325  : 				{	// setup write buffer, and maybe read buffer
; 326  : 				_Mysb::setp(_Pnew,

  000c4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c7	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  000ca	83 e1 18	 and	 ecx, 24			; 00000018H
  000cd	74 0e		 je	 SHORT $LN7@Init
  000cf	8b 55 ec	 mov	 edx, DWORD PTR __Pnew$1[ebp]
  000d2	03 55 0c	 add	 edx, DWORD PTR __Count$[ebp]
  000d5	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv142[ebp], edx
  000db	eb 09		 jmp	 SHORT $LN8@Init
$LN7@Init:
  000dd	8b 45 ec	 mov	 eax, DWORD PTR __Pnew$1[ebp]
  000e0	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv142[ebp], eax
$LN8@Init:
  000e6	8b 4d ec	 mov	 ecx, DWORD PTR __Pnew$1[ebp]
  000e9	03 4d 0c	 add	 ecx, DWORD PTR __Count$[ebp]
  000ec	8b f4		 mov	 esi, esp
  000ee	51		 push	 ecx
  000ef	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv142[ebp]
  000f5	52		 push	 edx
  000f6	8b 45 ec	 mov	 eax, DWORD PTR __Pnew$1[ebp]
  000f9	50		 push	 eax
  000fa	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  00103	3b f4		 cmp	 esi, esp
  00105	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 327  : 					(_Mystate & (_Atend | _Append)) ? _Pnew + _Count : _Pnew,
; 328  : 					_Pnew + _Count);
; 329  : 				if (_Mysb::gptr() == 0)

  0010a	8b f4		 mov	 esi, esp
  0010c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0010f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00115	3b f4		 cmp	 esi, esp
  00117	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011c	85 c0		 test	 eax, eax
  0011e	75 1c		 jne	 SHORT $LN4@Init

; 330  : 					_Mysb::setg(_Pnew, 0, _Pnew);

  00120	8b f4		 mov	 esi, esp
  00122	8b 45 ec	 mov	 eax, DWORD PTR __Pnew$1[ebp]
  00125	50		 push	 eax
  00126	6a 00		 push	 0
  00128	8b 4d ec	 mov	 ecx, DWORD PTR __Pnew$1[ebp]
  0012b	51		 push	 ecx
  0012c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0012f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  00135	3b f4		 cmp	 esi, esp
  00137	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@Init:

; 331  : 				}
; 332  : 			_Mystate |= _Allocated;

  0013c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0013f	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00142	83 c9 01	 or	 ecx, 1
  00145	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00148	89 4a 3c	 mov	 DWORD PTR [edx+60], ecx
$LN1@Init:

; 333  : 			}
; 334  : 		}

  0014b	5f		 pop	 edi
  0014c	5e		 pop	 esi
  0014d	5b		 pop	 ebx
  0014e	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  00154	3b ec		 cmp	 ebp, esp
  00156	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015b	8b e5		 mov	 esp, ebp
  0015d	5d		 pop	 ebp
  0015e	c2 0c 00	 ret	 12			; 0000000cH
?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\sstream
;	COMDAT ?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
_TEXT	SEGMENT
tv342 = -228						; size = 8
tv282 = -228						; size = 8
tv259 = -224						; size = 4
__Off$ = -24						; size = 8
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Ptr$ = 12						; size = 24
__Mode$ = 36						; size = 4
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos, COMDAT
; _this$ = ecx

; 276  : 		{	// change position to _Pos, according to _Mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00013	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 277  : 		streamoff _Off = (streamoff)_Ptr;

  00023	8d 4d 0c	 lea	 ecx, DWORD PTR __Ptr$[ebp]
  00026	e8 00 00 00 00	 call	 ??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ ; std::fpos<_Mbstatet>::operator __int64
  0002b	89 45 e8	 mov	 DWORD PTR __Off$[ebp], eax
  0002e	89 55 ec	 mov	 DWORD PTR __Off$[ebp+4], edx

; 278  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  00031	8b f4		 mov	 esi, esp
  00033	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0003c	3b f4		 cmp	 esi, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	85 c0		 test	 eax, eax
  00045	74 32		 je	 SHORT $LN2@seekpos
  00047	8b f4		 mov	 esi, esp
  00049	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	39 41 38	 cmp	 DWORD PTR [ecx+56], eax
  0005f	73 18		 jae	 SHORT $LN2@seekpos

; 279  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  00061	8b f4		 mov	 esi, esp
  00063	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0006c	3b f4		 cmp	 esi, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	89 41 38	 mov	 DWORD PTR [ecx+56], eax
$LN2@seekpos:

; 280  : 
; 281  : 		if (_Off == _BADOFF)

  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?_BADOFF@std@@3_JB
  0007e	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv259[ebp], eax
  00084	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv259[ebp]
  0008a	8b 55 e8	 mov	 edx, DWORD PTR __Off$[ebp]
  0008d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0008f	75 13		 jne	 SHORT $LN3@seekpos
  00091	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR tv259[ebp]
  00097	8b 4d ec	 mov	 ecx, DWORD PTR __Off$[ebp+4]
  0009a	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0009d	75 05		 jne	 SHORT $LN3@seekpos
  0009f	e9 2e 02 00 00	 jmp	 $LN4@seekpos
$LN3@seekpos:

; 282  : 			;
; 283  : 		else if (_Mode & ios_base::in && _Mysb::gptr() != 0)

  000a4	8b 45 24	 mov	 eax, DWORD PTR __Mode$[ebp]
  000a7	83 e0 01	 and	 eax, 1
  000aa	0f 84 3d 01 00
	00		 je	 $LN5@seekpos
  000b0	8b f4		 mov	 esi, esp
  000b2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000bb	3b f4		 cmp	 esi, esp
  000bd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c2	85 c0		 test	 eax, eax
  000c4	0f 84 23 01 00
	00		 je	 $LN5@seekpos

; 284  : 			{	// position within read buffer
; 285  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  000ca	83 7d ec 00	 cmp	 DWORD PTR __Off$[ebp+4], 0
  000ce	0f 8c 04 01 00
	00		 jl	 $LN7@seekpos
  000d4	7f 0a		 jg	 SHORT $LN15@seekpos
  000d6	83 7d e8 00	 cmp	 DWORD PTR __Off$[ebp], 0
  000da	0f 82 f8 00 00
	00		 jb	 $LN7@seekpos
$LN15@seekpos:
  000e0	8b f4		 mov	 esi, esp
  000e2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000eb	3b f4		 cmp	 esi, esp
  000ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000f5	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  000f8	2b d0		 sub	 edx, eax
  000fa	8b c2		 mov	 eax, edx
  000fc	99		 cdq
  000fd	89 85 1c ff ff
	ff		 mov	 DWORD PTR tv282[ebp], eax
  00103	89 95 20 ff ff
	ff		 mov	 DWORD PTR tv282[ebp+4], edx
  00109	8b 45 ec	 mov	 eax, DWORD PTR __Off$[ebp+4]
  0010c	3b 85 20 ff ff
	ff		 cmp	 eax, DWORD PTR tv282[ebp+4]
  00112	0f 8f c0 00 00
	00		 jg	 $LN7@seekpos
  00118	7c 0f		 jl	 SHORT $LN16@seekpos
  0011a	8b 4d e8	 mov	 ecx, DWORD PTR __Off$[ebp]
  0011d	3b 8d 1c ff ff
	ff		 cmp	 ecx, DWORD PTR tv282[ebp]
  00123	0f 87 af 00 00
	00		 ja	 $LN7@seekpos
$LN16@seekpos:

; 286  : 				{	// change read position
; 287  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  00129	8b f4		 mov	 esi, esp
  0012b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0012e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00134	3b f4		 cmp	 esi, esp
  00136	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013b	8b f0		 mov	 esi, eax
  0013d	8b fc		 mov	 edi, esp
  0013f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00142	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00148	3b fc		 cmp	 edi, esp
  0014a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0014f	2b f0		 sub	 esi, eax
  00151	8b c6		 mov	 eax, esi
  00153	99		 cdq
  00154	03 45 e8	 add	 eax, DWORD PTR __Off$[ebp]
  00157	13 55 ec	 adc	 edx, DWORD PTR __Off$[ebp+4]
  0015a	8b f4		 mov	 esi, esp
  0015c	50		 push	 eax
  0015d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00160	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
  00166	3b f4		 cmp	 esi, esp
  00168	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 288  : 				if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  0016d	8b 45 24	 mov	 eax, DWORD PTR __Mode$[ebp]
  00170	83 e0 02	 and	 eax, 2
  00173	74 61		 je	 SHORT $LN9@seekpos
  00175	8b f4		 mov	 esi, esp
  00177	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0017a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00180	3b f4		 cmp	 esi, esp
  00182	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00187	85 c0		 test	 eax, eax
  00189	74 4b		 je	 SHORT $LN9@seekpos

; 289  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),

  0018b	8b f4		 mov	 esi, esp
  0018d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00190	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00196	3b f4		 cmp	 esi, esp
  00198	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0019d	8b f4		 mov	 esi, esp
  0019f	50		 push	 eax
  001a0	8b fc		 mov	 edi, esp
  001a2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  001ab	3b fc		 cmp	 edi, esp
  001ad	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b2	50		 push	 eax
  001b3	8b fc		 mov	 edi, esp
  001b5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  001be	3b fc		 cmp	 edi, esp
  001c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001c5	50		 push	 eax
  001c6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  001cf	3b f4		 cmp	 esi, esp
  001d1	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN9@seekpos:

; 290  : 						_Mysb::epptr());	// change write position to match
; 291  : 				}
; 292  : 			else

  001d6	eb 10		 jmp	 SHORT $LN8@seekpos
$LN7@seekpos:

; 293  : 				_Off = _BADOFF;

  001d8	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?_BADOFF@std@@3_JB
  001dd	8b 08		 mov	 ecx, DWORD PTR [eax]
  001df	89 4d e8	 mov	 DWORD PTR __Off$[ebp], ecx
  001e2	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001e5	89 55 ec	 mov	 DWORD PTR __Off$[ebp+4], edx
$LN8@seekpos:
  001e8	e9 e5 00 00 00	 jmp	 $LN4@seekpos
$LN5@seekpos:

; 294  : 			}
; 295  : 		else if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  001ed	8b 45 24	 mov	 eax, DWORD PTR __Mode$[ebp]
  001f0	83 e0 02	 and	 eax, 2
  001f3	0f 84 c9 00 00
	00		 je	 $LN10@seekpos
  001f9	8b f4		 mov	 esi, esp
  001fb	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00204	3b f4		 cmp	 esi, esp
  00206	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0020b	85 c0		 test	 eax, eax
  0020d	0f 84 af 00 00
	00		 je	 $LN10@seekpos

; 296  : 			{	// position within write buffer
; 297  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00213	83 7d ec 00	 cmp	 DWORD PTR __Off$[ebp+4], 0
  00217	0f 8c 93 00 00
	00		 jl	 $LN12@seekpos
  0021d	7f 0a		 jg	 SHORT $LN17@seekpos
  0021f	83 7d e8 00	 cmp	 DWORD PTR __Off$[ebp], 0
  00223	0f 82 87 00 00
	00		 jb	 $LN12@seekpos
$LN17@seekpos:
  00229	8b f4		 mov	 esi, esp
  0022b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0022e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00234	3b f4		 cmp	 esi, esp
  00236	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0023b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0023e	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00241	2b d0		 sub	 edx, eax
  00243	8b c2		 mov	 eax, edx
  00245	99		 cdq
  00246	89 85 1c ff ff
	ff		 mov	 DWORD PTR tv342[ebp], eax
  0024c	89 95 20 ff ff
	ff		 mov	 DWORD PTR tv342[ebp+4], edx
  00252	8b 45 ec	 mov	 eax, DWORD PTR __Off$[ebp+4]
  00255	3b 85 20 ff ff
	ff		 cmp	 eax, DWORD PTR tv342[ebp+4]
  0025b	7f 53		 jg	 SHORT $LN12@seekpos
  0025d	7c 0b		 jl	 SHORT $LN18@seekpos
  0025f	8b 4d e8	 mov	 ecx, DWORD PTR __Off$[ebp]
  00262	3b 8d 1c ff ff
	ff		 cmp	 ecx, DWORD PTR tv342[ebp]
  00268	77 46		 ja	 SHORT $LN12@seekpos
$LN18@seekpos:

; 298  : 				_Mysb::pbump((int)(_Mysb::eback()

  0026a	8b f4		 mov	 esi, esp
  0026c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0026f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00275	3b f4		 cmp	 esi, esp
  00277	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0027c	8b f0		 mov	 esi, eax
  0027e	8b fc		 mov	 edi, esp
  00280	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00283	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00289	3b fc		 cmp	 edi, esp
  0028b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00290	2b f0		 sub	 esi, eax
  00292	8b c6		 mov	 eax, esi
  00294	99		 cdq
  00295	03 45 e8	 add	 eax, DWORD PTR __Off$[ebp]
  00298	13 55 ec	 adc	 edx, DWORD PTR __Off$[ebp+4]
  0029b	8b f4		 mov	 esi, esp
  0029d	50		 push	 eax
  0029e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
  002a7	3b f4		 cmp	 esi, esp
  002a9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 299  : 					- _Mysb::pptr() + _Off));	// change write position
; 300  : 			else

  002ae	eb 10		 jmp	 SHORT $LN13@seekpos
$LN12@seekpos:

; 301  : 				_Off = _BADOFF;

  002b0	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?_BADOFF@std@@3_JB
  002b5	8b 08		 mov	 ecx, DWORD PTR [eax]
  002b7	89 4d e8	 mov	 DWORD PTR __Off$[ebp], ecx
  002ba	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  002bd	89 55 ec	 mov	 DWORD PTR __Off$[ebp+4], edx
$LN13@seekpos:

; 302  : 			}
; 303  : 		else

  002c0	eb 10		 jmp	 SHORT $LN4@seekpos
$LN10@seekpos:

; 304  : 			_Off = _BADOFF;	// neither read nor write buffer selected, fail

  002c2	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?_BADOFF@std@@3_JB
  002c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  002c9	89 4d e8	 mov	 DWORD PTR __Off$[ebp], ecx
  002cc	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  002cf	89 55 ec	 mov	 DWORD PTR __Off$[ebp+4], edx
$LN4@seekpos:

; 305  : 		return (streampos(_Off));

  002d2	8b 45 ec	 mov	 eax, DWORD PTR __Off$[ebp+4]
  002d5	50		 push	 eax
  002d6	8b 4d e8	 mov	 ecx, DWORD PTR __Off$[ebp]
  002d9	51		 push	 ecx
  002da	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  002dd	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  002e2	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 306  : 		}

  002e5	5f		 pop	 edi
  002e6	5e		 pop	 esi
  002e7	5b		 pop	 ebx
  002e8	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  002ee	3b ec		 cmp	 ebp, esp
  002f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002f5	8b e5		 mov	 esp, ebp
  002f7	5d		 pop	 ebp
  002f8	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\sstream
;	COMDAT ?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
_TEXT	SEGMENT
tv453 = -212						; size = 8
tv360 = -212						; size = 8
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 8
__Way$ = 20						; size = 4
__Which$ = 24						; size = 4
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff, COMDAT
; _this$ = ecx

; 227  : 		{	// change position by _Off, according to _Way, _Mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 2c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-212]
  00013	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 228  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  00023	8b f4		 mov	 esi, esp
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0002e	3b f4		 cmp	 esi, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	85 c0		 test	 eax, eax
  00037	74 32		 je	 SHORT $LN2@seekoff
  00039	8b f4		 mov	 esi, esp
  0003b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00044	3b f4		 cmp	 esi, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	39 41 38	 cmp	 DWORD PTR [ecx+56], eax
  00051	73 18		 jae	 SHORT $LN2@seekoff

; 229  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  00053	8b f4		 mov	 esi, esp
  00055	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0005e	3b f4		 cmp	 esi, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	89 41 38	 mov	 DWORD PTR [ecx+56], eax
$LN2@seekoff:

; 230  : 
; 231  : 		if (_Which & ios_base::in && _Mysb::gptr() != 0)

  0006b	8b 45 18	 mov	 eax, DWORD PTR __Which$[ebp]
  0006e	83 e0 01	 and	 eax, 1
  00071	0f 84 cb 01 00
	00		 je	 $LN3@seekoff
  00077	8b f4		 mov	 esi, esp
  00079	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00082	3b f4		 cmp	 esi, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	85 c0		 test	 eax, eax
  0008b	0f 84 b1 01 00
	00		 je	 $LN3@seekoff

; 232  : 			{	// position within read buffer
; 233  : 			if (_Way == ios_base::end)

  00091	83 7d 14 02	 cmp	 DWORD PTR __Way$[ebp], 2
  00095	75 2b		 jne	 SHORT $LN5@seekoff

; 234  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  00097	8b f4		 mov	 esi, esp
  00099	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000a2	3b f4		 cmp	 esi, esp
  000a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  000af	2b d0		 sub	 edx, eax
  000b1	8b c2		 mov	 eax, edx
  000b3	99		 cdq
  000b4	03 45 0c	 add	 eax, DWORD PTR __Off$[ebp]
  000b7	13 55 10	 adc	 edx, DWORD PTR __Off$[ebp+4]
  000ba	89 45 0c	 mov	 DWORD PTR __Off$[ebp], eax
  000bd	89 55 10	 mov	 DWORD PTR __Off$[ebp+4], edx

; 235  : 			else if (_Way == ios_base::cur

  000c0	eb 5d		 jmp	 SHORT $LN6@seekoff
$LN5@seekoff:

; 236  : 				&& (_Which & ios_base::out) == 0)

  000c2	83 7d 14 01	 cmp	 DWORD PTR __Way$[ebp], 1
  000c6	75 41		 jne	 SHORT $LN7@seekoff
  000c8	8b 45 18	 mov	 eax, DWORD PTR __Which$[ebp]
  000cb	83 e0 02	 and	 eax, 2
  000ce	75 39		 jne	 SHORT $LN7@seekoff

; 237  : 				_Off += (off_type)(_Mysb::gptr() - _Mysb::eback());

  000d0	8b f4		 mov	 esi, esp
  000d2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000db	3b f4		 cmp	 esi, esp
  000dd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e2	8b f0		 mov	 esi, eax
  000e4	8b fc		 mov	 edi, esp
  000e6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000ef	3b fc		 cmp	 edi, esp
  000f1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f6	2b f0		 sub	 esi, eax
  000f8	8b c6		 mov	 eax, esi
  000fa	99		 cdq
  000fb	03 45 0c	 add	 eax, DWORD PTR __Off$[ebp]
  000fe	13 55 10	 adc	 edx, DWORD PTR __Off$[ebp+4]
  00101	89 45 0c	 mov	 DWORD PTR __Off$[ebp], eax
  00104	89 55 10	 mov	 DWORD PTR __Off$[ebp+4], edx
  00107	eb 16		 jmp	 SHORT $LN6@seekoff
$LN7@seekoff:

; 238  : 			else if (_Way != ios_base::beg)

  00109	83 7d 14 00	 cmp	 DWORD PTR __Way$[ebp], 0
  0010d	74 10		 je	 SHORT $LN6@seekoff

; 239  : 				_Off = _BADOFF;

  0010f	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?_BADOFF@std@@3_JB
  00114	8b 08		 mov	 ecx, DWORD PTR [eax]
  00116	89 4d 0c	 mov	 DWORD PTR __Off$[ebp], ecx
  00119	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0011c	89 55 10	 mov	 DWORD PTR __Off$[ebp+4], edx
$LN6@seekoff:

; 240  : 
; 241  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  0011f	83 7d 10 00	 cmp	 DWORD PTR __Off$[ebp+4], 0
  00123	0f 8c 04 01 00
	00		 jl	 $LN10@seekoff
  00129	7f 0a		 jg	 SHORT $LN24@seekoff
  0012b	83 7d 0c 00	 cmp	 DWORD PTR __Off$[ebp], 0
  0012f	0f 82 f8 00 00
	00		 jb	 $LN10@seekoff
$LN24@seekoff:
  00135	8b f4		 mov	 esi, esp
  00137	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0013a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00140	3b f4		 cmp	 esi, esp
  00142	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00147	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0014a	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0014d	2b d0		 sub	 edx, eax
  0014f	8b c2		 mov	 eax, edx
  00151	99		 cdq
  00152	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv360[ebp], eax
  00158	89 95 30 ff ff
	ff		 mov	 DWORD PTR tv360[ebp+4], edx
  0015e	8b 45 10	 mov	 eax, DWORD PTR __Off$[ebp+4]
  00161	3b 85 30 ff ff
	ff		 cmp	 eax, DWORD PTR tv360[ebp+4]
  00167	0f 8f c0 00 00
	00		 jg	 $LN10@seekoff
  0016d	7c 0f		 jl	 SHORT $LN25@seekoff
  0016f	8b 4d 0c	 mov	 ecx, DWORD PTR __Off$[ebp]
  00172	3b 8d 2c ff ff
	ff		 cmp	 ecx, DWORD PTR tv360[ebp]
  00178	0f 87 af 00 00
	00		 ja	 $LN10@seekoff
$LN25@seekoff:

; 242  : 				{	// change read position
; 243  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  0017e	8b f4		 mov	 esi, esp
  00180	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00183	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00189	3b f4		 cmp	 esi, esp
  0018b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00190	8b f0		 mov	 esi, eax
  00192	8b fc		 mov	 edi, esp
  00194	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00197	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0019d	3b fc		 cmp	 edi, esp
  0019f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a4	2b f0		 sub	 esi, eax
  001a6	8b c6		 mov	 eax, esi
  001a8	99		 cdq
  001a9	03 45 0c	 add	 eax, DWORD PTR __Off$[ebp]
  001ac	13 55 10	 adc	 edx, DWORD PTR __Off$[ebp+4]
  001af	8b f4		 mov	 esi, esp
  001b1	50		 push	 eax
  001b2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
  001bb	3b f4		 cmp	 esi, esp
  001bd	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 244  : 				if (_Which & ios_base::out && _Mysb::pptr() != 0)

  001c2	8b 45 18	 mov	 eax, DWORD PTR __Which$[ebp]
  001c5	83 e0 02	 and	 eax, 2
  001c8	74 61		 je	 SHORT $LN12@seekoff
  001ca	8b f4		 mov	 esi, esp
  001cc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  001d5	3b f4		 cmp	 esi, esp
  001d7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001dc	85 c0		 test	 eax, eax
  001de	74 4b		 je	 SHORT $LN12@seekoff

; 245  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),

  001e0	8b f4		 mov	 esi, esp
  001e2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  001eb	3b f4		 cmp	 esi, esp
  001ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f2	8b f4		 mov	 esi, esp
  001f4	50		 push	 eax
  001f5	8b fc		 mov	 edi, esp
  001f7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00200	3b fc		 cmp	 edi, esp
  00202	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00207	50		 push	 eax
  00208	8b fc		 mov	 edi, esp
  0020a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0020d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00213	3b fc		 cmp	 edi, esp
  00215	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0021a	50		 push	 eax
  0021b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0021e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  00224	3b f4		 cmp	 esi, esp
  00226	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN12@seekoff:

; 246  : 						_Mysb::epptr());	// change write position to match
; 247  : 				}
; 248  : 			else

  0022b	eb 10		 jmp	 SHORT $LN11@seekoff
$LN10@seekoff:

; 249  : 				_Off = _BADOFF;

  0022d	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?_BADOFF@std@@3_JB
  00232	8b 08		 mov	 ecx, DWORD PTR [eax]
  00234	89 4d 0c	 mov	 DWORD PTR __Off$[ebp], ecx
  00237	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0023a	89 55 10	 mov	 DWORD PTR __Off$[ebp+4], edx
$LN11@seekoff:
  0023d	e9 73 01 00 00	 jmp	 $LN4@seekoff
$LN3@seekoff:

; 250  : 			}
; 251  : 		else if (_Which & ios_base::out && _Mysb::pptr() != 0)

  00242	8b 45 18	 mov	 eax, DWORD PTR __Which$[ebp]
  00245	83 e0 02	 and	 eax, 2
  00248	0f 84 4f 01 00
	00		 je	 $LN13@seekoff
  0024e	8b f4		 mov	 esi, esp
  00250	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00253	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00259	3b f4		 cmp	 esi, esp
  0025b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00260	85 c0		 test	 eax, eax
  00262	0f 84 35 01 00
	00		 je	 $LN13@seekoff

; 252  : 			{	// position within write buffer
; 253  : 			if (_Way == ios_base::end)

  00268	83 7d 14 02	 cmp	 DWORD PTR __Way$[ebp], 2
  0026c	75 2b		 jne	 SHORT $LN15@seekoff

; 254  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  0026e	8b f4		 mov	 esi, esp
  00270	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00273	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00279	3b f4		 cmp	 esi, esp
  0027b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00280	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00283	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00286	2b d0		 sub	 edx, eax
  00288	8b c2		 mov	 eax, edx
  0028a	99		 cdq
  0028b	03 45 0c	 add	 eax, DWORD PTR __Off$[ebp]
  0028e	13 55 10	 adc	 edx, DWORD PTR __Off$[ebp+4]
  00291	89 45 0c	 mov	 DWORD PTR __Off$[ebp], eax
  00294	89 55 10	 mov	 DWORD PTR __Off$[ebp+4], edx
  00297	eb 55		 jmp	 SHORT $LN16@seekoff
$LN15@seekoff:

; 255  : 			else if (_Way == ios_base::cur)

  00299	83 7d 14 01	 cmp	 DWORD PTR __Way$[ebp], 1
  0029d	75 39		 jne	 SHORT $LN17@seekoff

; 256  : 				_Off += (off_type)(_Mysb::pptr() - _Mysb::eback());

  0029f	8b f4		 mov	 esi, esp
  002a1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  002aa	3b f4		 cmp	 esi, esp
  002ac	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002b1	8b f0		 mov	 esi, eax
  002b3	8b fc		 mov	 edi, esp
  002b5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  002be	3b fc		 cmp	 edi, esp
  002c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002c5	2b f0		 sub	 esi, eax
  002c7	8b c6		 mov	 eax, esi
  002c9	99		 cdq
  002ca	03 45 0c	 add	 eax, DWORD PTR __Off$[ebp]
  002cd	13 55 10	 adc	 edx, DWORD PTR __Off$[ebp+4]
  002d0	89 45 0c	 mov	 DWORD PTR __Off$[ebp], eax
  002d3	89 55 10	 mov	 DWORD PTR __Off$[ebp+4], edx
  002d6	eb 16		 jmp	 SHORT $LN16@seekoff
$LN17@seekoff:

; 257  : 			else if (_Way != ios_base::beg)

  002d8	83 7d 14 00	 cmp	 DWORD PTR __Way$[ebp], 0
  002dc	74 10		 je	 SHORT $LN16@seekoff

; 258  : 				_Off = _BADOFF;

  002de	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?_BADOFF@std@@3_JB
  002e3	8b 08		 mov	 ecx, DWORD PTR [eax]
  002e5	89 4d 0c	 mov	 DWORD PTR __Off$[ebp], ecx
  002e8	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  002eb	89 55 10	 mov	 DWORD PTR __Off$[ebp+4], edx
$LN16@seekoff:

; 259  : 
; 260  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  002ee	83 7d 10 00	 cmp	 DWORD PTR __Off$[ebp+4], 0
  002f2	0f 8c 93 00 00
	00		 jl	 $LN20@seekoff
  002f8	7f 0a		 jg	 SHORT $LN26@seekoff
  002fa	83 7d 0c 00	 cmp	 DWORD PTR __Off$[ebp], 0
  002fe	0f 82 87 00 00
	00		 jb	 $LN20@seekoff
$LN26@seekoff:
  00304	8b f4		 mov	 esi, esp
  00306	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00309	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0030f	3b f4		 cmp	 esi, esp
  00311	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00316	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00319	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0031c	2b d0		 sub	 edx, eax
  0031e	8b c2		 mov	 eax, edx
  00320	99		 cdq
  00321	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv453[ebp], eax
  00327	89 95 30 ff ff
	ff		 mov	 DWORD PTR tv453[ebp+4], edx
  0032d	8b 45 10	 mov	 eax, DWORD PTR __Off$[ebp+4]
  00330	3b 85 30 ff ff
	ff		 cmp	 eax, DWORD PTR tv453[ebp+4]
  00336	7f 53		 jg	 SHORT $LN20@seekoff
  00338	7c 0b		 jl	 SHORT $LN27@seekoff
  0033a	8b 4d 0c	 mov	 ecx, DWORD PTR __Off$[ebp]
  0033d	3b 8d 2c ff ff
	ff		 cmp	 ecx, DWORD PTR tv453[ebp]
  00343	77 46		 ja	 SHORT $LN20@seekoff
$LN27@seekoff:

; 261  : 				_Mysb::pbump((int)(_Mysb::eback()

  00345	8b f4		 mov	 esi, esp
  00347	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0034a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00350	3b f4		 cmp	 esi, esp
  00352	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00357	8b f0		 mov	 esi, eax
  00359	8b fc		 mov	 edi, esp
  0035b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0035e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00364	3b fc		 cmp	 edi, esp
  00366	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0036b	2b f0		 sub	 esi, eax
  0036d	8b c6		 mov	 eax, esi
  0036f	99		 cdq
  00370	03 45 0c	 add	 eax, DWORD PTR __Off$[ebp]
  00373	13 55 10	 adc	 edx, DWORD PTR __Off$[ebp+4]
  00376	8b f4		 mov	 esi, esp
  00378	50		 push	 eax
  00379	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0037c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
  00382	3b f4		 cmp	 esi, esp
  00384	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 262  : 					- _Mysb::pptr() + _Off));	// change write position
; 263  : 			else

  00389	eb 10		 jmp	 SHORT $LN21@seekoff
$LN20@seekoff:

; 264  : 				_Off = _BADOFF;

  0038b	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?_BADOFF@std@@3_JB
  00390	8b 08		 mov	 ecx, DWORD PTR [eax]
  00392	89 4d 0c	 mov	 DWORD PTR __Off$[ebp], ecx
  00395	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00398	89 55 10	 mov	 DWORD PTR __Off$[ebp+4], edx
$LN21@seekoff:
  0039b	eb 18		 jmp	 SHORT $LN4@seekoff
$LN13@seekoff:

; 265  : 			}
; 266  : 
; 267  : 		else if (_Off != 0)

  0039d	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  003a0	0b 45 10	 or	 eax, DWORD PTR __Off$[ebp+4]
  003a3	74 10		 je	 SHORT $LN4@seekoff

; 268  : 
; 269  : 
; 270  : 			_Off = _BADOFF;	// neither read nor write buffer selected, fail

  003a5	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?_BADOFF@std@@3_JB
  003aa	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ac	89 4d 0c	 mov	 DWORD PTR __Off$[ebp], ecx
  003af	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  003b2	89 55 10	 mov	 DWORD PTR __Off$[ebp+4], edx
$LN4@seekoff:

; 271  : 		return (pos_type(_Off));

  003b5	8b 45 10	 mov	 eax, DWORD PTR __Off$[ebp+4]
  003b8	50		 push	 eax
  003b9	8b 4d 0c	 mov	 ecx, DWORD PTR __Off$[ebp]
  003bc	51		 push	 ecx
  003bd	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  003c0	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  003c5	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 272  : 		}

  003c8	5f		 pop	 edi
  003c9	5e		 pop	 esi
  003ca	5b		 pop	 ebx
  003cb	81 c4 d4 00 00
	00		 add	 esp, 212		; 000000d4H
  003d1	3b ec		 cmp	 ebp, esp
  003d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003d8	8b e5		 mov	 esp, ebp
  003da	5d		 pop	 ebp
  003db	c2 14 00	 ret	 20			; 00000014H
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\sstream
;	COMDAT ?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow, COMDAT
; _this$ = ecx

; 207  : 		{	// get an element from stream, but don't point past it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 208  : 		if (_Mysb::gptr() == 0)

  00023	8b f4		 mov	 esi, esp
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0002e	3b f4		 cmp	 esi, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	85 c0		 test	 eax, eax
  00037	75 0f		 jne	 SHORT $LN2@underflow

; 209  : 			return (_Traits::eof());	// no character buffer, fail

  00039	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0003e	e9 54 01 00 00	 jmp	 $LN1@underflow
  00043	e9 4f 01 00 00	 jmp	 $LN1@underflow
$LN2@underflow:

; 210  : 		else if (_Mysb::gptr() < _Mysb::egptr())

  00048	8b f4		 mov	 esi, esp
  0004a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00053	3b f4		 cmp	 esi, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	8b f0		 mov	 esi, eax
  0005c	8b fc		 mov	 edi, esp
  0005e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00067	3b fc		 cmp	 edi, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006e	3b f0		 cmp	 esi, eax
  00070	73 25		 jae	 SHORT $LN4@underflow

; 211  : 			return (_Traits::to_int_type(*_Mysb::gptr()));	// return buffered

  00072	8b f4		 mov	 esi, esp
  00074	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0007d	3b f4		 cmp	 esi, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  0008a	83 c4 04	 add	 esp, 4
  0008d	e9 05 01 00 00	 jmp	 $LN1@underflow

; 212  : 		else if (_Mystate & _Noread || _Mysb::pptr() == 0

  00092	e9 00 01 00 00	 jmp	 $LN1@underflow
$LN4@underflow:

; 213  : 			|| (_Mysb::pptr() <= _Mysb::gptr() && _Seekhigh <= _Mysb::gptr()))

  00097	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0009a	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  0009d	83 e1 04	 and	 ecx, 4
  000a0	75 5a		 jne	 SHORT $LN8@underflow
  000a2	8b f4		 mov	 esi, esp
  000a4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000ad	3b f4		 cmp	 esi, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b4	85 c0		 test	 eax, eax
  000b6	74 44		 je	 SHORT $LN8@underflow
  000b8	8b f4		 mov	 esi, esp
  000ba	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000c3	3b f4		 cmp	 esi, esp
  000c5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ca	8b f0		 mov	 esi, eax
  000cc	8b fc		 mov	 edi, esp
  000ce	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000d7	3b fc		 cmp	 edi, esp
  000d9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000de	3b f0		 cmp	 esi, eax
  000e0	77 29		 ja	 SHORT $LN6@underflow
  000e2	8b f4		 mov	 esi, esp
  000e4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000ed	3b f4		 cmp	 esi, esp
  000ef	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000f7	39 41 38	 cmp	 DWORD PTR [ecx+56], eax
  000fa	77 0f		 ja	 SHORT $LN6@underflow
$LN8@underflow:

; 214  : 			return (_Traits::eof());	// can't read, fail

  000fc	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00101	e9 91 00 00 00	 jmp	 $LN1@underflow

; 215  : 		else

  00106	e9 8c 00 00 00	 jmp	 $LN1@underflow
$LN6@underflow:

; 216  : 			{	// extend read buffer into written area, then return buffered
; 217  : 			if (_Seekhigh < _Mysb::pptr())

  0010b	8b f4		 mov	 esi, esp
  0010d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00110	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00116	3b f4		 cmp	 esi, esp
  00118	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00120	39 41 38	 cmp	 DWORD PTR [ecx+56], eax
  00123	73 18		 jae	 SHORT $LN9@underflow

; 218  : 				_Seekhigh = _Mysb::pptr();

  00125	8b f4		 mov	 esi, esp
  00127	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0012a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00130	3b f4		 cmp	 esi, esp
  00132	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00137	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0013a	89 41 38	 mov	 DWORD PTR [ecx+56], eax
$LN9@underflow:

; 219  : 			_Mysb::setg(_Mysb::eback(), _Mysb::gptr(), _Seekhigh);

  0013d	8b f4		 mov	 esi, esp
  0013f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00142	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00145	51		 push	 ecx
  00146	8b fc		 mov	 edi, esp
  00148	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0014b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00151	3b fc		 cmp	 edi, esp
  00153	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00158	50		 push	 eax
  00159	8b fc		 mov	 edi, esp
  0015b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0015e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00164	3b fc		 cmp	 edi, esp
  00166	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016b	50		 push	 eax
  0016c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0016f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  00175	3b f4		 cmp	 esi, esp
  00177	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 220  : 			return (_Traits::to_int_type(*_Mysb::gptr()));

  0017c	8b f4		 mov	 esi, esp
  0017e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00181	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00187	3b f4		 cmp	 esi, esp
  00189	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0018e	50		 push	 eax
  0018f	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  00194	83 c4 04	 add	 esp, 4
$LN1@underflow:

; 221  : 			}
; 222  : 		}

  00197	5f		 pop	 edi
  00198	5e		 pop	 esi
  00199	5b		 pop	 ebx
  0019a	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  001a0	3b ec		 cmp	 ebp, esp
  001a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a7	8b e5		 mov	 esp, ebp
  001a9	5d		 pop	 ebp
  001aa	c3		 ret	 0
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\sstream
;	COMDAT ?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
_TEXT	SEGMENT
$T1 = -236						; size = 4
$T2 = -221						; size = 1
$T3 = -212						; size = 4
_this$ = -8						; size = 4
__Meta$ = 8						; size = 4
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail, COMDAT
; _this$ = ecx

; 190  : 		{	// put an element back to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00013	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 191  : 		if (_Mysb::gptr() == 0
; 192  : 			|| _Mysb::gptr() <= _Mysb::eback()
; 193  : 			|| (!_Traits::eq_int_type(_Traits::eof(), _Meta)

  00023	8b f4		 mov	 esi, esp
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0002e	3b f4		 cmp	 esi, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	85 c0		 test	 eax, eax
  00037	0f 84 9f 00 00
	00		 je	 $LN4@pbackfail
  0003d	8b f4		 mov	 esi, esp
  0003f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b f0		 mov	 esi, eax
  00051	8b fc		 mov	 edi, esp
  00053	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0005c	3b fc		 cmp	 edi, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	3b f0		 cmp	 esi, eax
  00065	76 75		 jbe	 SHORT $LN4@pbackfail
  00067	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0006c	89 85 2c ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00072	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00075	50		 push	 eax
  00076	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0007c	51		 push	 ecx
  0007d	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  00082	83 c4 08	 add	 esp, 8
  00085	0f b6 d0	 movzx	 edx, al
  00088	85 d2		 test	 edx, edx
  0008a	75 59		 jne	 SHORT $LN2@pbackfail
  0008c	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  00095	83 c4 04	 add	 esp, 4
  00098	88 85 23 ff ff
	ff		 mov	 BYTE PTR $T2[ebp], al
  0009e	8b f4		 mov	 esi, esp
  000a0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000a9	3b f4		 cmp	 esi, esp
  000ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b0	b9 01 00 00 00	 mov	 ecx, 1
  000b5	6b d1 ff	 imul	 edx, ecx, -1
  000b8	03 c2		 add	 eax, edx
  000ba	50		 push	 eax
  000bb	8d 85 23 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 ?eq@?$char_traits@D@std@@SA_NABD0@Z ; std::char_traits<char>::eq
  000c7	83 c4 08	 add	 esp, 8
  000ca	0f b6 c8	 movzx	 ecx, al
  000cd	85 c9		 test	 ecx, ecx
  000cf	75 14		 jne	 SHORT $LN2@pbackfail
  000d1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000d4	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  000d7	83 e1 02	 and	 ecx, 2
  000da	74 09		 je	 SHORT $LN2@pbackfail
$LN4@pbackfail:

; 194  : 			&& !_Traits::eq(_Traits::to_char_type(_Meta), _Mysb::gptr()[-1])
; 195  : 			&& _Mystate & _Constant))
; 196  : 			return (_Traits::eof());	// can't put back, fail

  000dc	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000e1	eb 69		 jmp	 SHORT $LN1@pbackfail

; 197  : 		else

  000e3	eb 67		 jmp	 SHORT $LN1@pbackfail
$LN2@pbackfail:

; 198  : 			{	// back up one position and store put-back character
; 199  : 			_Mysb::gbump(-1);

  000e5	8b f4		 mov	 esi, esp
  000e7	6a ff		 push	 -1
  000e9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
  000f2	3b f4		 cmp	 esi, esp
  000f4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 200  : 			if (!_Traits::eq_int_type(_Traits::eof(), _Meta))

  000f9	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000fe	89 85 14 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00104	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00107	50		 push	 eax
  00108	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0010e	51		 push	 ecx
  0010f	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  00114	83 c4 08	 add	 esp, 8
  00117	0f b6 d0	 movzx	 edx, al
  0011a	85 d2		 test	 edx, edx
  0011c	75 22		 jne	 SHORT $LN5@pbackfail

; 201  : 				*_Mysb::gptr() = _Traits::to_char_type(_Meta);

  0011e	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00121	50		 push	 eax
  00122	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  00127	83 c4 04	 add	 esp, 4
  0012a	8a d8		 mov	 bl, al
  0012c	8b f4		 mov	 esi, esp
  0012e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00131	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00137	3b f4		 cmp	 esi, esp
  00139	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013e	88 18		 mov	 BYTE PTR [eax], bl
$LN5@pbackfail:

; 202  : 			return (_Traits::not_eof(_Meta));

  00140	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00143	50		 push	 eax
  00144	e8 00 00 00 00	 call	 ?not_eof@?$char_traits@D@std@@SAHABH@Z ; std::char_traits<char>::not_eof
  00149	83 c4 04	 add	 esp, 4
$LN1@pbackfail:

; 203  : 			}
; 204  : 		}

  0014c	5f		 pop	 edi
  0014d	5e		 pop	 esi
  0014e	5b		 pop	 ebx
  0014f	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  00155	3b ec		 cmp	 ebp, esp
  00157	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015c	8b e5		 mov	 esp, ebp
  0015e	5d		 pop	 ebp
  0015f	c2 04 00	 ret	 4
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\sstream
;	COMDAT ?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
_TEXT	SEGMENT
tv199 = -280						; size = 4
tv195 = -280						; size = 4
$T1 = -272						; size = 4
__Oldptr$2 = -68					; size = 4
__Newptr$3 = -56					; size = 4
__Inc$4 = -44						; size = 4
__Newsize$5 = -32					; size = 4
__Oldsize$6 = -20					; size = 4
_this$ = -8						; size = 4
__Meta$ = 8						; size = 4
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow, COMDAT
; _this$ = ecx

; 120  : 		{	// put an element to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd e8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-280]
  00013	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 121  : 		if (_Mystate & _Constant)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00029	83 e1 02	 and	 ecx, 2
  0002c	74 0c		 je	 SHORT $LN4@overflow

; 122  : 			return (_Traits::eof());	// array nonmutable, fail

  0002e	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00033	e9 cb 03 00 00	 jmp	 $LN1@overflow
  00038	eb 36		 jmp	 SHORT $LN5@overflow
$LN4@overflow:

; 123  : 		else if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  0003a	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0003f	89 85 f0 fe ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00045	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00048	50		 push	 eax
  00049	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  00055	83 c4 08	 add	 esp, 8
  00058	0f b6 d0	 movzx	 edx, al
  0005b	85 d2		 test	 edx, edx
  0005d	74 11		 je	 SHORT $LN5@overflow

; 124  : 			return (_Traits::not_eof(_Meta));	// EOF, return success code

  0005f	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ?not_eof@?$char_traits@D@std@@SAHABH@Z ; std::char_traits<char>::not_eof
  00068	83 c4 04	 add	 esp, 4
  0006b	e9 93 03 00 00	 jmp	 $LN1@overflow
$LN5@overflow:

; 125  : 
; 126  : 		if (_Mystate & _Append
; 127  : 			&& _Mysb::pptr() != 0 && _Mysb::pptr() < _Seekhigh)

  00070	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00073	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00076	83 e1 08	 and	 ecx, 8
  00079	74 6f		 je	 SHORT $LN7@overflow
  0007b	8b f4		 mov	 esi, esp
  0007d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00086	3b f4		 cmp	 esi, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008d	85 c0		 test	 eax, eax
  0008f	74 59		 je	 SHORT $LN7@overflow
  00091	8b f4		 mov	 esi, esp
  00093	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0009c	3b f4		 cmp	 esi, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	3b 41 38	 cmp	 eax, DWORD PTR [ecx+56]
  000a9	73 3f		 jae	 SHORT $LN7@overflow

; 128  : 			_Mysb::setp(_Mysb::pbase(), _Seekhigh, _Mysb::epptr());

  000ab	8b f4		 mov	 esi, esp
  000ad	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000b6	3b f4		 cmp	 esi, esp
  000b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bd	8b f4		 mov	 esi, esp
  000bf	50		 push	 eax
  000c0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c3	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  000c6	51		 push	 ecx
  000c7	8b fc		 mov	 edi, esp
  000c9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000d2	3b fc		 cmp	 edi, esp
  000d4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d9	50		 push	 eax
  000da	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  000e3	3b f4		 cmp	 esi, esp
  000e5	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN7@overflow:

; 129  : 
; 130  : 		if (_Mysb::pptr() != 0
; 131  : 			&& _Mysb::pptr() < _Mysb::epptr())

  000ea	8b f4		 mov	 esi, esp
  000ec	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000f5	3b f4		 cmp	 esi, esp
  000f7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fc	85 c0		 test	 eax, eax
  000fe	74 59		 je	 SHORT $LN8@overflow
  00100	8b f4		 mov	 esi, esp
  00102	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00105	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0010b	3b f4		 cmp	 esi, esp
  0010d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00112	8b f0		 mov	 esi, eax
  00114	8b fc		 mov	 edi, esp
  00116	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00119	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0011f	3b fc		 cmp	 edi, esp
  00121	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00126	3b f0		 cmp	 esi, eax
  00128	73 2f		 jae	 SHORT $LN8@overflow

; 132  : 			{	// room in buffer, store it
; 133  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  0012a	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  0012d	50		 push	 eax
  0012e	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  00133	83 c4 04	 add	 esp, 4
  00136	8a d8		 mov	 bl, al
  00138	8b f4		 mov	 esi, esp
  0013a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0013d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
  00143	3b f4		 cmp	 esi, esp
  00145	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0014a	88 18		 mov	 BYTE PTR [eax], bl

; 134  : 			return (_Meta);

  0014c	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  0014f	e9 af 02 00 00	 jmp	 $LN1@overflow

; 135  : 			}
; 136  : 		else

  00154	e9 aa 02 00 00	 jmp	 $LN1@overflow
$LN8@overflow:

; 137  : 			{	// grow buffer and store element
; 138  : 			size_t _Oldsize = _Mysb::pptr() == 0

  00159	8b f4		 mov	 esi, esp
  0015b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0015e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00164	3b f4		 cmp	 esi, esp
  00166	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016b	85 c0		 test	 eax, eax
  0016d	75 0c		 jne	 SHORT $LN20@overflow
  0016f	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv195[ebp], 0
  00179	eb 2e		 jmp	 SHORT $LN21@overflow
$LN20@overflow:
  0017b	8b f4		 mov	 esi, esp
  0017d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00180	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00186	3b f4		 cmp	 esi, esp
  00188	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0018d	8b f0		 mov	 esi, eax
  0018f	8b fc		 mov	 edi, esp
  00191	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00194	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0019a	3b fc		 cmp	 edi, esp
  0019c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a1	2b f0		 sub	 esi, eax
  001a3	89 b5 e8 fe ff
	ff		 mov	 DWORD PTR tv195[ebp], esi
$LN21@overflow:
  001a9	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR tv195[ebp]
  001af	89 45 ec	 mov	 DWORD PTR __Oldsize$6[ebp], eax

; 139  : 				? 0 : _Mysb::epptr() - _Mysb::eback();
; 140  : 			size_t _Newsize = _Oldsize;

  001b2	8b 45 ec	 mov	 eax, DWORD PTR __Oldsize$6[ebp]
  001b5	89 45 e0	 mov	 DWORD PTR __Newsize$5[ebp], eax

; 141  : 			size_t _Inc = _Newsize / 2 < _MINSIZE

  001b8	8b 45 e0	 mov	 eax, DWORD PTR __Newsize$5[ebp]
  001bb	d1 e8		 shr	 eax, 1
  001bd	83 f8 20	 cmp	 eax, 32			; 00000020H
  001c0	73 0c		 jae	 SHORT $LN22@overflow
  001c2	c7 85 e8 fe ff
	ff 20 00 00 00	 mov	 DWORD PTR tv199[ebp], 32 ; 00000020H
  001cc	eb 0b		 jmp	 SHORT $LN23@overflow
$LN22@overflow:
  001ce	8b 4d e0	 mov	 ecx, DWORD PTR __Newsize$5[ebp]
  001d1	d1 e9		 shr	 ecx, 1
  001d3	89 8d e8 fe ff
	ff		 mov	 DWORD PTR tv199[ebp], ecx
$LN23@overflow:
  001d9	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR tv199[ebp]
  001df	89 55 d4	 mov	 DWORD PTR __Inc$4[ebp], edx
$LN2@overflow:

; 142  : 				? _MINSIZE : _Newsize / 2;	// grow by 50 per cent
; 143  : 
; 144  : 			while (0 < _Inc && INT_MAX - _Inc < _Newsize)

  001e2	83 7d d4 00	 cmp	 DWORD PTR __Inc$4[ebp], 0
  001e6	76 17		 jbe	 SHORT $LN3@overflow
  001e8	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  001ed	2b 45 d4	 sub	 eax, DWORD PTR __Inc$4[ebp]
  001f0	3b 45 e0	 cmp	 eax, DWORD PTR __Newsize$5[ebp]
  001f3	73 0a		 jae	 SHORT $LN3@overflow

; 145  : 				_Inc /= 2;	// increment causes overflow, halve it

  001f5	8b 45 d4	 mov	 eax, DWORD PTR __Inc$4[ebp]
  001f8	d1 e8		 shr	 eax, 1
  001fa	89 45 d4	 mov	 DWORD PTR __Inc$4[ebp], eax
  001fd	eb e3		 jmp	 SHORT $LN2@overflow
$LN3@overflow:

; 146  : 			if (_Inc == 0)

  001ff	83 7d d4 00	 cmp	 DWORD PTR __Inc$4[ebp], 0
  00203	75 0a		 jne	 SHORT $LN10@overflow

; 147  : 				return (_Traits::eof());	// buffer can't grow, fail

  00205	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0020a	e9 f4 01 00 00	 jmp	 $LN1@overflow
$LN10@overflow:

; 148  : 
; 149  : 			_Newsize += _Inc;

  0020f	8b 45 e0	 mov	 eax, DWORD PTR __Newsize$5[ebp]
  00212	03 45 d4	 add	 eax, DWORD PTR __Inc$4[ebp]
  00215	89 45 e0	 mov	 DWORD PTR __Newsize$5[ebp], eax

; 150  : 
; 151  : 			_Elem *_Newptr = _Unfancy(_Al.allocate(_Newsize));

  00218	8b 45 e0	 mov	 eax, DWORD PTR __Newsize$5[ebp]
  0021b	50		 push	 eax
  0021c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0021f	83 c1 40	 add	 ecx, 64			; 00000040H
  00222	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  00227	50		 push	 eax
  00228	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  0022d	83 c4 04	 add	 esp, 4
  00230	89 45 c8	 mov	 DWORD PTR __Newptr$3[ebp], eax

; 152  : 			_Elem *_Oldptr = _Mysb::eback();

  00233	8b f4		 mov	 esi, esp
  00235	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00238	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0023e	3b f4		 cmp	 esi, esp
  00240	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00245	89 45 bc	 mov	 DWORD PTR __Oldptr$2[ebp], eax

; 153  : 
; 154  : 			if (0 < _Oldsize)

  00248	83 7d ec 00	 cmp	 DWORD PTR __Oldsize$6[ebp], 0
  0024c	76 14		 jbe	 SHORT $LN11@overflow

; 155  : 				_Traits::copy(_Newptr, _Oldptr, _Oldsize);

  0024e	8b 45 ec	 mov	 eax, DWORD PTR __Oldsize$6[ebp]
  00251	50		 push	 eax
  00252	8b 4d bc	 mov	 ecx, DWORD PTR __Oldptr$2[ebp]
  00255	51		 push	 ecx
  00256	8b 55 c8	 mov	 edx, DWORD PTR __Newptr$3[ebp]
  00259	52		 push	 edx
  0025a	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  0025f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN11@overflow:

; 156  : 
; 157  : 			if (_Oldsize == 0)

  00262	83 7d ec 00	 cmp	 DWORD PTR __Oldsize$6[ebp], 0
  00266	75 75		 jne	 SHORT $LN12@overflow

; 158  : 				{	// first growth, set up pointers
; 159  : 				_Seekhigh = _Newptr;

  00268	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0026b	8b 4d c8	 mov	 ecx, DWORD PTR __Newptr$3[ebp]
  0026e	89 48 38	 mov	 DWORD PTR [eax+56], ecx

; 160  : 				_Mysb::setp(_Newptr, _Newptr + _Newsize);

  00271	8b 45 c8	 mov	 eax, DWORD PTR __Newptr$3[ebp]
  00274	03 45 e0	 add	 eax, DWORD PTR __Newsize$5[ebp]
  00277	8b f4		 mov	 esi, esp
  00279	50		 push	 eax
  0027a	8b 4d c8	 mov	 ecx, DWORD PTR __Newptr$3[ebp]
  0027d	51		 push	 ecx
  0027e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00281	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z
  00287	3b f4		 cmp	 esi, esp
  00289	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 161  : 				if (_Mystate & _Noread)

  0028e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00291	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00294	83 e1 04	 and	 ecx, 4
  00297	74 1e		 je	 SHORT $LN14@overflow

; 162  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  00299	8b f4		 mov	 esi, esp
  0029b	8b 45 c8	 mov	 eax, DWORD PTR __Newptr$3[ebp]
  0029e	50		 push	 eax
  0029f	6a 00		 push	 0
  002a1	8b 4d c8	 mov	 ecx, DWORD PTR __Newptr$3[ebp]
  002a4	51		 push	 ecx
  002a5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  002ae	3b f4		 cmp	 esi, esp
  002b0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 163  : 				else

  002b5	eb 21		 jmp	 SHORT $LN15@overflow
$LN14@overflow:

; 164  : 					_Mysb::setg(_Newptr, _Newptr, _Newptr + 1);

  002b7	8b 45 c8	 mov	 eax, DWORD PTR __Newptr$3[ebp]
  002ba	83 c0 01	 add	 eax, 1
  002bd	8b f4		 mov	 esi, esp
  002bf	50		 push	 eax
  002c0	8b 4d c8	 mov	 ecx, DWORD PTR __Newptr$3[ebp]
  002c3	51		 push	 ecx
  002c4	8b 55 c8	 mov	 edx, DWORD PTR __Newptr$3[ebp]
  002c7	52		 push	 edx
  002c8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  002d1	3b f4		 cmp	 esi, esp
  002d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN15@overflow:

; 165  : 				}
; 166  : 			else

  002d8	e9 cb 00 00 00	 jmp	 $LN13@overflow
$LN12@overflow:

; 167  : 				{	// not first growth, adjust pointers
; 168  : 				_Seekhigh = _Newptr + (_Seekhigh - _Oldptr);

  002dd	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002e0	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  002e3	2b 4d bc	 sub	 ecx, DWORD PTR __Oldptr$2[ebp]
  002e6	03 4d c8	 add	 ecx, DWORD PTR __Newptr$3[ebp]
  002e9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002ec	89 4a 38	 mov	 DWORD PTR [edx+56], ecx

; 169  : 				_Mysb::setp(_Newptr + (_Mysb::pbase() - _Oldptr),

  002ef	8b 45 c8	 mov	 eax, DWORD PTR __Newptr$3[ebp]
  002f2	03 45 e0	 add	 eax, DWORD PTR __Newsize$5[ebp]
  002f5	8b f4		 mov	 esi, esp
  002f7	50		 push	 eax
  002f8	8b fc		 mov	 edi, esp
  002fa	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00303	3b fc		 cmp	 edi, esp
  00305	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0030a	2b 45 bc	 sub	 eax, DWORD PTR __Oldptr$2[ebp]
  0030d	03 45 c8	 add	 eax, DWORD PTR __Newptr$3[ebp]
  00310	50		 push	 eax
  00311	8b fc		 mov	 edi, esp
  00313	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00316	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0031c	3b fc		 cmp	 edi, esp
  0031e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00323	2b 45 bc	 sub	 eax, DWORD PTR __Oldptr$2[ebp]
  00326	03 45 c8	 add	 eax, DWORD PTR __Newptr$3[ebp]
  00329	50		 push	 eax
  0032a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0032d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  00333	3b f4		 cmp	 esi, esp
  00335	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 170  : 					_Newptr + (_Mysb::pptr() - _Oldptr),
; 171  : 					_Newptr + _Newsize);
; 172  : 				if (_Mystate & _Noread)

  0033a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0033d	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00340	83 e1 04	 and	 ecx, 4
  00343	74 1e		 je	 SHORT $LN16@overflow

; 173  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  00345	8b f4		 mov	 esi, esp
  00347	8b 45 c8	 mov	 eax, DWORD PTR __Newptr$3[ebp]
  0034a	50		 push	 eax
  0034b	6a 00		 push	 0
  0034d	8b 4d c8	 mov	 ecx, DWORD PTR __Newptr$3[ebp]
  00350	51		 push	 ecx
  00351	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00354	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  0035a	3b f4		 cmp	 esi, esp
  0035c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 174  : 				else

  00361	eb 45		 jmp	 SHORT $LN13@overflow
$LN16@overflow:

; 175  : 					_Mysb::setg(_Newptr,

  00363	8b f4		 mov	 esi, esp
  00365	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00368	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0036e	3b f4		 cmp	 esi, esp
  00370	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00375	83 c0 01	 add	 eax, 1
  00378	8b f4		 mov	 esi, esp
  0037a	50		 push	 eax
  0037b	8b fc		 mov	 edi, esp
  0037d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00380	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00386	3b fc		 cmp	 edi, esp
  00388	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0038d	2b 45 bc	 sub	 eax, DWORD PTR __Oldptr$2[ebp]
  00390	03 45 c8	 add	 eax, DWORD PTR __Newptr$3[ebp]
  00393	50		 push	 eax
  00394	8b 45 c8	 mov	 eax, DWORD PTR __Newptr$3[ebp]
  00397	50		 push	 eax
  00398	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0039b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  003a1	3b f4		 cmp	 esi, esp
  003a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN13@overflow:

; 176  : 						_Newptr + (_Mysb::gptr() - _Oldptr),
; 177  : 						_Mysb::pptr() + 1);
; 178  : 				}
; 179  : 
; 180  : 			if (_Mystate & _Allocated)

  003a8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003ab	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  003ae	83 e1 01	 and	 ecx, 1
  003b1	74 1c		 je	 SHORT $LN18@overflow

; 181  : 				_Al.deallocate(pointer_traits<_Ptrty>::pointer_to(*_Oldptr), _Oldsize);

  003b3	8b 45 ec	 mov	 eax, DWORD PTR __Oldsize$6[ebp]
  003b6	50		 push	 eax
  003b7	8b 4d bc	 mov	 ecx, DWORD PTR __Oldptr$2[ebp]
  003ba	51		 push	 ecx
  003bb	e8 00 00 00 00	 call	 ?pointer_to@?$pointer_traits@PAD@std@@SAPADAAD@Z ; std::pointer_traits<char *>::pointer_to
  003c0	83 c4 04	 add	 esp, 4
  003c3	50		 push	 eax
  003c4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003c7	83 c1 40	 add	 ecx, 64			; 00000040H
  003ca	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate
$LN18@overflow:

; 182  : 			_Mystate |= _Allocated;

  003cf	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003d2	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  003d5	83 c9 01	 or	 ecx, 1
  003d8	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  003db	89 4a 3c	 mov	 DWORD PTR [edx+60], ecx

; 183  : 
; 184  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  003de	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  003e1	50		 push	 eax
  003e2	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  003e7	83 c4 04	 add	 esp, 4
  003ea	8a d8		 mov	 bl, al
  003ec	8b f4		 mov	 esi, esp
  003ee	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
  003f7	3b f4		 cmp	 esi, esp
  003f9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003fe	88 18		 mov	 BYTE PTR [eax], bl

; 185  : 			return (_Meta);

  00400	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
$LN1@overflow:

; 186  : 			}
; 187  : 		}

  00403	5f		 pop	 edi
  00404	5e		 pop	 esi
  00405	5b		 pop	 ebx
  00406	81 c4 18 01 00
	00		 add	 esp, 280		; 00000118H
  0040c	3b ec		 cmp	 ebp, esp
  0040e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00413	8b e5		 mov	 esp, ebp
  00415	5d		 pop	 ebp
  00416	c2 04 00	 ret	 4
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\sstream
;	COMDAT ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
tv91 = -332						; size = 4
$T1 = -324						; size = 4
__Nul$2 = -120						; size = 28
__Str$3 = -84						; size = 28
__Str$4 = -48						; size = 28
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT
; _this$ = ecx

; 93   : 		{	// return string copy of character array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 4c 01 00
	00		 sub	 esp, 332		; 0000014cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd b4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-332]
  00013	b9 53 00 00 00	 mov	 ecx, 83			; 00000053H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	c7 85 bc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp], 0

; 94   : 		if (!(_Mystate & _Constant) && _Mysb::pptr() != 0)

  00037	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  0003d	83 e1 02	 and	 ecx, 2
  00040	0f 85 c0 00 00
	00		 jne	 $LN2@str
  00046	8b f4		 mov	 esi, esp
  00048	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00051	3b f4		 cmp	 esi, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	85 c0		 test	 eax, eax
  0005a	0f 84 a6 00 00
	00		 je	 $LN2@str

; 95   : 			{	// writable, make string from write buffer
; 96   : 			_Mystr _Str(_Mysb::pbase(), (_Seekhigh < _Mysb::pptr()

  00060	8b f4		 mov	 esi, esp
  00062	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0006b	3b f4		 cmp	 esi, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	39 41 38	 cmp	 DWORD PTR [ecx+56], eax
  00078	73 1a		 jae	 SHORT $LN7@str
  0007a	8b f4		 mov	 esi, esp
  0007c	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00085	3b f4		 cmp	 esi, esp
  00087	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008c	89 85 b4 fe ff
	ff		 mov	 DWORD PTR tv91[ebp], eax
  00092	eb 0c		 jmp	 SHORT $LN8@str
$LN7@str:
  00094	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00097	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  0009a	89 85 b4 fe ff
	ff		 mov	 DWORD PTR tv91[ebp], eax
$LN8@str:
  000a0	8b f4		 mov	 esi, esp
  000a2	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000ab	3b f4		 cmp	 esi, esp
  000ad	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b2	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR tv91[ebp]
  000b8	2b c8		 sub	 ecx, eax
  000ba	51		 push	 ecx
  000bb	8b f4		 mov	 esi, esp
  000bd	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000c6	3b f4		 cmp	 esi, esp
  000c8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cd	50		 push	 eax
  000ce	8d 4d d0	 lea	 ecx, DWORD PTR __Str$4[ebp]
  000d1	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 97   : 				? _Mysb::pptr() : _Seekhigh) - _Mysb::pbase());
; 98   : 			return (_Str);

  000d6	8d 45 d0	 lea	 eax, DWORD PTR __Str$4[ebp]
  000d9	50		 push	 eax
  000da	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000dd	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000e2	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  000e8	83 c9 01	 or	 ecx, 1
  000eb	89 8d bc fe ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  000f1	8d 4d d0	 lea	 ecx, DWORD PTR __Str$4[ebp]
  000f4	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000f9	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000fc	e9 c6 00 00 00	 jmp	 $LN1@str
  00101	e9 c1 00 00 00	 jmp	 $LN1@str
$LN2@str:

; 99   : 			}
; 100  : 		else if (!(_Mystate & _Noread) && _Mysb::gptr() != 0)

  00106	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00109	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  0010c	83 e1 04	 and	 ecx, 4
  0010f	0f 85 84 00 00
	00		 jne	 $LN4@str
  00115	8b f4		 mov	 esi, esp
  00117	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0011a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00120	3b f4		 cmp	 esi, esp
  00122	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00127	85 c0		 test	 eax, eax
  00129	74 6e		 je	 SHORT $LN4@str

; 101  : 			{	// readable, make string from read buffer
; 102  : 			_Mystr _Str(_Mysb::eback(), _Mysb::egptr() - _Mysb::eback());

  0012b	8b f4		 mov	 esi, esp
  0012d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00130	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00136	3b f4		 cmp	 esi, esp
  00138	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013d	8b f0		 mov	 esi, eax
  0013f	8b fc		 mov	 edi, esp
  00141	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00144	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0014a	3b fc		 cmp	 edi, esp
  0014c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00151	2b f0		 sub	 esi, eax
  00153	56		 push	 esi
  00154	8b f4		 mov	 esi, esp
  00156	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00159	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0015f	3b f4		 cmp	 esi, esp
  00161	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00166	50		 push	 eax
  00167	8d 4d ac	 lea	 ecx, DWORD PTR __Str$3[ebp]
  0016a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 103  : 			return (_Str);

  0016f	8d 45 ac	 lea	 eax, DWORD PTR __Str$3[ebp]
  00172	50		 push	 eax
  00173	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00176	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0017b	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  00181	83 c9 01	 or	 ecx, 1
  00184	89 8d bc fe ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  0018a	8d 4d ac	 lea	 ecx, DWORD PTR __Str$3[ebp]
  0018d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00192	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00195	eb 30		 jmp	 SHORT $LN1@str

; 104  : 			}
; 105  : 		else

  00197	eb 2e		 jmp	 SHORT $LN1@str
$LN4@str:

; 106  : 			{	// inaccessible, return empty string
; 107  : 			_Mystr _Nul;

  00199	8d 4d 88	 lea	 ecx, DWORD PTR __Nul$2[ebp]
  0019c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 108  : 			return (_Nul);

  001a1	8d 45 88	 lea	 eax, DWORD PTR __Nul$2[ebp]
  001a4	50		 push	 eax
  001a5	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  001a8	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  001ad	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  001b3	83 c9 01	 or	 ecx, 1
  001b6	89 8d bc fe ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  001bc	8d 4d 88	 lea	 ecx, DWORD PTR __Nul$2[ebp]
  001bf	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001c4	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@str:

; 109  : 			}
; 110  : 		}

  001c7	52		 push	 edx
  001c8	8b cd		 mov	 ecx, ebp
  001ca	50		 push	 eax
  001cb	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN18@str
  001d1	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001d6	58		 pop	 eax
  001d7	5a		 pop	 edx
  001d8	5f		 pop	 edi
  001d9	5e		 pop	 esi
  001da	5b		 pop	 ebx
  001db	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001de	33 cd		 xor	 ecx, ebp
  001e0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e5	81 c4 4c 01 00
	00		 add	 esp, 332		; 0000014cH
  001eb	3b ec		 cmp	 ebp, esp
  001ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f2	8b e5		 mov	 esp, ebp
  001f4	5d		 pop	 ebp
  001f5	c2 04 00	 ret	 4
$LN18@str:
  001f8	03 00 00 00	 DD	 3
  001fc	00 00 00 00	 DD	 $LN17@str
$LN17@str:
  00200	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00204	1c 00 00 00	 DD	 28			; 0000001cH
  00208	00 00 00 00	 DD	 $LN14@str
  0020c	ac ff ff ff	 DD	 -84			; ffffffacH
  00210	1c 00 00 00	 DD	 28			; 0000001cH
  00214	00 00 00 00	 DD	 $LN15@str
  00218	88 ff ff ff	 DD	 -120			; ffffff88H
  0021c	1c 00 00 00	 DD	 28			; 0000001cH
  00220	00 00 00 00	 DD	 $LN16@str
$LN16@str:
  00224	5f		 DB	 95			; 0000005fH
  00225	4e		 DB	 78			; 0000004eH
  00226	75		 DB	 117			; 00000075H
  00227	6c		 DB	 108			; 0000006cH
  00228	00		 DB	 0
$LN15@str:
  00229	5f		 DB	 95			; 0000005fH
  0022a	53		 DB	 83			; 00000053H
  0022b	74		 DB	 116			; 00000074H
  0022c	72		 DB	 114			; 00000072H
  0022d	00		 DB	 0
$LN14@str:
  0022e	5f		 DB	 95			; 0000005fH
  0022f	53		 DB	 83			; 00000053H
  00230	74		 DB	 116			; 00000074H
  00231	72		 DB	 114			; 00000072H
  00232	00		 DB	 0
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\sstream
;	COMDAT ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 75   : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00045	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@

; 76   : 		_Tidy();

  0004b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 77   : 		}

  00053	8b f4		 mov	 esi, esp
  00055	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  0005e	3b f4		 cmp	 esi, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00068	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006f	59		 pop	 ecx
  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00079	3b ec		 cmp	 ebp, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\sstream
;	COMDAT ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Mode$ = 8						; size = 4
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 28   : 	explicit basic_stringbuf(ios_base::openmode _Mode =

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 29   : 		ios_base::in | ios_base::out)
; 30   : 		{	// construct empty character buffer from mode

  00042	8b f4		 mov	 esi, esp
  00044	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00064	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 40	 add	 ecx, 64			; 00000040H
  0006a	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>

; 31   : 		_Init(0, 0, _Getstate(_Mode));

  0006f	8b 45 08	 mov	 eax, DWORD PTR __Mode$[ebp]
  00072	50		 push	 eax
  00073	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	e8 00 00 00 00	 call	 ?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
  0007b	50		 push	 eax
  0007c	6a 00		 push	 0
  0007e	6a 00		 push	 0
  00080	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	e8 00 00 00 00	 call	 ?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init

; 32   : 		}

  00088	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00092	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00095	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009c	59		 pop	 ecx
  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  000a6	3b ec		 cmp	 ebp, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0:
  00000	8b f4		 mov	 esi, esp
  00002	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\sstream
;	COMDAT ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT
; _this$ = ecx

; 646  : 		{	// return string copy of character array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp], 0

; 647  : 		return (_Stringbuffer.str());

  0002d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	83 c1 18	 add	 ecx, 24			; 00000018H
  00037	e8 00 00 00 00	 call	 ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
  0003c	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  00042	83 c9 01	 or	 ecx, 1
  00045	89 8d 2c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  0004b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 648  : 		}

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00057	3b ec		 cmp	 ebp, esp
  00059	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\sstream
;	COMDAT ??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 637  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 98	 mov	 ecx, DWORD PTR [eax-104]
  00029	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 44 10 98 00
	00 00 00	 mov	 DWORD PTR [eax+edx-104], OFFSET ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00037	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 48 98	 mov	 ecx, DWORD PTR [eax-104]
  0003d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00040	83 ea 68	 sub	 edx, 104		; 00000068H
  00043	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00046	8b 48 98	 mov	 ecx, DWORD PTR [eax-104]
  00049	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	89 54 01 94	 mov	 DWORD PTR [ecx+eax-108], edx

; 638  : 		}

  00053	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	83 e9 50	 sub	 ecx, 80			; 00000050H
  00059	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  0005e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	83 e9 48	 sub	 ecx, 72			; 00000048H
  00064	8b f4		 mov	 esi, esp
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ
  0006c	3b f4		 cmp	 esi, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0007c	3b ec		 cmp	 ebp, esp
  0007e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\sstream
;	COMDAT ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
_TEXT	SEGMENT
$T2 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Mode$ = 8						; size = 4
_$initVBases$ = 12					; size = 4
??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z PROC ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 593  : 		{	// construct empty character buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0
  0004c	83 7d 0c 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  00050	74 3e		 je	 SHORT $LN2@basic_stri
  00052	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00055	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
  0005b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
  00065	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	83 c1 68	 add	 ecx, 104		; 00000068H
  0006b	8b f4		 mov	 esi, esp
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
  00073	3b f4		 cmp	 esi, esp
  00075	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00081	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00087	83 c8 01	 or	 eax, 1
  0008a	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
$LN2@basic_stri:

; 591  : 		: _Mybase(&_Stringbuffer),

  00090	8b f4		 mov	 esi, esp
  00092	6a 00		 push	 0
  00094	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00097	83 c0 18	 add	 eax, 24			; 00000018H
  0009a	50		 push	 eax
  0009b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
  000a4	3b f4		 cmp	 esi, esp
  000a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ab	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 593  : 		{	// construct empty character buffer

  000b2	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000b5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b7	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ba	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000bd	c7 04 10 00 00
	00 00		 mov	 DWORD PTR [eax+edx], OFFSET ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  000c4	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c9	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000cc	83 ea 68	 sub	 edx, 104		; 00000068H
  000cf	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000d2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d4	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000d7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	89 54 01 fc	 mov	 DWORD PTR [ecx+eax-4], edx

; 592  : 			_Stringbuffer(_Mode)

  000de	8b 45 08	 mov	 eax, DWORD PTR __Mode$[ebp]
  000e1	50		 push	 eax
  000e2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e5	83 c1 18	 add	 ecx, 24			; 00000018H
  000e8	e8 00 00 00 00	 call	 ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >

; 594  : 		}

  000ed	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f4	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000f7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000fa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00101	59		 pop	 ecx
  00102	5f		 pop	 edi
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx
  00105	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0010b	3b ec		 cmp	 ebp, esp
  0010d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0:
  00000	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00006	83 e0 01	 and	 eax, 1
  00009	0f 84 1c 00 00
	00		 je	 $LN5@basic_stri
  0000f	83 a5 20 ff ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00016	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 68	 add	 ecx, 104		; 00000068H
  0001c	8b f4		 mov	 esi, esp
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  00024	3b f4		 cmp	 esi, esp
  00026	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$LN5@basic_stri:
  0002b	c3		 ret	 0
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1:
  0002c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 20	 add	 ecx, 32			; 00000020H
  00032	8b f4		 mov	 esi, esp
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ
  0003a	3b f4		 cmp	 esi, esp
  0003c	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z:
  00041	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00045	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00048	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0004e	33 c8		 xor	 ecx, eax
  00050	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00055	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  0005a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ENDP ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ??$?RVrandom_device@std@@@?$uniform_int@H@std@@QBEHAAVrandom_device@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Eng$ = 8						; size = 4
??$?RVrandom_device@std@@@?$uniform_int@H@std@@QBEHAAVrandom_device@1@@Z PROC ; std::uniform_int<int>::operator()<std::random_device>, COMDAT
; _this$ = ecx

; 2311 : 		{	// return next value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2312 : 		return (_Eval(_Eng, _Par._Min, _Par._Max));

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00029	51		 push	 ecx
  0002a	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	8b 02		 mov	 eax, DWORD PTR [edx]
  0002f	50		 push	 eax
  00030	8b 4d 08	 mov	 ecx, DWORD PTR __Eng$[ebp]
  00033	51		 push	 ecx
  00034	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ??$_Eval@Vrandom_device@std@@@?$uniform_int@H@std@@ABEHAAVrandom_device@1@HH@Z ; std::uniform_int<int>::_Eval<std::random_device>

; 2313 : 		}

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 04 00	 ret	 4
??$?RVrandom_device@std@@@?$uniform_int@H@std@@QBEHAAVrandom_device@1@@Z ENDP ; std::uniform_int<int>::operator()<std::random_device>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ??0?$uniform_int_distribution@H@std@@QAE@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Min0$ = 8						; size = 4
__Max0$ = 12						; size = 4
??0?$uniform_int_distribution@H@std@@QAE@HH@Z PROC	; std::uniform_int_distribution<int>::uniform_int_distribution<int>, COMDAT
; _this$ = ecx

; 2444 : 		{	// construct from parameters

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2443 : 		: _Mybase(_Min0, _Max0)

  00023	8b 45 0c	 mov	 eax, DWORD PTR __Max0$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Min0$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0?$uniform_int@H@std@@QAE@HH@Z ; std::uniform_int<int>::uniform_int<int>

; 2445 : 		}

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
??0?$uniform_int_distribution@H@std@@QAE@HH@Z ENDP	; std::uniform_int_distribution<int>::uniform_int_distribution<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ?_Init@param_type@?$uniform_int@H@std@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Min0$ = 8						; size = 4
__Max0$ = 12						; size = 4
?_Init@param_type@?$uniform_int@H@std@@QAEXHH@Z PROC	; std::uniform_int<int>::param_type::_Init, COMDAT
; _this$ = ecx

; 2253 : 			{	// set internal state

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2254 : 			_RNG_ASSERT(_Min0 <= _Max0,

  00023	8b 45 08	 mov	 eax, DWORD PTR __Min0$[ebp]
  00026	3b 45 0c	 cmp	 eax, DWORD PTR __Max0$[ebp]
  00029	7f 02		 jg	 SHORT $LN3@Init
  0002b	eb 3f		 jmp	 SHORT $LN4@Init
$LN3@Init:
  0002d	68 cf 08 00 00	 push	 2255			; 000008cfH
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@LJCFENMG@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_1FM@PKOPLGBP@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAi?$AAn?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAm?$AAa?$AAx?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?5?$AAf?$AAo@
  0003c	e8 00 00 00 00	 call	 ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH
  00044	8b f4		 mov	 esi, esp
  00046	6a 00		 push	 0
  00048	68 cf 08 00 00	 push	 2255			; 000008cfH
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@LJCFENMG@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_1FC@FNLBOEA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAu?$AAn?$AAi?$AAf?$AAo?$AAr?$AAm?$AA_?$AAi?$AAn?$AAt?$AA?$DM?$AAi?$AAn?$AAt?$AA?$DO?$AA?3?$AA?3?$AAp?$AAa?$AAr?$AAa?$AAm?$AA_?$AAt?$AAy?$AAp@
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1GA@FJHEAOJP@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAi?$AAn?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAm?$AAa?$AAx?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?5?$AAf@
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00062	83 c4 14	 add	 esp, 20			; 00000014H
  00065	3b f4		 cmp	 esi, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@Init:

; 2255 : 				"invalid min and max arguments for uniform_int");
; 2256 : 			_Min = _Min0;

  0006c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR __Min0$[ebp]
  00072	89 08		 mov	 DWORD PTR [eax], ecx

; 2257 : 			_Max = _Max0;

  00074	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00077	8b 4d 0c	 mov	 ecx, DWORD PTR __Max0$[ebp]
  0007a	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 2258 : 			}

  0007d	5f		 pop	 edi
  0007e	5e		 pop	 esi
  0007f	5b		 pop	 ebx
  00080	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00086	3b ec		 cmp	 ebp, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 08 00	 ret	 8
?_Init@param_type@?$uniform_int@H@std@@QAEXHH@Z ENDP	; std::uniform_int<int>::param_type::_Init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ??0param_type@?$uniform_int@H@std@@QAE@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Min0$ = 8						; size = 4
__Max0$ = 12						; size = 4
??0param_type@?$uniform_int@H@std@@QAE@HH@Z PROC	; std::uniform_int<int>::param_type::param_type, COMDAT
; _this$ = ecx

; 2227 : 		explicit param_type(result_type _Min0 = 0, result_type _Max0 = 9)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2228 : 			{	// construct from parameters
; 2229 : 			_Init(_Min0, _Max0);

  00023	8b 45 0c	 mov	 eax, DWORD PTR __Max0$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Min0$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?_Init@param_type@?$uniform_int@H@std@@QAEXHH@Z ; std::uniform_int<int>::param_type::_Init

; 2230 : 			}

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
??0param_type@?$uniform_int@H@std@@QAE@HH@Z ENDP	; std::uniform_int<int>::param_type::param_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ?_Adjust@?$uniform_int@H@std@@CAIIU?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__Adjuster$ = -8					; size = 4
__Uval$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Adjust@?$uniform_int@H@std@@CAIIU?$integral_constant@_N$00@2@@Z PROC ; std::uniform_int<int>::_Adjust, COMDAT

; 2374 : 		{	// convert signed ranges to unsigned ranges and vice versa

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 2375 : 		const _Uty _Adjuster = (_Uty(-1) >> 1) + 1;	// 2^(N-1)

  0001e	c7 45 f8 00 00
	00 80		 mov	 DWORD PTR __Adjuster$[ebp], -2147483648 ; 80000000H

; 2376 : 
; 2377 : 		if (_Uval < _Adjuster)

  00025	81 7d 08 00 00
	00 80		 cmp	 DWORD PTR __Uval$[ebp], -2147483648 ; 80000000H
  0002c	73 0c		 jae	 SHORT $LN2@Adjust

; 2378 : 			return (_Uval + _Adjuster);

  0002e	8b 45 08	 mov	 eax, DWORD PTR __Uval$[ebp]
  00031	2d 00 00 00 80	 sub	 eax, -2147483648	; 80000000H
  00036	eb 0a		 jmp	 SHORT $LN1@Adjust

; 2379 : 		else

  00038	eb 08		 jmp	 SHORT $LN1@Adjust
$LN2@Adjust:

; 2380 : 			return (_Uval - _Adjuster);

  0003a	8b 45 08	 mov	 eax, DWORD PTR __Uval$[ebp]
  0003d	2d 00 00 00 80	 sub	 eax, -2147483648	; 80000000H
$LN1@Adjust:

; 2381 : 		}

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?_Adjust@?$uniform_int@H@std@@CAIIU?$integral_constant@_N$00@2@@Z ENDP ; std::uniform_int<int>::_Adjust
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ?_Adjust@?$uniform_int@H@std@@CAII@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
__Uval$ = 8						; size = 4
?_Adjust@?$uniform_int@H@std@@CAII@Z PROC		; std::uniform_int<int>::_Adjust, COMDAT

; 2369 : 		{	// convert signed ranges to unsigned ranges and vice versa

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 2370 : 		return (_Adjust(_Uval, is_signed<_Ty>()));

  0001e	0f b6 85 2f ff
	ff ff		 movzx	 eax, BYTE PTR $T1[ebp]
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR __Uval$[ebp]
  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ?_Adjust@?$uniform_int@H@std@@CAIIU?$integral_constant@_N$00@2@@Z ; std::uniform_int<int>::_Adjust
  0002f	83 c4 08	 add	 esp, 8

; 2371 : 		}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?_Adjust@?$uniform_int@H@std@@CAII@Z ENDP		; std::uniform_int<int>::_Adjust
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ??0?$uniform_int@H@std@@QAE@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Min0$ = 8						; size = 4
__Max0$ = 12						; size = 4
??0?$uniform_int@H@std@@QAE@HH@Z PROC			; std::uniform_int<int>::uniform_int<int>, COMDAT
; _this$ = ecx

; 2267 : 		{	// construct from parameters

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2266 : 		: _Par(_Min0, _Max0)

  00023	8b 45 0c	 mov	 eax, DWORD PTR __Max0$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Min0$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0param_type@?$uniform_int@H@std@@QAE@HH@Z ; std::uniform_int<int>::param_type::param_type

; 2268 : 		}

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
??0?$uniform_int@H@std@@QAE@HH@Z ENDP			; std::uniform_int<int>::uniform_int<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ??0?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__X0$ = 8						; size = 4
??0?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@QAE@I@Z PROC ; std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>, COMDAT
; _this$ = ecx

; 1545 : 		{	// construct with default seed

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1544 : 		: _Mybase(_X0, _Dx, _Fx)

  00023	68 65 89 07 6c	 push	 1812433253		; 6c078965H
  00028	6a ff		 push	 -1
  0002a	8b 45 08	 mov	 eax, DWORD PTR __X0$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ??0?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QAE@III@Z ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>

; 1546 : 		}

  00036	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
??0?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@QAE@I@Z ENDP ; std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ?seed@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QAEXII@Z
_TEXT	SEGMENT
tv83 = -232						; size = 4
__Ix$1 = -32						; size = 4
__Prev$ = -20						; size = 4
_this$ = -8						; size = 4
__X0$ = 8						; size = 4
__Fx$ = 12						; size = 4
?seed@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QAEXII@Z PROC ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::seed, COMDAT
; _this$ = ecx

; 1336 : 		{	// set initial values from specified value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00013	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1337 : 		_Ty _Prev = this->_Ax[0] = _X0 & _WMSK;

  00023	b8 04 00 00 00	 mov	 eax, 4
  00028	6b c8 00	 imul	 ecx, eax, 0
  0002b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0002e	8b 45 08	 mov	 eax, DWORD PTR __X0$[ebp]
  00031	89 44 0a 04	 mov	 DWORD PTR [edx+ecx+4], eax
  00035	8b 4d 08	 mov	 ecx, DWORD PTR __X0$[ebp]
  00038	89 4d ec	 mov	 DWORD PTR __Prev$[ebp], ecx

; 1338 : 		for (int _Ix = 1; _Ix < _Nx; ++_Ix)

  0003b	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR __Ix$1[ebp], 1
  00042	eb 09		 jmp	 SHORT $LN4@seed
$LN2@seed:
  00044	8b 45 e0	 mov	 eax, DWORD PTR __Ix$1[ebp]
  00047	83 c0 01	 add	 eax, 1
  0004a	89 45 e0	 mov	 DWORD PTR __Ix$1[ebp], eax
$LN4@seed:
  0004d	81 7d e0 70 02
	00 00		 cmp	 DWORD PTR __Ix$1[ebp], 624 ; 00000270H
  00054	7d 33		 jge	 SHORT $LN3@seed

; 1339 : 			_Prev = this->_Ax[_Ix] =

  00056	8b 45 ec	 mov	 eax, DWORD PTR __Prev$[ebp]
  00059	c1 e8 1e	 shr	 eax, 30			; 0000001eH
  0005c	33 45 ec	 xor	 eax, DWORD PTR __Prev$[ebp]
  0005f	0f af 45 0c	 imul	 eax, DWORD PTR __Fx$[ebp]
  00063	8b 4d e0	 mov	 ecx, DWORD PTR __Ix$1[ebp]
  00066	03 c8		 add	 ecx, eax
  00068	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv83[ebp], ecx
  0006e	8b 55 e0	 mov	 edx, DWORD PTR __Ix$1[ebp]
  00071	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR tv83[ebp]
  0007a	89 4c 90 04	 mov	 DWORD PTR [eax+edx*4+4], ecx
  0007e	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv83[ebp]
  00084	89 55 ec	 mov	 DWORD PTR __Prev$[ebp], edx
  00087	eb bb		 jmp	 SHORT $LN2@seed
$LN3@seed:

; 1340 : 				(_Ix + _Fx * (_Prev ^ (_Prev >> (_Wx - 2)))) & _WMSK;
; 1341 : 		this->_Idx = _Nx;

  00089	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	c7 00 70 02 00
	00		 mov	 DWORD PTR [eax], 624	; 00000270H

; 1342 : 		}

  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c2 08 00	 ret	 8
?seed@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QAEXII@Z ENDP ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::seed
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ??0?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QAE@III@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__X0$ = 8						; size = 4
__Dxarg$ = 12						; size = 4
__Fxarg$ = 16						; size = 4
??0?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QAE@III@Z PROC ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>, COMDAT
; _this$ = ecx

; 1322 : 		{	// construct with specified seed

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1321 : 		: _Dxval(_Dxarg)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR __Dxarg$[ebp]
  00029	89 88 84 13 00
	00		 mov	 DWORD PTR [eax+4996], ecx

; 1323 : 		seed(_X0, _Fxarg);

  0002f	8b 45 10	 mov	 eax, DWORD PTR __Fxarg$[ebp]
  00032	50		 push	 eax
  00033	8b 4d 08	 mov	 ecx, DWORD PTR __X0$[ebp]
  00036	51		 push	 ecx
  00037	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ?seed@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QAEXII@Z ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::seed

; 1324 : 		}

  0003f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 0c 00	 ret	 12			; 0000000cH
??0?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QAE@III@Z ENDP ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::~_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::~_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ
_TEXT	SEGMENT
__Rawptr$ = -44						; size = 4
__Contptr$ = -32					; size = 4
__Mycont$ = -20						; size = 4
_this$ = -8						; size = 4
??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*, COMDAT
; _this$ = ecx

; 1222 : 		{	// return designated object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00013	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1223 : #if _ITERATOR_DEBUG_LEVEL >= 1
; 1224 : 		_IDL_VERIFY(_Ptr, "cannot dereference value-initialized string iterator");

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0002a	75 3f		 jne	 SHORT $LN2@operator
  0002c	68 c8 04 00 00	 push	 1224			; 000004c8H
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@MMDHPGIM@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_1GK@EPFFCEAH@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?9?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl@
  0003b	e8 00 00 00 00	 call	 ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH
  00043	8b f4		 mov	 esi, esp
  00045	6a 00		 push	 0
  00047	68 c8 04 00 00	 push	 1224			; 000004c8H
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@MMDHPGIM@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1GO@PNALIMBD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?9?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa@
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00061	83 c4 14	 add	 esp, 20			; 00000014H
  00064	3b f4		 cmp	 esi, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@operator:

; 1225 : 		const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());

  0006b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00073	89 45 ec	 mov	 DWORD PTR __Mycont$[ebp], eax

; 1226 : 		_IDL_VERIFY(_Mycont, "cannot dereference string iterator because the iterator was"

  00076	83 7d ec 00	 cmp	 DWORD PTR __Mycont$[ebp], 0
  0007a	75 3f		 jne	 SHORT $LN3@operator
  0007c	68 cb 04 00 00	 push	 1227			; 000004cbH
  00081	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@MMDHPGIM@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00086	68 00 00 00 00	 push	 OFFSET ??_C@_1BAE@HEEJFKO@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@
  0008b	e8 00 00 00 00	 call	 ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message
  00090	83 c4 0c	 add	 esp, 12			; 0000000cH
  00093	8b f4		 mov	 esi, esp
  00095	6a 00		 push	 0
  00097	68 cb 04 00 00	 push	 1227			; 000004cbH
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@MMDHPGIM@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
  000a6	68 00 00 00 00	 push	 OFFSET ??_C@_1BAO@BGLBIONH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa@
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000b1	83 c4 14	 add	 esp, 20			; 00000014H
  000b4	3b f4		 cmp	 esi, esp
  000b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@operator:

; 1227 : 			" invalidated (e.g. reallocation occurred, or the string was destroyed)");
; 1228 : 		const auto _Contptr = _Mycont->_Myptr();

  000bb	8b 4d ec	 mov	 ecx, DWORD PTR __Mycont$[ebp]
  000be	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  000c3	89 45 e0	 mov	 DWORD PTR __Contptr$[ebp], eax

; 1229 : 		const auto _Rawptr = _Unfancy(_Ptr);

  000c6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c9	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000cc	51		 push	 ecx
  000cd	e8 00 00 00 00	 call	 ??$_Unfancy@$$CBD@std@@YAPBDPBD@Z ; std::_Unfancy<char const >
  000d2	83 c4 04	 add	 esp, 4
  000d5	89 45 d4	 mov	 DWORD PTR __Rawptr$[ebp], eax

; 1230 : 		_IDL_VERIFY(_Contptr <= _Rawptr && _Rawptr < _Contptr + _Mycont->_Mysize,

  000d8	8b 45 e0	 mov	 eax, DWORD PTR __Contptr$[ebp]
  000db	3b 45 d4	 cmp	 eax, DWORD PTR __Rawptr$[ebp]
  000de	77 0e		 ja	 SHORT $LN5@operator
  000e0	8b 45 ec	 mov	 eax, DWORD PTR __Mycont$[ebp]
  000e3	8b 4d e0	 mov	 ecx, DWORD PTR __Contptr$[ebp]
  000e6	03 48 14	 add	 ecx, DWORD PTR [eax+20]
  000e9	39 4d d4	 cmp	 DWORD PTR __Rawptr$[ebp], ecx
  000ec	72 3f		 jb	 SHORT $LN4@operator
$LN5@operator:
  000ee	68 cf 04 00 00	 push	 1231			; 000004cfH
  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@MMDHPGIM@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  000f8	68 00 00 00 00	 push	 OFFSET ??_C@_1KK@GJPIMLCF@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@
  000fd	e8 00 00 00 00	 call	 ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message
  00102	83 c4 0c	 add	 esp, 12			; 0000000cH
  00105	8b f4		 mov	 esi, esp
  00107	6a 00		 push	 0
  00109	68 cf 04 00 00	 push	 1231			; 000004cfH
  0010e	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@MMDHPGIM@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00113	68 00 00 00 00	 push	 OFFSET ??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
  00118	68 00 00 00 00	 push	 OFFSET ??_C@_1KO@CMPBFHAM@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa@
  0011d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00123	83 c4 14	 add	 esp, 20			; 00000014H
  00126	3b f4		 cmp	 esi, esp
  00128	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@operator:

; 1231 : 			"cannot dereference string iterator because it is out of range (e.g. an end iterator)");
; 1232 : #endif /* _ITERATOR_DEBUG_LEVEL >= 1 */
; 1233 : 
; 1234 : 		_Analysis_assume_(_Ptr);
; 1235 : 		return (*_Ptr);

  0012d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00130	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 1236 : 		}

  00133	5f		 pop	 edi
  00134	5e		 pop	 esi
  00135	5b		 pop	 ebx
  00136	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  0013c	3b ec		 cmp	 ebp, esp
  0013e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00143	8b e5		 mov	 esp, ebp
  00145	5d		 pop	 ebp
  00146	c3		 ret	 0
??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx

; 1215 : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::_Iterator_base12

; 1214 : 		: _Ptr(_Parg)

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00031	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1216 : 		this->_Adopt(_Pstring);

  00034	8b 45 0c	 mov	 eax, DWORD PTR __Pstring$[ebp]
  00037	50		 push	 eax
  00038	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 1217 : 		}

  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 08 00	 ret	 8
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z PROC ; std::operator==<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 3925 : 	{	// test for string vs. NTCTS equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 3926 : 	return (_Left._Equal(_Right));

  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00025	e8 00 00 00 00	 call	 ?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal

; 3927 : 	}

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ENDP ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z
_TEXT	SEGMENT
tv69 = -196						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z PROC ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 3955 : 	{	// test for string vs. NTCTS inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 3956 : 	return (!(_Left == _Right));

  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0002b	83 c4 08	 add	 esp, 8
  0002e	0f b6 d0	 movzx	 edx, al
  00031	85 d2		 test	 edx, edx
  00033	75 0c		 jne	 SHORT $LN3@operator
  00035	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv69[ebp], 1
  0003f	eb 0a		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00041	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv69[ebp], 0
$LN4@operator:
  0004b	8a 85 3c ff ff
	ff		 mov	 al, BYTE PTR tv69[ebp]

; 3957 : 	}

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ENDP ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\string
;	COMDAT ??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
tv164 = -356						; size = 4
tv258 = -352						; size = 8
tv257 = -344						; size = 8
tv262 = -336						; size = 4
tv260 = -336						; size = 4
tv256 = -336						; size = 8
tv253 = -336						; size = 4
tv261 = -332						; size = 4
tv259 = -332						; size = 4
tv65 = -332						; size = 4
tv263 = -329						; size = 1
$T2 = -324						; size = 4
$T3 = -312						; size = 4
$T4 = -300						; size = 8
__Meta$5 = -92						; size = 4
__Size$6 = -80						; size = 4
__Ctype_fac$7 = -68					; size = 4
__Ok$ = -56						; size = 8
__Changed$ = -37					; size = 1
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::operator>><char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 23   : 	{	// extract a string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd 9c fe ff
	ff		 lea	 edi, DWORD PTR [ebp-356]
  00021	b9 55 00 00 00	 mov	 ecx, 85			; 00000055H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 24   : 	typedef ctype<_Elem> _Ctype;
; 25   : 	typedef basic_istream<_Elem, _Traits> _Myis;
; 26   : 	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
; 27   : 	typedef typename _Mystr::size_type _Mysizt;
; 28   : 
; 29   : 	ios_base::iostate _State = ios_base::goodbit;

  00044	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 30   : 	bool _Changed = false;

  0004b	c6 45 db 00	 mov	 BYTE PTR __Changed$[ebp], 0

; 31   : 	const typename _Myis::sentry _Ok(_Istr);

  0004f	6a 00		 push	 0
  00051	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00054	50		 push	 eax
  00055	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00058	e8 00 00 00 00	 call	 ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 32   : 
; 33   : 	if (_Ok)

  00064	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00067	e8 00 00 00 00	 call	 ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
  0006c	0f b6 c0	 movzx	 eax, al
  0006f	85 c0		 test	 eax, eax
  00071	0f 84 8c 02 00
	00		 je	 $LN5@operator

; 34   : 		{	// state okay, extract characters
; 35   : 		const _Ctype& _Ctype_fac = _USE(_Istr.getloc(), _Ctype);

  00077	8b f4		 mov	 esi, esp
  00079	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  0007f	50		 push	 eax
  00080	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00083	8b 11		 mov	 edx, DWORD PTR [ecx]
  00085	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00088	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?getloc@ios_base@std@@QBE?AVlocale@2@XZ
  00091	3b f4		 cmp	 esi, esp
  00093	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00098	89 85 b4 fe ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  0009e	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR tv65[ebp]
  000a4	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv253[ebp], eax
  000aa	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  000ae	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR tv253[ebp]
  000b4	51		 push	 ecx
  000b5	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  000ba	83 c4 04	 add	 esp, 4
  000bd	89 45 bc	 mov	 DWORD PTR __Ctype_fac$7[ebp], eax
  000c0	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  000c4	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  000ca	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 36   : 		_Str.erase();

  000cf	6a 00		 push	 0
  000d1	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  000d4	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 37   : 
; 38   : 		_TRY_IO_BEGIN

  000d9	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2

; 39   : 		_Mysizt _Size = 0 < _Istr.width()
; 40   : 			&& (_Mysizt)_Istr.width() < _Str.max_size()

  000dd	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  000e0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e2	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  000e5	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000e8	8b f4		 mov	 esi, esp
  000ea	8b ca		 mov	 ecx, edx
  000ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000f2	3b f4		 cmp	 esi, esp
  000f4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f9	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv256[ebp], eax
  000ff	89 95 b4 fe ff
	ff		 mov	 DWORD PTR tv256[ebp+4], edx
  00105	83 bd b4 fe ff
	ff 00		 cmp	 DWORD PTR tv256[ebp+4], 0
  0010c	7c 79		 jl	 SHORT $LN13@operator
  0010e	7f 09		 jg	 SHORT $LN21@operator
  00110	83 bd b0 fe ff
	ff 00		 cmp	 DWORD PTR tv256[ebp], 0
  00117	76 6e		 jbe	 SHORT $LN13@operator
$LN21@operator:
  00119	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0011c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011e	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00121	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00124	8b f4		 mov	 esi, esp
  00126	8b ca		 mov	 ecx, edx
  00128	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  0012e	3b f4		 cmp	 esi, esp
  00130	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00135	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv257[ebp], eax
  0013b	89 95 ac fe ff
	ff		 mov	 DWORD PTR tv257[ebp+4], edx
  00141	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00144	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00149	39 85 a8 fe ff
	ff		 cmp	 DWORD PTR tv257[ebp], eax
  0014f	73 36		 jae	 SHORT $LN13@operator
  00151	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00154	8b 08		 mov	 ecx, DWORD PTR [eax]
  00156	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00159	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0015c	8b f4		 mov	 esi, esp
  0015e	8b ca		 mov	 ecx, edx
  00160	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  00166	3b f4		 cmp	 esi, esp
  00168	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016d	89 85 a0 fe ff
	ff		 mov	 DWORD PTR tv258[ebp], eax
  00173	89 95 a4 fe ff
	ff		 mov	 DWORD PTR tv258[ebp+4], edx
  00179	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR tv258[ebp]
  0017f	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv164[ebp], eax
  00185	eb 0e		 jmp	 SHORT $LN14@operator
$LN13@operator:
  00187	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  0018a	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  0018f	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv164[ebp], eax
$LN14@operator:
  00195	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv164[ebp]
  0019b	89 4d b0	 mov	 DWORD PTR __Size$6[ebp], ecx

; 41   : 				? (_Mysizt)_Istr.width() : _Str.max_size();
; 42   : 		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  0019e	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  001a1	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a3	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  001a6	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001a9	8b f4		 mov	 esi, esp
  001ab	8b ca		 mov	 ecx, edx
  001ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001b3	3b f4		 cmp	 esi, esp
  001b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001ba	89 85 b4 fe ff
	ff		 mov	 DWORD PTR tv259[ebp], eax
  001c0	8b f4		 mov	 esi, esp
  001c2	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR tv259[ebp]
  001c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
  001ce	3b f4		 cmp	 esi, esp
  001d0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d5	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv260[ebp], eax
  001db	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR tv260[ebp]
  001e1	89 45 a4	 mov	 DWORD PTR __Meta$5[ebp], eax

; 43   : 
; 44   : 		for (; 0 < _Size; --_Size, _Meta = _Istr.rdbuf()->snextc())

  001e4	eb 4d		 jmp	 SHORT $LN4@operator
$LN2@operator:
  001e6	8b 45 b0	 mov	 eax, DWORD PTR __Size$6[ebp]
  001e9	83 e8 01	 sub	 eax, 1
  001ec	89 45 b0	 mov	 DWORD PTR __Size$6[ebp], eax
  001ef	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  001f2	8b 11		 mov	 edx, DWORD PTR [ecx]
  001f4	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  001f7	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  001fa	8b f4		 mov	 esi, esp
  001fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00202	3b f4		 cmp	 esi, esp
  00204	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00209	89 85 b4 fe ff
	ff		 mov	 DWORD PTR tv261[ebp], eax
  0020f	8b f4		 mov	 esi, esp
  00211	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR tv261[ebp]
  00217	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
  0021d	3b f4		 cmp	 esi, esp
  0021f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00224	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv262[ebp], eax
  0022a	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR tv262[ebp]
  00230	89 45 a4	 mov	 DWORD PTR __Meta$5[ebp], eax
$LN4@operator:
  00233	83 7d b0 00	 cmp	 DWORD PTR __Size$6[ebp], 0
  00237	0f 86 8e 00 00
	00		 jbe	 $LN3@operator

; 45   : 			if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  0023d	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00242	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00248	8d 45 a4	 lea	 eax, DWORD PTR __Meta$5[ebp]
  0024b	50		 push	 eax
  0024c	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00252	51		 push	 ecx
  00253	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  00258	83 c4 08	 add	 esp, 8
  0025b	0f b6 d0	 movzx	 edx, al
  0025e	85 d2		 test	 edx, edx
  00260	74 0d		 je	 SHORT $LN7@operator

; 46   : 				{	// end of file, quit
; 47   : 				_State |= ios_base::eofbit;

  00262	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00265	83 c8 01	 or	 eax, 1
  00268	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 48   : 				break;

  0026b	eb 5e		 jmp	 SHORT $LN3@operator
  0026d	eb 57		 jmp	 SHORT $LN8@operator
$LN7@operator:

; 49   : 				}
; 50   : 			else if (_Ctype_fac.is(_Ctype::space,

  0026f	8d 45 a4	 lea	 eax, DWORD PTR __Meta$5[ebp]
  00272	50		 push	 eax
  00273	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  00278	83 c4 04	 add	 esp, 4
  0027b	8b f4		 mov	 esi, esp
  0027d	0f b6 c8	 movzx	 ecx, al
  00280	51		 push	 ecx
  00281	6a 48		 push	 72			; 00000048H
  00283	8b 4d bc	 mov	 ecx, DWORD PTR __Ctype_fac$7[ebp]
  00286	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?is@?$ctype@D@std@@QBE_NFD@Z
  0028c	3b f4		 cmp	 esi, esp
  0028e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00293	88 85 b7 fe ff
	ff		 mov	 BYTE PTR tv263[ebp], al
  00299	0f b6 95 b7 fe
	ff ff		 movzx	 edx, BYTE PTR tv263[ebp]
  002a0	85 d2		 test	 edx, edx
  002a2	74 04		 je	 SHORT $LN9@operator

; 51   : 				_Traits::to_char_type(_Meta)))
; 52   : 				break;	// whitespace, quit

  002a4	eb 25		 jmp	 SHORT $LN3@operator

; 53   : 			else

  002a6	eb 1e		 jmp	 SHORT $LN8@operator
$LN9@operator:

; 54   : 				{	// add character to string
; 55   : 				_Str.append(1, _Traits::to_char_type(_Meta));

  002a8	8d 45 a4	 lea	 eax, DWORD PTR __Meta$5[ebp]
  002ab	50		 push	 eax
  002ac	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  002b1	83 c4 04	 add	 esp, 4
  002b4	0f b6 c8	 movzx	 ecx, al
  002b7	51		 push	 ecx
  002b8	6a 01		 push	 1
  002ba	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  002bd	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 56   : 				_Changed = true;

  002c2	c6 45 db 01	 mov	 BYTE PTR __Changed$[ebp], 1
$LN8@operator:

; 57   : 				}

  002c6	e9 1b ff ff ff	 jmp	 $LN2@operator
$LN3@operator:
  002cb	eb 26		 jmp	 SHORT $LN15@operator
__catch$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$0:

; 58   : 		_CATCH_IO_(_Istr)

  002cd	8b f4		 mov	 esi, esp
  002cf	6a 01		 push	 1
  002d1	6a 04		 push	 4
  002d3	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  002d6	8b 08		 mov	 ecx, DWORD PTR [eax]
  002d8	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  002db	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002de	8b ca		 mov	 ecx, edx
  002e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  002e6	3b f4		 cmp	 esi, esp
  002e8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002ed	b8 00 00 00 00	 mov	 eax, $LN20@operator
  002f2	c3		 ret	 0
$LN15@operator:
  002f3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  002fa	eb 07		 jmp	 SHORT $LN5@operator
$LN20@operator:
  002fc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN5@operator:

; 59   : 		}
; 60   : 
; 61   : 	_Istr.width(0);

  00303	8b f4		 mov	 esi, esp
  00305	6a 00		 push	 0
  00307	6a 00		 push	 0
  00309	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0030c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0030e	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00311	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00314	8b ca		 mov	 ecx, edx
  00316	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  0031c	3b f4		 cmp	 esi, esp
  0031e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 62   : 	if (!_Changed)

  00323	0f b6 45 db	 movzx	 eax, BYTE PTR __Changed$[ebp]
  00327	85 c0		 test	 eax, eax
  00329	75 09		 jne	 SHORT $LN11@operator

; 63   : 		_State |= ios_base::failbit;

  0032b	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  0032e	83 c8 02	 or	 eax, 2
  00331	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN11@operator:

; 64   : 	_Istr.setstate(_State);

  00334	8b f4		 mov	 esi, esp
  00336	6a 00		 push	 0
  00338	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  0033b	50		 push	 eax
  0033c	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  0033f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00341	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00344	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00347	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  0034d	3b f4		 cmp	 esi, esp
  0034f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 65   : 	return (_Istr);

  00354	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00357	89 85 bc fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0035d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00364	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00367	e8 00 00 00 00	 call	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0036c	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 66   : 	}

  00372	52		 push	 edx
  00373	8b cd		 mov	 ecx, ebp
  00375	50		 push	 eax
  00376	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN26@operator
  0037c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00381	58		 pop	 eax
  00382	5a		 pop	 edx
  00383	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00386	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0038d	59		 pop	 ecx
  0038e	5f		 pop	 edi
  0038f	5e		 pop	 esi
  00390	5b		 pop	 ebx
  00391	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00394	33 cd		 xor	 ecx, ebp
  00396	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0039b	81 c4 64 01 00
	00		 add	 esp, 356		; 00000164H
  003a1	3b ec		 cmp	 ebp, esp
  003a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003a8	8b e5		 mov	 esp, ebp
  003aa	5d		 pop	 ebp
  003ab	c3		 ret	 0
$LN26@operator:
  003ac	02 00 00 00	 DD	 2
  003b0	00 00 00 00	 DD	 $LN25@operator
$LN25@operator:
  003b4	c8 ff ff ff	 DD	 -56			; ffffffc8H
  003b8	08 00 00 00	 DD	 8
  003bc	00 00 00 00	 DD	 $LN22@operator
  003c0	a4 ff ff ff	 DD	 -92			; ffffffa4H
  003c4	04 00 00 00	 DD	 4
  003c8	00 00 00 00	 DD	 $LN23@operator
$LN23@operator:
  003cc	5f		 DB	 95			; 0000005fH
  003cd	4d		 DB	 77			; 0000004dH
  003ce	65		 DB	 101			; 00000065H
  003cf	74		 DB	 116			; 00000074H
  003d0	61		 DB	 97			; 00000061H
  003d1	00		 DB	 0
$LN22@operator:
  003d2	5f		 DB	 95			; 0000005fH
  003d3	4f		 DB	 79			; 0000004fH
  003d4	6b		 DB	 107			; 0000006bH
  003d5	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$2:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
__unwindfunclet$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$3:
  00008	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 8a 98 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-360]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\string
;	COMDAT ??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::operator>><char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 137  : 	{	// extract a string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 138  : 	return (_STD move(_Istr) >> _Str);

  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Str$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 ??$move@AAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::move<std::basic_istream<char,std::char_traits<char> > &>
  0002b	83 c4 04	 add	 esp, 4
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
  00034	83 c4 08	 add	 esp, 8

; 139  : 	}

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 983  : 	{	// insert newline and flush stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 984  : 	_Ostr.put(_Ostr.widen('\n'));

  0001e	8b f4		 mov	 esi, esp
  00020	6a 0a		 push	 10			; 0000000aH
  00022	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0002a	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0002d	8b ca		 mov	 ecx, edx
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b f4		 mov	 esi, esp
  0003e	0f b6 c0	 movzx	 eax, al
  00041	50		 push	 eax
  00042	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
  0004b	3b f4		 cmp	 esi, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 985  : 	_Ostr.flush();

  00052	8b f4		 mov	 esi, esp
  00054	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 986  : 	return (_Ostr);

  00064	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]

; 987  : 	}

  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00070	3b ec		 cmp	 ebp, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
tv135 = -356						; size = 8
tv342 = -348						; size = 8
tv290 = -344						; size = 4
tv287 = -344						; size = 8
tv285 = -344						; size = 4
tv328 = -340						; size = 8
tv289 = -340						; size = 4
tv284 = -340						; size = 4
tv286 = -336						; size = 4
tv137 = -336						; size = 4
tv288 = -333						; size = 1
tv283 = -333						; size = 1
$T2 = -328						; size = 4
$T3 = -316						; size = 4
$T4 = -304						; size = 4
$T5 = -292						; size = 4
$T6 = -280						; size = 4
__Ok$ = -76						; size = 8
__Pad$ = -60						; size = 8
__Count$ = -44						; size = 8
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 772  : 	{	// insert NTBS into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd 9c fe ff
	ff		 lea	 edi, DWORD PTR [ebp-356]
  00021	b9 55 00 00 00	 mov	 ecx, 85			; 00000055H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 773  : 	typedef char _Elem;
; 774  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 775  : 	ios_base::iostate _State = ios_base::goodbit;

  00044	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 776  : 	streamsize _Count = (streamsize)_Traits::length(_Val);	// may overflow

  0004b	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ?length@?$char_traits@D@std@@SAIQBD@Z ; std::char_traits<char>::length
  00054	83 c4 04	 add	 esp, 4
  00057	33 c9		 xor	 ecx, ecx
  00059	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  0005c	89 4d d8	 mov	 DWORD PTR __Count$[ebp+4], ecx

; 777  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count

  0005f	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00062	8b 08		 mov	 ecx, DWORD PTR [eax]
  00064	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00067	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0006a	8b f4		 mov	 esi, esp
  0006c	8b ca		 mov	 ecx, edx
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  00074	3b f4		 cmp	 esi, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv328[ebp], eax
  00081	89 95 b0 fe ff
	ff		 mov	 DWORD PTR tv328[ebp+4], edx
  00087	83 bd b0 fe ff
	ff 00		 cmp	 DWORD PTR tv328[ebp+4], 0
  0008e	7c 79		 jl	 SHORT $LN17@operator
  00090	7f 09		 jg	 SHORT $LN24@operator
  00092	83 bd ac fe ff
	ff 00		 cmp	 DWORD PTR tv328[ebp], 0
  00099	76 6e		 jbe	 SHORT $LN17@operator
$LN24@operator:
  0009b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0009e	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a0	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000a3	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000a6	8b f4		 mov	 esi, esp
  000a8	8b ca		 mov	 ecx, edx
  000aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000b0	3b f4		 cmp	 esi, esp
  000b2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b7	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv342[ebp], eax
  000bd	89 95 a8 fe ff
	ff		 mov	 DWORD PTR tv342[ebp+4], edx
  000c3	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv342[ebp+4]
  000c9	3b 45 d8	 cmp	 eax, DWORD PTR __Count$[ebp+4]
  000cc	7c 3b		 jl	 SHORT $LN17@operator
  000ce	7f 0b		 jg	 SHORT $LN25@operator
  000d0	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv342[ebp]
  000d6	3b 4d d4	 cmp	 ecx, DWORD PTR __Count$[ebp]
  000d9	76 2e		 jbe	 SHORT $LN17@operator
$LN25@operator:
  000db	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000de	8b 02		 mov	 eax, DWORD PTR [edx]
  000e0	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000e3	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000e6	8b f4		 mov	 esi, esp
  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000ee	3b f4		 cmp	 esi, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f5	2b 45 d4	 sub	 eax, DWORD PTR __Count$[ebp]
  000f8	1b 55 d8	 sbb	 edx, DWORD PTR __Count$[ebp+4]
  000fb	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv135[ebp], eax
  00101	89 95 a0 fe ff
	ff		 mov	 DWORD PTR tv135[ebp+4], edx
  00107	eb 0b		 jmp	 SHORT $LN18@operator
$LN17@operator:
  00109	0f 57 c0	 xorps	 xmm0, xmm0
  0010c	66 0f 13 85 9c
	fe ff ff	 movlpd	 QWORD PTR tv135[ebp], xmm0
$LN18@operator:
  00114	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv135[ebp]
  0011a	89 4d c4	 mov	 DWORD PTR __Pad$[ebp], ecx
  0011d	8b 95 a0 fe ff
	ff		 mov	 edx, DWORD PTR tv135[ebp+4]
  00123	89 55 c8	 mov	 DWORD PTR __Pad$[ebp+4], edx

; 778  : 		? 0 : _Ostr.width() - _Count;
; 779  : 	const typename _Myos::sentry _Ok(_Ostr);

  00126	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00129	50		 push	 eax
  0012a	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0012d	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00132	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 780  : 
; 781  : 	if (!_Ok)

  00139	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0013c	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00141	0f b6 c0	 movzx	 eax, al
  00144	85 c0		 test	 eax, eax
  00146	75 0e		 jne	 SHORT $LN8@operator

; 782  : 		_State |= ios_base::badbit;

  00148	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  0014b	83 c8 04	 or	 eax, 4
  0014e	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 783  : 	else

  00151	e9 ba 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 784  : 		{	// state okay, insert
; 785  : 		_TRY_IO_BEGIN

  00156	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 786  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  0015a	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0015d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015f	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00162	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00165	8b f4		 mov	 esi, esp
  00167	8b ca		 mov	 ecx, edx
  00169	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  0016f	3b f4		 cmp	 esi, esp
  00171	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00176	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv137[ebp], eax
  0017c	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  00182	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00187	83 f8 40	 cmp	 eax, 64			; 00000040H
  0018a	0f 84 d5 00 00
	00		 je	 $LN11@operator

; 787  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00190	eb 12		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00192	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  00195	83 e8 01	 sub	 eax, 1
  00198	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  0019b	83 d9 00	 sbb	 ecx, 0
  0019e	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  001a1	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN4@operator:
  001a4	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  001a8	0f 8c b7 00 00
	00		 jl	 $LN11@operator
  001ae	7f 0a		 jg	 SHORT $LN26@operator
  001b0	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  001b4	0f 86 ab 00 00
	00		 jbe	 $LN11@operator
$LN26@operator:

; 788  : 				if (_Traits::eq_int_type(_Traits::eof(),

  001ba	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001bd	8b 08		 mov	 ecx, DWORD PTR [eax]
  001bf	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001c2	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001c5	8b f4		 mov	 esi, esp
  001c7	8b ca		 mov	 ecx, edx
  001c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  001cf	3b f4		 cmp	 esi, esp
  001d1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d6	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv283[ebp], al
  001dc	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001df	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e1	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001e4	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001e7	8b f4		 mov	 esi, esp
  001e9	8b ca		 mov	 ecx, edx
  001eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001f1	3b f4		 cmp	 esi, esp
  001f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f8	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv284[ebp], eax
  001fe	8b f4		 mov	 esi, esp
  00200	0f b6 85 b3 fe
	ff ff		 movzx	 eax, BYTE PTR tv283[ebp]
  00207	50		 push	 eax
  00208	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv284[ebp]
  0020e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00214	3b f4		 cmp	 esi, esp
  00216	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0021b	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv285[ebp], eax
  00221	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv285[ebp]
  00227	89 8d e8 fe ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
  0022d	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00232	89 85 dc fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  00238	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  0023e	52		 push	 edx
  0023f	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00245	50		 push	 eax
  00246	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0024b	83 c4 08	 add	 esp, 8
  0024e	0f b6 c8	 movzx	 ecx, al
  00251	85 c9		 test	 ecx, ecx
  00253	74 0b		 je	 SHORT $LN12@operator

; 789  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 790  : 					{	// insertion failed, quit
; 791  : 					_State |= ios_base::badbit;

  00255	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00258	83 c8 04	 or	 eax, 4
  0025b	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 792  : 					break;

  0025e	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 793  : 					}
; 794  : 
; 795  : 		if (_State == ios_base::goodbit

  00260	e9 2d ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 796  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

  00265	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  00269	75 6e		 jne	 SHORT $LN13@operator
  0026b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0026e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00270	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00273	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00276	8b f4		 mov	 esi, esp
  00278	8b ca		 mov	 ecx, edx
  0027a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00280	3b f4		 cmp	 esi, esp
  00282	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00287	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv286[ebp], eax
  0028d	8b f4		 mov	 esi, esp
  0028f	8b 45 d8	 mov	 eax, DWORD PTR __Count$[ebp+4]
  00292	50		 push	 eax
  00293	8b 4d d4	 mov	 ecx, DWORD PTR __Count$[ebp]
  00296	51		 push	 ecx
  00297	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  0029a	52		 push	 edx
  0029b	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR tv286[ebp]
  002a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  002a7	3b f4		 cmp	 esi, esp
  002a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002ae	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv287[ebp], eax
  002b4	89 95 ac fe ff
	ff		 mov	 DWORD PTR tv287[ebp+4], edx
  002ba	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv287[ebp]
  002c0	3b 45 d4	 cmp	 eax, DWORD PTR __Count$[ebp]
  002c3	75 0b		 jne	 SHORT $LN27@operator
  002c5	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv287[ebp+4]
  002cb	3b 4d d8	 cmp	 ecx, DWORD PTR __Count$[ebp+4]
  002ce	74 09		 je	 SHORT $LN13@operator
$LN27@operator:

; 797  : 			_State |= ios_base::badbit;

  002d0	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  002d3	83 c8 04	 or	 eax, 4
  002d6	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN13@operator:

; 798  : 
; 799  : 		if (_State == ios_base::goodbit)

  002d9	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  002dd	0f 85 d5 00 00
	00		 jne	 $LN14@operator

; 800  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  002e3	eb 12		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002e5	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  002e8	83 e8 01	 sub	 eax, 1
  002eb	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  002ee	83 d9 00	 sbb	 ecx, 0
  002f1	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  002f4	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN7@operator:
  002f7	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  002fb	0f 8c b7 00 00
	00		 jl	 $LN14@operator
  00301	7f 0a		 jg	 SHORT $LN28@operator
  00303	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00307	0f 86 ab 00 00
	00		 jbe	 $LN14@operator
$LN28@operator:

; 801  : 				if (_Traits::eq_int_type(_Traits::eof(),

  0030d	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00310	8b 08		 mov	 ecx, DWORD PTR [eax]
  00312	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00315	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00318	8b f4		 mov	 esi, esp
  0031a	8b ca		 mov	 ecx, edx
  0031c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  00322	3b f4		 cmp	 esi, esp
  00324	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00329	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv288[ebp], al
  0032f	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00332	8b 08		 mov	 ecx, DWORD PTR [eax]
  00334	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00337	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0033a	8b f4		 mov	 esi, esp
  0033c	8b ca		 mov	 ecx, edx
  0033e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00344	3b f4		 cmp	 esi, esp
  00346	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0034b	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv289[ebp], eax
  00351	8b f4		 mov	 esi, esp
  00353	0f b6 85 b3 fe
	ff ff		 movzx	 eax, BYTE PTR tv288[ebp]
  0035a	50		 push	 eax
  0035b	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv289[ebp]
  00361	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00367	3b f4		 cmp	 esi, esp
  00369	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0036e	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv290[ebp], eax
  00374	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv290[ebp]
  0037a	89 8d d0 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], ecx
  00380	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00385	89 85 c4 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  0038b	8d 95 d0 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  00391	52		 push	 edx
  00392	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00398	50		 push	 eax
  00399	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0039e	83 c4 08	 add	 esp, 8
  003a1	0f b6 c8	 movzx	 ecx, al
  003a4	85 c9		 test	 ecx, ecx
  003a6	74 0b		 je	 SHORT $LN15@operator

; 802  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 803  : 					{	// insertion failed, quit
; 804  : 					_State |= ios_base::badbit;

  003a8	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  003ab	83 c8 04	 or	 eax, 4
  003ae	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 805  : 					break;

  003b1	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 806  : 					}

  003b3	e9 2d ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 807  : 		_Ostr.width(0);

  003b8	8b f4		 mov	 esi, esp
  003ba	6a 00		 push	 0
  003bc	6a 00		 push	 0
  003be	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  003c3	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003c6	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003c9	8b ca		 mov	 ecx, edx
  003cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  003d1	3b f4		 cmp	 esi, esp
  003d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003d8	eb 26		 jmp	 SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 808  : 		_CATCH_IO_(_Ostr)

  003da	8b f4		 mov	 esi, esp
  003dc	6a 01		 push	 1
  003de	6a 04		 push	 4
  003e0	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003e3	8b 08		 mov	 ecx, DWORD PTR [eax]
  003e5	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003e8	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003eb	8b ca		 mov	 ecx, edx
  003ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003f3	3b f4		 cmp	 esi, esp
  003f5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003fa	b8 00 00 00 00	 mov	 eax, $LN23@operator
  003ff	c3		 ret	 0
$LN19@operator:
  00400	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00407	eb 07		 jmp	 SHORT $LN9@operator
$LN23@operator:
  00409	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN9@operator:

; 809  : 		}
; 810  : 
; 811  : 	_Ostr.setstate(_State);

  00410	8b f4		 mov	 esi, esp
  00412	6a 00		 push	 0
  00414	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00417	50		 push	 eax
  00418	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0041b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0041d	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00420	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00423	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00429	3b f4		 cmp	 esi, esp
  0042b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 812  : 	return (_Ostr);

  00430	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00433	89 85 b8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00439	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00440	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00443	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00448	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 813  : 	}

  0044e	52		 push	 edx
  0044f	8b cd		 mov	 ecx, ebp
  00451	50		 push	 eax
  00452	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN32@operator
  00458	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0045d	58		 pop	 eax
  0045e	5a		 pop	 edx
  0045f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00462	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00469	59		 pop	 ecx
  0046a	5f		 pop	 edi
  0046b	5e		 pop	 esi
  0046c	5b		 pop	 ebx
  0046d	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00470	33 cd		 xor	 ecx, ebp
  00472	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00477	81 c4 64 01 00
	00		 add	 esp, 356		; 00000164H
  0047d	3b ec		 cmp	 ebp, esp
  0047f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00484	8b e5		 mov	 esp, ebp
  00486	5d		 pop	 ebp
  00487	c3		 ret	 0
$LN32@operator:
  00488	01 00 00 00	 DD	 1
  0048c	00 00 00 00	 DD	 $LN31@operator
$LN31@operator:
  00490	b4 ff ff ff	 DD	 -76			; ffffffb4H
  00494	08 00 00 00	 DD	 8
  00498	00 00 00 00	 DD	 $LN29@operator
$LN29@operator:
  0049c	5f		 DB	 95			; 0000005fH
  0049d	4f		 DB	 79			; 0000004fH
  0049e	6b		 DB	 107			; 0000006bH
  0049f	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 98 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-360]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_D?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??_D?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_fstream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 c1 78	 add	 ecx, 120		; 00000078H
  00029	e8 00 00 00 00	 call	 ??1?$basic_fstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_fstream<char,std::char_traits<char> >::~basic_fstream<char,std::char_traits<char> >
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	83 c1 78	 add	 ecx, 120		; 00000078H
  00034	8b f4		 mov	 esi, esp
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  0003c	3b f4		 cmp	 esi, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
??_D?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_fstream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$basic_fstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_fstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_fstream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 e9 78	 sub	 ecx, 120		; 00000078H
  00029	e8 00 00 00 00	 call	 ??_D?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0002e	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00031	83 e0 01	 and	 eax, 1
  00034	74 14		 je	 SHORT $LN2@scalar
  00036	68 c0 00 00 00	 push	 192			; 000000c0H
  0003b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	83 e8 78	 sub	 eax, 120		; 00000078H
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00047	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0004a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	83 e8 78	 sub	 eax, 120		; 00000078H
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00059	3b ec		 cmp	 ebp, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
??_G?$basic_fstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_fstream<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__autoclassinit2@?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_classSize$ = 8						; size = 4
?__autoclassinit2@?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXI@Z PROC ; std::basic_fstream<char,std::char_traits<char> >::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 08	 mov	 eax, DWORD PTR _classSize$[ebp]
  00026	50		 push	 eax
  00027	6a 00		 push	 0
  00029	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 _memset
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?__autoclassinit2@?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXI@Z ENDP ; std::basic_fstream<char,std::char_traits<char> >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?close@?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?close@?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_fstream<char,std::char_traits<char> >::close, COMDAT
; _this$ = ecx

; 1380 : 		{	// close the C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1381 : 		if (_Filebuffer.close() == 0)

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 c1 18	 add	 ecx, 24			; 00000018H
  00029	e8 00 00 00 00	 call	 ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
  0002e	85 c0		 test	 eax, eax
  00030	75 20		 jne	 SHORT $LN1@close

; 1382 : 			_Myios::setstate(ios_base::failbit);

  00032	8b f4		 mov	 esi, esp
  00034	6a 00		 push	 0
  00036	6a 02		 push	 2
  00038	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00040	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00043	8b ca		 mov	 ecx, edx
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  0004b	3b f4		 cmp	 esi, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@close:

; 1383 : 	}

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0005b	3b ec		 cmp	 ebp, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
?close@?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_fstream<char,std::char_traits<char> >::close
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?open@?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Filename$ = 8						; size = 4
__Mode$ = 12						; size = 4
__Prot$ = 16						; size = 4
?open@?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z PROC ; std::basic_fstream<char,std::char_traits<char> >::open, COMDAT
; _this$ = ecx

; 1358 : 		{	// open a C stream with specified mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1359 : 		if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)

  00023	8b 45 10	 mov	 eax, DWORD PTR __Prot$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 0c	 mov	 ecx, DWORD PTR __Mode$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 55 08	 mov	 edx, DWORD PTR __Filename$[ebp]
  0002e	52		 push	 edx
  0002f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	83 c1 18	 add	 ecx, 24			; 00000018H
  00035	e8 00 00 00 00	 call	 ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
  0003a	85 c0		 test	 eax, eax
  0003c	75 22		 jne	 SHORT $LN2@open

; 1360 : 			_Myios::setstate(ios_base::failbit);

  0003e	8b f4		 mov	 esi, esp
  00040	6a 00		 push	 0
  00042	6a 02		 push	 2
  00044	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 08		 mov	 ecx, DWORD PTR [eax]
  00049	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0004c	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0004f	8b ca		 mov	 ecx, edx
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00057	3b f4		 cmp	 esi, esp
  00059	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1361 : 		else

  0005e	eb 20		 jmp	 SHORT $LN1@open
$LN2@open:

; 1362 : 			_Myios::clear();	// added with C++11

  00060	8b f4		 mov	 esi, esp
  00062	6a 00		 push	 0
  00064	6a 00		 push	 0
  00066	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00069	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0006e	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00071	8b ca		 mov	 ecx, edx
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00079	3b f4		 cmp	 esi, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@open:

; 1363 : 		}

  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00089	3b ec		 cmp	 ebp, esp
  0008b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 0c 00	 ret	 12			; 0000000cH
?open@?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z ENDP ; std::basic_fstream<char,std::char_traits<char> >::open
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ??1?$basic_fstream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$basic_fstream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_fstream<char,std::char_traits<char> >::~basic_fstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 1342 : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 88	 mov	 ecx, DWORD PTR [eax-120]
  00029	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 44 10 88 00
	00 00 00	 mov	 DWORD PTR [eax+edx-120], OFFSET ??_7?$basic_fstream@DU?$char_traits@D@std@@@std@@6B@
  00037	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 48 88	 mov	 ecx, DWORD PTR [eax-120]
  0003d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00040	83 ea 78	 sub	 edx, 120		; 00000078H
  00043	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00046	8b 48 88	 mov	 ecx, DWORD PTR [eax-120]
  00049	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	89 54 01 84	 mov	 DWORD PTR [ecx+eax-124], edx

; 1343 : 		}

  00053	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	83 e9 60	 sub	 ecx, 96			; 00000060H
  00059	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  0005e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	83 e9 58	 sub	 ecx, 88			; 00000058H
  00064	8b f4		 mov	 esi, esp
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ
  0006c	3b f4		 cmp	 esi, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0007c	3b ec		 cmp	 ebp, esp
  0007e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
??1?$basic_fstream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_fstream<char,std::char_traits<char> >::~basic_fstream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_$initVBases$ = 8					; size = 4
??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_fstream<char,std::char_traits<char> >::basic_fstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 1196 : 		{	// construct unopened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0
  0004c	83 7d 08 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  00050	74 3e		 je	 SHORT $LN2@basic_fstr
  00052	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00055	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_8?$basic_fstream@DU?$char_traits@D@std@@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
  0005b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], OFFSET ??_8?$basic_fstream@DU?$char_traits@D@std@@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
  00065	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	83 c1 78	 add	 ecx, 120		; 00000078H
  0006b	8b f4		 mov	 esi, esp
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
  00073	3b f4		 cmp	 esi, esp
  00075	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00081	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00087	83 c8 01	 or	 eax, 1
  0008a	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
$LN2@basic_fstr:

; 1195 : 		: _Mybase(&_Filebuffer)

  00090	8b f4		 mov	 esi, esp
  00092	6a 00		 push	 0
  00094	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00097	83 c0 18	 add	 eax, 24			; 00000018H
  0009a	50		 push	 eax
  0009b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
  000a4	3b f4		 cmp	 esi, esp
  000a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ab	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 1196 : 		{	// construct unopened

  000b2	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000b5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b7	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ba	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000bd	c7 04 10 00 00
	00 00		 mov	 DWORD PTR [eax+edx], OFFSET ??_7?$basic_fstream@DU?$char_traits@D@std@@@std@@6B@
  000c4	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c9	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000cc	83 ea 78	 sub	 edx, 120		; 00000078H
  000cf	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000d2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d4	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000d7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	89 54 01 fc	 mov	 DWORD PTR [ecx+eax-4], edx
  000de	6a 00		 push	 0
  000e0	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e3	83 c1 18	 add	 ecx, 24			; 00000018H
  000e6	e8 00 00 00 00	 call	 ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >

; 1197 : 		}

  000eb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f2	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000f5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ff	59		 pop	 ecx
  00100	5f		 pop	 edi
  00101	5e		 pop	 esi
  00102	5b		 pop	 ebx
  00103	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00109	3b ec		 cmp	 ebp, esp
  0010b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00110	8b e5		 mov	 esp, ebp
  00112	5d		 pop	 ebp
  00113	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QAE@XZ$0:
  00000	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00006	83 e0 01	 and	 eax, 1
  00009	0f 84 1c 00 00
	00		 je	 $LN5@basic_fstr
  0000f	83 a5 20 ff ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00016	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 78	 add	 ecx, 120		; 00000078H
  0001c	8b f4		 mov	 esi, esp
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  00024	3b f4		 cmp	 esi, esp
  00026	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$LN5@basic_fstr:
  0002b	c3		 ret	 0
__unwindfunclet$??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QAE@XZ$1:
  0002c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 20	 add	 ecx, 32			; 00000020H
  00032	8b f4		 mov	 esi, esp
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ
  0003a	3b f4		 cmp	 esi, esp
  0003c	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00041	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00045	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00048	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0004e	33 c8		 xor	 ecx, eax
  00050	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00055	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0005a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_fstream<char,std::char_traits<char> >::basic_fstream<char,std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ofstream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 c1 68	 add	 ecx, 104		; 00000068H
  00029	e8 00 00 00 00	 call	 ??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	83 c1 68	 add	 ecx, 104		; 00000068H
  00034	8b f4		 mov	 esi, esp
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  0003c	3b f4		 cmp	 esi, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ofstream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 e9 68	 sub	 ecx, 104		; 00000068H
  00029	e8 00 00 00 00	 call	 ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0002e	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00031	83 e0 01	 and	 eax, 1
  00034	74 14		 je	 SHORT $LN2@scalar
  00036	68 b0 00 00 00	 push	 176			; 000000b0H
  0003b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	83 e8 68	 sub	 eax, 104		; 00000068H
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00047	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0004a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	83 e8 68	 sub	 eax, 104		; 00000068H
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00059	3b ec		 cmp	 ebp, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 04 00	 ret	 4
??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__autoclassinit2@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_classSize$ = 8						; size = 4
?__autoclassinit2@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXI@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 08	 mov	 eax, DWORD PTR _classSize$[ebp]
  00026	50		 push	 eax
  00027	6a 00		 push	 0
  00029	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 _memset
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?__autoclassinit2@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXI@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 01	 and	 eax, 1
  00031	74 0e		 je	 SHORT $LN2@scalar
  00033	6a 58		 push	 88			; 00000058H
  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003e	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00041	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004d	3b ec		 cmp	 ebp, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back, COMDAT
; _this$ = ecx

; 723  : 		{	// set up putback area

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 724  : 		if (_Mysb::eback() != &_Mychar)

  00023	8b f4		 mov	 esi, esp
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0002e	3b f4		 cmp	 esi, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	83 c1 3c	 add	 ecx, 60			; 0000003cH
  0003b	3b c1		 cmp	 eax, ecx
  0003d	74 30		 je	 SHORT $LN2@Set_back

; 725  : 			{	// save current get buffer
; 726  : 			_Set_eback = _Mysb::eback();

  0003f	8b f4		 mov	 esi, esp
  00041	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0004a	3b f4		 cmp	 esi, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 727  : 			_Set_egptr = _Mysb::egptr();

  00057	8b f4		 mov	 esi, esp
  00059	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00062	3b f4		 cmp	 esi, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	89 41 54	 mov	 DWORD PTR [ecx+84], eax
$LN2@Set_back:

; 728  : 			}
; 729  : 		_Mysb::setg(&_Mychar, &_Mychar, &_Mychar + 1);

  0006f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00072	83 c0 3d	 add	 eax, 61			; 0000003dH
  00075	8b f4		 mov	 esi, esp
  00077	50		 push	 eax
  00078	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	83 c1 3c	 add	 ecx, 60			; 0000003cH
  0007e	51		 push	 ecx
  0007f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00082	83 c2 3c	 add	 edx, 60			; 0000003cH
  00085	52		 push	 edx
  00086	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  0008f	3b f4		 cmp	 esi, esp
  00091	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 730  : 		}

  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0009f	3b ec		 cmp	 ebp, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back, COMDAT
; _this$ = ecx

; 717  : 		{	// restore buffer after putback

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 718  : 		if (_Mysb::eback() == &_Mychar)

  00023	8b f4		 mov	 esi, esp
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0002e	3b f4		 cmp	 esi, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	83 c1 3c	 add	 ecx, 60			; 0000003cH
  0003b	3b c1		 cmp	 eax, ecx
  0003d	75 27		 jne	 SHORT $LN1@Reset_back

; 719  : 			_Mysb::setg(_Set_eback, _Set_eback, _Set_egptr);

  0003f	8b f4		 mov	 esi, esp
  00041	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00044	8b 48 54	 mov	 ecx, DWORD PTR [eax+84]
  00047	51		 push	 ecx
  00048	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0004b	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  0004e	50		 push	 eax
  0004f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00055	52		 push	 edx
  00056	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
  0005f	3b f4		 cmp	 esi, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Reset_back:

; 720  : 		}

  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx
  00069	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006f	3b ec		 cmp	 ebp, esp
  00071	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDU_Mbstatet@@@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Newpcvt$ = 8						; size = 4
?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDU_Mbstatet@@@2@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt, COMDAT
; _this$ = ecx

; 698  : 		{	// initialize codecvt pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 699  : 		if (_Newpcvt->always_noconv())

  00023	8b f4		 mov	 esi, esp
  00025	8b 4d 08	 mov	 ecx, DWORD PTR __Newpcvt$[ebp]
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?always_noconv@codecvt_base@std@@QBE_NXZ
  0002e	3b f4		 cmp	 esi, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	0f b6 c0	 movzx	 eax, al
  00038	85 c0		 test	 eax, eax
  0003a	74 0c		 je	 SHORT $LN2@Initcvt

; 700  : 			_Pcvt = 0;	// nothing to do

  0003c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 701  : 		else

  00046	eb 1b		 jmp	 SHORT $LN1@Initcvt
$LN2@Initcvt:

; 702  : 			{	// set up for nontrivial codecvt facet
; 703  : 			_Pcvt = _Newpcvt;

  00048	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR __Newpcvt$[ebp]
  0004e	89 48 38	 mov	 DWORD PTR [eax+56], ecx

; 704  : 			_Mysb::_Init();	// reset any buffering

  00051	8b f4		 mov	 esi, esp
  00053	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ
  0005c	3b f4		 cmp	 esi, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Initcvt:

; 705  : 			}
; 706  : 		}

  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	5b		 pop	 ebx
  00066	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006c	3b ec		 cmp	 ebp, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c2 04 00	 ret	 4
?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDU_Mbstatet@@@2@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
_TEXT	SEGMENT
tv147 = -500						; size = 4
tv190 = -496						; size = 4
tv204 = -492						; size = 4
tv172 = -492						; size = 4
tv197 = -488						; size = 4
tv192 = -488						; size = 4
tv188 = -488						; size = 4
tv206 = -484						; size = 4
tv205 = -484						; size = 4
tv86 = -484						; size = 4
$T2 = -476						; size = 4
$T3 = -461						; size = 1
$T4 = -449						; size = 1
$T5 = -437						; size = 1
$T6 = -425						; size = 1
$T7 = -416						; size = 12
$T8 = -393						; size = 1
$T9 = -384						; size = 12
$T10 = -364						; size = 12
$T11 = -344						; size = 12
$T12 = -324						; size = 4
$T13 = -312						; size = 4
$T14 = -300						; size = 4
__Count$15 = -96					; size = 4
__Str$16 = -84						; size = 28
__Dest$17 = -48						; size = 4
__STRING_INC$18 = -36					; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite, COMDAT
; _this$ = ecx

; 657  : 		{	// put shift to initial conversion state, as needed

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e8 01 00
	00		 sub	 esp, 488		; 000001e8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 0c fe ff
	ff		 lea	 edi, DWORD PTR [ebp-500]
  00021	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  00045	c7 85 24 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 658  : 		if (_Pcvt == 0 || !_Wrotesome)

  0004f	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00052	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00056	74 0b		 je	 SHORT $LN9@Endwrite
  00058	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	0f b6 48 3d	 movzx	 ecx, BYTE PTR [eax+61]
  0005f	85 c9		 test	 ecx, ecx
  00061	75 0c		 jne	 SHORT $LN7@Endwrite
$LN9@Endwrite:

; 659  : 			return (true);

  00063	b0 01		 mov	 al, 1
  00065	e9 09 03 00 00	 jmp	 $LN1@Endwrite

; 660  : 		else

  0006a	e9 04 03 00 00	 jmp	 $LN1@Endwrite
$LN7@Endwrite:

; 661  : 			{	// may have to put
; 662  : 			const int _STRING_INC = 8;

  0006f	c7 45 dc 08 00
	00 00		 mov	 DWORD PTR __STRING_INC$18[ebp], 8

; 663  : 			char *_Dest;
; 664  : 			if (_Traits::eq_int_type(_Traits::eof(), overflow()))

  00076	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0007b	8b f4		 mov	 esi, esp
  0007d	50		 push	 eax
  0007e	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 10		 mov	 edx, DWORD PTR [eax]
  00083	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00089	ff d0		 call	 eax
  0008b	3b f4		 cmp	 esi, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	89 85 d4 fe ff
	ff		 mov	 DWORD PTR $T14[ebp], eax
  00098	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0009d	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T13[ebp], eax
  000a3	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  000a9	51		 push	 ecx
  000aa	8d 95 c8 fe ff
	ff		 lea	 edx, DWORD PTR $T13[ebp]
  000b0	52		 push	 edx
  000b1	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  000b6	83 c4 08	 add	 esp, 8
  000b9	0f b6 c0	 movzx	 eax, al
  000bc	85 c0		 test	 eax, eax
  000be	74 07		 je	 SHORT $LN10@Endwrite

; 665  : 				return (false);

  000c0	32 c0		 xor	 al, al
  000c2	e9 ac 02 00 00	 jmp	 $LN1@Endwrite
$LN10@Endwrite:

; 666  : 
; 667  : 			string _Str(_STRING_INC, '\0');

  000c7	6a 00		 push	 0
  000c9	6a 08		 push	 8
  000cb	8d 4d ac	 lea	 ecx, DWORD PTR __Str$16[ebp]
  000ce	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000d3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
$LN4@Endwrite:

; 668  : 			for (; ; )
; 669  : 				switch (_Pcvt->unshift(_State,

  000da	8b f4		 mov	 esi, esp
  000dc	8d 45 d0	 lea	 eax, DWORD PTR __Dest$17[ebp]
  000df	50		 push	 eax
  000e0	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  000e6	51		 push	 ecx
  000e7	8d 4d ac	 lea	 ecx, DWORD PTR __Str$16[ebp]
  000ea	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  000ef	89 85 1c fe ff
	ff		 mov	 DWORD PTR tv86[ebp], eax
  000f5	8b 95 1c fe ff
	ff		 mov	 edx, DWORD PTR tv86[ebp]
  000fb	89 95 18 fe ff
	ff		 mov	 DWORD PTR tv188[ebp], edx
  00101	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00105	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR tv188[ebp]
  0010b	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  00110	8b f8		 mov	 edi, eax
  00112	8d 4d ac	 lea	 ecx, DWORD PTR __Str$16[ebp]
  00115	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  0011a	03 f8		 add	 edi, eax
  0011c	57		 push	 edi
  0011d	8d 85 94 fe ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
  00123	50		 push	 eax
  00124	8d 4d ac	 lea	 ecx, DWORD PTR __Str$16[ebp]
  00127	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  0012c	89 85 14 fe ff
	ff		 mov	 DWORD PTR tv204[ebp], eax
  00132	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR tv204[ebp]
  00138	89 8d 10 fe ff
	ff		 mov	 DWORD PTR tv190[ebp], ecx
  0013e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00142	8b 8d 10 fe ff
	ff		 mov	 ecx, DWORD PTR tv190[ebp]
  00148	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  0014d	50		 push	 eax
  0014e	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00151	83 c2 40	 add	 edx, 64			; 00000040H
  00154	52		 push	 edx
  00155	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00158	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0015b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?unshift@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z
  00161	3b f4		 cmp	 esi, esp
  00163	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00168	89 85 bc fe ff
	ff		 mov	 DWORD PTR $T12[ebp], eax
  0016e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00172	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00178	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
  0017d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00181	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  00187	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
  0018c	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR $T12[ebp]
  00192	89 8d 0c fe ff
	ff		 mov	 DWORD PTR tv147[ebp], ecx
  00198	83 bd 0c fe ff
	ff 00		 cmp	 DWORD PTR tv147[ebp], 0
  0019f	74 1b		 je	 SHORT $LN11@Endwrite
  001a1	83 bd 0c fe ff
	ff 01		 cmp	 DWORD PTR tv147[ebp], 1
  001a8	74 19		 je	 SHORT $LN12@Endwrite
  001aa	83 bd 0c fe ff
	ff 03		 cmp	 DWORD PTR tv147[ebp], 3
  001b1	0f 84 6c 01 00
	00		 je	 $LN16@Endwrite
  001b7	e9 85 01 00 00	 jmp	 $LN17@Endwrite
$LN11@Endwrite:

; 670  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))
; 671  : 				{	// test result of homing conversion
; 672  : 				case codecvt_base::ok:
; 673  : 					_Wrotesome = false;	// homed successfully

  001bc	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  001bf	c6 40 3d 00	 mov	 BYTE PTR [eax+61], 0
$LN12@Endwrite:

; 674  : 
; 675  : 				case codecvt_base::partial:	// fall through
; 676  : 					{	// put any generated bytes
; 677  : 					size_t _Count = _Dest - &*_Str.begin();

  001c3	8d 85 80 fe ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  001c9	50		 push	 eax
  001ca	8d 4d ac	 lea	 ecx, DWORD PTR __Str$16[ebp]
  001cd	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  001d2	89 85 1c fe ff
	ff		 mov	 DWORD PTR tv205[ebp], eax
  001d8	8b 8d 1c fe ff
	ff		 mov	 ecx, DWORD PTR tv205[ebp]
  001de	89 8d 18 fe ff
	ff		 mov	 DWORD PTR tv192[ebp], ecx
  001e4	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  001e8	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR tv192[ebp]
  001ee	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  001f3	8b 55 d0	 mov	 edx, DWORD PTR __Dest$17[ebp]
  001f6	2b d0		 sub	 edx, eax
  001f8	89 55 a0	 mov	 DWORD PTR __Count$15[ebp], edx
  001fb	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001ff	8d 8d 80 fe ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00205	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ

; 678  : 					if (0 < _Count && _Count !=

  0020a	83 7d a0 00	 cmp	 DWORD PTR __Count$15[ebp], 0
  0020e	76 70		 jbe	 SHORT $LN19@Endwrite
  00210	8b f4		 mov	 esi, esp
  00212	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00215	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00218	51		 push	 ecx
  00219	8b 55 a0	 mov	 edx, DWORD PTR __Count$15[ebp]
  0021c	52		 push	 edx
  0021d	6a 01		 push	 1
  0021f	8d 85 60 fe ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  00225	50		 push	 eax
  00226	8d 4d ac	 lea	 ecx, DWORD PTR __Str$16[ebp]
  00229	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  0022e	89 85 1c fe ff
	ff		 mov	 DWORD PTR tv206[ebp], eax
  00234	8b 8d 1c fe ff
	ff		 mov	 ecx, DWORD PTR tv206[ebp]
  0023a	89 8d 18 fe ff
	ff		 mov	 DWORD PTR tv197[ebp], ecx
  00240	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00244	8b 95 24 fe ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  0024a	83 ca 01	 or	 edx, 1
  0024d	89 95 24 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  00253	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR tv197[ebp]
  00259	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  0025e	50		 push	 eax
  0025f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00265	83 c4 10	 add	 esp, 16			; 00000010H
  00268	3b f4		 cmp	 esi, esp
  0026a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0026f	39 45 a0	 cmp	 DWORD PTR __Count$15[ebp], eax
  00272	74 0c		 je	 SHORT $LN19@Endwrite
  00274	c7 85 14 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv172[ebp], 1
  0027e	eb 0a		 jmp	 SHORT $LN20@Endwrite
$LN19@Endwrite:
  00280	c7 85 14 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv172[ebp], 0
$LN20@Endwrite:
  0028a	8a 85 14 fe ff
	ff		 mov	 al, BYTE PTR tv172[ebp]
  00290	88 85 77 fe ff
	ff		 mov	 BYTE PTR $T8[ebp], al
  00296	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0029d	8b 8d 24 fe ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  002a3	83 e1 01	 and	 ecx, 1
  002a6	74 12		 je	 SHORT $LN27@Endwrite
  002a8	83 a5 24 fe ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  002af	8d 8d 60 fe ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  002b5	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
$LN27@Endwrite:
  002ba	0f b6 95 77 fe
	ff ff		 movzx	 edx, BYTE PTR $T8[ebp]
  002c1	85 d2		 test	 edx, edx
  002c3	74 21		 je	 SHORT $LN13@Endwrite

; 679  : 						fwrite(&*_Str.begin(), 1, _Count, _Myfile))
; 680  : 						return (false);	// write failed

  002c5	c6 85 57 fe ff
	ff 00		 mov	 BYTE PTR $T6[ebp], 0
  002cc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002d3	8d 4d ac	 lea	 ecx, DWORD PTR __Str$16[ebp]
  002d6	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  002db	8a 85 57 fe ff
	ff		 mov	 al, BYTE PTR $T6[ebp]
  002e1	e9 8d 00 00 00	 jmp	 $LN1@Endwrite
$LN13@Endwrite:

; 681  : 					if (!_Wrotesome)

  002e6	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  002e9	0f b6 48 3d	 movzx	 ecx, BYTE PTR [eax+61]
  002ed	85 c9		 test	 ecx, ecx
  002ef	75 1e		 jne	 SHORT $LN14@Endwrite

; 682  : 						return (true);

  002f1	c6 85 4b fe ff
	ff 01		 mov	 BYTE PTR $T5[ebp], 1
  002f8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002ff	8d 4d ac	 lea	 ecx, DWORD PTR __Str$16[ebp]
  00302	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00307	8a 85 4b fe ff
	ff		 mov	 al, BYTE PTR $T5[ebp]
  0030d	eb 64		 jmp	 SHORT $LN1@Endwrite
$LN14@Endwrite:

; 683  : 					if (_Count == 0)

  0030f	83 7d a0 00	 cmp	 DWORD PTR __Count$15[ebp], 0
  00313	75 0c		 jne	 SHORT $LN15@Endwrite

; 684  : 						_Str.append(_STRING_INC, '\0');	// try with more space

  00315	6a 00		 push	 0
  00317	6a 08		 push	 8
  00319	8d 4d ac	 lea	 ecx, DWORD PTR __Str$16[ebp]
  0031c	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN15@Endwrite:

; 685  : 					break;

  00321	eb 3c		 jmp	 SHORT $LN5@Endwrite
$LN16@Endwrite:

; 686  : 					}
; 687  : 
; 688  : 				case codecvt_base::noconv:
; 689  : 					return (true);	// nothing to do

  00323	c6 85 3f fe ff
	ff 01		 mov	 BYTE PTR $T4[ebp], 1
  0032a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00331	8d 4d ac	 lea	 ecx, DWORD PTR __Str$16[ebp]
  00334	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00339	8a 85 3f fe ff
	ff		 mov	 al, BYTE PTR $T4[ebp]
  0033f	eb 32		 jmp	 SHORT $LN1@Endwrite
$LN17@Endwrite:

; 690  : 
; 691  : 				default:
; 692  : 					return (false);	// conversion failed

  00341	c6 85 33 fe ff
	ff 00		 mov	 BYTE PTR $T3[ebp], 0
  00348	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0034f	8d 4d ac	 lea	 ecx, DWORD PTR __Str$16[ebp]
  00352	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00357	8a 85 33 fe ff
	ff		 mov	 al, BYTE PTR $T3[ebp]
  0035d	eb 14		 jmp	 SHORT $LN1@Endwrite
$LN5@Endwrite:

; 693  : 				}

  0035f	e9 76 fd ff ff	 jmp	 $LN4@Endwrite

; 694  : 			}

  00364	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0036b	8d 4d ac	 lea	 ecx, DWORD PTR __Str$16[ebp]
  0036e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN1@Endwrite:

; 695  : 		}

  00373	52		 push	 edx
  00374	8b cd		 mov	 ecx, ebp
  00376	50		 push	 eax
  00377	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN32@Endwrite
  0037d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00382	58		 pop	 eax
  00383	5a		 pop	 edx
  00384	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00387	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0038e	59		 pop	 ecx
  0038f	5f		 pop	 edi
  00390	5e		 pop	 esi
  00391	5b		 pop	 ebx
  00392	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00395	33 cd		 xor	 ecx, ebp
  00397	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0039c	81 c4 f4 01 00
	00		 add	 esp, 500		; 000001f4H
  003a2	3b ec		 cmp	 ebp, esp
  003a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003a9	8b e5		 mov	 esp, ebp
  003ab	5d		 pop	 ebp
  003ac	c3		 ret	 0
  003ad	0f 1f 00	 npad	 3
$LN32@Endwrite:
  003b0	02 00 00 00	 DD	 2
  003b4	00 00 00 00	 DD	 $LN31@Endwrite
$LN31@Endwrite:
  003b8	d0 ff ff ff	 DD	 -48			; ffffffd0H
  003bc	04 00 00 00	 DD	 4
  003c0	00 00 00 00	 DD	 $LN28@Endwrite
  003c4	ac ff ff ff	 DD	 -84			; ffffffacH
  003c8	1c 00 00 00	 DD	 28			; 0000001cH
  003cc	00 00 00 00	 DD	 $LN29@Endwrite
$LN29@Endwrite:
  003d0	5f		 DB	 95			; 0000005fH
  003d1	53		 DB	 83			; 00000053H
  003d2	74		 DB	 116			; 00000074H
  003d3	72		 DB	 114			; 00000072H
  003d4	00		 DB	 0
$LN28@Endwrite:
  003d5	5f		 DB	 95			; 0000005fH
  003d6	44		 DB	 68			; 00000044H
  003d7	65		 DB	 101			; 00000065H
  003d8	73		 DB	 115			; 00000073H
  003d9	74		 DB	 116			; 00000074H
  003da	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$0:
  00000	8d 4d ac	 lea	 ecx, DWORD PTR __Str$16[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$1:
  00008	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$2:
  00013	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$3:
  0001e	8d 8d 80 fe ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$4:
  00029	8b 85 24 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  0002f	83 e0 01	 and	 eax, 1
  00032	0f 84 12 00 00
	00		 je	 $LN26@Endwrite
  00038	83 a5 24 fe ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  0003f	8d 8d 60 fe ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  00045	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
$LN26@Endwrite:
  0004a	c3		 ret	 0
__ehhandler$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ:
  0004b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0004f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00052	8b 8a 08 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-504]
  00058	33 c8		 xor	 ecx, eax
  0005a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00062	33 c8		 xor	 ecx, eax
  00064	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00069	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
  0006e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z
_TEXT	SEGMENT
tv66 = -260						; size = 4
__Nw$1 = -60						; size = 4
__Nr$2 = -48						; size = 4
__Pn$3 = -36						; size = 4
__Pb$4 = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__File$ = 8						; size = 4
__Which$ = 12						; size = 4
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Init, COMDAT
; _this$ = ecx

; 622  : 		{	// initialize to C stream _File after {new, open, close}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd fc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-260]
  00013	b9 41 00 00 00	 mov	 ecx, 65			; 00000041H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 623  : 		__PURE_APPDOMAIN_GLOBAL static _Myst _Stinit;	// initial state
; 624  : 
; 625  : 		_Closef = _Which == _Openfl;

  0002d	83 7d 0c 01	 cmp	 DWORD PTR __Which$[ebp], 1
  00031	75 0c		 jne	 SHORT $LN4@Init
  00033	c7 85 fc fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv66[ebp], 1
  0003d	eb 0a		 jmp	 SHORT $LN5@Init
$LN4@Init:
  0003f	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv66[ebp], 0
$LN5@Init:
  00049	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8a 8d fc fe ff
	ff		 mov	 cl, BYTE PTR tv66[ebp]
  00052	88 48 48	 mov	 BYTE PTR [eax+72], cl

; 626  : 		_Wrotesome = false;

  00055	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00058	c6 40 3d 00	 mov	 BYTE PTR [eax+61], 0

; 627  : 
; 628  : 		_Mysb::_Init();	// initialize stream buffer base object

  0005c	8b f4		 mov	 esi, esp
  0005e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ
  00067	3b f4		 cmp	 esi, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 629  : 
; 630  :  #ifndef _IORCNT
; 631  :   #define _IORCNT	_IOCNT	/* read and write counts are the same */
; 632  :   #define _IOWCNT _IOCNT
; 633  :  #endif /* _IORCNT */
; 634  : 
; 635  : 		if (_File != 0 && sizeof (_Elem) == 1)

  0006e	83 7d 08 00	 cmp	 DWORD PTR __File$[ebp], 0
  00072	74 70		 je	 SHORT $LN2@Init
  00074	b8 01 00 00 00	 mov	 eax, 1
  00079	85 c0		 test	 eax, eax
  0007b	74 67		 je	 SHORT $LN2@Init

; 636  : 			{	// point inside C stream with [first, first + count) buffer
; 637  : 			_Elem **_Pb = 0;

  0007d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Pb$4[ebp], 0

; 638  : 			_Elem **_Pn = 0;

  00084	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR __Pn$3[ebp], 0

; 639  : 			int *_Nr = 0;

  0008b	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR __Nr$2[ebp], 0

; 640  : 
; 641  : 			::_get_stream_buffer_pointers(

  00092	8b f4		 mov	 esi, esp
  00094	8d 45 d0	 lea	 eax, DWORD PTR __Nr$2[ebp]
  00097	50		 push	 eax
  00098	8d 4d dc	 lea	 ecx, DWORD PTR __Pn$3[ebp]
  0009b	51		 push	 ecx
  0009c	8d 55 e8	 lea	 edx, DWORD PTR __Pb$4[ebp]
  0009f	52		 push	 edx
  000a0	8b 45 08	 mov	 eax, DWORD PTR __File$[ebp]
  000a3	50		 push	 eax
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___get_stream_buffer_pointers
  000aa	83 c4 10	 add	 esp, 16			; 00000010H
  000ad	3b f4		 cmp	 esi, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 642  : 				_File,
; 643  : 				reinterpret_cast<char***>(&_Pb),
; 644  : 				reinterpret_cast<char***>(&_Pn),
; 645  : 				&_Nr);
; 646  : 			int *_Nw = _Nr;

  000b4	8b 45 d0	 mov	 eax, DWORD PTR __Nr$2[ebp]
  000b7	89 45 c4	 mov	 DWORD PTR __Nw$1[ebp], eax

; 647  : 
; 648  : 			_Mysb::_Init(_Pb, _Pn, _Nr, _Pb, _Pn, _Nw);

  000ba	8b f4		 mov	 esi, esp
  000bc	8b 45 c4	 mov	 eax, DWORD PTR __Nw$1[ebp]
  000bf	50		 push	 eax
  000c0	8b 4d dc	 mov	 ecx, DWORD PTR __Pn$3[ebp]
  000c3	51		 push	 ecx
  000c4	8b 55 e8	 mov	 edx, DWORD PTR __Pb$4[ebp]
  000c7	52		 push	 edx
  000c8	8b 45 d0	 mov	 eax, DWORD PTR __Nr$2[ebp]
  000cb	50		 push	 eax
  000cc	8b 4d dc	 mov	 ecx, DWORD PTR __Pn$3[ebp]
  000cf	51		 push	 ecx
  000d0	8b 55 e8	 mov	 edx, DWORD PTR __Pb$4[ebp]
  000d3	52		 push	 edx
  000d4	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAPAD0PAH001@Z
  000dd	3b f4		 cmp	 esi, esp
  000df	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@Init:

; 649  : 			}
; 650  : 
; 651  : 		_Myfile = _File;

  000e4	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000e7	8b 4d 08	 mov	 ecx, DWORD PTR __File$[ebp]
  000ea	89 48 4c	 mov	 DWORD PTR [eax+76], ecx

; 652  : 		_State = _Stinit;

  000ed	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A
  000f6	89 48 40	 mov	 DWORD PTR [eax+64], ecx
  000f9	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A+4
  000ff	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 653  : 		_Pcvt = 0;	// pointer to codecvt facet

  00102	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00105	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 654  : 		}

  0010c	52		 push	 edx
  0010d	8b cd		 mov	 ecx, ebp
  0010f	50		 push	 eax
  00110	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@Init
  00116	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0011b	58		 pop	 eax
  0011c	5a		 pop	 edx
  0011d	5f		 pop	 edi
  0011e	5e		 pop	 esi
  0011f	5b		 pop	 ebx
  00120	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00123	33 cd		 xor	 ecx, ebp
  00125	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012a	81 c4 04 01 00
	00		 add	 esp, 260		; 00000104H
  00130	3b ec		 cmp	 ebp, esp
  00132	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00137	8b e5		 mov	 esp, ebp
  00139	5d		 pop	 ebp
  0013a	c2 08 00	 ret	 8
  0013d	0f 1f 00	 npad	 3
$LN10@Init:
  00140	03 00 00 00	 DD	 3
  00144	00 00 00 00	 DD	 $LN9@Init
$LN9@Init:
  00148	e8 ff ff ff	 DD	 -24			; ffffffe8H
  0014c	04 00 00 00	 DD	 4
  00150	00 00 00 00	 DD	 $LN6@Init
  00154	dc ff ff ff	 DD	 -36			; ffffffdcH
  00158	04 00 00 00	 DD	 4
  0015c	00 00 00 00	 DD	 $LN7@Init
  00160	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00164	04 00 00 00	 DD	 4
  00168	00 00 00 00	 DD	 $LN8@Init
$LN8@Init:
  0016c	5f		 DB	 95			; 0000005fH
  0016d	4e		 DB	 78			; 0000004eH
  0016e	72		 DB	 114			; 00000072H
  0016f	00		 DB	 0
$LN7@Init:
  00170	5f		 DB	 95			; 0000005fH
  00171	50		 DB	 80			; 00000050H
  00172	6e		 DB	 110			; 0000006eH
  00173	00		 DB	 0
$LN6@Init:
  00174	5f		 DB	 95			; 0000005fH
  00175	50		 DB	 80			; 00000050H
  00176	62		 DB	 98			; 00000062H
  00177	00		 DB	 0
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Loc$ = 8						; size = 4
?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::imbue, COMDAT
; _this$ = ecx

; 617  : 		{	// set locale to argument (capture nontrivial codecvt facet)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 618  : 		_Initcvt(&_USE(_Loc, _Cvt));

  00023	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
  0002c	83 c4 04	 add	 esp, 4
  0002f	50		 push	 eax
  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDU_Mbstatet@@@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt

; 619  : 		}

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::imbue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
tv86 = -232						; size = 4
$T1 = -224						; size = 4
$T2 = -212						; size = 4
_this$ = -8						; size = 4
?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::sync, COMDAT
; _this$ = ecx

; 610  : 		{	// synchronize C stream with external file

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00013	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 611  : 		return (_Myfile == 0

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  0002a	74 73		 je	 SHORT $LN3@sync
  0002c	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00031	8b f4		 mov	 esi, esp
  00033	50		 push	 eax
  00034	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 11		 mov	 edx, DWORD PTR [ecx]
  00039	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0003f	ff d0		 call	 eax
  00041	3b f4		 cmp	 esi, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	89 85 2c ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0004e	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00053	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00059	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0005f	51		 push	 ecx
  00060	8d 95 20 ff ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  00066	52		 push	 edx
  00067	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0006c	83 c4 08	 add	 esp, 8
  0006f	0f b6 c0	 movzx	 eax, al
  00072	85 c0		 test	 eax, eax
  00074	75 29		 jne	 SHORT $LN3@sync
  00076	8b f4		 mov	 esi, esp
  00078	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  0007e	52		 push	 edx
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fflush
  00085	83 c4 04	 add	 esp, 4
  00088	3b f4		 cmp	 esi, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	85 c0		 test	 eax, eax
  00091	7d 0c		 jge	 SHORT $LN3@sync
  00093	c7 85 18 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR tv86[ebp], -1
  0009d	eb 0a		 jmp	 SHORT $LN4@sync
$LN3@sync:
  0009f	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv86[ebp], 0
$LN4@sync:
  000a9	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR tv86[ebp]

; 612  : 			|| _Traits::eq_int_type(_Traits::eof(), overflow())
; 613  : 			|| 0 <= fflush(_Myfile) ? 0 : -1);
; 614  : 		}

  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx
  000b2	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000b8	3b ec		 cmp	 ebp, esp
  000ba	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c3		 ret	 0
?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::sync
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z
_TEXT	SEGMENT
tv71 = -208						; size = 4
_this$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__Count$ = 12						; size = 8
?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::setbuf, COMDAT
; _this$ = ecx

; 597  : 		{	// offer _Buffer to C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 598  : 		if (_Myfile == 0 || setvbuf(_Myfile, (char *)_Buffer,

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  0002a	74 50		 je	 SHORT $LN4@setbuf
  0002c	83 7d 08 00	 cmp	 DWORD PTR __Buffer$[ebp], 0
  00030	75 14		 jne	 SHORT $LN6@setbuf
  00032	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00035	0b 45 10	 or	 eax, DWORD PTR __Count$[ebp+4]
  00038	75 0c		 jne	 SHORT $LN6@setbuf
  0003a	c7 85 30 ff ff
	ff 04 00 00 00	 mov	 DWORD PTR tv71[ebp], 4
  00044	eb 0a		 jmp	 SHORT $LN7@setbuf
$LN6@setbuf:
  00046	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv71[ebp], 0
$LN7@setbuf:
  00050	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00053	8b f4		 mov	 esi, esp
  00055	51		 push	 ecx
  00056	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv71[ebp]
  0005c	52		 push	 edx
  0005d	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00060	50		 push	 eax
  00061	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  00067	52		 push	 edx
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__setvbuf
  0006e	83 c4 10	 add	 esp, 16			; 00000010H
  00071	3b f4		 cmp	 esi, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	85 c0		 test	 eax, eax
  0007a	74 06		 je	 SHORT $LN2@setbuf
$LN4@setbuf:

; 599  : 			_Buffer == 0 && _Count == 0 ? _IONBF : _IOFBF,
; 600  : 			(size_t)_Count * sizeof (_Elem)) != 0)
; 601  : 			return (0);	// failed

  0007c	33 c0		 xor	 eax, eax
  0007e	eb 16		 jmp	 SHORT $LN1@setbuf

; 602  : 		else

  00080	eb 14		 jmp	 SHORT $LN1@setbuf
$LN2@setbuf:

; 603  : 			{	// new buffer, reinitialize pointers
; 604  : 			_Init(_Myfile, _Openfl);

  00082	6a 01		 push	 1
  00084	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00087	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0008a	51		 push	 ecx
  0008b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008e	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 605  : 			return (this);

  00093	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
$LN1@setbuf:

; 606  : 			}
; 607  : 		}

  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0009f	3b ec		 cmp	 ebp, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 0c 00	 ret	 12			; 0000000cH
?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::setbuf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
_TEXT	SEGMENT
$T1 = -252						; size = 8
__Off$ = -44						; size = 8
__Fileposition$ = -28					; size = 8
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Pos$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::seekpos, COMDAT
; _this$ = ecx

; 579  : 		{	// change position to _Pos

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 00 01 00
	00		 sub	 esp, 256		; 00000100H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 00 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-256]
  00013	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 580  : 		fpos_t _Fileposition = _POS_TYPE_TO_FPOS_T(_Pos);

  0002d	8d 4d 0c	 lea	 ecx, DWORD PTR __Pos$[ebp]
  00030	e8 00 00 00 00	 call	 ?seekpos@?$fpos@U_Mbstatet@@@std@@QBE_JXZ ; std::fpos<_Mbstatet>::seekpos
  00035	89 45 e4	 mov	 DWORD PTR __Fileposition$[ebp], eax
  00038	89 55 e8	 mov	 DWORD PTR __Fileposition$[ebp+4], edx

; 581  : 		off_type _Off = static_cast<off_type>(_Pos) - static_cast<off_type>(_Fileposition);

  0003b	8d 4d 0c	 lea	 ecx, DWORD PTR __Pos$[ebp]
  0003e	e8 00 00 00 00	 call	 ??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ ; std::fpos<_Mbstatet>::operator __int64
  00043	2b 45 e4	 sub	 eax, DWORD PTR __Fileposition$[ebp]
  00046	1b 55 e8	 sbb	 edx, DWORD PTR __Fileposition$[ebp+4]
  00049	89 45 d4	 mov	 DWORD PTR __Off$[ebp], eax
  0004c	89 55 d8	 mov	 DWORD PTR __Off$[ebp+4], edx

; 582  : 
; 583  : 		if (_Myfile == 0 || !_Endwrite()
; 584  : 			|| fsetpos(_Myfile, &_Fileposition) != 0
; 585  : 			|| (_Off != 0 && _fseeki64(_Myfile, _Off, SEEK_CUR) != 0)
; 586  : 			|| fgetpos(_Myfile, &_Fileposition) != 0)

  0004f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00052	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00056	0f 84 80 00 00
	00		 je	 $LN3@seekpos
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
  00064	0f b6 c0	 movzx	 eax, al
  00067	85 c0		 test	 eax, eax
  00069	74 71		 je	 SHORT $LN3@seekpos
  0006b	8b f4		 mov	 esi, esp
  0006d	8d 45 e4	 lea	 eax, DWORD PTR __Fileposition$[ebp]
  00070	50		 push	 eax
  00071	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  00077	52		 push	 edx
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fsetpos
  0007e	83 c4 08	 add	 esp, 8
  00081	3b f4		 cmp	 esi, esp
  00083	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00088	85 c0		 test	 eax, eax
  0008a	75 50		 jne	 SHORT $LN3@seekpos
  0008c	8b 45 d4	 mov	 eax, DWORD PTR __Off$[ebp]
  0008f	0b 45 d8	 or	 eax, DWORD PTR __Off$[ebp+4]
  00092	74 27		 je	 SHORT $LN4@seekpos
  00094	8b f4		 mov	 esi, esp
  00096	6a 01		 push	 1
  00098	8b 45 d8	 mov	 eax, DWORD PTR __Off$[ebp+4]
  0009b	50		 push	 eax
  0009c	8b 4d d4	 mov	 ecx, DWORD PTR __Off$[ebp]
  0009f	51		 push	 ecx
  000a0	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  000a3	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  000a6	50		 push	 eax
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fseeki64
  000ad	83 c4 10	 add	 esp, 16			; 00000010H
  000b0	3b f4		 cmp	 esi, esp
  000b2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b7	85 c0		 test	 eax, eax
  000b9	75 21		 jne	 SHORT $LN3@seekpos
$LN4@seekpos:
  000bb	8b f4		 mov	 esi, esp
  000bd	8d 45 e4	 lea	 eax, DWORD PTR __Fileposition$[ebp]
  000c0	50		 push	 eax
  000c1	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000c4	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  000c7	52		 push	 edx
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetpos
  000ce	83 c4 08	 add	 esp, 8
  000d1	3b f4		 cmp	 esi, esp
  000d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d8	85 c0		 test	 eax, eax
  000da	74 19		 je	 SHORT $LN2@seekpos
$LN3@seekpos:

; 587  : 			return (pos_type(_BADOFF));	// report failure

  000dc	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?_BADOFF@std@@3_JB
  000e1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e4	51		 push	 ecx
  000e5	8b 10		 mov	 edx, DWORD PTR [eax]
  000e7	52		 push	 edx
  000e8	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000eb	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  000f0	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000f3	eb 43		 jmp	 SHORT $LN1@seekpos
$LN2@seekpos:

; 588  : 
; 589  : 		_State = _POS_TYPE_TO_STATE(_Pos);

  000f5	8d 85 04 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  000fb	50		 push	 eax
  000fc	8d 4d 0c	 lea	 ecx, DWORD PTR __Pos$[ebp]
  000ff	e8 00 00 00 00	 call	 ?state@?$fpos@U_Mbstatet@@@std@@QBE?AU_Mbstatet@@XZ ; std::fpos<_Mbstatet>::state
  00104	8b 08		 mov	 ecx, DWORD PTR [eax]
  00106	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00109	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	89 48 40	 mov	 DWORD PTR [eax+64], ecx
  0010f	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 590  : 
; 591  : 		_Reset_back();	// revert from _Mychar buffer, discarding any putback

  00112	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00115	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 592  : 		return (_POS_TYPE_FROM_STATE(pos_type, _State,

  0011a	8b 45 e8	 mov	 eax, DWORD PTR __Fileposition$[ebp+4]
  0011d	50		 push	 eax
  0011e	8b 4d e4	 mov	 ecx, DWORD PTR __Fileposition$[ebp]
  00121	51		 push	 ecx
  00122	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00125	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00128	50		 push	 eax
  00129	8b 4a 40	 mov	 ecx, DWORD PTR [edx+64]
  0012c	51		 push	 ecx
  0012d	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00130	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QAE@U_Mbstatet@@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  00135	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@seekpos:

; 593  : 			_Fileposition));	// return new position
; 594  : 		}

  00138	52		 push	 edx
  00139	8b cd		 mov	 ecx, ebp
  0013b	50		 push	 eax
  0013c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@seekpos
  00142	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00147	58		 pop	 eax
  00148	5a		 pop	 edx
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	5b		 pop	 ebx
  0014c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014f	33 cd		 xor	 ecx, ebp
  00151	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00156	81 c4 00 01 00
	00		 add	 esp, 256		; 00000100H
  0015c	3b ec		 cmp	 ebp, esp
  0015e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00163	8b e5		 mov	 esp, ebp
  00165	5d		 pop	 ebp
  00166	c2 20 00	 ret	 32			; 00000020H
  00169	0f 1f 00	 npad	 3
$LN8@seekpos:
  0016c	01 00 00 00	 DD	 1
  00170	00 00 00 00	 DD	 $LN7@seekpos
$LN7@seekpos:
  00174	e4 ff ff ff	 DD	 -28			; ffffffe4H
  00178	08 00 00 00	 DD	 8
  0017c	00 00 00 00	 DD	 $LN6@seekpos
$LN6@seekpos:
  00180	5f		 DB	 95			; 0000005fH
  00181	46		 DB	 70			; 00000046H
  00182	69		 DB	 105			; 00000069H
  00183	6c		 DB	 108			; 0000006cH
  00184	65		 DB	 101			; 00000065H
  00185	70		 DB	 112			; 00000070H
  00186	6f		 DB	 111			; 0000006fH
  00187	73		 DB	 115			; 00000073H
  00188	69		 DB	 105			; 00000069H
  00189	74		 DB	 116			; 00000074H
  0018a	69		 DB	 105			; 00000069H
  0018b	6f		 DB	 111			; 0000006fH
  0018c	6e		 DB	 110			; 0000006eH
  0018d	00		 DB	 0
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
_TEXT	SEGMENT
__Fileposition$ = -28					; size = 8
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 8
__Way$ = 20						; size = 4
___formal$ = 24						; size = 4
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::seekoff, COMDAT
; _this$ = ecx

; 557  : 		{	// change position by _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00013	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 558  : 		fpos_t _Fileposition;
; 559  : 
; 560  : 		if (_Mysb::gptr() == &_Mychar	// something putback
; 561  : 			&& _Way == ios_base::cur	// a relative seek
; 562  : 			&& _Pcvt == 0)	// not converting

  0002d	8b f4		 mov	 esi, esp
  0002f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00038	3b f4		 cmp	 esi, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00045	3b c1		 cmp	 eax, ecx
  00047	75 21		 jne	 SHORT $LN2@seekoff
  00049	83 7d 14 01	 cmp	 DWORD PTR __Way$[ebp], 1
  0004d	75 1b		 jne	 SHORT $LN2@seekoff
  0004f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00052	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00056	75 12		 jne	 SHORT $LN2@seekoff

; 563  : 			_Off -= (off_type)sizeof (_Elem);	// back up over _Elem bytes

  00058	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  0005b	83 e8 01	 sub	 eax, 1
  0005e	8b 4d 10	 mov	 ecx, DWORD PTR __Off$[ebp+4]
  00061	83 d9 00	 sbb	 ecx, 0
  00064	89 45 0c	 mov	 DWORD PTR __Off$[ebp], eax
  00067	89 4d 10	 mov	 DWORD PTR __Off$[ebp+4], ecx
$LN2@seekoff:

; 564  : 
; 565  : 		if (_Myfile == 0 || !_Endwrite()
; 566  : 			|| ((_Off != 0 || _Way != ios_base::cur)
; 567  : 				&& _fseeki64(_Myfile, _Off, _Way) != 0)
; 568  : 			|| fgetpos(_Myfile, &_Fileposition) != 0)

  0006a	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00071	74 67		 je	 SHORT $LN4@seekoff
  00073	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
  0007b	0f b6 c0	 movzx	 eax, al
  0007e	85 c0		 test	 eax, eax
  00080	74 58		 je	 SHORT $LN4@seekoff
  00082	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  00085	0b 45 10	 or	 eax, DWORD PTR __Off$[ebp+4]
  00088	75 06		 jne	 SHORT $LN6@seekoff
  0008a	83 7d 14 01	 cmp	 DWORD PTR __Way$[ebp], 1
  0008e	74 29		 je	 SHORT $LN5@seekoff
$LN6@seekoff:
  00090	8b f4		 mov	 esi, esp
  00092	8b 45 14	 mov	 eax, DWORD PTR __Way$[ebp]
  00095	50		 push	 eax
  00096	8b 4d 10	 mov	 ecx, DWORD PTR __Off$[ebp+4]
  00099	51		 push	 ecx
  0009a	8b 55 0c	 mov	 edx, DWORD PTR __Off$[ebp]
  0009d	52		 push	 edx
  0009e	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000a1	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000a4	51		 push	 ecx
  000a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fseeki64
  000ab	83 c4 10	 add	 esp, 16			; 00000010H
  000ae	3b f4		 cmp	 esi, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b5	85 c0		 test	 eax, eax
  000b7	75 21		 jne	 SHORT $LN4@seekoff
$LN5@seekoff:
  000b9	8b f4		 mov	 esi, esp
  000bb	8d 45 e4	 lea	 eax, DWORD PTR __Fileposition$[ebp]
  000be	50		 push	 eax
  000bf	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000c2	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  000c5	52		 push	 edx
  000c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetpos
  000cc	83 c4 08	 add	 esp, 8
  000cf	3b f4		 cmp	 esi, esp
  000d1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d6	85 c0		 test	 eax, eax
  000d8	74 19		 je	 SHORT $LN3@seekoff
$LN4@seekoff:

; 569  : 			return (pos_type(_BADOFF));	// report failure

  000da	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?_BADOFF@std@@3_JB
  000df	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e2	51		 push	 ecx
  000e3	8b 10		 mov	 edx, DWORD PTR [eax]
  000e5	52		 push	 edx
  000e6	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000e9	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  000ee	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000f1	eb 26		 jmp	 SHORT $LN1@seekoff
$LN3@seekoff:

; 570  : 
; 571  : 		_Reset_back();	// revert from _Mychar buffer, discarding any putback

  000f3	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000f6	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 572  : 		return (_POS_TYPE_FROM_STATE(pos_type, _State,

  000fb	8b 45 e8	 mov	 eax, DWORD PTR __Fileposition$[ebp+4]
  000fe	50		 push	 eax
  000ff	8b 4d e4	 mov	 ecx, DWORD PTR __Fileposition$[ebp]
  00102	51		 push	 ecx
  00103	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00106	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00109	50		 push	 eax
  0010a	8b 4a 40	 mov	 ecx, DWORD PTR [edx+64]
  0010d	51		 push	 ecx
  0010e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00111	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QAE@U_Mbstatet@@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  00116	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@seekoff:

; 573  : 			_Fileposition));	// return new position
; 574  : 		}

  00119	52		 push	 edx
  0011a	8b cd		 mov	 ecx, ebp
  0011c	50		 push	 eax
  0011d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@seekoff
  00123	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00128	58		 pop	 eax
  00129	5a		 pop	 edx
  0012a	5f		 pop	 edi
  0012b	5e		 pop	 esi
  0012c	5b		 pop	 ebx
  0012d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00130	33 cd		 xor	 ecx, ebp
  00132	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00137	81 c4 e0 00 00
	00		 add	 esp, 224		; 000000e0H
  0013d	3b ec		 cmp	 ebp, esp
  0013f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00144	8b e5		 mov	 esp, ebp
  00146	5d		 pop	 ebp
  00147	c2 14 00	 ret	 20			; 00000014H
  0014a	66 90		 npad	 2
$LN10@seekoff:
  0014c	01 00 00 00	 DD	 1
  00150	00 00 00 00	 DD	 $LN9@seekoff
$LN9@seekoff:
  00154	e4 ff ff ff	 DD	 -28			; ffffffe4H
  00158	08 00 00 00	 DD	 8
  0015c	00 00 00 00	 DD	 $LN8@seekoff
$LN8@seekoff:
  00160	5f		 DB	 95			; 0000005fH
  00161	46		 DB	 70			; 00000046H
  00162	69		 DB	 105			; 00000069H
  00163	6c		 DB	 108			; 0000006cH
  00164	65		 DB	 101			; 00000065H
  00165	70		 DB	 112			; 00000070H
  00166	6f		 DB	 111			; 0000006fH
  00167	73		 DB	 115			; 00000073H
  00168	69		 DB	 105			; 00000069H
  00169	74		 DB	 116			; 00000074H
  0016a	69		 DB	 105			; 00000069H
  0016b	6f		 DB	 111			; 0000006fH
  0016c	6e		 DB	 110			; 0000006eH
  0016d	00		 DB	 0
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
tv180 = -508						; size = 4
tv239 = -504						; size = 4
tv249 = -500						; size = 4
tv246 = -496						; size = 4
tv244 = -496						; size = 4
tv241 = -496						; size = 4
tv237 = -496						; size = 4
tv252 = -492						; size = 4
tv251 = -492						; size = 4
tv250 = -492						; size = 4
tv141 = -492						; size = 4
tv139 = -492						; size = 4
$T2 = -484						; size = 4
$T3 = -472						; size = 4
$T4 = -460						; size = 12
$T5 = -440						; size = 12
$T6 = -420						; size = 4
$T7 = -408						; size = 12
$T8 = -388						; size = 12
$T9 = -368						; size = 12
$T10 = -348						; size = 4
$T11 = -336						; size = 4
__Meta$12 = -132					; size = 4
__Nleft$13 = -120					; size = 4
__Src$14 = -108						; size = 4
__Dest$15 = -96						; size = 4
__Ch$16 = -81						; size = 1
__Str$17 = -72						; size = 28
__Ch$18 = -33						; size = 1
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::uflow, COMDAT
; _this$ = ecx

; 490  : 		{	// get an element from stream, point past it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec f0 01 00
	00		 sub	 esp, 496		; 000001f0H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 04 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-508]
  00021	b9 7c 00 00 00	 mov	 ecx, 124		; 0000007cH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 491  : 		if (_Mysb::gptr() != 0
; 492  : 			&& _Mysb::gptr() < _Mysb::egptr())

  00045	8b f4		 mov	 esi, esp
  00047	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00050	3b f4		 cmp	 esi, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	85 c0		 test	 eax, eax
  00059	74 4c		 je	 SHORT $LN10@uflow
  0005b	8b f4		 mov	 esi, esp
  0005d	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00066	3b f4		 cmp	 esi, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b f0		 mov	 esi, eax
  0006f	8b fc		 mov	 edi, esp
  00071	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0007a	3b fc		 cmp	 edi, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00081	3b f0		 cmp	 esi, eax
  00083	73 22		 jae	 SHORT $LN10@uflow

; 493  : 			return (_Traits::to_int_type(

  00085	8b f4		 mov	 esi, esp
  00087	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
  00090	3b f4		 cmp	 esi, esp
  00092	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  0009d	83 c4 04	 add	 esp, 4
  000a0	e9 a7 03 00 00	 jmp	 $LN1@uflow
  000a5	eb 13		 jmp	 SHORT $LN11@uflow
$LN10@uflow:

; 494  : 				*_Mysb::_Gninc()));	// return buffered
; 495  : 		else if (_Myfile == 0)

  000a7	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  000ae	75 0a		 jne	 SHORT $LN11@uflow

; 496  : 			return (_Traits::eof());	// no open C stream, fail

  000b0	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000b5	e9 92 03 00 00	 jmp	 $LN1@uflow
$LN11@uflow:

; 497  : 		_Reset_back();	// revert from _Mychar buffer

  000ba	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bd	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 498  : 		if (_Pcvt == 0)

  000c2	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000c5	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  000c9	75 4d		 jne	 SHORT $LN13@uflow

; 499  : 			{	// no codecvt facet, just get it
; 500  : 			_Elem _Ch = 0;

  000cb	c6 45 df 00	 mov	 BYTE PTR __Ch$18[ebp], 0

; 501  : 			return (_Fgetc(_Ch, _Myfile) ? _Traits::to_int_type(_Ch)

  000cf	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000d2	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000d5	51		 push	 ecx
  000d6	8d 55 df	 lea	 edx, DWORD PTR __Ch$18[ebp]
  000d9	52		 push	 edx
  000da	e8 00 00 00 00	 call	 ??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z ; std::_Fgetc<char>
  000df	83 c4 08	 add	 esp, 8
  000e2	0f b6 c0	 movzx	 eax, al
  000e5	85 c0		 test	 eax, eax
  000e7	74 14		 je	 SHORT $LN23@uflow
  000e9	8d 4d df	 lea	 ecx, DWORD PTR __Ch$18[ebp]
  000ec	51		 push	 ecx
  000ed	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  000f2	83 c4 04	 add	 esp, 4
  000f5	89 85 14 fe ff
	ff		 mov	 DWORD PTR tv139[ebp], eax
  000fb	eb 0b		 jmp	 SHORT $LN24@uflow
$LN23@uflow:
  000fd	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00102	89 85 14 fe ff
	ff		 mov	 DWORD PTR tv139[ebp], eax
$LN24@uflow:
  00108	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR tv139[ebp]
  0010e	e9 39 03 00 00	 jmp	 $LN1@uflow

; 502  : 				: _Traits::eof());
; 503  : 			}
; 504  : 		else

  00113	e9 34 03 00 00	 jmp	 $LN1@uflow
$LN13@uflow:

; 505  : 			{	// build string until codecvt succeeds
; 506  : 			string _Str;

  00118	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  0011b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00120	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
$LN4@uflow:

; 507  : 
; 508  : 			for (; ; )
; 509  : 				{	// get using codecvt facet
; 510  : 				_Elem _Ch, *_Dest;
; 511  : 				const char *_Src;
; 512  : 				int _Nleft;
; 513  : 				int _Meta = fgetc(_Myfile);

  00127	8b f4		 mov	 esi, esp
  00129	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0012c	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0012f	51		 push	 ecx
  00130	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  00136	83 c4 04	 add	 esp, 4
  00139	3b f4		 cmp	 esi, esp
  0013b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00140	89 85 7c ff ff
	ff		 mov	 DWORD PTR __Meta$12[ebp], eax

; 514  : 
; 515  : 				if (_Meta == EOF)

  00146	83 bd 7c ff ff
	ff ff		 cmp	 DWORD PTR __Meta$12[ebp], -1
  0014d	75 25		 jne	 SHORT $LN15@uflow

; 516  : 					return (_Traits::eof());	// partial char?

  0014f	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00154	89 85 b0 fe ff
	ff		 mov	 DWORD PTR $T11[ebp], eax
  0015a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00161	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  00164	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00169	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR $T11[ebp]
  0016f	e9 d8 02 00 00	 jmp	 $LN1@uflow
$LN15@uflow:

; 517  : 
; 518  : 				_Str.append(1, (char)_Meta);	// append byte and convert

  00174	0f b6 85 7c ff
	ff ff		 movzx	 eax, BYTE PTR __Meta$12[ebp]
  0017b	50		 push	 eax
  0017c	6a 01		 push	 1
  0017e	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  00181	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 519  : 				switch (_Pcvt->in(_State,

  00186	8b f4		 mov	 esi, esp
  00188	8d 45 a0	 lea	 eax, DWORD PTR __Dest$15[ebp]
  0018b	50		 push	 eax
  0018c	8d 4d b0	 lea	 ecx, DWORD PTR __Ch$16[ebp+1]
  0018f	51		 push	 ecx
  00190	8d 55 af	 lea	 edx, DWORD PTR __Ch$16[ebp]
  00193	52		 push	 edx
  00194	8d 45 94	 lea	 eax, DWORD PTR __Src$14[ebp]
  00197	50		 push	 eax
  00198	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  0019e	51		 push	 ecx
  0019f	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  001a2	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  001a7	89 85 14 fe ff
	ff		 mov	 DWORD PTR tv141[ebp], eax
  001ad	8b 95 14 fe ff
	ff		 mov	 edx, DWORD PTR tv141[ebp]
  001b3	89 95 10 fe ff
	ff		 mov	 DWORD PTR tv237[ebp], edx
  001b9	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001bd	8b 8d 10 fe ff
	ff		 mov	 ecx, DWORD PTR tv237[ebp]
  001c3	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  001c8	8b f8		 mov	 edi, eax
  001ca	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  001cd	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  001d2	03 f8		 add	 edi, eax
  001d4	57		 push	 edi
  001d5	8d 85 7c fe ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  001db	50		 push	 eax
  001dc	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  001df	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  001e4	89 85 0c fe ff
	ff		 mov	 DWORD PTR tv249[ebp], eax
  001ea	8b 8d 0c fe ff
	ff		 mov	 ecx, DWORD PTR tv249[ebp]
  001f0	89 8d 08 fe ff
	ff		 mov	 DWORD PTR tv239[ebp], ecx
  001f6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  001fa	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR tv239[ebp]
  00200	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  00205	50		 push	 eax
  00206	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00209	83 c2 40	 add	 edx, 64			; 00000040H
  0020c	52		 push	 edx
  0020d	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00210	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00213	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?in@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z
  00219	3b f4		 cmp	 esi, esp
  0021b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00220	89 85 a4 fe ff
	ff		 mov	 DWORD PTR $T10[ebp], eax
  00226	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0022a	8d 8d 7c fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00230	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
  00235	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00239	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  0023f	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
  00244	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR $T10[ebp]
  0024a	89 8d 04 fe ff
	ff		 mov	 DWORD PTR tv180[ebp], ecx
  00250	83 bd 04 fe ff
	ff 00		 cmp	 DWORD PTR tv180[ebp], 0
  00257	0f 8c b9 01 00
	00		 jl	 $LN21@uflow
  0025d	83 bd 04 fe ff
	ff 01		 cmp	 DWORD PTR tv180[ebp], 1
  00264	7e 12		 jle	 SHORT $LN16@uflow
  00266	83 bd 04 fe ff
	ff 03		 cmp	 DWORD PTR tv180[ebp], 3
  0026d	0f 84 18 01 00
	00		 je	 $LN19@uflow
  00273	e9 9e 01 00 00	 jmp	 $LN21@uflow
$LN16@uflow:

; 520  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Src,
; 521  : 					&_Ch, &_Ch + 1, _Dest))
; 522  : 					{	// test result of converting one element
; 523  : 				case codecvt_base::partial:
; 524  : 				case codecvt_base::ok:
; 525  : 					if (_Dest != &_Ch)

  00278	8d 45 af	 lea	 eax, DWORD PTR __Ch$16[ebp]
  0027b	39 45 a0	 cmp	 DWORD PTR __Dest$15[ebp], eax
  0027e	0f 84 b3 00 00
	00		 je	 $LN17@uflow

; 526  : 						{	// got an element, put back excess and deliver it
; 527  : 						_Nleft = (int)(&*_Str.begin() + _Str.size() - _Src);

  00284	8d 85 68 fe ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  0028a	50		 push	 eax
  0028b	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  0028e	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  00293	89 85 14 fe ff
	ff		 mov	 DWORD PTR tv250[ebp], eax
  00299	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR tv250[ebp]
  0029f	89 8d 10 fe ff
	ff		 mov	 DWORD PTR tv241[ebp], ecx
  002a5	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  002a9	8b 8d 10 fe ff
	ff		 mov	 ecx, DWORD PTR tv241[ebp]
  002af	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  002b4	8b f0		 mov	 esi, eax
  002b6	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  002b9	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  002be	03 f0		 add	 esi, eax
  002c0	2b 75 94	 sub	 esi, DWORD PTR __Src$14[ebp]
  002c3	89 75 88	 mov	 DWORD PTR __Nleft$13[ebp], esi
  002c6	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  002ca	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  002d0	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
$LN9@uflow:

; 528  : 						for (; 0 < _Nleft; )

  002d5	83 7d 88 00	 cmp	 DWORD PTR __Nleft$13[ebp], 0
  002d9	7e 2e		 jle	 SHORT $LN8@uflow

; 529  : 							ungetc(_Src[--_Nleft], _Myfile);

  002db	8b 45 88	 mov	 eax, DWORD PTR __Nleft$13[ebp]
  002de	83 e8 01	 sub	 eax, 1
  002e1	89 45 88	 mov	 DWORD PTR __Nleft$13[ebp], eax
  002e4	8b f4		 mov	 esi, esp
  002e6	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  002e9	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  002ec	52		 push	 edx
  002ed	8b 45 94	 mov	 eax, DWORD PTR __Src$14[ebp]
  002f0	03 45 88	 add	 eax, DWORD PTR __Nleft$13[ebp]
  002f3	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  002f6	51		 push	 ecx
  002f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ungetc
  002fd	83 c4 08	 add	 esp, 8
  00300	3b f4		 cmp	 esi, esp
  00302	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00307	eb cc		 jmp	 SHORT $LN9@uflow
$LN8@uflow:

; 530  : 						return (_Traits::to_int_type(_Ch));

  00309	8d 45 af	 lea	 eax, DWORD PTR __Ch$16[ebp]
  0030c	50		 push	 eax
  0030d	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  00312	83 c4 04	 add	 esp, 4
  00315	89 85 5c fe ff
	ff		 mov	 DWORD PTR $T6[ebp], eax
  0031b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00322	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  00325	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0032a	8b 85 5c fe ff
	ff		 mov	 eax, DWORD PTR $T6[ebp]
  00330	e9 17 01 00 00	 jmp	 $LN1@uflow

; 531  : 						}
; 532  : 					else

  00335	eb 4f		 jmp	 SHORT $LN18@uflow
$LN17@uflow:

; 533  : 						_Str.erase((size_t)0,	// partial, discard used input

  00337	8d 85 48 fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  0033d	50		 push	 eax
  0033e	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  00341	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  00346	89 85 14 fe ff
	ff		 mov	 DWORD PTR tv251[ebp], eax
  0034c	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR tv251[ebp]
  00352	89 8d 10 fe ff
	ff		 mov	 DWORD PTR tv244[ebp], ecx
  00358	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0035c	8b 8d 10 fe ff
	ff		 mov	 ecx, DWORD PTR tv244[ebp]
  00362	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  00367	8b 55 94	 mov	 edx, DWORD PTR __Src$14[ebp]
  0036a	2b d0		 sub	 edx, eax
  0036c	52		 push	 edx
  0036d	6a 00		 push	 0
  0036f	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  00372	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00377	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0037b	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00381	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
$LN18@uflow:

; 534  : 							(size_t)(_Src - &*_Str.begin()));
; 535  : 					break;

  00386	e9 ad 00 00 00	 jmp	 $LN5@uflow
$LN19@uflow:

; 536  : 
; 537  : 				case codecvt_base::noconv:
; 538  : 					if (_Str.size() < sizeof (_Elem))

  0038b	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  0038e	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00393	83 f8 01	 cmp	 eax, 1
  00396	73 05		 jae	 SHORT $LN20@uflow

; 539  : 						break;	// no conversion, but need more chars

  00398	e9 9b 00 00 00	 jmp	 $LN5@uflow
$LN20@uflow:

; 540  : 
; 541  : 					_CRT_SECURE_MEMCPY(&_Ch, sizeof (_Elem), &*_Str.begin(),

  0039d	6a 01		 push	 1
  0039f	8d 85 34 fe ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  003a5	50		 push	 eax
  003a6	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  003a9	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  003ae	89 85 14 fe ff
	ff		 mov	 DWORD PTR tv252[ebp], eax
  003b4	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR tv252[ebp]
  003ba	89 8d 10 fe ff
	ff		 mov	 DWORD PTR tv246[ebp], ecx
  003c0	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  003c4	8b 8d 10 fe ff
	ff		 mov	 ecx, DWORD PTR tv246[ebp]
  003ca	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  003cf	50		 push	 eax
  003d0	6a 01		 push	 1
  003d2	8d 55 af	 lea	 edx, DWORD PTR __Ch$16[ebp]
  003d5	52		 push	 edx
  003d6	e8 00 00 00 00	 call	 _memcpy_s
  003db	83 c4 10	 add	 esp, 16			; 00000010H
  003de	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  003e2	8d 8d 34 fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  003e8	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ

; 542  : 						sizeof (_Elem));	// copy raw bytes to element
; 543  : 
; 544  : 					return (_Traits::to_int_type(_Ch));	// return result

  003ed	8d 45 af	 lea	 eax, DWORD PTR __Ch$16[ebp]
  003f0	50		 push	 eax
  003f1	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  003f6	83 c4 04	 add	 esp, 4
  003f9	89 85 28 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  003ff	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00406	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  00409	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0040e	8b 85 28 fe ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  00414	eb 36		 jmp	 SHORT $LN1@uflow
$LN21@uflow:

; 545  : 
; 546  : 				default:
; 547  : 					return (_Traits::eof());	// conversion failed

  00416	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0041b	89 85 1c fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00421	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00428	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  0042b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00430	8b 85 1c fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00436	eb 14		 jmp	 SHORT $LN1@uflow
$LN5@uflow:

; 548  : 					}
; 549  : 				}

  00438	e9 ea fc ff ff	 jmp	 $LN4@uflow

; 550  : 			}

  0043d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00444	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  00447	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN1@uflow:

; 551  : 		}

  0044c	52		 push	 edx
  0044d	8b cd		 mov	 ecx, ebp
  0044f	50		 push	 eax
  00450	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN38@uflow
  00456	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0045b	58		 pop	 eax
  0045c	5a		 pop	 edx
  0045d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00460	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00467	59		 pop	 ecx
  00468	5f		 pop	 edi
  00469	5e		 pop	 esi
  0046a	5b		 pop	 ebx
  0046b	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0046e	33 cd		 xor	 ecx, ebp
  00470	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00475	81 c4 fc 01 00
	00		 add	 esp, 508		; 000001fcH
  0047b	3b ec		 cmp	 ebp, esp
  0047d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00482	8b e5		 mov	 esp, ebp
  00484	5d		 pop	 ebp
  00485	c3		 ret	 0
  00486	66 90		 npad	 2
$LN38@uflow:
  00488	05 00 00 00	 DD	 5
  0048c	00 00 00 00	 DD	 $LN37@uflow
$LN37@uflow:
  00490	df ff ff ff	 DD	 -33			; ffffffdfH
  00494	01 00 00 00	 DD	 1
  00498	00 00 00 00	 DD	 $LN31@uflow
  0049c	b8 ff ff ff	 DD	 -72			; ffffffb8H
  004a0	1c 00 00 00	 DD	 28			; 0000001cH
  004a4	00 00 00 00	 DD	 $LN32@uflow
  004a8	af ff ff ff	 DD	 -81			; ffffffafH
  004ac	01 00 00 00	 DD	 1
  004b0	00 00 00 00	 DD	 $LN33@uflow
  004b4	a0 ff ff ff	 DD	 -96			; ffffffa0H
  004b8	04 00 00 00	 DD	 4
  004bc	00 00 00 00	 DD	 $LN34@uflow
  004c0	94 ff ff ff	 DD	 -108			; ffffff94H
  004c4	04 00 00 00	 DD	 4
  004c8	00 00 00 00	 DD	 $LN35@uflow
$LN35@uflow:
  004cc	5f		 DB	 95			; 0000005fH
  004cd	53		 DB	 83			; 00000053H
  004ce	72		 DB	 114			; 00000072H
  004cf	63		 DB	 99			; 00000063H
  004d0	00		 DB	 0
$LN34@uflow:
  004d1	5f		 DB	 95			; 0000005fH
  004d2	44		 DB	 68			; 00000044H
  004d3	65		 DB	 101			; 00000065H
  004d4	73		 DB	 115			; 00000073H
  004d5	74		 DB	 116			; 00000074H
  004d6	00		 DB	 0
$LN33@uflow:
  004d7	5f		 DB	 95			; 0000005fH
  004d8	43		 DB	 67			; 00000043H
  004d9	68		 DB	 104			; 00000068H
  004da	00		 DB	 0
$LN32@uflow:
  004db	5f		 DB	 95			; 0000005fH
  004dc	53		 DB	 83			; 00000053H
  004dd	74		 DB	 116			; 00000074H
  004de	72		 DB	 114			; 00000072H
  004df	00		 DB	 0
$LN31@uflow:
  004e0	5f		 DB	 95			; 0000005fH
  004e1	43		 DB	 67			; 00000043H
  004e2	68		 DB	 104			; 00000068H
  004e3	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$0:
  00000	8d 4d b8	 lea	 ecx, DWORD PTR __Str$17[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$1:
  00008	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$2:
  00013	8d 8d 7c fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$3:
  0001e	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$4:
  00029	8d 8d 48 fe ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  0002f	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$5:
  00034	8d 8d 34 fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  0003a	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ:
  0003f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00043	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00046	8b 8a 00 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-512]
  0004c	33 c8		 xor	 ecx, eax
  0004e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00053	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00056	33 c8		 xor	 ecx, eax
  00058	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
  00062	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::uflow
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
$T1 = -228						; size = 4
__Meta$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::underflow, COMDAT
; _this$ = ecx

; 475  : 		{	// get an element from stream, but don't point past it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00013	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 476  : 		int_type _Meta;
; 477  : 		if (_Mysb::gptr() != 0
; 478  : 			&& _Mysb::gptr() < _Mysb::egptr())

  0002d	8b f4		 mov	 esi, esp
  0002f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00038	3b f4		 cmp	 esi, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	85 c0		 test	 eax, eax
  00041	74 49		 je	 SHORT $LN2@underflow
  00043	8b f4		 mov	 esi, esp
  00045	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0004e	3b f4		 cmp	 esi, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b f0		 mov	 esi, eax
  00057	8b fc		 mov	 edi, esp
  00059	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00062	3b fc		 cmp	 edi, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	3b f0		 cmp	 esi, eax
  0006b	73 1f		 jae	 SHORT $LN2@underflow

; 479  : 			return (_Traits::to_int_type(*_Mysb::gptr()));	// return buffered

  0006d	8b f4		 mov	 esi, esp
  0006f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00078	3b f4		 cmp	 esi, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  00085	83 c4 04	 add	 esp, 4
  00088	eb 64		 jmp	 SHORT $LN1@underflow
  0008a	eb 62		 jmp	 SHORT $LN1@underflow
$LN2@underflow:

; 480  : 		else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))

  0008c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0008f	8b 10		 mov	 edx, DWORD PTR [eax]
  00091	8b f4		 mov	 esi, esp
  00093	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00099	ff d0		 call	 eax
  0009b	3b f4		 cmp	 esi, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a2	89 45 e8	 mov	 DWORD PTR __Meta$[ebp], eax
  000a5	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000aa	89 85 1c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  000b0	8d 4d e8	 lea	 ecx, DWORD PTR __Meta$[ebp]
  000b3	51		 push	 ecx
  000b4	8d 95 1c ff ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  000ba	52		 push	 edx
  000bb	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  000c0	83 c4 08	 add	 esp, 8
  000c3	0f b6 c0	 movzx	 eax, al
  000c6	85 c0		 test	 eax, eax
  000c8	74 07		 je	 SHORT $LN4@underflow

; 481  : 			return (_Meta);	// uflow failed, return EOF

  000ca	8b 45 e8	 mov	 eax, DWORD PTR __Meta$[ebp]
  000cd	eb 1f		 jmp	 SHORT $LN1@underflow

; 482  : 		else

  000cf	eb 1d		 jmp	 SHORT $LN1@underflow
$LN4@underflow:

; 483  : 			{	// get a char, don't point past it
; 484  : 			pbackfail(_Meta);

  000d1	8b f4		 mov	 esi, esp
  000d3	8b 45 e8	 mov	 eax, DWORD PTR __Meta$[ebp]
  000d6	50		 push	 eax
  000d7	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	8b 11		 mov	 edx, DWORD PTR [ecx]
  000dc	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000df	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000e2	ff d0		 call	 eax
  000e4	3b f4		 cmp	 esi, esp
  000e6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 485  : 			return (_Meta);

  000eb	8b 45 e8	 mov	 eax, DWORD PTR __Meta$[ebp]
$LN1@underflow:

; 486  : 			}
; 487  : 		}

  000ee	52		 push	 edx
  000ef	8b cd		 mov	 ecx, ebp
  000f1	50		 push	 eax
  000f2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@underflow
  000f8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000fd	58		 pop	 eax
  000fe	5a		 pop	 edx
  000ff	5f		 pop	 edi
  00100	5e		 pop	 esi
  00101	5b		 pop	 ebx
  00102	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00105	33 cd		 xor	 ecx, ebp
  00107	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010c	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  00112	3b ec		 cmp	 ebp, esp
  00114	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00119	8b e5		 mov	 esp, ebp
  0011b	5d		 pop	 ebp
  0011c	c3		 ret	 0
  0011d	0f 1f 00	 npad	 3
$LN9@underflow:
  00120	01 00 00 00	 DD	 1
  00124	00 00 00 00	 DD	 $LN8@underflow
$LN8@underflow:
  00128	e8 ff ff ff	 DD	 -24			; ffffffe8H
  0012c	04 00 00 00	 DD	 4
  00130	00 00 00 00	 DD	 $LN7@underflow
$LN7@underflow:
  00134	5f		 DB	 95			; 0000005fH
  00135	4d		 DB	 77			; 0000004dH
  00136	65		 DB	 101			; 00000065H
  00137	74		 DB	 116			; 00000074H
  00138	61		 DB	 97			; 00000061H
  00139	00		 DB	 0
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::underflow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
$T1 = -245						; size = 1
$T2 = -236						; size = 4
$T3 = -224						; size = 4
$T4 = -212						; size = 4
_this$ = -8						; size = 4
__Meta$ = 8						; size = 4
?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail, COMDAT
; _this$ = ecx

; 450  : 		{	// put an element back to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00013	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 451  : 		if (_Mysb::gptr() != 0
; 452  : 			&& _Mysb::eback() < _Mysb::gptr()
; 453  : 			&& (_Traits::eq_int_type(_Traits::eof(), _Meta)

  00023	8b f4		 mov	 esi, esp
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0002e	3b f4		 cmp	 esi, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	85 c0		 test	 eax, eax
  00037	0f 84 c0 00 00
	00		 je	 $LN2@pbackfail
  0003d	8b f4		 mov	 esi, esp
  0003f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b f0		 mov	 esi, eax
  00051	8b fc		 mov	 edi, esp
  00053	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0005c	3b fc		 cmp	 edi, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	3b f0		 cmp	 esi, eax
  00065	0f 83 92 00 00
	00		 jae	 $LN2@pbackfail
  0006b	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00070	89 85 2c ff ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
  00076	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00079	50		 push	 eax
  0007a	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00080	51		 push	 ecx
  00081	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  00086	83 c4 08	 add	 esp, 8
  00089	0f b6 d0	 movzx	 edx, al
  0008c	85 d2		 test	 edx, edx
  0008e	75 45		 jne	 SHORT $LN4@pbackfail
  00090	8b f4		 mov	 esi, esp
  00092	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0009b	3b f4		 cmp	 esi, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a2	b9 01 00 00 00	 mov	 ecx, 1
  000a7	6b d1 ff	 imul	 edx, ecx, -1
  000aa	03 c2		 add	 eax, edx
  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  000b2	83 c4 04	 add	 esp, 4
  000b5	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  000bb	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  000be	50		 push	 eax
  000bf	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  000c5	51		 push	 ecx
  000c6	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  000cb	83 c4 08	 add	 esp, 8
  000ce	0f b6 d0	 movzx	 edx, al
  000d1	85 d2		 test	 edx, edx
  000d3	74 28		 je	 SHORT $LN2@pbackfail
$LN4@pbackfail:

; 454  : 			|| _Traits::eq_int_type(_Traits::to_int_type(_Mysb::gptr()[-1]),
; 455  : 				_Meta)))
; 456  : 			{	// just back up position
; 457  : 			_Mysb::_Gndec();

  000d5	8b f4		 mov	 esi, esp
  000d7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
  000e0	3b f4		 cmp	 esi, esp
  000e2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 458  : 			return (_Traits::not_eof(_Meta));

  000e7	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  000ea	50		 push	 eax
  000eb	e8 00 00 00 00	 call	 ?not_eof@?$char_traits@D@std@@SAHABH@Z ; std::char_traits<char>::not_eof
  000f0	83 c4 04	 add	 esp, 4
  000f3	e9 c3 00 00 00	 jmp	 $LN1@pbackfail
  000f8	e9 be 00 00 00	 jmp	 $LN1@pbackfail
$LN2@pbackfail:

; 459  : 			}
; 460  : 		else if (_Myfile == 0 || _Traits::eq_int_type(_Traits::eof(), _Meta))

  000fd	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00100	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00104	74 25		 je	 SHORT $LN7@pbackfail
  00106	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0010b	89 85 14 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00111	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00114	50		 push	 eax
  00115	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0011b	51		 push	 ecx
  0011c	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  00121	83 c4 08	 add	 esp, 8
  00124	0f b6 d0	 movzx	 edx, al
  00127	85 d2		 test	 edx, edx
  00129	74 0f		 je	 SHORT $LN5@pbackfail
$LN7@pbackfail:

; 461  : 			return (_Traits::eof());	// no open C stream or EOF, fail

  0012b	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00130	e9 86 00 00 00	 jmp	 $LN1@pbackfail
  00135	e9 81 00 00 00	 jmp	 $LN1@pbackfail
$LN5@pbackfail:

; 462  : 		else if (_Pcvt == 0 && _Ungetc(_Traits::to_char_type(_Meta), _Myfile))

  0013a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0013d	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00141	75 36		 jne	 SHORT $LN8@pbackfail
  00143	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00146	50		 push	 eax
  00147	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  0014c	83 c4 04	 add	 esp, 4
  0014f	88 85 0b ff ff
	ff		 mov	 BYTE PTR $T1[ebp], al
  00155	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00158	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  0015b	52		 push	 edx
  0015c	8d 85 0b ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00162	50		 push	 eax
  00163	e8 00 00 00 00	 call	 ??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z ; std::_Ungetc<char>
  00168	83 c4 08	 add	 esp, 8
  0016b	0f b6 c8	 movzx	 ecx, al
  0016e	85 c9		 test	 ecx, ecx
  00170	74 07		 je	 SHORT $LN8@pbackfail

; 463  : 			return (_Meta);	// no facet and unget succeeded, return

  00172	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  00175	eb 44		 jmp	 SHORT $LN1@pbackfail
  00177	eb 42		 jmp	 SHORT $LN1@pbackfail
$LN8@pbackfail:

; 464  : 		else if (_Mysb::gptr() != &_Mychar)

  00179	8b f4		 mov	 esi, esp
  0017b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0017e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00184	3b f4		 cmp	 esi, esp
  00186	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0018b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0018e	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00191	3b c1		 cmp	 eax, ecx
  00193	74 21		 je	 SHORT $LN10@pbackfail

; 465  : 			{	// putback to _Mychar
; 466  : 			_Mychar = _Traits::to_char_type(_Meta);

  00195	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00198	50		 push	 eax
  00199	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  0019e	83 c4 04	 add	 esp, 4
  001a1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001a4	88 41 3c	 mov	 BYTE PTR [ecx+60], al

; 467  : 			_Set_back();	// switch to _Mychar buffer

  001a7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001aa	e8 00 00 00 00	 call	 ?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back

; 468  : 			return (_Meta);

  001af	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  001b2	eb 07		 jmp	 SHORT $LN1@pbackfail

; 469  : 			}
; 470  : 		else

  001b4	eb 05		 jmp	 SHORT $LN1@pbackfail
$LN10@pbackfail:

; 471  : 			return (_Traits::eof());	// nowhere to put back

  001b6	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
$LN1@pbackfail:

; 472  : 	}

  001bb	5f		 pop	 edi
  001bc	5e		 pop	 esi
  001bd	5b		 pop	 ebx
  001be	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  001c4	3b ec		 cmp	 ebp, esp
  001c6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001cb	8b e5		 mov	 esp, ebp
  001cd	5d		 pop	 ebp
  001ce	c2 04 00	 ret	 4
?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
tv184 = -524						; size = 4
tv239 = -520						; size = 4
tv254 = -516						; size = 4
tv208 = -516						; size = 4
tv246 = -512						; size = 4
tv241 = -512						; size = 4
tv237 = -512						; size = 4
tv256 = -508						; size = 4
tv255 = -508						; size = 4
tv230 = -508						; size = 4
tv151 = -508						; size = 4
tv147 = -508						; size = 4
$T2 = -500						; size = 4
$T3 = -488						; size = 4
$T4 = -476						; size = 4
$T5 = -464						; size = 4
$T6 = -452						; size = 4
$T7 = -440						; size = 4
$T8 = -428						; size = 12
$T9 = -405						; size = 1
$T10 = -396						; size = 12
$T11 = -376						; size = 12
$T12 = -356						; size = 12
$T13 = -336						; size = 4
$T14 = -324						; size = 4
__Count$15 = -120					; size = 4
__Str$16 = -108						; size = 28
__Dest$17 = -72						; size = 4
__Src$18 = -60						; size = 4
__Ch$19 = -45						; size = 1
__STRING_INC$20 = -36					; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Meta$ = 8						; size = 4
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::overflow, COMDAT
; _this$ = ecx

; 389  : 		{	// put an element to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 00 02 00
	00		 sub	 esp, 512		; 00000200H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd f4 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-524]
  00021	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  00045	c7 85 0c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 390  : 		if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  0004f	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00054	89 85 bc fe ff
	ff		 mov	 DWORD PTR $T14[ebp], eax
  0005a	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  0005d	50		 push	 eax
  0005e	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  00064	51		 push	 ecx
  00065	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0006a	83 c4 08	 add	 esp, 8
  0006d	0f b6 d0	 movzx	 edx, al
  00070	85 d2		 test	 edx, edx
  00072	74 13		 je	 SHORT $LN7@overflow

; 391  : 			return (_Traits::not_eof(_Meta));	// EOF, return success code

  00074	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ?not_eof@?$char_traits@D@std@@SAHABH@Z ; std::char_traits<char>::not_eof
  0007d	83 c4 04	 add	 esp, 4
  00080	e9 26 04 00 00	 jmp	 $LN1@overflow

; 392  : 		else if (_Mysb::pptr() != 0

  00085	eb 7f		 jmp	 SHORT $LN8@overflow
$LN7@overflow:

; 393  : 			&& _Mysb::pptr() < _Mysb::epptr())

  00087	8b f4		 mov	 esi, esp
  00089	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00092	3b f4		 cmp	 esi, esp
  00094	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00099	85 c0		 test	 eax, eax
  0009b	74 56		 je	 SHORT $LN9@overflow
  0009d	8b f4		 mov	 esi, esp
  0009f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000a8	3b f4		 cmp	 esi, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	8b f0		 mov	 esi, eax
  000b1	8b fc		 mov	 edi, esp
  000b3	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  000bc	3b fc		 cmp	 edi, esp
  000be	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c3	3b f0		 cmp	 esi, eax
  000c5	73 2c		 jae	 SHORT $LN9@overflow

; 394  : 			{	// room in buffer, store it
; 395  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  000c7	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  000d0	83 c4 04	 add	 esp, 4
  000d3	8a d8		 mov	 bl, al
  000d5	8b f4		 mov	 esi, esp
  000d7	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
  000e0	3b f4		 cmp	 esi, esp
  000e2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e7	88 18		 mov	 BYTE PTR [eax], bl

; 396  : 			return (_Meta);

  000e9	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  000ec	e9 ba 03 00 00	 jmp	 $LN1@overflow
  000f1	eb 13		 jmp	 SHORT $LN8@overflow
$LN9@overflow:

; 397  : 			}
; 398  : 		else if (_Myfile == 0)

  000f3	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000f6	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  000fa	75 0a		 jne	 SHORT $LN8@overflow

; 399  : 			return (_Traits::eof());	// no open C stream, fail

  000fc	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00101	e9 a5 03 00 00	 jmp	 $LN1@overflow
$LN8@overflow:

; 400  : 		_Reset_back();	// revert from _Mychar buffer

  00106	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00109	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 401  : 		if (_Pcvt == 0)

  0010e	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00111	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00115	75 4c		 jne	 SHORT $LN12@overflow

; 402  : 			return (_Fputc(_Traits::to_char_type(_Meta), _Myfile)

  00117	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0011a	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0011d	51		 push	 ecx
  0011e	8d 55 08	 lea	 edx, DWORD PTR __Meta$[ebp]
  00121	52		 push	 edx
  00122	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  00127	83 c4 04	 add	 esp, 4
  0012a	0f b6 c0	 movzx	 eax, al
  0012d	50		 push	 eax
  0012e	e8 00 00 00 00	 call	 ??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z ; std::_Fputc<char>
  00133	83 c4 08	 add	 esp, 8
  00136	0f b6 c8	 movzx	 ecx, al
  00139	85 c9		 test	 ecx, ecx
  0013b	74 0b		 je	 SHORT $LN24@overflow
  0013d	8b 55 08	 mov	 edx, DWORD PTR __Meta$[ebp]
  00140	89 95 04 fe ff
	ff		 mov	 DWORD PTR tv147[ebp], edx
  00146	eb 0b		 jmp	 SHORT $LN25@overflow
$LN24@overflow:
  00148	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0014d	89 85 04 fe ff
	ff		 mov	 DWORD PTR tv147[ebp], eax
$LN25@overflow:
  00153	8b 85 04 fe ff
	ff		 mov	 eax, DWORD PTR tv147[ebp]
  00159	e9 4d 03 00 00	 jmp	 $LN1@overflow

; 403  : 				? _Meta : _Traits::eof());	// no codecvt facet, put as is
; 404  : 		else

  0015e	e9 48 03 00 00	 jmp	 $LN1@overflow
$LN12@overflow:

; 405  : 			{	// put using codecvt facet
; 406  : 			const int _STRING_INC = 8;

  00163	c7 45 dc 08 00
	00 00		 mov	 DWORD PTR __STRING_INC$20[ebp], 8

; 407  : 			const _Elem _Ch = _Traits::to_char_type(_Meta);

  0016a	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  0016d	50		 push	 eax
  0016e	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  00173	83 c4 04	 add	 esp, 4
  00176	88 45 d3	 mov	 BYTE PTR __Ch$19[ebp], al

; 408  : 			const _Elem *_Src;
; 409  : 			char *_Dest;
; 410  : 
; 411  : 			string _Str(_STRING_INC, '\0');

  00179	6a 00		 push	 0
  0017b	6a 08		 push	 8
  0017d	8d 4d 94	 lea	 ecx, DWORD PTR __Str$16[ebp]
  00180	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00185	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
$LN4@overflow:

; 412  : 			for (; ; )
; 413  : 				switch (_Pcvt->out(_State,

  0018c	8b f4		 mov	 esi, esp
  0018e	8d 45 b8	 lea	 eax, DWORD PTR __Dest$17[ebp]
  00191	50		 push	 eax
  00192	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  00198	51		 push	 ecx
  00199	8d 4d 94	 lea	 ecx, DWORD PTR __Str$16[ebp]
  0019c	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  001a1	89 85 04 fe ff
	ff		 mov	 DWORD PTR tv151[ebp], eax
  001a7	8b 95 04 fe ff
	ff		 mov	 edx, DWORD PTR tv151[ebp]
  001ad	89 95 00 fe ff
	ff		 mov	 DWORD PTR tv237[ebp], edx
  001b3	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001b7	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR tv237[ebp]
  001bd	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  001c2	8b f8		 mov	 edi, eax
  001c4	8d 4d 94	 lea	 ecx, DWORD PTR __Str$16[ebp]
  001c7	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  001cc	03 f8		 add	 edi, eax
  001ce	57		 push	 edi
  001cf	8d 85 88 fe ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]
  001d5	50		 push	 eax
  001d6	8d 4d 94	 lea	 ecx, DWORD PTR __Str$16[ebp]
  001d9	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  001de	89 85 fc fd ff
	ff		 mov	 DWORD PTR tv254[ebp], eax
  001e4	8b 8d fc fd ff
	ff		 mov	 ecx, DWORD PTR tv254[ebp]
  001ea	89 8d f8 fd ff
	ff		 mov	 DWORD PTR tv239[ebp], ecx
  001f0	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  001f4	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR tv239[ebp]
  001fa	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  001ff	50		 push	 eax
  00200	8d 55 c4	 lea	 edx, DWORD PTR __Src$18[ebp]
  00203	52		 push	 edx
  00204	8d 45 d4	 lea	 eax, DWORD PTR __Ch$19[ebp+1]
  00207	50		 push	 eax
  00208	8d 4d d3	 lea	 ecx, DWORD PTR __Ch$19[ebp]
  0020b	51		 push	 ecx
  0020c	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0020f	83 c2 40	 add	 edx, 64			; 00000040H
  00212	52		 push	 edx
  00213	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00216	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00219	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?out@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z
  0021f	3b f4		 cmp	 esi, esp
  00221	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00226	89 85 b0 fe ff
	ff		 mov	 DWORD PTR $T13[ebp], eax
  0022c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00230	8d 8d 88 fe ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  00236	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
  0023b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0023f	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  00245	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
  0024a	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR $T13[ebp]
  00250	89 8d f4 fd ff
	ff		 mov	 DWORD PTR tv184[ebp], ecx
  00256	83 bd f4 fd ff
	ff 00		 cmp	 DWORD PTR tv184[ebp], 0
  0025d	0f 8c 12 02 00
	00		 jl	 $LN22@overflow
  00263	83 bd f4 fd ff
	ff 01		 cmp	 DWORD PTR tv184[ebp], 1
  0026a	7e 12		 jle	 SHORT $LN14@overflow
  0026c	83 bd f4 fd ff
	ff 03		 cmp	 DWORD PTR tv184[ebp], 3
  00273	0f 84 a8 01 00
	00		 je	 $LN21@overflow
  00279	e9 f7 01 00 00	 jmp	 $LN22@overflow
$LN14@overflow:

; 414  : 					&_Ch, &_Ch + 1, _Src,
; 415  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))
; 416  : 				{	// test result of converting one element
; 417  : 				case codecvt_base::partial:
; 418  : 				case codecvt_base::ok:
; 419  : 					{	// converted something, try to put it out
; 420  : 					size_t _Count = _Dest - &*_Str.begin();

  0027e	8d 85 74 fe ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
  00284	50		 push	 eax
  00285	8d 4d 94	 lea	 ecx, DWORD PTR __Str$16[ebp]
  00288	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  0028d	89 85 04 fe ff
	ff		 mov	 DWORD PTR tv255[ebp], eax
  00293	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR tv255[ebp]
  00299	89 8d 00 fe ff
	ff		 mov	 DWORD PTR tv241[ebp], ecx
  0029f	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  002a3	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR tv241[ebp]
  002a9	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  002ae	8b 55 b8	 mov	 edx, DWORD PTR __Dest$17[ebp]
  002b1	2b d0		 sub	 edx, eax
  002b3	89 55 88	 mov	 DWORD PTR __Count$15[ebp], edx
  002b6	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  002ba	8d 8d 74 fe ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  002c0	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ

; 421  : 					if (0 < _Count && _Count !=

  002c5	83 7d 88 00	 cmp	 DWORD PTR __Count$15[ebp], 0
  002c9	76 70		 jbe	 SHORT $LN26@overflow
  002cb	8b f4		 mov	 esi, esp
  002cd	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  002d0	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  002d3	51		 push	 ecx
  002d4	8b 55 88	 mov	 edx, DWORD PTR __Count$15[ebp]
  002d7	52		 push	 edx
  002d8	6a 01		 push	 1
  002da	8d 85 54 fe ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  002e0	50		 push	 eax
  002e1	8d 4d 94	 lea	 ecx, DWORD PTR __Str$16[ebp]
  002e4	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  002e9	89 85 04 fe ff
	ff		 mov	 DWORD PTR tv256[ebp], eax
  002ef	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR tv256[ebp]
  002f5	89 8d 00 fe ff
	ff		 mov	 DWORD PTR tv246[ebp], ecx
  002fb	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  002ff	8b 95 0c fe ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  00305	83 ca 01	 or	 edx, 1
  00308	89 95 0c fe ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  0030e	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR tv246[ebp]
  00314	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  00319	50		 push	 eax
  0031a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00320	83 c4 10	 add	 esp, 16			; 00000010H
  00323	3b f4		 cmp	 esi, esp
  00325	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0032a	39 45 88	 cmp	 DWORD PTR __Count$15[ebp], eax
  0032d	74 0c		 je	 SHORT $LN26@overflow
  0032f	c7 85 fc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR tv208[ebp], 1
  00339	eb 0a		 jmp	 SHORT $LN27@overflow
$LN26@overflow:
  0033b	c7 85 fc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv208[ebp], 0
$LN27@overflow:
  00345	8a 85 fc fd ff
	ff		 mov	 al, BYTE PTR tv208[ebp]
  0034b	88 85 6b fe ff
	ff		 mov	 BYTE PTR $T9[ebp], al
  00351	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00358	8b 8d 0c fe ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  0035e	83 e1 01	 and	 ecx, 1
  00361	74 12		 je	 SHORT $LN36@overflow
  00363	83 a5 0c fe ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  0036a	8d 8d 54 fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00370	e8 00 00 00 00	 call	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
$LN36@overflow:
  00375	0f b6 95 6b fe
	ff ff		 movzx	 edx, BYTE PTR $T9[ebp]
  0037c	85 d2		 test	 edx, edx
  0037e	74 25		 je	 SHORT $LN15@overflow

; 422  : 						fwrite(&*_Str.begin(), 1, _Count, _Myfile))
; 423  : 						return (_Traits::eof());	// write failed

  00380	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00385	89 85 48 fe ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
  0038b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00392	8d 4d 94	 lea	 ecx, DWORD PTR __Str$16[ebp]
  00395	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0039a	8b 85 48 fe ff
	ff		 mov	 eax, DWORD PTR $T7[ebp]
  003a0	e9 06 01 00 00	 jmp	 $LN1@overflow
$LN15@overflow:

; 424  : 
; 425  : 					_Wrotesome = true;	// write succeeded

  003a5	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  003a8	c6 40 3d 01	 mov	 BYTE PTR [eax+61], 1

; 426  : 					if (_Src != &_Ch)

  003ac	8d 45 d3	 lea	 eax, DWORD PTR __Ch$19[ebp]
  003af	39 45 c4	 cmp	 DWORD PTR __Src$18[ebp], eax
  003b2	74 23		 je	 SHORT $LN16@overflow

; 427  : 						return (_Meta);	// converted whole element

  003b4	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  003b7	89 85 3c fe ff
	ff		 mov	 DWORD PTR $T6[ebp], eax
  003bd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  003c4	8d 4d 94	 lea	 ecx, DWORD PTR __Str$16[ebp]
  003c7	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  003cc	8b 85 3c fe ff
	ff		 mov	 eax, DWORD PTR $T6[ebp]
  003d2	e9 d4 00 00 00	 jmp	 $LN1@overflow
$LN16@overflow:

; 428  : 
; 429  : 					if (0 < _Count)

  003d7	83 7d 88 00	 cmp	 DWORD PTR __Count$15[ebp], 0
  003db	76 02		 jbe	 SHORT $LN17@overflow
  003dd	eb 40		 jmp	 SHORT $LN18@overflow
$LN17@overflow:

; 430  : 						;
; 431  : 					else if (_Str.size() < 4 * _STRING_INC)

  003df	8d 4d 94	 lea	 ecx, DWORD PTR __Str$16[ebp]
  003e2	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  003e7	83 f8 20	 cmp	 eax, 32			; 00000020H
  003ea	73 0e		 jae	 SHORT $LN19@overflow

; 432  : 						_Str.append(_STRING_INC, '\0');	// try with more space

  003ec	6a 00		 push	 0
  003ee	6a 08		 push	 8
  003f0	8d 4d 94	 lea	 ecx, DWORD PTR __Str$16[ebp]
  003f3	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 433  : 					else

  003f8	eb 25		 jmp	 SHORT $LN18@overflow
$LN19@overflow:

; 434  : 						return (_Traits::eof());	// conversion failed

  003fa	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  003ff	89 85 30 fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  00405	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0040c	8d 4d 94	 lea	 ecx, DWORD PTR __Str$16[ebp]
  0040f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00414	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR $T5[ebp]
  0041a	e9 8c 00 00 00	 jmp	 $LN1@overflow
$LN18@overflow:

; 435  : 					break;

  0041f	eb 76		 jmp	 SHORT $LN5@overflow
$LN21@overflow:

; 436  : 					}
; 437  : 
; 438  : 				case codecvt_base::noconv:
; 439  : 					return (_Fputc(_Ch, _Myfile) ? _Meta

  00421	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00424	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00427	51		 push	 ecx
  00428	0f b6 55 d3	 movzx	 edx, BYTE PTR __Ch$19[ebp]
  0042c	52		 push	 edx
  0042d	e8 00 00 00 00	 call	 ??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z ; std::_Fputc<char>
  00432	83 c4 08	 add	 esp, 8
  00435	0f b6 c0	 movzx	 eax, al
  00438	85 c0		 test	 eax, eax
  0043a	74 0b		 je	 SHORT $LN28@overflow
  0043c	8b 4d 08	 mov	 ecx, DWORD PTR __Meta$[ebp]
  0043f	89 8d 04 fe ff
	ff		 mov	 DWORD PTR tv230[ebp], ecx
  00445	eb 0b		 jmp	 SHORT $LN29@overflow
$LN28@overflow:
  00447	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0044c	89 85 04 fe ff
	ff		 mov	 DWORD PTR tv230[ebp], eax
$LN29@overflow:
  00452	8b 95 04 fe ff
	ff		 mov	 edx, DWORD PTR tv230[ebp]
  00458	89 95 24 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], edx
  0045e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00465	8d 4d 94	 lea	 ecx, DWORD PTR __Str$16[ebp]
  00468	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0046d	8b 85 24 fe ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
  00473	eb 36		 jmp	 SHORT $LN1@overflow
$LN22@overflow:

; 440  : 						: _Traits::eof());	// no conversion, put as is
; 441  : 
; 442  : 				default:
; 443  : 					return (_Traits::eof());	// conversion failed

  00475	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0047a	89 85 18 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00480	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00487	8d 4d 94	 lea	 ecx, DWORD PTR __Str$16[ebp]
  0048a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0048f	8b 85 18 fe ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  00495	eb 14		 jmp	 SHORT $LN1@overflow
$LN5@overflow:

; 444  : 				}

  00497	e9 f0 fc ff ff	 jmp	 $LN4@overflow

; 445  : 			}

  0049c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  004a3	8d 4d 94	 lea	 ecx, DWORD PTR __Str$16[ebp]
  004a6	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN1@overflow:

; 446  : 	}

  004ab	52		 push	 edx
  004ac	8b cd		 mov	 ecx, ebp
  004ae	50		 push	 eax
  004af	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN43@overflow
  004b5	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  004ba	58		 pop	 eax
  004bb	5a		 pop	 edx
  004bc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  004bf	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  004c6	59		 pop	 ecx
  004c7	5f		 pop	 edi
  004c8	5e		 pop	 esi
  004c9	5b		 pop	 ebx
  004ca	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004cd	33 cd		 xor	 ecx, ebp
  004cf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004d4	81 c4 0c 02 00
	00		 add	 esp, 524		; 0000020cH
  004da	3b ec		 cmp	 ebp, esp
  004dc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004e1	8b e5		 mov	 esp, ebp
  004e3	5d		 pop	 ebp
  004e4	c2 04 00	 ret	 4
  004e7	90		 npad	 1
$LN43@overflow:
  004e8	04 00 00 00	 DD	 4
  004ec	00 00 00 00	 DD	 $LN42@overflow
$LN42@overflow:
  004f0	d3 ff ff ff	 DD	 -45			; ffffffd3H
  004f4	01 00 00 00	 DD	 1
  004f8	00 00 00 00	 DD	 $LN37@overflow
  004fc	c4 ff ff ff	 DD	 -60			; ffffffc4H
  00500	04 00 00 00	 DD	 4
  00504	00 00 00 00	 DD	 $LN38@overflow
  00508	b8 ff ff ff	 DD	 -72			; ffffffb8H
  0050c	04 00 00 00	 DD	 4
  00510	00 00 00 00	 DD	 $LN39@overflow
  00514	94 ff ff ff	 DD	 -108			; ffffff94H
  00518	1c 00 00 00	 DD	 28			; 0000001cH
  0051c	00 00 00 00	 DD	 $LN40@overflow
$LN40@overflow:
  00520	5f		 DB	 95			; 0000005fH
  00521	53		 DB	 83			; 00000053H
  00522	74		 DB	 116			; 00000074H
  00523	72		 DB	 114			; 00000072H
  00524	00		 DB	 0
$LN39@overflow:
  00525	5f		 DB	 95			; 0000005fH
  00526	44		 DB	 68			; 00000044H
  00527	65		 DB	 101			; 00000065H
  00528	73		 DB	 115			; 00000073H
  00529	74		 DB	 116			; 00000074H
  0052a	00		 DB	 0
$LN38@overflow:
  0052b	5f		 DB	 95			; 0000005fH
  0052c	53		 DB	 83			; 00000053H
  0052d	72		 DB	 114			; 00000072H
  0052e	63		 DB	 99			; 00000063H
  0052f	00		 DB	 0
$LN37@overflow:
  00530	5f		 DB	 95			; 0000005fH
  00531	43		 DB	 67			; 00000043H
  00532	68		 DB	 104			; 00000068H
  00533	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$0:
  00000	8d 4d 94	 lea	 ecx, DWORD PTR __Str$16[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$1:
  00008	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$2:
  00013	8d 8d 88 fe ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$3:
  0001e	8d 8d 74 fe ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$4:
  00029	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  0002f	83 e0 01	 and	 eax, 1
  00032	0f 84 12 00 00
	00		 je	 $LN35@overflow
  00038	83 a5 0c fe ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  0003f	8d 8d 54 fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00045	e9 00 00 00 00	 jmp	 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
$LN35@overflow:
  0004a	c3		 ret	 0
__ehhandler$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z:
  0004b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0004f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00052	8b 8a f0 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-528]
  00058	33 c8		 xor	 ecx, eax
  0005a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00062	33 c8		 xor	 ecx, eax
  00064	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00069	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
  0006e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::overflow
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock, COMDAT
; _this$ = ecx

; 381  : 		{	// unlock file instead of stream buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 382  : 		if (_Myfile)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  0002a	74 19		 je	 SHORT $LN1@Unlock

; 383  : 			_CSTD _unlock_file(_Myfile);

  0002c	8b f4		 mov	 esi, esp
  0002e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00034	51		 push	 ecx
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___unlock_file
  0003b	83 c4 04	 add	 esp, 4
  0003e	3b f4		 cmp	 esi, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Unlock:

; 384  : 		}

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Lock, COMDAT
; _this$ = ecx

; 375  : 		{	// lock file instead of stream buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 376  : 		if (_Myfile)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  0002a	74 19		 je	 SHORT $LN1@Lock

; 377  : 			_CSTD _lock_file(_Myfile);

  0002c	8b f4		 mov	 esi, esp
  0002e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00034	51		 push	 ecx
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___lock_file
  0003b	83 c4 04	 add	 esp, 4
  0003e	3b f4		 cmp	 esi, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Lock:

; 378  : 		}

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Lock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ
_TEXT	SEGMENT
__Ans$ = -20						; size = 4
_this$ = -8						; size = 4
?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::close, COMDAT
; _this$ = ecx

; 359  : 		{	// close the C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 360  : 		_Myt *_Ans = this;

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	89 45 ec	 mov	 DWORD PTR __Ans$[ebp], eax

; 361  : 		if (_Myfile == 0)

  00029	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00030	75 09		 jne	 SHORT $LN2@close

; 362  : 			_Ans = 0;

  00032	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Ans$[ebp], 0

; 363  : 		else

  00039	eb 3a		 jmp	 SHORT $LN3@close
$LN2@close:

; 364  : 			{	// put any homing sequence and close file
; 365  : 			if (!_Endwrite())

  0003b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
  00043	0f b6 c0	 movzx	 eax, al
  00046	85 c0		 test	 eax, eax
  00048	75 07		 jne	 SHORT $LN4@close

; 366  : 				_Ans = 0;

  0004a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Ans$[ebp], 0
$LN4@close:

; 367  : 			if (fclose(_Myfile) != 0)

  00051	8b f4		 mov	 esi, esp
  00053	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00056	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00059	51		 push	 ecx
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  00060	83 c4 04	 add	 esp, 4
  00063	3b f4		 cmp	 esi, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006a	85 c0		 test	 eax, eax
  0006c	74 07		 je	 SHORT $LN3@close

; 368  : 				_Ans = 0;

  0006e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Ans$[ebp], 0
$LN3@close:

; 369  : 			}
; 370  : 		_Init(0, _Closefl);

  00075	6a 02		 push	 2
  00077	6a 00		 push	 0
  00079	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 371  : 		return (_Ans);

  00081	8b 45 ec	 mov	 eax, DWORD PTR __Ans$[ebp]

; 372  : 		}

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0008d	3b ec		 cmp	 ebp, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::close
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
_TEXT	SEGMENT
tv88 = -252						; size = 4
tv89 = -248						; size = 4
$T2 = -240						; size = 8
__File$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Filename$ = 8						; size = 4
__Mode$ = 12						; size = 4
__Prot$ = 16						; size = 4
?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::open, COMDAT
; _this$ = ecx

; 275  : 		{	// open a C stream with specified mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00021	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 276  : 		_Filet *_File;
; 277  : 		if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)

  00042	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00045	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00049	75 1d		 jne	 SHORT $LN3@open
  0004b	8b 45 10	 mov	 eax, DWORD PTR __Prot$[ebp]
  0004e	50		 push	 eax
  0004f	8b 4d 0c	 mov	 ecx, DWORD PTR __Mode$[ebp]
  00052	51		 push	 ecx
  00053	8b 55 08	 mov	 edx, DWORD PTR __Filename$[ebp]
  00056	52		 push	 edx
  00057	e8 00 00 00 00	 call	 ?_Fiopen@std@@YAPAU_iobuf@@PBDHH@Z ; std::_Fiopen
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005f	89 45 e0	 mov	 DWORD PTR __File$[ebp], eax
  00062	83 7d e0 00	 cmp	 DWORD PTR __File$[ebp], 0
  00066	75 04		 jne	 SHORT $LN2@open
$LN3@open:

; 278  : 			return (0);	// open failed

  00068	33 c0		 xor	 eax, eax
  0006a	eb 6d		 jmp	 SHORT $LN1@open
$LN2@open:

; 279  : 
; 280  : 		_Init(_File, _Openfl);

  0006c	6a 01		 push	 1
  0006e	8b 45 e0	 mov	 eax, DWORD PTR __File$[ebp]
  00071	50		 push	 eax
  00072	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 281  : 		_Initcvt(&_USE(_Mysb::getloc(), _Cvt));

  0007a	8b f4		 mov	 esi, esp
  0007c	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00082	50		 push	 eax
  00083	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ
  0008c	3b f4		 cmp	 esi, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00093	89 85 08 ff ff
	ff		 mov	 DWORD PTR tv89[ebp], eax
  00099	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR tv89[ebp]
  0009f	89 8d 04 ff ff
	ff		 mov	 DWORD PTR tv88[ebp], ecx
  000a5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000ac	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR tv88[ebp]
  000b2	52		 push	 edx
  000b3	e8 00 00 00 00	 call	 ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
  000b8	83 c4 04	 add	 esp, 4
  000bb	50		 push	 eax
  000bc	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	e8 00 00 00 00	 call	 ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDU_Mbstatet@@@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
  000c4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000cb	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  000d1	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 282  : 		return (this);	// open succeeded

  000d6	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
$LN1@open:

; 283  : 		}

  000d9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000dc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e3	59		 pop	 ecx
  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	5b		 pop	 ebx
  000e7	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  000ed	3b ec		 cmp	 ebp, esp
  000ef	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z$0:
  00000	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 00 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-256]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::open
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 161  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00045	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@

; 162  : 		if (_Myfile != 0)

  0004b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00052	74 08		 je	 SHORT $LN2@basic_file

; 163  : 			_Reset_back();	// revert from _Mychar buffer

  00054	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
$LN2@basic_file:

; 164  : 		if (_Closef)

  0005c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	0f b6 48 48	 movzx	 ecx, BYTE PTR [eax+72]
  00063	85 c9		 test	 ecx, ecx
  00065	74 08		 je	 SHORT $LN1@basic_file

; 165  : 			close();

  00067	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	e8 00 00 00 00	 call	 ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
$LN1@basic_file:

; 166  : 		}

  0006f	8b f4		 mov	 esi, esp
  00071	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  0007a	3b f4		 cmp	 esi, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00081	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00084	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008b	59		 pop	 ecx
  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00095	3b ec		 cmp	 ebp, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__File$ = 8						; size = 4
??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 156  : 		{	// construct from pointer to C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 155  : 		: _Mysb()

  00042	8b f4		 mov	 esi, esp
  00044	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 156  : 		{	// construct from pointer to C stream

  0005b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@

; 157  : 		_Init(_File, _Newfl);

  00064	6a 00		 push	 0
  00066	8b 45 08	 mov	 eax, DWORD PTR __File$[ebp]
  00069	50		 push	 eax
  0006a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 158  : 		}

  00072	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00079	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00086	59		 pop	 ecx
  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	5b		 pop	 ebx
  0008a	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00090	3b ec		 cmp	 ebp, esp
  00092	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z$0:
  00000	8b f4		 mov	 esi, esp
  00002	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ?open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Filename$ = 8						; size = 4
__Mode$ = 12						; size = 4
__Prot$ = 16						; size = 4
?open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::open, COMDAT
; _this$ = ecx

; 1137 : 		{	// open a C stream with specified mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1138 : 		if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)

  00023	8b 45 10	 mov	 eax, DWORD PTR __Prot$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 0c	 mov	 ecx, DWORD PTR __Mode$[ebp]
  0002a	83 c9 02	 or	 ecx, 2
  0002d	51		 push	 ecx
  0002e	8b 55 08	 mov	 edx, DWORD PTR __Filename$[ebp]
  00031	52		 push	 edx
  00032	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	83 c1 04	 add	 ecx, 4
  00038	e8 00 00 00 00	 call	 ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
  0003d	85 c0		 test	 eax, eax
  0003f	75 22		 jne	 SHORT $LN2@open

; 1139 : 			_Myios::setstate(ios_base::failbit);

  00041	8b f4		 mov	 esi, esp
  00043	6a 00		 push	 0
  00045	6a 02		 push	 2
  00047	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0004f	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00052	8b ca		 mov	 ecx, edx
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  0005a	3b f4		 cmp	 esi, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1140 : 		else

  00061	eb 20		 jmp	 SHORT $LN1@open
$LN2@open:

; 1141 : 			_Myios::clear();	// added with C++11

  00063	8b f4		 mov	 esi, esp
  00065	6a 00		 push	 0
  00067	6a 00		 push	 0
  00069	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00071	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00074	8b ca		 mov	 ecx, edx
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  0007c	3b f4		 cmp	 esi, esp
  0007e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@open:

; 1142 : 		}

  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0008c	3b ec		 cmp	 ebp, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 0c 00	 ret	 12			; 0000000cH
?open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::open
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 1121 : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 98	 mov	 ecx, DWORD PTR [eax-104]
  00029	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 44 10 98 00
	00 00 00	 mov	 DWORD PTR [eax+edx-104], OFFSET ??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
  00037	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 48 98	 mov	 ecx, DWORD PTR [eax-104]
  0003d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00040	83 ea 68	 sub	 edx, 104		; 00000068H
  00043	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00046	8b 48 98	 mov	 ecx, DWORD PTR [eax-104]
  00049	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	89 54 01 94	 mov	 DWORD PTR [ecx+eax-108], edx

; 1122 : 		}

  00053	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	83 e9 64	 sub	 ecx, 100		; 00000064H
  00059	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  0005e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	83 e9 60	 sub	 ecx, 96			; 00000060H
  00064	8b f4		 mov	 esi, esp
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ
  0006c	3b f4		 cmp	 esi, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0007c	3b ec		 cmp	 ebp, esp
  0007e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_$initVBases$ = 8					; size = 4
??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 975  : 		{	// construct unopened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0
  0004c	83 7d 08 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  00050	74 34		 je	 SHORT $LN2@basic_ofst
  00052	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00055	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@
  0005b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	83 c1 68	 add	 ecx, 104		; 00000068H
  00061	8b f4		 mov	 esi, esp
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
  00069	3b f4		 cmp	 esi, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00077	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  0007d	83 c8 01	 or	 eax, 1
  00080	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
$LN2@basic_ofst:

; 974  : 		: _Mybase(&_Filebuffer)

  00086	8b f4		 mov	 esi, esp
  00088	6a 00		 push	 0
  0008a	6a 00		 push	 0
  0008c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0008f	83 c0 04	 add	 eax, 4
  00092	50		 push	 eax
  00093	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  0009c	3b f4		 cmp	 esi, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a3	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 975  : 		{	// construct unopened

  000aa	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  000af	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000b2	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000b5	c7 04 10 00 00
	00 00		 mov	 DWORD PTR [eax+edx], OFFSET ??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
  000bc	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000bf	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000c4	83 ea 68	 sub	 edx, 104		; 00000068H
  000c7	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000ca	8b 08		 mov	 ecx, DWORD PTR [eax]
  000cc	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000cf	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000d2	89 54 01 fc	 mov	 DWORD PTR [ecx+eax-4], edx
  000d6	6a 00		 push	 0
  000d8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	83 c1 04	 add	 ecx, 4
  000de	e8 00 00 00 00	 call	 ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >

; 976  : 		}

  000e3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ea	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000ed	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f7	59		 pop	 ecx
  000f8	5f		 pop	 edi
  000f9	5e		 pop	 esi
  000fa	5b		 pop	 ebx
  000fb	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00101	3b ec		 cmp	 ebp, esp
  00103	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ$0:
  00000	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00006	83 e0 01	 and	 eax, 1
  00009	0f 84 1c 00 00
	00		 je	 $LN5@basic_ofst
  0000f	83 a5 20 ff ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00016	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 68	 add	 ecx, 104		; 00000068H
  0001c	8b f4		 mov	 esi, esp
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  00024	3b f4		 cmp	 esi, esp
  00026	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
$LN5@basic_ofst:
  0002b	c3		 ret	 0
__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ$1:
  0002c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 08	 add	 ecx, 8
  00032	8b f4		 mov	 esi, esp
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ
  0003a	3b f4		 cmp	 esi, esp
  0003c	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00041	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00045	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00048	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0004e	33 c8		 xor	 ecx, eax
  00050	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00055	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0005a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT _main
_TEXT	SEGMENT
$T2 = -972						; size = 4
_co_kontynuowaæ$ = -573					; size = 1
_typ_zak³adu$ = -564					; size = 28
_wygrana$ = -528					; size = 4
_wylosowana_liczba$ = -516				; size = 4
_kwota_zak³adu$ = -504					; size = 4
_iloœæ_pieniêdzy$ = -492				; size = 4
_log$ = -480						; size = 192
_log_ogólny$ = -280					; size = 176
_c$ = -96						; size = 28
_b$ = -60						; size = 28
_a$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_main	PROC						; COMDAT

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_main
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c4 03 00
	00		 sub	 esp, 964		; 000003c4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 30 fc ff
	ff		 lea	 edi, DWORD PTR [ebp-976]
  00020	b9 f1 00 00 00	 mov	 ecx, 241		; 000000f1H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 70   : 	//Inicjowanie funkcji
; 71   : 	setlocale(LC_ALL, "polish"); // W celu polskich liter w konsoli

  00040	8b f4		 mov	 esi, esp
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_06JGCGFIEG@polish?$AA@
  00047	6a 00		 push	 0
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__setlocale
  0004f	83 c4 08	 add	 esp, 8
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 72   : 	srand((unsigned int)time(nullptr)); //Zainicjowanie generatorza LCG (Liniowy Generator Kongruentny) dla ma³o wa¿nych liczb

  00059	6a 00		 push	 0
  0005b	e8 00 00 00 00	 call	 _time
  00060	83 c4 04	 add	 esp, 4
  00063	8b f4		 mov	 esi, esp
  00065	50		 push	 eax
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__srand
  0006c	83 c4 04	 add	 esp, 4
  0006f	3b f4		 cmp	 esi, esp
  00071	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 73   : 	Show_Cursor(); //Pokazanie kursora tekstowego w konsoli

  00076	e8 00 00 00 00	 call	 ?Show_Cursor@@YAXXZ	; Show_Cursor

; 74   : 
; 75   : 	SprawdŸ_Pliki();

  0007b	e8 00 00 00 00	 call	 ?SprawdŸ_Pliki@@YAXXZ	; SprawdŸ_Pliki

; 76   : 	SprawdŸ_ustawienia();

  00080	e8 00 00 00 00	 call	 ?SprawdŸ_ustawienia@@YAXXZ ; SprawdŸ_ustawienia

; 77   : 
; 78   : 	int a = 10;

  00085	c7 45 e8 0a 00
	00 00		 mov	 DWORD PTR _a$[ebp], 10	; 0000000aH

; 79   : 	string b = "10";

  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_02PKFBJPLJ@10?$AA@
  00091	8d 4d c4	 lea	 ecx, DWORD PTR _b$[ebp]
  00094	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00099	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 80   : 	Odczytaj_liczbê(a, b);

  000a0	8d 45 c4	 lea	 eax, DWORD PTR _b$[ebp]
  000a3	50		 push	 eax
  000a4	8d 4d e8	 lea	 ecx, DWORD PTR _a$[ebp]
  000a7	51		 push	 ecx
  000a8	e8 00 00 00 00	 call	 ?Odczytaj_liczbê@@YAXABHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Odczytaj_liczbê
  000ad	83 c4 08	 add	 esp, 8

; 81   : 	b = "p";

  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_01JBBJJEPG@p?$AA@
  000b5	8d 4d c4	 lea	 ecx, DWORD PTR _b$[ebp]
  000b8	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 82   : 	Odczytaj_liczbê(a, b);

  000bd	8d 45 c4	 lea	 eax, DWORD PTR _b$[ebp]
  000c0	50		 push	 eax
  000c1	8d 4d e8	 lea	 ecx, DWORD PTR _a$[ebp]
  000c4	51		 push	 ecx
  000c5	e8 00 00 00 00	 call	 ?Odczytaj_liczbê@@YAXABHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Odczytaj_liczbê
  000ca	83 c4 08	 add	 esp, 8

; 83   : 	b = "r";

  000cd	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  000d2	8d 4d c4	 lea	 ecx, DWORD PTR _b$[ebp]
  000d5	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 84   : 	Odczytaj_liczbê(a, b);

  000da	8d 45 c4	 lea	 eax, DWORD PTR _b$[ebp]
  000dd	50		 push	 eax
  000de	8d 4d e8	 lea	 ecx, DWORD PTR _a$[ebp]
  000e1	51		 push	 ecx
  000e2	e8 00 00 00 00	 call	 ?Odczytaj_liczbê@@YAXABHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Odczytaj_liczbê
  000e7	83 c4 08	 add	 esp, 8

; 85   : 	b = "g";

  000ea	68 00 00 00 00	 push	 OFFSET ??_C@_01JEJKBAGA@g?$AA@
  000ef	8d 4d c4	 lea	 ecx, DWORD PTR _b$[ebp]
  000f2	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 86   : 	Odczytaj_liczbê(a, b);

  000f7	8d 45 c4	 lea	 eax, DWORD PTR _b$[ebp]
  000fa	50		 push	 eax
  000fb	8d 4d e8	 lea	 ecx, DWORD PTR _a$[ebp]
  000fe	51		 push	 ecx
  000ff	e8 00 00 00 00	 call	 ?Odczytaj_liczbê@@YAXABHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Odczytaj_liczbê
  00104	83 c4 08	 add	 esp, 8

; 87   : 	b = "k1";

  00107	68 00 00 00 00	 push	 OFFSET ??_C@_02ICGBAFJO@k1?$AA@
  0010c	8d 4d c4	 lea	 ecx, DWORD PTR _b$[ebp]
  0010f	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 88   : 	Odczytaj_liczbê(a, b);

  00114	8d 45 c4	 lea	 eax, DWORD PTR _b$[ebp]
  00117	50		 push	 eax
  00118	8d 4d e8	 lea	 ecx, DWORD PTR _a$[ebp]
  0011b	51		 push	 ecx
  0011c	e8 00 00 00 00	 call	 ?Odczytaj_liczbê@@YAXABHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Odczytaj_liczbê
  00121	83 c4 08	 add	 esp, 8

; 89   : 	b = "w1";

  00124	68 00 00 00 00	 push	 OFFSET ??_C@_02JHFNFPIK@w1?$AA@
  00129	8d 4d c4	 lea	 ecx, DWORD PTR _b$[ebp]
  0012c	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 90   : 	Odczytaj_liczbê(a, b);

  00131	8d 45 c4	 lea	 eax, DWORD PTR _b$[ebp]
  00134	50		 push	 eax
  00135	8d 4d e8	 lea	 ecx, DWORD PTR _a$[ebp]
  00138	51		 push	 ecx
  00139	e8 00 00 00 00	 call	 ?Odczytaj_liczbê@@YAXABHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Odczytaj_liczbê
  0013e	83 c4 08	 add	 esp, 8

; 91   : 
; 92   : 	string c = "iloœæ_minimalna_obrotów_ruletki 000";

  00141	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@DALNOHHC@ilo?$JM?f_minimalna_obrot?sw_ruletki?5@
  00146	8d 4d a0	 lea	 ecx, DWORD PTR _c$[ebp]
  00149	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0014e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 93   : 	Ustaw_ustawienia(c);

  00152	8d 45 a0	 lea	 eax, DWORD PTR _c$[ebp]
  00155	50		 push	 eax
  00156	e8 00 00 00 00	 call	 ?Ustaw_ustawienia@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Ustaw_ustawienia
  0015b	83 c4 04	 add	 esp, 4

; 94   : 
; 95   : 	//Inicjowanie zmiennych lokalnych
; 96   : 	ofstream log_ogólny; //Utworzenie typu do celu zapisu do pliku

  0015e	68 b0 00 00 00	 push	 176			; 000000b0H
  00163	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _log_ogólny$[ebp]
  00169	e8 00 00 00 00	 call	 ?__autoclassinit2@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXI@Z
  0016e	6a 01		 push	 1
  00170	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _log_ogólny$[ebp]
  00176	e8 00 00 00 00	 call	 ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
  0017b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 97   : 	log_ogólny.open("log_ogólny.txt", ios::app); //Otworzenie pliku z ustawieniem kursora zapisu do pliku

  0017f	6a 40		 push	 64			; 00000040H
  00181	6a 08		 push	 8
  00183	68 00 00 00 00	 push	 OFFSET ??_C@_0P@GMFAENOC@log_og?slny?4txt?$AA@
  00188	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _log_ogólny$[ebp]
  0018e	e8 00 00 00 00	 call	 ?open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z ; std::basic_ofstream<char,std::char_traits<char> >::open

; 98   : 	fstream log; //Utworzenie typu do celu zapisu i/lub odczytu do i/lub z pliku

  00193	68 c0 00 00 00	 push	 192			; 000000c0H
  00198	8d 8d 20 fe ff
	ff		 lea	 ecx, DWORD PTR _log$[ebp]
  0019e	e8 00 00 00 00	 call	 ?__autoclassinit2@?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXI@Z
  001a3	6a 01		 push	 1
  001a5	8d 8d 20 fe ff
	ff		 lea	 ecx, DWORD PTR _log$[ebp]
  001ab	e8 00 00 00 00	 call	 ??0?$basic_fstream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_fstream<char,std::char_traits<char> >::basic_fstream<char,std::char_traits<char> >
  001b0	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 99   : 	int iloœæ_pieniêdzy = kwota_pocz¹tkowa, kwota_zak³adu, wylosowana_liczba, wygrana; //Zmienne do których wczytuje siê wartoœci liczbowe pobrane od u¿ytkownika takie jak kwota zak³adu a przechowuje iloœæ posiadanych pieniêdzy a tak¿e przechowuje wyniki funkcji losowania liczby z ruletki i kwote wygran¹ z zak³adu

  001b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kwota_pocz¹tkowa@@3HA ; kwota_pocz¹tkowa
  001b9	89 85 14 fe ff
	ff		 mov	 DWORD PTR _iloœæ_pieniêdzy$[ebp], eax

; 100  : 	string typ_zak³adu; //Przechowuje typ zak³adu wprowadzony przez u¿ytkownika

  001bf	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _typ_zak³adu$[ebp]
  001c5	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  001ca	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 101  : 	char co_kontynuowaæ; //Deklaracja znaku który przechowuje nazwany znakiem punkt od którego kontynuowaæ runde
; 102  : 
; 103  : 	Wczytaj_z_pliku(log_ogólny, log, co_kontynuowaæ, iloœæ_pieniêdzy, kwota_zak³adu, wylosowana_liczba, typ_zak³adu);

  001ce	8d 85 cc fd ff
	ff		 lea	 eax, DWORD PTR _typ_zak³adu$[ebp]
  001d4	50		 push	 eax
  001d5	8d 8d fc fd ff
	ff		 lea	 ecx, DWORD PTR _wylosowana_liczba$[ebp]
  001db	51		 push	 ecx
  001dc	8d 95 08 fe ff
	ff		 lea	 edx, DWORD PTR _kwota_zak³adu$[ebp]
  001e2	52		 push	 edx
  001e3	8d 85 14 fe ff
	ff		 lea	 eax, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  001e9	50		 push	 eax
  001ea	8d 8d c3 fd ff
	ff		 lea	 ecx, DWORD PTR _co_kontynuowaæ$[ebp]
  001f0	51		 push	 ecx
  001f1	8d 95 20 fe ff
	ff		 lea	 edx, DWORD PTR _log$[ebp]
  001f7	52		 push	 edx
  001f8	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _log_ogólny$[ebp]
  001fe	50		 push	 eax
  001ff	e8 00 00 00 00	 call	 ?Wczytaj_z_pliku@@YAXAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AADAAH33AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; Wczytaj_z_pliku
  00204	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN4@main:

; 104  : 
; 105  : 	do
; 106  : 	{
; 107  : 		Pêtla_g³ówna(wygrana, kwota_zak³adu, iloœæ_pieniêdzy, log_ogólny, log, co_kontynuowaæ, typ_zak³adu, wylosowana_liczba);

  00207	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _wylosowana_liczba$[ebp]
  0020d	50		 push	 eax
  0020e	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _typ_zak³adu$[ebp]
  00214	51		 push	 ecx
  00215	8d 95 c3 fd ff
	ff		 lea	 edx, DWORD PTR _co_kontynuowaæ$[ebp]
  0021b	52		 push	 edx
  0021c	8d 85 20 fe ff
	ff		 lea	 eax, DWORD PTR _log$[ebp]
  00222	50		 push	 eax
  00223	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _log_ogólny$[ebp]
  00229	51		 push	 ecx
  0022a	8d 95 14 fe ff
	ff		 lea	 edx, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  00230	52		 push	 edx
  00231	8d 85 08 fe ff
	ff		 lea	 eax, DWORD PTR _kwota_zak³adu$[ebp]
  00237	50		 push	 eax
  00238	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR _wygrana$[ebp]
  0023e	51		 push	 ecx
  0023f	e8 00 00 00 00	 call	 ?Pêtla_g³ówna@@YAXAAH00AAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AADAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; Pêtla_g³ówna
  00244	83 c4 20	 add	 esp, 32			; 00000020H

; 108  : 		co_kontynuowaæ = 'n'; //Przypisanie znaku rozpoczêcia rundy od pocz¹tku

  00247	c6 85 c3 fd ff
	ff 6e		 mov	 BYTE PTR _co_kontynuowaæ$[ebp], 110 ; 0000006eH

; 109  : 	} while (Czy_Kontynuowaæ(iloœæ_pieniêdzy)); //Pêtla dza³aj¹ca do czasu wartoœci fa³sz zwróconej przez funkcjê Czy_kontynuowaæ

  0024e	8d 85 14 fe ff
	ff		 lea	 eax, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  00254	50		 push	 eax
  00255	e8 00 00 00 00	 call	 ?Czy_Kontynuowaæ@@YA_NABH@Z ; Czy_Kontynuowaæ
  0025a	83 c4 04	 add	 esp, 4
  0025d	0f b6 c8	 movzx	 ecx, al
  00260	85 c9		 test	 ecx, ecx
  00262	75 a3		 jne	 SHORT $LN4@main

; 110  : 
; 111  : 	Koniec_gry(log_ogólny, log, iloœæ_pieniêdzy);

  00264	8d 85 14 fe ff
	ff		 lea	 eax, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  0026a	50		 push	 eax
  0026b	8d 8d 20 fe ff
	ff		 lea	 ecx, DWORD PTR _log$[ebp]
  00271	51		 push	 ecx
  00272	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR _log_ogólny$[ebp]
  00278	52		 push	 edx
  00279	e8 00 00 00 00	 call	 ?Koniec_gry@@YAXAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AAH@Z ; Koniec_gry
  0027e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 112  : 
; 113  : 	system("pause"); //Wywo³anie funkcji wymagaj¹cej do zamkniêcia naciœniêcie dowolnego klawisza

  00281	8b f4		 mov	 esi, esp
  00283	68 00 00 00 00	 push	 OFFSET ??_C@_05PDJBBECF@pause?$AA@
  00288	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__system
  0028e	83 c4 04	 add	 esp, 4
  00291	3b f4		 cmp	 esi, esp
  00293	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 114  : 
; 115  : 	return 0; //Zwrócenie wartoœæ 0, czyli porogram zakoñczy³ siê bez b³êdu

  00298	c7 85 34 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0
  002a2	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  002a6	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _typ_zak³adu$[ebp]
  002ac	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  002b1	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  002b5	8d 8d 20 fe ff
	ff		 lea	 ecx, DWORD PTR _log$[ebp]
  002bb	e8 00 00 00 00	 call	 ??_D?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXXZ
  002c0	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  002c4	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _log_ogólny$[ebp]
  002ca	e8 00 00 00 00	 call	 ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
  002cf	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  002d3	8d 4d a0	 lea	 ecx, DWORD PTR _c$[ebp]
  002d6	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  002db	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002e2	8d 4d c4	 lea	 ecx, DWORD PTR _b$[ebp]
  002e5	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  002ea	8b 85 34 fc ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 116  : }

  002f0	52		 push	 edx
  002f1	8b cd		 mov	 ecx, ebp
  002f3	50		 push	 eax
  002f4	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN24@main
  002fa	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  002ff	58		 pop	 eax
  00300	5a		 pop	 edx
  00301	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00304	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0030b	59		 pop	 ecx
  0030c	5f		 pop	 edi
  0030d	5e		 pop	 esi
  0030e	5b		 pop	 ebx
  0030f	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00312	33 cd		 xor	 ecx, ebp
  00314	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00319	81 c4 d0 03 00
	00		 add	 esp, 976		; 000003d0H
  0031f	3b ec		 cmp	 ebp, esp
  00321	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00326	8b e5		 mov	 esp, ebp
  00328	5d		 pop	 ebp
  00329	c3		 ret	 0
  0032a	66 90		 npad	 2
$LN24@main:
  0032c	0b 00 00 00	 DD	 11			; 0000000bH
  00330	00 00 00 00	 DD	 $LN23@main
$LN23@main:
  00334	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00338	04 00 00 00	 DD	 4
  0033c	00 00 00 00	 DD	 $LN11@main
  00340	c4 ff ff ff	 DD	 -60			; ffffffc4H
  00344	1c 00 00 00	 DD	 28			; 0000001cH
  00348	00 00 00 00	 DD	 $LN12@main
  0034c	a0 ff ff ff	 DD	 -96			; ffffffa0H
  00350	1c 00 00 00	 DD	 28			; 0000001cH
  00354	00 00 00 00	 DD	 $LN13@main
  00358	e8 fe ff ff	 DD	 -280			; fffffee8H
  0035c	b0 00 00 00	 DD	 176			; 000000b0H
  00360	00 00 00 00	 DD	 $LN14@main
  00364	20 fe ff ff	 DD	 -480			; fffffe20H
  00368	c0 00 00 00	 DD	 192			; 000000c0H
  0036c	00 00 00 00	 DD	 $LN15@main
  00370	14 fe ff ff	 DD	 -492			; fffffe14H
  00374	04 00 00 00	 DD	 4
  00378	00 00 00 00	 DD	 $LN16@main
  0037c	08 fe ff ff	 DD	 -504			; fffffe08H
  00380	04 00 00 00	 DD	 4
  00384	00 00 00 00	 DD	 $LN17@main
  00388	fc fd ff ff	 DD	 -516			; fffffdfcH
  0038c	04 00 00 00	 DD	 4
  00390	00 00 00 00	 DD	 $LN18@main
  00394	f0 fd ff ff	 DD	 -528			; fffffdf0H
  00398	04 00 00 00	 DD	 4
  0039c	00 00 00 00	 DD	 $LN19@main
  003a0	cc fd ff ff	 DD	 -564			; fffffdccH
  003a4	1c 00 00 00	 DD	 28			; 0000001cH
  003a8	00 00 00 00	 DD	 $LN20@main
  003ac	c3 fd ff ff	 DD	 -573			; fffffdc3H
  003b0	01 00 00 00	 DD	 1
  003b4	00 00 00 00	 DD	 $LN21@main
$LN21@main:
  003b8	63		 DB	 99			; 00000063H
  003b9	6f		 DB	 111			; 0000006fH
  003ba	5f		 DB	 95			; 0000005fH
  003bb	6b		 DB	 107			; 0000006bH
  003bc	6f		 DB	 111			; 0000006fH
  003bd	6e		 DB	 110			; 0000006eH
  003be	74		 DB	 116			; 00000074H
  003bf	79		 DB	 121			; 00000079H
  003c0	6e		 DB	 110			; 0000006eH
  003c1	75		 DB	 117			; 00000075H
  003c2	6f		 DB	 111			; 0000006fH
  003c3	77		 DB	 119			; 00000077H
  003c4	61		 DB	 97			; 00000061H
  003c5	c4		 DB	 -60			; ffffffc4H
  003c6	87		 DB	 -121			; ffffff87H
  003c7	00		 DB	 0
$LN20@main:
  003c8	74		 DB	 116			; 00000074H
  003c9	79		 DB	 121			; 00000079H
  003ca	70		 DB	 112			; 00000070H
  003cb	5f		 DB	 95			; 0000005fH
  003cc	7a		 DB	 122			; 0000007aH
  003cd	61		 DB	 97			; 00000061H
  003ce	6b		 DB	 107			; 0000006bH
  003cf	c5		 DB	 -59			; ffffffc5H
  003d0	82		 DB	 -126			; ffffff82H
  003d1	61		 DB	 97			; 00000061H
  003d2	64		 DB	 100			; 00000064H
  003d3	75		 DB	 117			; 00000075H
  003d4	00		 DB	 0
$LN19@main:
  003d5	77		 DB	 119			; 00000077H
  003d6	79		 DB	 121			; 00000079H
  003d7	67		 DB	 103			; 00000067H
  003d8	72		 DB	 114			; 00000072H
  003d9	61		 DB	 97			; 00000061H
  003da	6e		 DB	 110			; 0000006eH
  003db	61		 DB	 97			; 00000061H
  003dc	00		 DB	 0
$LN18@main:
  003dd	77		 DB	 119			; 00000077H
  003de	79		 DB	 121			; 00000079H
  003df	6c		 DB	 108			; 0000006cH
  003e0	6f		 DB	 111			; 0000006fH
  003e1	73		 DB	 115			; 00000073H
  003e2	6f		 DB	 111			; 0000006fH
  003e3	77		 DB	 119			; 00000077H
  003e4	61		 DB	 97			; 00000061H
  003e5	6e		 DB	 110			; 0000006eH
  003e6	61		 DB	 97			; 00000061H
  003e7	5f		 DB	 95			; 0000005fH
  003e8	6c		 DB	 108			; 0000006cH
  003e9	69		 DB	 105			; 00000069H
  003ea	63		 DB	 99			; 00000063H
  003eb	7a		 DB	 122			; 0000007aH
  003ec	62		 DB	 98			; 00000062H
  003ed	61		 DB	 97			; 00000061H
  003ee	00		 DB	 0
$LN17@main:
  003ef	6b		 DB	 107			; 0000006bH
  003f0	77		 DB	 119			; 00000077H
  003f1	6f		 DB	 111			; 0000006fH
  003f2	74		 DB	 116			; 00000074H
  003f3	61		 DB	 97			; 00000061H
  003f4	5f		 DB	 95			; 0000005fH
  003f5	7a		 DB	 122			; 0000007aH
  003f6	61		 DB	 97			; 00000061H
  003f7	6b		 DB	 107			; 0000006bH
  003f8	c5		 DB	 -59			; ffffffc5H
  003f9	82		 DB	 -126			; ffffff82H
  003fa	61		 DB	 97			; 00000061H
  003fb	64		 DB	 100			; 00000064H
  003fc	75		 DB	 117			; 00000075H
  003fd	00		 DB	 0
$LN16@main:
  003fe	69		 DB	 105			; 00000069H
  003ff	6c		 DB	 108			; 0000006cH
  00400	6f		 DB	 111			; 0000006fH
  00401	c5		 DB	 -59			; ffffffc5H
  00402	9b		 DB	 -101			; ffffff9bH
  00403	c4		 DB	 -60			; ffffffc4H
  00404	87		 DB	 -121			; ffffff87H
  00405	5f		 DB	 95			; 0000005fH
  00406	70		 DB	 112			; 00000070H
  00407	69		 DB	 105			; 00000069H
  00408	65		 DB	 101			; 00000065H
  00409	6e		 DB	 110			; 0000006eH
  0040a	69		 DB	 105			; 00000069H
  0040b	c4		 DB	 -60			; ffffffc4H
  0040c	99		 DB	 -103			; ffffff99H
  0040d	64		 DB	 100			; 00000064H
  0040e	7a		 DB	 122			; 0000007aH
  0040f	79		 DB	 121			; 00000079H
  00410	00		 DB	 0
$LN15@main:
  00411	6c		 DB	 108			; 0000006cH
  00412	6f		 DB	 111			; 0000006fH
  00413	67		 DB	 103			; 00000067H
  00414	00		 DB	 0
$LN14@main:
  00415	6c		 DB	 108			; 0000006cH
  00416	6f		 DB	 111			; 0000006fH
  00417	67		 DB	 103			; 00000067H
  00418	5f		 DB	 95			; 0000005fH
  00419	6f		 DB	 111			; 0000006fH
  0041a	67		 DB	 103			; 00000067H
  0041b	c3		 DB	 -61			; ffffffc3H
  0041c	b3		 DB	 -77			; ffffffb3H
  0041d	6c		 DB	 108			; 0000006cH
  0041e	6e		 DB	 110			; 0000006eH
  0041f	79		 DB	 121			; 00000079H
  00420	00		 DB	 0
$LN13@main:
  00421	63		 DB	 99			; 00000063H
  00422	00		 DB	 0
$LN12@main:
  00423	62		 DB	 98			; 00000062H
  00424	00		 DB	 0
$LN11@main:
  00425	61		 DB	 97			; 00000061H
  00426	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_main$0:
  00000	8d 4d c4	 lea	 ecx, DWORD PTR _b$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$_main$1:
  00008	8d 4d a0	 lea	 ecx, DWORD PTR _c$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$_main$2:
  00010	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _log_ogólny$[ebp]
  00016	e9 00 00 00 00	 jmp	 ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
__unwindfunclet$_main$3:
  0001b	8d 8d 20 fe ff
	ff		 lea	 ecx, DWORD PTR _log$[ebp]
  00021	e9 00 00 00 00	 jmp	 ??_D?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXXZ
__unwindfunclet$_main$4:
  00026	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _typ_zak³adu$[ebp]
  0002c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$_main:
  00031	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00035	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00038	8b 8a 2c fc ff
	ff		 mov	 ecx, DWORD PTR [edx-980]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00048	33 c8		 xor	 ecx, eax
  0004a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_main
  00054	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_main	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__FG³os@@YAXXZ
text$yd	SEGMENT
??__FG³os@@YAXXZ PROC					; `dynamic atexit destructor for 'G³os'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET ?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  00023	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??__FG³os@@YAXXZ ENDP					; `dynamic atexit destructor for 'G³os''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ??__EG³os@@YAXXZ
text$di	SEGMENT
??__EG³os@@YAXXZ PROC					; `dynamic initializer for 'G³os'', COMDAT

; 65   : string G³os;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET ?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  00023	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00028	68 00 00 00 00	 push	 OFFSET ??__FG³os@@YAXXZ	; `dynamic atexit destructor for 'G³os''
  0002d	e8 00 00 00 00	 call	 _atexit
  00032	83 c4 04	 add	 esp, 4
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
??__EG³os@@YAXXZ ENDP					; `dynamic initializer for 'G³os''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?Show_Cursor@@YAXXZ
_TEXT	SEGMENT
_hCCI$ = -28						; size = 8
_hConsoleOut$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
?Show_Cursor@@YAXXZ PROC				; Show_Cursor, COMDAT

; 363  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00012	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 364  : 	HANDLE hConsoleOut = GetStdHandle(STD_OUTPUT_HANDLE); //Stworzenie zmiennej typu uchwyt i przypisanie do standardowego wyjœcia

  00028	8b f4		 mov	 esi, esp
  0002a	6a f5		 push	 -11			; fffffff5H
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetStdHandle@4
  00032	3b f4		 cmp	 esi, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	89 45 f4	 mov	 DWORD PTR _hConsoleOut$[ebp], eax

; 365  : 	CONSOLE_CURSOR_INFO hCCI; //Stworzenie zmiennej typu informacji o kursorze tekstowym w konsoli
; 366  : 	GetConsoleCursorInfo(hConsoleOut, &hCCI); //Przypisanie do zmiennej informacji o kursorze tekstowym w konsoli

  0003c	8b f4		 mov	 esi, esp
  0003e	8d 45 e4	 lea	 eax, DWORD PTR _hCCI$[ebp]
  00041	50		 push	 eax
  00042	8b 4d f4	 mov	 ecx, DWORD PTR _hConsoleOut$[ebp]
  00045	51		 push	 ecx
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetConsoleCursorInfo@8
  0004c	3b f4		 cmp	 esi, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 367  : 	if (hCCI.bVisible != TRUE) //Sprawdzenie czy wartoœæ widocznoœci kursorsora tekstego w konsoli jest ró¿na od prawdy

  00053	83 7d e8 01	 cmp	 DWORD PTR _hCCI$[ebp+4], 1
  00057	74 1e		 je	 SHORT $LN1@Show_Curso

; 368  : 	{
; 369  : 		hCCI.bVisible = TRUE;//Je¿eli tak, to zmiena widocznoœci kursora na widoczny

  00059	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _hCCI$[ebp+4], 1

; 370  : 		SetConsoleCursorInfo(hConsoleOut, &hCCI); //I ustawienie widocznoœci kursora zgodnie z poprzedni¹ zmienn¹

  00060	8b f4		 mov	 esi, esp
  00062	8d 45 e4	 lea	 eax, DWORD PTR _hCCI$[ebp]
  00065	50		 push	 eax
  00066	8b 4d f4	 mov	 ecx, DWORD PTR _hConsoleOut$[ebp]
  00069	51		 push	 ecx
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetConsoleCursorInfo@8
  00070	3b f4		 cmp	 esi, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Show_Curso:

; 371  : 	}
; 372  : }

  00077	52		 push	 edx
  00078	8b cd		 mov	 ecx, ebp
  0007a	50		 push	 eax
  0007b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@Show_Curso
  00081	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00086	58		 pop	 eax
  00087	5a		 pop	 edx
  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
  0008b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008e	33 cd		 xor	 ecx, ebp
  00090	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00095	81 c4 e0 00 00
	00		 add	 esp, 224		; 000000e0H
  0009b	3b ec		 cmp	 ebp, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
  000a6	66 90		 npad	 2
$LN6@Show_Curso:
  000a8	01 00 00 00	 DD	 1
  000ac	00 00 00 00	 DD	 $LN5@Show_Curso
$LN5@Show_Curso:
  000b0	e4 ff ff ff	 DD	 -28			; ffffffe4H
  000b4	08 00 00 00	 DD	 8
  000b8	00 00 00 00	 DD	 $LN4@Show_Curso
$LN4@Show_Curso:
  000bc	68		 DB	 104			; 00000068H
  000bd	43		 DB	 67			; 00000043H
  000be	43		 DB	 67			; 00000043H
  000bf	49		 DB	 73			; 00000049H
  000c0	00		 DB	 0
?Show_Cursor@@YAXXZ ENDP				; Show_Cursor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?Hide_Cursor@@YAXXZ
_TEXT	SEGMENT
_hCCI$ = -28						; size = 8
_hConsoleOut$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
?Hide_Cursor@@YAXXZ PROC				; Hide_Cursor, COMDAT

; 354  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00012	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 355  : 	HANDLE hConsoleOut = GetStdHandle(STD_OUTPUT_HANDLE); //Stworzenie zmiennej typu uchwyt i przypisanie do standardowego wyjœcia

  00028	8b f4		 mov	 esi, esp
  0002a	6a f5		 push	 -11			; fffffff5H
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetStdHandle@4
  00032	3b f4		 cmp	 esi, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	89 45 f4	 mov	 DWORD PTR _hConsoleOut$[ebp], eax

; 356  : 	CONSOLE_CURSOR_INFO hCCI; //Stworzenie zmiennej typu informacji o kursorze tekstowym w konsoli
; 357  : 	GetConsoleCursorInfo(hConsoleOut, &hCCI); //Przypisanie do zmiennej informacji o kursorze tekstowym w konsoli

  0003c	8b f4		 mov	 esi, esp
  0003e	8d 45 e4	 lea	 eax, DWORD PTR _hCCI$[ebp]
  00041	50		 push	 eax
  00042	8b 4d f4	 mov	 ecx, DWORD PTR _hConsoleOut$[ebp]
  00045	51		 push	 ecx
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetConsoleCursorInfo@8
  0004c	3b f4		 cmp	 esi, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 358  : 	hCCI.bVisible = FALSE; //Zmiena widocznoœci kursora na niewidoczny

  00053	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _hCCI$[ebp+4], 0

; 359  : 	SetConsoleCursorInfo(hConsoleOut, &hCCI); //Ustawienie widocznoœci kursora zgodnie z poprzedni¹ zmienn¹

  0005a	8b f4		 mov	 esi, esp
  0005c	8d 45 e4	 lea	 eax, DWORD PTR _hCCI$[ebp]
  0005f	50		 push	 eax
  00060	8b 4d f4	 mov	 ecx, DWORD PTR _hConsoleOut$[ebp]
  00063	51		 push	 ecx
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetConsoleCursorInfo@8
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 360  : }

  00071	52		 push	 edx
  00072	8b cd		 mov	 ecx, ebp
  00074	50		 push	 eax
  00075	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Hide_Curso
  0007b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00080	58		 pop	 eax
  00081	5a		 pop	 edx
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
  00085	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00088	33 cd		 xor	 ecx, ebp
  0008a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008f	81 c4 e0 00 00
	00		 add	 esp, 224		; 000000e0H
  00095	3b ec		 cmp	 ebp, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c3		 ret	 0
$LN5@Hide_Curso:
  000a0	01 00 00 00	 DD	 1
  000a4	00 00 00 00	 DD	 $LN4@Hide_Curso
$LN4@Hide_Curso:
  000a8	e4 ff ff ff	 DD	 -28			; ffffffe4H
  000ac	08 00 00 00	 DD	 8
  000b0	00 00 00 00	 DD	 $LN3@Hide_Curso
$LN3@Hide_Curso:
  000b4	68		 DB	 104			; 00000068H
  000b5	43		 DB	 67			; 00000043H
  000b6	43		 DB	 67			; 00000043H
  000b7	49		 DB	 73			; 00000049H
  000b8	00		 DB	 0
?Hide_Cursor@@YAXXZ ENDP				; Hide_Cursor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?Change_Col@@YAXABH@Z
_TEXT	SEGMENT
_h_wyj$ = -8						; size = 4
_num_of_col$ = 8					; size = 4
?Change_Col@@YAXABH@Z PROC				; Change_Col, COMDAT

; 348  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 349  : 	HANDLE h_wyj = GetStdHandle(STD_OUTPUT_HANDLE); //Stworzenie zmiennej typu uchwyt i przypisanie do standardowego wyjœcia

  0001e	8b f4		 mov	 esi, esp
  00020	6a f5		 push	 -11			; fffffff5H
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetStdHandle@4
  00028	3b f4		 cmp	 esi, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	89 45 f8	 mov	 DWORD PTR _h_wyj$[ebp], eax

; 350  : 	SetConsoleTextAttribute(h_wyj, num_of_col); //Zmienia atrybut koloru tekstu w konsoli

  00032	8b f4		 mov	 esi, esp
  00034	8b 45 08	 mov	 eax, DWORD PTR _num_of_col$[ebp]
  00037	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0003a	51		 push	 ecx
  0003b	8b 55 f8	 mov	 edx, DWORD PTR _h_wyj$[ebp]
  0003e	52		 push	 edx
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetConsoleTextAttribute@8
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 351  : }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
?Change_Col@@YAXABH@Z ENDP				; Change_Col
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?Ustaw_ustawienia@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_i$1 = -473						; size = 1
_<end>$L9$2 = -464					; size = 4
_<begin>$L9$3 = -452					; size = 4
_<range>$L9$4 = -440					; size = 4
_i$5 = -425						; size = 1
_<end>$L8$6 = -416					; size = 4
_<begin>$L8$7 = -404					; size = 4
_<range>$L8$8 = -392					; size = 4
_i$9 = -377						; size = 1
_<end>$L7$10 = -368					; size = 4
_<begin>$L7$11 = -356					; size = 4
_<range>$L7$12 = -344					; size = 4
_i$13 = -329						; size = 1
_<end>$L6$14 = -320					; size = 4
_<begin>$L6$15 = -308					; size = 4
_<range>$L6$16 = -296					; size = 4
_i$17 = -281						; size = 1
_<end>$L5$18 = -272					; size = 4
_<begin>$L5$19 = -260					; size = 4
_<range>$L5$20 = -248					; size = 4
_i$21 = -233						; size = 1
_<end>$L4$22 = -224					; size = 4
_<begin>$L4$23 = -212					; size = 4
_<range>$L4$24 = -200					; size = 4
_i$25 = -185						; size = 1
_<end>$L3$26 = -176					; size = 4
_<begin>$L3$27 = -164					; size = 4
_<range>$L3$28 = -152					; size = 4
_i$29 = -137						; size = 1
_<end>$L2$30 = -128					; size = 4
_<begin>$L2$31 = -116					; size = 4
_<range>$L2$32 = -104					; size = 4
_i$33 = -89						; size = 1
_<end>$L1$34 = -80					; size = 4
_<begin>$L1$35 = -68					; size = 4
_<range>$L1$36 = -56					; size = 4
_i$37 = -41						; size = 1
_<end>$L0$38 = -32					; size = 4
_<begin>$L0$39 = -20					; size = 4
_<range>$L0$40 = -8					; size = 4
_tekst$ = 8						; size = 4
?Ustaw_ustawienia@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Ustaw_ustawienia, COMDAT

; 1003 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a0 02 00
	00		 sub	 esp, 672		; 000002a0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 60 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-672]
  00012	b9 a8 00 00 00	 mov	 ecx, 168		; 000000a8H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1004 : 	if (tekst.find("iloœæ_minimalna_obrotów_ruletki") != string::npos)

  0001e	6a 00		 push	 0
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@FGPIEHEM@ilo?$JM?f_minimalna_obrot?sw_ruletki?$AA@
  00025	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  00028	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  0002d	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  00033	0f 84 ae 00 00
	00		 je	 $LN32@Ustaw_usta

; 1005 : 	{
; 1006 : 		tekst.erase(0, size("iloœæ_minimalna_obrotów_ruletki"));

  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@FGPIEHEM@ilo?$JM?f_minimalna_obrot?sw_ruletki?$AA@
  0003e	e8 00 00 00 00	 call	 ??$size@D$0CA@@std@@YAIAAY0CA@$$CBD@Z ; std::size<char,32>
  00043	83 c4 04	 add	 esp, 4
  00046	50		 push	 eax
  00047	6a 00		 push	 0
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  0004c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 1007 : 		if (atoi(tekst.c_str())) iloœæ_minimalna_obrotów_ruletki = atoi(tekst.c_str());

  00051	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  00054	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00059	8b f4		 mov	 esi, esp
  0005b	50		 push	 eax
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00062	83 c4 04	 add	 esp, 4
  00065	3b f4		 cmp	 esi, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	85 c0		 test	 eax, eax
  0006e	74 23		 je	 SHORT $LN34@Ustaw_usta
  00070	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  00073	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00078	8b f4		 mov	 esi, esp
  0007a	50		 push	 eax
  0007b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00081	83 c4 04	 add	 esp, 4
  00084	3b f4		 cmp	 esi, esp
  00086	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008b	66 a3 00 00 00
	00		 mov	 WORD PTR ?iloœæ_minimalna_obrotów_ruletki@@3FA, ax ; iloœæ_minimalna_obrotów_ruletki

; 1008 : 		else

  00091	eb 4f		 jmp	 SHORT $LN35@Ustaw_usta
$LN34@Ustaw_usta:

; 1009 : 		{
; 1010 : 			for (char i : tekst)

  00093	8b 45 08	 mov	 eax, DWORD PTR _tekst$[ebp]
  00096	89 45 f8	 mov	 DWORD PTR _<range>$L0$40[ebp], eax
  00099	8b 4d f8	 mov	 ecx, DWORD PTR _<range>$L0$40[ebp]
  0009c	e8 00 00 00 00	 call	 ?_Unchecked_begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Unchecked_begin
  000a1	89 45 ec	 mov	 DWORD PTR _<begin>$L0$39[ebp], eax
  000a4	8b 4d f8	 mov	 ecx, DWORD PTR _<range>$L0$40[ebp]
  000a7	e8 00 00 00 00	 call	 ?_Unchecked_end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Unchecked_end
  000ac	89 45 e0	 mov	 DWORD PTR _<end>$L0$38[ebp], eax
  000af	eb 09		 jmp	 SHORT $LN4@Ustaw_usta
$LN2@Ustaw_usta:
  000b1	8b 45 ec	 mov	 eax, DWORD PTR _<begin>$L0$39[ebp]
  000b4	83 c0 01	 add	 eax, 1
  000b7	89 45 ec	 mov	 DWORD PTR _<begin>$L0$39[ebp], eax
$LN4@Ustaw_usta:
  000ba	8b 45 ec	 mov	 eax, DWORD PTR _<begin>$L0$39[ebp]
  000bd	3b 45 e0	 cmp	 eax, DWORD PTR _<end>$L0$38[ebp]
  000c0	74 18		 je	 SHORT $LN3@Ustaw_usta
  000c2	8b 45 ec	 mov	 eax, DWORD PTR _<begin>$L0$39[ebp]
  000c5	8a 08		 mov	 cl, BYTE PTR [eax]
  000c7	88 4d d7	 mov	 BYTE PTR _i$37[ebp], cl

; 1011 : 				if (i != '0') return;

  000ca	0f be 45 d7	 movsx	 eax, BYTE PTR _i$37[ebp]
  000ce	83 f8 30	 cmp	 eax, 48			; 00000030H
  000d1	74 05		 je	 SHORT $LN36@Ustaw_usta
  000d3	e9 1b 08 00 00	 jmp	 $LN1@Ustaw_usta
$LN36@Ustaw_usta:

; 1012 : 			iloœæ_minimalna_obrotów_ruletki = 0;

  000d8	eb d7		 jmp	 SHORT $LN2@Ustaw_usta
$LN3@Ustaw_usta:
  000da	33 c0		 xor	 eax, eax
  000dc	66 a3 00 00 00
	00		 mov	 WORD PTR ?iloœæ_minimalna_obrotów_ruletki@@3FA, ax ; iloœæ_minimalna_obrotów_ruletki
$LN35@Ustaw_usta:

; 1013 : 		}

  000e2	e9 0c 08 00 00	 jmp	 $LN1@Ustaw_usta
$LN32@Ustaw_usta:

; 1014 : 	}
; 1015 : 	else if (tekst.find("iloœæ_max_dodatkowych_obrotów_ruletki") != string::npos)

  000e7	6a 00		 push	 0
  000e9	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@KNEPJEMG@ilo?$JM?f_max_dodatkowych_obrot?sw_ru@
  000ee	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  000f1	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  000f6	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  000fc	0f 84 ae 00 00
	00		 je	 $LN37@Ustaw_usta

; 1016 : 	{
; 1017 : 		tekst.erase(0, size("iloœæ_max_dodatkowych_obrotów_ruletki"));

  00102	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@KNEPJEMG@ilo?$JM?f_max_dodatkowych_obrot?sw_ru@
  00107	e8 00 00 00 00	 call	 ??$size@D$0CG@@std@@YAIAAY0CG@$$CBD@Z ; std::size<char,38>
  0010c	83 c4 04	 add	 esp, 4
  0010f	50		 push	 eax
  00110	6a 00		 push	 0
  00112	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  00115	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 1018 : 		if (atoi(tekst.c_str())) iloœæ_max_dodatkowych_obrotów_ruletki = atoi(tekst.c_str());

  0011a	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  0011d	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00122	8b f4		 mov	 esi, esp
  00124	50		 push	 eax
  00125	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  0012b	83 c4 04	 add	 esp, 4
  0012e	3b f4		 cmp	 esi, esp
  00130	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00135	85 c0		 test	 eax, eax
  00137	74 23		 je	 SHORT $LN39@Ustaw_usta
  00139	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  0013c	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00141	8b f4		 mov	 esi, esp
  00143	50		 push	 eax
  00144	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  0014a	83 c4 04	 add	 esp, 4
  0014d	3b f4		 cmp	 esi, esp
  0014f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00154	66 a3 00 00 00
	00		 mov	 WORD PTR ?iloœæ_max_dodatkowych_obrotów_ruletki@@3FA, ax ; iloœæ_max_dodatkowych_obrotów_ruletki

; 1019 : 		else

  0015a	eb 4f		 jmp	 SHORT $LN40@Ustaw_usta
$LN39@Ustaw_usta:

; 1020 : 		{
; 1021 : 			for (char i : tekst)

  0015c	8b 45 08	 mov	 eax, DWORD PTR _tekst$[ebp]
  0015f	89 45 c8	 mov	 DWORD PTR _<range>$L1$36[ebp], eax
  00162	8b 4d c8	 mov	 ecx, DWORD PTR _<range>$L1$36[ebp]
  00165	e8 00 00 00 00	 call	 ?_Unchecked_begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Unchecked_begin
  0016a	89 45 bc	 mov	 DWORD PTR _<begin>$L1$35[ebp], eax
  0016d	8b 4d c8	 mov	 ecx, DWORD PTR _<range>$L1$36[ebp]
  00170	e8 00 00 00 00	 call	 ?_Unchecked_end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Unchecked_end
  00175	89 45 b0	 mov	 DWORD PTR _<end>$L1$34[ebp], eax
  00178	eb 09		 jmp	 SHORT $LN7@Ustaw_usta
$LN5@Ustaw_usta:
  0017a	8b 45 bc	 mov	 eax, DWORD PTR _<begin>$L1$35[ebp]
  0017d	83 c0 01	 add	 eax, 1
  00180	89 45 bc	 mov	 DWORD PTR _<begin>$L1$35[ebp], eax
$LN7@Ustaw_usta:
  00183	8b 45 bc	 mov	 eax, DWORD PTR _<begin>$L1$35[ebp]
  00186	3b 45 b0	 cmp	 eax, DWORD PTR _<end>$L1$34[ebp]
  00189	74 18		 je	 SHORT $LN6@Ustaw_usta
  0018b	8b 45 bc	 mov	 eax, DWORD PTR _<begin>$L1$35[ebp]
  0018e	8a 08		 mov	 cl, BYTE PTR [eax]
  00190	88 4d a7	 mov	 BYTE PTR _i$33[ebp], cl

; 1022 : 				if (i != '0') return;

  00193	0f be 45 a7	 movsx	 eax, BYTE PTR _i$33[ebp]
  00197	83 f8 30	 cmp	 eax, 48			; 00000030H
  0019a	74 05		 je	 SHORT $LN41@Ustaw_usta
  0019c	e9 52 07 00 00	 jmp	 $LN1@Ustaw_usta
$LN41@Ustaw_usta:

; 1023 : 			iloœæ_max_dodatkowych_obrotów_ruletki = 0;

  001a1	eb d7		 jmp	 SHORT $LN5@Ustaw_usta
$LN6@Ustaw_usta:
  001a3	33 c0		 xor	 eax, eax
  001a5	66 a3 00 00 00
	00		 mov	 WORD PTR ?iloœæ_max_dodatkowych_obrotów_ruletki@@3FA, ax ; iloœæ_max_dodatkowych_obrotów_ruletki
$LN40@Ustaw_usta:

; 1024 : 		}

  001ab	e9 43 07 00 00	 jmp	 $LN1@Ustaw_usta
$LN37@Ustaw_usta:

; 1025 : 	}
; 1026 : 	else if (tekst.find("czas_przeskoku_kulki_szybki") != string::npos)

  001b0	6a 00		 push	 0
  001b2	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@MMKKMDHC@czas_przeskoku_kulki_szybki?$AA@
  001b7	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  001ba	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  001bf	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  001c5	0f 84 b4 00 00
	00		 je	 $LN42@Ustaw_usta

; 1027 : 	{
; 1028 : 		tekst.erase(0, size("czas_przeskoku_kulki_szybki"));

  001cb	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@MMKKMDHC@czas_przeskoku_kulki_szybki?$AA@
  001d0	e8 00 00 00 00	 call	 ??$size@D$0BM@@std@@YAIAAY0BM@$$CBD@Z ; std::size<char,28>
  001d5	83 c4 04	 add	 esp, 4
  001d8	50		 push	 eax
  001d9	6a 00		 push	 0
  001db	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  001de	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 1029 : 		if (atoi(tekst.c_str())) czas_przeskoku_kulki_szybki = atoi(tekst.c_str());

  001e3	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  001e6	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  001eb	8b f4		 mov	 esi, esp
  001ed	50		 push	 eax
  001ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  001f4	83 c4 04	 add	 esp, 4
  001f7	3b f4		 cmp	 esi, esp
  001f9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001fe	85 c0		 test	 eax, eax
  00200	74 23		 je	 SHORT $LN44@Ustaw_usta
  00202	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  00205	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0020a	8b f4		 mov	 esi, esp
  0020c	50		 push	 eax
  0020d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00213	83 c4 04	 add	 esp, 4
  00216	3b f4		 cmp	 esi, esp
  00218	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0021d	66 a3 00 00 00
	00		 mov	 WORD PTR ?czas_przeskoku_kulki_szybki@@3FA, ax ; czas_przeskoku_kulki_szybki

; 1030 : 		else

  00223	eb 55		 jmp	 SHORT $LN45@Ustaw_usta
$LN44@Ustaw_usta:

; 1031 : 		{
; 1032 : 			for (char i : tekst)

  00225	8b 45 08	 mov	 eax, DWORD PTR _tekst$[ebp]
  00228	89 45 98	 mov	 DWORD PTR _<range>$L2$32[ebp], eax
  0022b	8b 4d 98	 mov	 ecx, DWORD PTR _<range>$L2$32[ebp]
  0022e	e8 00 00 00 00	 call	 ?_Unchecked_begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Unchecked_begin
  00233	89 45 8c	 mov	 DWORD PTR _<begin>$L2$31[ebp], eax
  00236	8b 4d 98	 mov	 ecx, DWORD PTR _<range>$L2$32[ebp]
  00239	e8 00 00 00 00	 call	 ?_Unchecked_end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Unchecked_end
  0023e	89 45 80	 mov	 DWORD PTR _<end>$L2$30[ebp], eax
  00241	eb 09		 jmp	 SHORT $LN10@Ustaw_usta
$LN8@Ustaw_usta:
  00243	8b 45 8c	 mov	 eax, DWORD PTR _<begin>$L2$31[ebp]
  00246	83 c0 01	 add	 eax, 1
  00249	89 45 8c	 mov	 DWORD PTR _<begin>$L2$31[ebp], eax
$LN10@Ustaw_usta:
  0024c	8b 45 8c	 mov	 eax, DWORD PTR _<begin>$L2$31[ebp]
  0024f	3b 45 80	 cmp	 eax, DWORD PTR _<end>$L2$30[ebp]
  00252	74 1e		 je	 SHORT $LN9@Ustaw_usta
  00254	8b 45 8c	 mov	 eax, DWORD PTR _<begin>$L2$31[ebp]
  00257	8a 08		 mov	 cl, BYTE PTR [eax]
  00259	88 8d 77 ff ff
	ff		 mov	 BYTE PTR _i$29[ebp], cl

; 1033 : 				if (i != '0') return;

  0025f	0f be 85 77 ff
	ff ff		 movsx	 eax, BYTE PTR _i$29[ebp]
  00266	83 f8 30	 cmp	 eax, 48			; 00000030H
  00269	74 05		 je	 SHORT $LN46@Ustaw_usta
  0026b	e9 83 06 00 00	 jmp	 $LN1@Ustaw_usta
$LN46@Ustaw_usta:

; 1034 : 			czas_przeskoku_kulki_szybki = 0;

  00270	eb d1		 jmp	 SHORT $LN8@Ustaw_usta
$LN9@Ustaw_usta:
  00272	33 c0		 xor	 eax, eax
  00274	66 a3 00 00 00
	00		 mov	 WORD PTR ?czas_przeskoku_kulki_szybki@@3FA, ax ; czas_przeskoku_kulki_szybki
$LN45@Ustaw_usta:

; 1035 : 		}

  0027a	e9 74 06 00 00	 jmp	 $LN1@Ustaw_usta
$LN42@Ustaw_usta:

; 1036 : 	}
; 1037 : 	else if (tekst.find("czas_przeskoku_kulki_wolny") != string::npos)

  0027f	6a 00		 push	 0
  00281	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@LHGCEKLG@czas_przeskoku_kulki_wolny?$AA@
  00286	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  00289	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  0028e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  00294	0f 84 d2 00 00
	00		 je	 $LN47@Ustaw_usta

; 1038 : 	{
; 1039 : 		tekst.erase(0, size("czas_przeskoku_kulki_wolny"));

  0029a	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@LHGCEKLG@czas_przeskoku_kulki_wolny?$AA@
  0029f	e8 00 00 00 00	 call	 ??$size@D$0BL@@std@@YAIAAY0BL@$$CBD@Z ; std::size<char,27>
  002a4	83 c4 04	 add	 esp, 4
  002a7	50		 push	 eax
  002a8	6a 00		 push	 0
  002aa	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  002ad	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 1040 : 		if (atoi(tekst.c_str())) czas_przeskoku_kulki_wolny = atoi(tekst.c_str());

  002b2	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  002b5	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  002ba	8b f4		 mov	 esi, esp
  002bc	50		 push	 eax
  002bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  002c3	83 c4 04	 add	 esp, 4
  002c6	3b f4		 cmp	 esi, esp
  002c8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002cd	85 c0		 test	 eax, eax
  002cf	74 23		 je	 SHORT $LN49@Ustaw_usta
  002d1	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  002d4	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  002d9	8b f4		 mov	 esi, esp
  002db	50		 push	 eax
  002dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  002e2	83 c4 04	 add	 esp, 4
  002e5	3b f4		 cmp	 esi, esp
  002e7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002ec	66 a3 00 00 00
	00		 mov	 WORD PTR ?czas_przeskoku_kulki_wolny@@3FA, ax ; czas_przeskoku_kulki_wolny

; 1041 : 		else

  002f2	eb 73		 jmp	 SHORT $LN50@Ustaw_usta
$LN49@Ustaw_usta:

; 1042 : 		{
; 1043 : 			for (char i : tekst)

  002f4	8b 45 08	 mov	 eax, DWORD PTR _tekst$[ebp]
  002f7	89 85 68 ff ff
	ff		 mov	 DWORD PTR _<range>$L3$28[ebp], eax
  002fd	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _<range>$L3$28[ebp]
  00303	e8 00 00 00 00	 call	 ?_Unchecked_begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Unchecked_begin
  00308	89 85 5c ff ff
	ff		 mov	 DWORD PTR _<begin>$L3$27[ebp], eax
  0030e	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _<range>$L3$28[ebp]
  00314	e8 00 00 00 00	 call	 ?_Unchecked_end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Unchecked_end
  00319	89 85 50 ff ff
	ff		 mov	 DWORD PTR _<end>$L3$26[ebp], eax
  0031f	eb 0f		 jmp	 SHORT $LN13@Ustaw_usta
$LN11@Ustaw_usta:
  00321	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _<begin>$L3$27[ebp]
  00327	83 c0 01	 add	 eax, 1
  0032a	89 85 5c ff ff
	ff		 mov	 DWORD PTR _<begin>$L3$27[ebp], eax
$LN13@Ustaw_usta:
  00330	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _<begin>$L3$27[ebp]
  00336	3b 85 50 ff ff
	ff		 cmp	 eax, DWORD PTR _<end>$L3$26[ebp]
  0033c	74 21		 je	 SHORT $LN12@Ustaw_usta
  0033e	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _<begin>$L3$27[ebp]
  00344	8a 08		 mov	 cl, BYTE PTR [eax]
  00346	88 8d 47 ff ff
	ff		 mov	 BYTE PTR _i$25[ebp], cl

; 1044 : 				if (i != '0') return;

  0034c	0f be 85 47 ff
	ff ff		 movsx	 eax, BYTE PTR _i$25[ebp]
  00353	83 f8 30	 cmp	 eax, 48			; 00000030H
  00356	74 05		 je	 SHORT $LN51@Ustaw_usta
  00358	e9 96 05 00 00	 jmp	 $LN1@Ustaw_usta
$LN51@Ustaw_usta:

; 1045 : 			czas_przeskoku_kulki_wolny = 0;

  0035d	eb c2		 jmp	 SHORT $LN11@Ustaw_usta
$LN12@Ustaw_usta:
  0035f	33 c0		 xor	 eax, eax
  00361	66 a3 00 00 00
	00		 mov	 WORD PTR ?czas_przeskoku_kulki_wolny@@3FA, ax ; czas_przeskoku_kulki_wolny
$LN50@Ustaw_usta:

; 1046 : 		}

  00367	e9 87 05 00 00	 jmp	 $LN1@Ustaw_usta
$LN47@Ustaw_usta:

; 1047 : 	}
; 1048 : 	else if (tekst.find("styl_liczenia_wygranej") != string::npos)

  0036c	6a 00		 push	 0
  0036e	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@LAIPMCHF@styl_liczenia_wygranej?$AA@
  00373	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  00376	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  0037b	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  00381	0f 84 d2 00 00
	00		 je	 $LN52@Ustaw_usta

; 1049 : 	{
; 1050 : 		tekst.erase(0, size("styl_liczenia_wygranej"));

  00387	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@LAIPMCHF@styl_liczenia_wygranej?$AA@
  0038c	e8 00 00 00 00	 call	 ??$size@D$0BH@@std@@YAIAAY0BH@$$CBD@Z ; std::size<char,23>
  00391	83 c4 04	 add	 esp, 4
  00394	50		 push	 eax
  00395	6a 00		 push	 0
  00397	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  0039a	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 1051 : 		if (atoi(tekst.c_str())) styl_liczenia_wygranej = atoi(tekst.c_str());

  0039f	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  003a2	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  003a7	8b f4		 mov	 esi, esp
  003a9	50		 push	 eax
  003aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  003b0	83 c4 04	 add	 esp, 4
  003b3	3b f4		 cmp	 esi, esp
  003b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003ba	85 c0		 test	 eax, eax
  003bc	74 23		 je	 SHORT $LN54@Ustaw_usta
  003be	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  003c1	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  003c6	8b f4		 mov	 esi, esp
  003c8	50		 push	 eax
  003c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  003cf	83 c4 04	 add	 esp, 4
  003d2	3b f4		 cmp	 esi, esp
  003d4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003d9	66 a3 00 00 00
	00		 mov	 WORD PTR ?styl_liczenia_wygranej@@3FA, ax ; styl_liczenia_wygranej

; 1052 : 		else

  003df	eb 73		 jmp	 SHORT $LN55@Ustaw_usta
$LN54@Ustaw_usta:

; 1053 : 		{
; 1054 : 			for (char i : tekst)

  003e1	8b 45 08	 mov	 eax, DWORD PTR _tekst$[ebp]
  003e4	89 85 38 ff ff
	ff		 mov	 DWORD PTR _<range>$L4$24[ebp], eax
  003ea	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR _<range>$L4$24[ebp]
  003f0	e8 00 00 00 00	 call	 ?_Unchecked_begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Unchecked_begin
  003f5	89 85 2c ff ff
	ff		 mov	 DWORD PTR _<begin>$L4$23[ebp], eax
  003fb	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR _<range>$L4$24[ebp]
  00401	e8 00 00 00 00	 call	 ?_Unchecked_end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Unchecked_end
  00406	89 85 20 ff ff
	ff		 mov	 DWORD PTR _<end>$L4$22[ebp], eax
  0040c	eb 0f		 jmp	 SHORT $LN16@Ustaw_usta
$LN14@Ustaw_usta:
  0040e	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _<begin>$L4$23[ebp]
  00414	83 c0 01	 add	 eax, 1
  00417	89 85 2c ff ff
	ff		 mov	 DWORD PTR _<begin>$L4$23[ebp], eax
$LN16@Ustaw_usta:
  0041d	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _<begin>$L4$23[ebp]
  00423	3b 85 20 ff ff
	ff		 cmp	 eax, DWORD PTR _<end>$L4$22[ebp]
  00429	74 21		 je	 SHORT $LN15@Ustaw_usta
  0042b	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _<begin>$L4$23[ebp]
  00431	8a 08		 mov	 cl, BYTE PTR [eax]
  00433	88 8d 17 ff ff
	ff		 mov	 BYTE PTR _i$21[ebp], cl

; 1055 : 				if (i != '0') return;

  00439	0f be 85 17 ff
	ff ff		 movsx	 eax, BYTE PTR _i$21[ebp]
  00440	83 f8 30	 cmp	 eax, 48			; 00000030H
  00443	74 05		 je	 SHORT $LN56@Ustaw_usta
  00445	e9 a9 04 00 00	 jmp	 $LN1@Ustaw_usta
$LN56@Ustaw_usta:

; 1056 : 			styl_liczenia_wygranej = 0;

  0044a	eb c2		 jmp	 SHORT $LN14@Ustaw_usta
$LN15@Ustaw_usta:
  0044c	33 c0		 xor	 eax, eax
  0044e	66 a3 00 00 00
	00		 mov	 WORD PTR ?styl_liczenia_wygranej@@3FA, ax ; styl_liczenia_wygranej
$LN55@Ustaw_usta:

; 1057 : 		}

  00454	e9 9a 04 00 00	 jmp	 $LN1@Ustaw_usta
$LN52@Ustaw_usta:

; 1058 : 	}
; 1059 : 	else if (tekst.find("kwota_pocz¹tkowa") != string::npos)

  00459	6a 00		 push	 0
  0045b	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@KJAOIHBF@kwota_pocz?$LJtkowa?$AA@
  00460	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  00463	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00468	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  0046e	0f 84 d3 00 00
	00		 je	 $LN57@Ustaw_usta

; 1060 : 	{
; 1061 : 		tekst.erase(0, size("kwota_pocz¹tkowa"));

  00474	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@KJAOIHBF@kwota_pocz?$LJtkowa?$AA@
  00479	e8 00 00 00 00	 call	 ??$size@D$0BB@@std@@YAIAAY0BB@$$CBD@Z ; std::size<char,17>
  0047e	83 c4 04	 add	 esp, 4
  00481	50		 push	 eax
  00482	6a 00		 push	 0
  00484	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  00487	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 1062 : 		if (atoi(tekst.c_str())) kwota_pocz¹tkowa = atoi(tekst.c_str());

  0048c	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  0048f	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00494	8b f4		 mov	 esi, esp
  00496	50		 push	 eax
  00497	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  0049d	83 c4 04	 add	 esp, 4
  004a0	3b f4		 cmp	 esi, esp
  004a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004a7	85 c0		 test	 eax, eax
  004a9	74 22		 je	 SHORT $LN59@Ustaw_usta
  004ab	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  004ae	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  004b3	8b f4		 mov	 esi, esp
  004b5	50		 push	 eax
  004b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  004bc	83 c4 04	 add	 esp, 4
  004bf	3b f4		 cmp	 esi, esp
  004c1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004c6	a3 00 00 00 00	 mov	 DWORD PTR ?kwota_pocz¹tkowa@@3HA, eax ; kwota_pocz¹tkowa

; 1063 : 		else

  004cb	eb 75		 jmp	 SHORT $LN60@Ustaw_usta
$LN59@Ustaw_usta:

; 1064 : 		{
; 1065 : 			for (char i : tekst)

  004cd	8b 45 08	 mov	 eax, DWORD PTR _tekst$[ebp]
  004d0	89 85 08 ff ff
	ff		 mov	 DWORD PTR _<range>$L5$20[ebp], eax
  004d6	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _<range>$L5$20[ebp]
  004dc	e8 00 00 00 00	 call	 ?_Unchecked_begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Unchecked_begin
  004e1	89 85 fc fe ff
	ff		 mov	 DWORD PTR _<begin>$L5$19[ebp], eax
  004e7	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _<range>$L5$20[ebp]
  004ed	e8 00 00 00 00	 call	 ?_Unchecked_end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Unchecked_end
  004f2	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _<end>$L5$18[ebp], eax
  004f8	eb 0f		 jmp	 SHORT $LN19@Ustaw_usta
$LN17@Ustaw_usta:
  004fa	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _<begin>$L5$19[ebp]
  00500	83 c0 01	 add	 eax, 1
  00503	89 85 fc fe ff
	ff		 mov	 DWORD PTR _<begin>$L5$19[ebp], eax
$LN19@Ustaw_usta:
  00509	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _<begin>$L5$19[ebp]
  0050f	3b 85 f0 fe ff
	ff		 cmp	 eax, DWORD PTR _<end>$L5$18[ebp]
  00515	74 21		 je	 SHORT $LN18@Ustaw_usta
  00517	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _<begin>$L5$19[ebp]
  0051d	8a 08		 mov	 cl, BYTE PTR [eax]
  0051f	88 8d e7 fe ff
	ff		 mov	 BYTE PTR _i$17[ebp], cl

; 1066 : 				if (i != '0') return;

  00525	0f be 85 e7 fe
	ff ff		 movsx	 eax, BYTE PTR _i$17[ebp]
  0052c	83 f8 30	 cmp	 eax, 48			; 00000030H
  0052f	74 05		 je	 SHORT $LN61@Ustaw_usta
  00531	e9 bd 03 00 00	 jmp	 $LN1@Ustaw_usta
$LN61@Ustaw_usta:

; 1067 : 			kwota_pocz¹tkowa = 0;

  00536	eb c2		 jmp	 SHORT $LN17@Ustaw_usta
$LN18@Ustaw_usta:
  00538	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?kwota_pocz¹tkowa@@3HA, 0 ; kwota_pocz¹tkowa
$LN60@Ustaw_usta:

; 1068 : 		}

  00542	e9 ac 03 00 00	 jmp	 $LN1@Ustaw_usta
$LN57@Ustaw_usta:

; 1069 : 	}
; 1070 : 	else if (tekst.find("stan_dŸwiêków") != string::npos)

  00547	6a 00		 push	 0
  00549	68 00 00 00 00	 push	 OFFSET ??_C@_0O@JDOJANCO@stan_d?$JPwi?jk?sw?$AA@
  0054e	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  00551	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00556	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  0055c	0f 84 d2 00 00
	00		 je	 $LN62@Ustaw_usta

; 1071 : 	{
; 1072 : 		tekst.erase(0, size("stan_dŸwiêków"));

  00562	68 00 00 00 00	 push	 OFFSET ??_C@_0O@JDOJANCO@stan_d?$JPwi?jk?sw?$AA@
  00567	e8 00 00 00 00	 call	 ??$size@D$0O@@std@@YAIAAY0O@$$CBD@Z ; std::size<char,14>
  0056c	83 c4 04	 add	 esp, 4
  0056f	50		 push	 eax
  00570	6a 00		 push	 0
  00572	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  00575	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 1073 : 		if (atoi(tekst.c_str())) stan_dŸwiêków = atoi(tekst.c_str());

  0057a	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  0057d	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00582	8b f4		 mov	 esi, esp
  00584	50		 push	 eax
  00585	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  0058b	83 c4 04	 add	 esp, 4
  0058e	3b f4		 cmp	 esi, esp
  00590	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00595	85 c0		 test	 eax, eax
  00597	74 23		 je	 SHORT $LN64@Ustaw_usta
  00599	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  0059c	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  005a1	8b f4		 mov	 esi, esp
  005a3	50		 push	 eax
  005a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  005aa	83 c4 04	 add	 esp, 4
  005ad	3b f4		 cmp	 esi, esp
  005af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005b4	66 a3 00 00 00
	00		 mov	 WORD PTR ?stan_dŸwiêków@@3FA, ax ; stan_dŸwiêków

; 1074 : 		else

  005ba	eb 73		 jmp	 SHORT $LN65@Ustaw_usta
$LN64@Ustaw_usta:

; 1075 : 		{
; 1076 : 			for (char i : tekst)

  005bc	8b 45 08	 mov	 eax, DWORD PTR _tekst$[ebp]
  005bf	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _<range>$L6$16[ebp], eax
  005c5	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _<range>$L6$16[ebp]
  005cb	e8 00 00 00 00	 call	 ?_Unchecked_begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Unchecked_begin
  005d0	89 85 cc fe ff
	ff		 mov	 DWORD PTR _<begin>$L6$15[ebp], eax
  005d6	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _<range>$L6$16[ebp]
  005dc	e8 00 00 00 00	 call	 ?_Unchecked_end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Unchecked_end
  005e1	89 85 c0 fe ff
	ff		 mov	 DWORD PTR _<end>$L6$14[ebp], eax
  005e7	eb 0f		 jmp	 SHORT $LN22@Ustaw_usta
$LN20@Ustaw_usta:
  005e9	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _<begin>$L6$15[ebp]
  005ef	83 c0 01	 add	 eax, 1
  005f2	89 85 cc fe ff
	ff		 mov	 DWORD PTR _<begin>$L6$15[ebp], eax
$LN22@Ustaw_usta:
  005f8	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _<begin>$L6$15[ebp]
  005fe	3b 85 c0 fe ff
	ff		 cmp	 eax, DWORD PTR _<end>$L6$14[ebp]
  00604	74 21		 je	 SHORT $LN21@Ustaw_usta
  00606	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _<begin>$L6$15[ebp]
  0060c	8a 08		 mov	 cl, BYTE PTR [eax]
  0060e	88 8d b7 fe ff
	ff		 mov	 BYTE PTR _i$13[ebp], cl

; 1077 : 				if (i != '0') return;

  00614	0f be 85 b7 fe
	ff ff		 movsx	 eax, BYTE PTR _i$13[ebp]
  0061b	83 f8 30	 cmp	 eax, 48			; 00000030H
  0061e	74 05		 je	 SHORT $LN66@Ustaw_usta
  00620	e9 ce 02 00 00	 jmp	 $LN1@Ustaw_usta
$LN66@Ustaw_usta:

; 1078 : 			stan_dŸwiêków = 0;

  00625	eb c2		 jmp	 SHORT $LN20@Ustaw_usta
$LN21@Ustaw_usta:
  00627	33 c0		 xor	 eax, eax
  00629	66 a3 00 00 00
	00		 mov	 WORD PTR ?stan_dŸwiêków@@3FA, ax ; stan_dŸwiêków
$LN65@Ustaw_usta:

; 1079 : 		}

  0062f	e9 bf 02 00 00	 jmp	 $LN1@Ustaw_usta
$LN62@Ustaw_usta:

; 1080 : 	}
; 1081 : 	else if (tekst.find("czy_kontynuowaæ_grê") != string::npos)

  00634	6a 00		 push	 0
  00636	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@MGBNNKM@czy_kontynuowa?f_gr?j?$AA@
  0063b	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  0063e	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00643	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  00649	0f 84 d2 00 00
	00		 je	 $LN67@Ustaw_usta

; 1082 : 	{
; 1083 : 		tekst.erase(0, size("czy_kontynuowaæ_grê"));

  0064f	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@MGBNNKM@czy_kontynuowa?f_gr?j?$AA@
  00654	e8 00 00 00 00	 call	 ??$size@D$0BE@@std@@YAIAAY0BE@$$CBD@Z ; std::size<char,20>
  00659	83 c4 04	 add	 esp, 4
  0065c	50		 push	 eax
  0065d	6a 00		 push	 0
  0065f	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  00662	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 1084 : 		if (atoi(tekst.c_str())) czy_kontynuowaæ_grê = atoi(tekst.c_str());

  00667	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  0066a	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0066f	8b f4		 mov	 esi, esp
  00671	50		 push	 eax
  00672	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00678	83 c4 04	 add	 esp, 4
  0067b	3b f4		 cmp	 esi, esp
  0067d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00682	85 c0		 test	 eax, eax
  00684	74 23		 je	 SHORT $LN69@Ustaw_usta
  00686	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  00689	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0068e	8b f4		 mov	 esi, esp
  00690	50		 push	 eax
  00691	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00697	83 c4 04	 add	 esp, 4
  0069a	3b f4		 cmp	 esi, esp
  0069c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  006a1	66 a3 00 00 00
	00		 mov	 WORD PTR ?czy_kontynuowaæ_grê@@3FA, ax ; czy_kontynuowaæ_grê

; 1085 : 		else

  006a7	eb 73		 jmp	 SHORT $LN70@Ustaw_usta
$LN69@Ustaw_usta:

; 1086 : 		{
; 1087 : 			for (char i : tekst)

  006a9	8b 45 08	 mov	 eax, DWORD PTR _tekst$[ebp]
  006ac	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _<range>$L7$12[ebp], eax
  006b2	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR _<range>$L7$12[ebp]
  006b8	e8 00 00 00 00	 call	 ?_Unchecked_begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Unchecked_begin
  006bd	89 85 9c fe ff
	ff		 mov	 DWORD PTR _<begin>$L7$11[ebp], eax
  006c3	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR _<range>$L7$12[ebp]
  006c9	e8 00 00 00 00	 call	 ?_Unchecked_end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Unchecked_end
  006ce	89 85 90 fe ff
	ff		 mov	 DWORD PTR _<end>$L7$10[ebp], eax
  006d4	eb 0f		 jmp	 SHORT $LN25@Ustaw_usta
$LN23@Ustaw_usta:
  006d6	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _<begin>$L7$11[ebp]
  006dc	83 c0 01	 add	 eax, 1
  006df	89 85 9c fe ff
	ff		 mov	 DWORD PTR _<begin>$L7$11[ebp], eax
$LN25@Ustaw_usta:
  006e5	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _<begin>$L7$11[ebp]
  006eb	3b 85 90 fe ff
	ff		 cmp	 eax, DWORD PTR _<end>$L7$10[ebp]
  006f1	74 21		 je	 SHORT $LN24@Ustaw_usta
  006f3	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _<begin>$L7$11[ebp]
  006f9	8a 08		 mov	 cl, BYTE PTR [eax]
  006fb	88 8d 87 fe ff
	ff		 mov	 BYTE PTR _i$9[ebp], cl

; 1088 : 				if (i != '0') return;

  00701	0f be 85 87 fe
	ff ff		 movsx	 eax, BYTE PTR _i$9[ebp]
  00708	83 f8 30	 cmp	 eax, 48			; 00000030H
  0070b	74 05		 je	 SHORT $LN71@Ustaw_usta
  0070d	e9 e1 01 00 00	 jmp	 $LN1@Ustaw_usta
$LN71@Ustaw_usta:

; 1089 : 			czy_kontynuowaæ_grê = 0;

  00712	eb c2		 jmp	 SHORT $LN23@Ustaw_usta
$LN24@Ustaw_usta:
  00714	33 c0		 xor	 eax, eax
  00716	66 a3 00 00 00
	00		 mov	 WORD PTR ?czy_kontynuowaæ_grê@@3FA, ax ; czy_kontynuowaæ_grê
$LN70@Ustaw_usta:

; 1090 : 		}

  0071c	e9 d2 01 00 00	 jmp	 $LN1@Ustaw_usta
$LN67@Ustaw_usta:

; 1091 : 	}
; 1092 : 	else if (tekst.find("g³os_odczytu_numeru") != string::npos)

  00721	6a 00		 push	 0
  00723	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@ILPCOCN@g?$LDos_odczytu_numeru?$AA@
  00728	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  0072b	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00730	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  00736	0f 84 d2 00 00
	00		 je	 $LN72@Ustaw_usta

; 1093 : 	{
; 1094 : 		tekst.erase(0, size("g³os_odczytu_numeru"));

  0073c	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@ILPCOCN@g?$LDos_odczytu_numeru?$AA@
  00741	e8 00 00 00 00	 call	 ??$size@D$0BE@@std@@YAIAAY0BE@$$CBD@Z ; std::size<char,20>
  00746	83 c4 04	 add	 esp, 4
  00749	50		 push	 eax
  0074a	6a 00		 push	 0
  0074c	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  0074f	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 1095 : 		if (atoi(tekst.c_str())) g³os_odczytu_numeru = atoi(tekst.c_str());

  00754	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  00757	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0075c	8b f4		 mov	 esi, esp
  0075e	50		 push	 eax
  0075f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00765	83 c4 04	 add	 esp, 4
  00768	3b f4		 cmp	 esi, esp
  0076a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0076f	85 c0		 test	 eax, eax
  00771	74 23		 je	 SHORT $LN74@Ustaw_usta
  00773	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  00776	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0077b	8b f4		 mov	 esi, esp
  0077d	50		 push	 eax
  0077e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00784	83 c4 04	 add	 esp, 4
  00787	3b f4		 cmp	 esi, esp
  00789	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0078e	66 a3 00 00 00
	00		 mov	 WORD PTR ?g³os_odczytu_numeru@@3FA, ax ; g³os_odczytu_numeru

; 1096 : 		else

  00794	eb 73		 jmp	 SHORT $LN75@Ustaw_usta
$LN74@Ustaw_usta:

; 1097 : 		{
; 1098 : 			for (char i : tekst)

  00796	8b 45 08	 mov	 eax, DWORD PTR _tekst$[ebp]
  00799	89 85 78 fe ff
	ff		 mov	 DWORD PTR _<range>$L8$8[ebp], eax
  0079f	8b 8d 78 fe ff
	ff		 mov	 ecx, DWORD PTR _<range>$L8$8[ebp]
  007a5	e8 00 00 00 00	 call	 ?_Unchecked_begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Unchecked_begin
  007aa	89 85 6c fe ff
	ff		 mov	 DWORD PTR _<begin>$L8$7[ebp], eax
  007b0	8b 8d 78 fe ff
	ff		 mov	 ecx, DWORD PTR _<range>$L8$8[ebp]
  007b6	e8 00 00 00 00	 call	 ?_Unchecked_end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Unchecked_end
  007bb	89 85 60 fe ff
	ff		 mov	 DWORD PTR _<end>$L8$6[ebp], eax
  007c1	eb 0f		 jmp	 SHORT $LN28@Ustaw_usta
$LN26@Ustaw_usta:
  007c3	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR _<begin>$L8$7[ebp]
  007c9	83 c0 01	 add	 eax, 1
  007cc	89 85 6c fe ff
	ff		 mov	 DWORD PTR _<begin>$L8$7[ebp], eax
$LN28@Ustaw_usta:
  007d2	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR _<begin>$L8$7[ebp]
  007d8	3b 85 60 fe ff
	ff		 cmp	 eax, DWORD PTR _<end>$L8$6[ebp]
  007de	74 21		 je	 SHORT $LN27@Ustaw_usta
  007e0	8b 85 6c fe ff
	ff		 mov	 eax, DWORD PTR _<begin>$L8$7[ebp]
  007e6	8a 08		 mov	 cl, BYTE PTR [eax]
  007e8	88 8d 57 fe ff
	ff		 mov	 BYTE PTR _i$5[ebp], cl

; 1099 : 				if (i != '0') return;

  007ee	0f be 85 57 fe
	ff ff		 movsx	 eax, BYTE PTR _i$5[ebp]
  007f5	83 f8 30	 cmp	 eax, 48			; 00000030H
  007f8	74 05		 je	 SHORT $LN76@Ustaw_usta
  007fa	e9 f4 00 00 00	 jmp	 $LN1@Ustaw_usta
$LN76@Ustaw_usta:

; 1100 : 			g³os_odczytu_numeru = 0;

  007ff	eb c2		 jmp	 SHORT $LN26@Ustaw_usta
$LN27@Ustaw_usta:
  00801	33 c0		 xor	 eax, eax
  00803	66 a3 00 00 00
	00		 mov	 WORD PTR ?g³os_odczytu_numeru@@3FA, ax ; g³os_odczytu_numeru
$LN75@Ustaw_usta:

; 1101 : 		}

  00809	e9 e5 00 00 00	 jmp	 $LN1@Ustaw_usta
$LN72@Ustaw_usta:

; 1102 : 	}
; 1103 : 	else if (tekst.find("g³os_szybkoœæ_odczytu_numeru") != string::npos)

  0080e	6a 00		 push	 0
  00810	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ECEAENDF@g?$LDos_szybko?$JM?f_odczytu_numeru?$AA@
  00815	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  00818	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  0081d	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  00823	0f 84 ca 00 00
	00		 je	 $LN1@Ustaw_usta

; 1104 : 	{
; 1105 : 		tekst.erase(0, size("g³os_szybkoœæ_odczytu_numeru"));

  00829	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@ECEAENDF@g?$LDos_szybko?$JM?f_odczytu_numeru?$AA@
  0082e	e8 00 00 00 00	 call	 ??$size@D$0BN@@std@@YAIAAY0BN@$$CBD@Z ; std::size<char,29>
  00833	83 c4 04	 add	 esp, 4
  00836	50		 push	 eax
  00837	6a 00		 push	 0
  00839	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  0083c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 1106 : 		if (atoi(tekst.c_str())) g³os_szybkoœæ_odczytu_numeru = atoi(tekst.c_str());

  00841	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  00844	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00849	8b f4		 mov	 esi, esp
  0084b	50		 push	 eax
  0084c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00852	83 c4 04	 add	 esp, 4
  00855	3b f4		 cmp	 esi, esp
  00857	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0085c	85 c0		 test	 eax, eax
  0085e	74 23		 je	 SHORT $LN78@Ustaw_usta
  00860	8b 4d 08	 mov	 ecx, DWORD PTR _tekst$[ebp]
  00863	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00868	8b f4		 mov	 esi, esp
  0086a	50		 push	 eax
  0086b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00871	83 c4 04	 add	 esp, 4
  00874	3b f4		 cmp	 esi, esp
  00876	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0087b	66 a3 00 00 00
	00		 mov	 WORD PTR ?g³os_szybkoœæ_odczytu_numeru@@3FA, ax ; g³os_szybkoœæ_odczytu_numeru

; 1107 : 		else

  00881	eb 70		 jmp	 SHORT $LN1@Ustaw_usta
$LN78@Ustaw_usta:

; 1108 : 		{
; 1109 : 			for (char i : tekst)

  00883	8b 45 08	 mov	 eax, DWORD PTR _tekst$[ebp]
  00886	89 85 48 fe ff
	ff		 mov	 DWORD PTR _<range>$L9$4[ebp], eax
  0088c	8b 8d 48 fe ff
	ff		 mov	 ecx, DWORD PTR _<range>$L9$4[ebp]
  00892	e8 00 00 00 00	 call	 ?_Unchecked_begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Unchecked_begin
  00897	89 85 3c fe ff
	ff		 mov	 DWORD PTR _<begin>$L9$3[ebp], eax
  0089d	8b 8d 48 fe ff
	ff		 mov	 ecx, DWORD PTR _<range>$L9$4[ebp]
  008a3	e8 00 00 00 00	 call	 ?_Unchecked_end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Unchecked_end
  008a8	89 85 30 fe ff
	ff		 mov	 DWORD PTR _<end>$L9$2[ebp], eax
  008ae	eb 0f		 jmp	 SHORT $LN31@Ustaw_usta
$LN29@Ustaw_usta:
  008b0	8b 85 3c fe ff
	ff		 mov	 eax, DWORD PTR _<begin>$L9$3[ebp]
  008b6	83 c0 01	 add	 eax, 1
  008b9	89 85 3c fe ff
	ff		 mov	 DWORD PTR _<begin>$L9$3[ebp], eax
$LN31@Ustaw_usta:
  008bf	8b 85 3c fe ff
	ff		 mov	 eax, DWORD PTR _<begin>$L9$3[ebp]
  008c5	3b 85 30 fe ff
	ff		 cmp	 eax, DWORD PTR _<end>$L9$2[ebp]
  008cb	74 1e		 je	 SHORT $LN30@Ustaw_usta
  008cd	8b 85 3c fe ff
	ff		 mov	 eax, DWORD PTR _<begin>$L9$3[ebp]
  008d3	8a 08		 mov	 cl, BYTE PTR [eax]
  008d5	88 8d 27 fe ff
	ff		 mov	 BYTE PTR _i$1[ebp], cl

; 1110 : 				if (i != '0') return;

  008db	0f be 85 27 fe
	ff ff		 movsx	 eax, BYTE PTR _i$1[ebp]
  008e2	83 f8 30	 cmp	 eax, 48			; 00000030H
  008e5	74 02		 je	 SHORT $LN80@Ustaw_usta
  008e7	eb 0a		 jmp	 SHORT $LN1@Ustaw_usta
$LN80@Ustaw_usta:

; 1111 : 			g³os_szybkoœæ_odczytu_numeru = 0;

  008e9	eb c5		 jmp	 SHORT $LN29@Ustaw_usta
$LN30@Ustaw_usta:
  008eb	33 c0		 xor	 eax, eax
  008ed	66 a3 00 00 00
	00		 mov	 WORD PTR ?g³os_szybkoœæ_odczytu_numeru@@3FA, ax ; g³os_szybkoœæ_odczytu_numeru
$LN1@Ustaw_usta:

; 1112 : 		}
; 1113 : 	}
; 1114 : }

  008f3	5f		 pop	 edi
  008f4	5e		 pop	 esi
  008f5	5b		 pop	 ebx
  008f6	81 c4 a0 02 00
	00		 add	 esp, 672		; 000002a0H
  008fc	3b ec		 cmp	 ebp, esp
  008fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00903	8b e5		 mov	 esp, ebp
  00905	5d		 pop	 ebp
  00906	c3		 ret	 0
?Ustaw_ustawienia@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Ustaw_ustawienia
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?Pêtla_g³ówna@@YAXAAH00AAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AADAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
tv333 = -256						; size = 4
tv302 = -256						; size = 4
tv256 = -256						; size = 4
tv181 = -256						; size = 4
tv89 = -256						; size = 4
$T1 = -248						; size = 4
$T2 = -236						; size = 4
$T3 = -224						; size = 28
_wygrana$ = 8						; size = 4
_kwota_zak³adu$ = 12					; size = 4
_iloœæ_pieniêdzy$ = 16					; size = 4
_log_ogólny$ = 20					; size = 4
_log$ = 24						; size = 4
_co_kontynuowaæ$ = 28					; size = 4
_typ_zak³adu$ = 32					; size = 4
_wylosowana_liczba$ = 36				; size = 4
?Pêtla_g³ówna@@YAXAAH00AAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AADAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; Pêtla_g³ówna, COMDAT

; 971  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 00 01 00
	00		 sub	 esp, 256		; 00000100H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 00 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-256]
  00012	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 972  : 	if (co_kontynuowaæ == 'n') Wczytaj_Kwotê_Zak³adu(kwota_zak³adu, iloœæ_pieniêdzy); //Przypisanie do zmiennej pobranej od u¿ytkownika kwoty zak³adu

  0001e	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  00021	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00024	83 f9 6e	 cmp	 ecx, 110		; 0000006eH
  00027	75 12		 jne	 SHORT $LN2@P?
  00029	8b 45 10	 mov	 eax, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  0002c	50		 push	 eax
  0002d	8b 4d 0c	 mov	 ecx, DWORD PTR _kwota_zak³adu$[ebp]
  00030	51		 push	 ecx
  00031	e8 00 00 00 00	 call	 ?Wczytaj_Kwotê_Zak³adu@@YAXAAHABH@Z ; Wczytaj_Kwotê_Zak³adu
  00036	83 c4 08	 add	 esp, 8
  00039	eb 4f		 jmp	 SHORT $LN3@P?
$LN2@P?:

; 973  : 	else cout << "Obstawiono za " << kwota_zak³adu << "$" << endl; //Wypisanie wczytanej kwoty zak³adu

  0003b	8b f4		 mov	 esi, esp
  0003d	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_01EPMOAMKG@$?$AA@
  00047	8b fc		 mov	 edi, esp
  00049	8b 45 0c	 mov	 eax, DWORD PTR _kwota_zak³adu$[ebp]
  0004c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004e	51		 push	 ecx
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0P@LMKDJHDC@Obstawiono?5za?5?$AA@
  00054	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0005a	52		 push	 edx
  0005b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00060	83 c4 08	 add	 esp, 8
  00063	8b c8		 mov	 ecx, eax
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0006b	3b fc		 cmp	 edi, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00078	83 c4 08	 add	 esp, 8
  0007b	8b c8		 mov	 ecx, eax
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00083	3b f4		 cmp	 esi, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@P?:

; 974  : 	if (co_kontynuowaæ == 'n') log << "Obstawiono za " << kwota_zak³adu << "$"; //Zapisanie do bufora pliku logu aktualnego informacji o kwocie obstawionego zak³adu

  0008a	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  0008d	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00090	83 f9 6e	 cmp	 ecx, 110		; 0000006eH
  00093	75 57		 jne	 SHORT $LN4@P?
  00095	83 7d 18 00	 cmp	 DWORD PTR _log$[ebp], 0
  00099	74 0e		 je	 SHORT $LN31@P?
  0009b	8b 45 18	 mov	 eax, DWORD PTR _log$[ebp]
  0009e	83 c0 10	 add	 eax, 16			; 00000010H
  000a1	89 85 00 ff ff
	ff		 mov	 DWORD PTR tv89[ebp], eax
  000a7	eb 0a		 jmp	 SHORT $LN32@P?
$LN31@P?:
  000a9	c7 85 00 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv89[ebp], 0
$LN32@P?:
  000b3	68 00 00 00 00	 push	 OFFSET ??_C@_01EPMOAMKG@$?$AA@
  000b8	8b f4		 mov	 esi, esp
  000ba	8b 4d 0c	 mov	 ecx, DWORD PTR _kwota_zak³adu$[ebp]
  000bd	8b 11		 mov	 edx, DWORD PTR [ecx]
  000bf	52		 push	 edx
  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_0P@LMKDJHDC@Obstawiono?5za?5?$AA@
  000c5	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR tv89[ebp]
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000d1	83 c4 08	 add	 esp, 8
  000d4	8b c8		 mov	 ecx, eax
  000d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  000dc	3b f4		 cmp	 esi, esp
  000de	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e3	50		 push	 eax
  000e4	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000e9	83 c4 08	 add	 esp, 8
$LN4@P?:

; 975  : 	if (co_kontynuowaæ == 'n') log_ogólny << "Obstawiono za " << kwota_zak³adu << "$"; //Zapisanie do bufora pliku logu ogólnego informacji o kwocie obstawionego zak³adu

  000ec	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  000ef	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  000f2	83 f9 6e	 cmp	 ecx, 110		; 0000006eH
  000f5	75 36		 jne	 SHORT $LN5@P?
  000f7	68 00 00 00 00	 push	 OFFSET ??_C@_01EPMOAMKG@$?$AA@
  000fc	8b f4		 mov	 esi, esp
  000fe	8b 45 0c	 mov	 eax, DWORD PTR _kwota_zak³adu$[ebp]
  00101	8b 08		 mov	 ecx, DWORD PTR [eax]
  00103	51		 push	 ecx
  00104	68 00 00 00 00	 push	 OFFSET ??_C@_0P@LMKDJHDC@Obstawiono?5za?5?$AA@
  00109	8b 55 14	 mov	 edx, DWORD PTR _log_ogólny$[ebp]
  0010c	52		 push	 edx
  0010d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00112	83 c4 08	 add	 esp, 8
  00115	8b c8		 mov	 ecx, eax
  00117	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0011d	3b f4		 cmp	 esi, esp
  0011f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0012a	83 c4 08	 add	 esp, 8
$LN5@P?:

; 976  : 	log.flush(); //Zapisanie do pliku log_aktualny.txt danych wpisanych do bufora danych

  0012d	8b 4d 18	 mov	 ecx, DWORD PTR _log$[ebp]
  00130	83 c1 10	 add	 ecx, 16			; 00000010H
  00133	8b f4		 mov	 esi, esp
  00135	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  0013b	3b f4		 cmp	 esi, esp
  0013d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 977  : 	log_ogólny.flush(); //Zapisanie do pliku log_ogólny.txt danych wpisanych do bufora danych

  00142	8b f4		 mov	 esi, esp
  00144	8b 4d 14	 mov	 ecx, DWORD PTR _log_ogólny$[ebp]
  00147	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  0014d	3b f4		 cmp	 esi, esp
  0014f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 978  : 	if (co_kontynuowaæ == 'n' || co_kontynuowaæ == 'k') typ_zak³adu = Obstaw(); //Przypisanie do zmiennej pobranej od u¿ytkownika typu zak³adu

  00154	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  00157	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0015a	83 f9 6e	 cmp	 ecx, 110		; 0000006eH
  0015d	74 0b		 je	 SHORT $LN8@P?
  0015f	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  00162	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00165	83 f9 6b	 cmp	 ecx, 107		; 0000006bH
  00168	75 31		 jne	 SHORT $LN6@P?
$LN8@P?:
  0016a	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00170	50		 push	 eax
  00171	e8 00 00 00 00	 call	 ?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; Obstaw
  00176	83 c4 04	 add	 esp, 4
  00179	89 85 00 ff ff
	ff		 mov	 DWORD PTR tv333[ebp], eax
  0017f	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR tv333[ebp]
  00185	51		 push	 ecx
  00186	8b 4d 20	 mov	 ecx, DWORD PTR _typ_zak³adu$[ebp]
  00189	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  0018e	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00194	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00199	eb 37		 jmp	 SHORT $LN7@P?
$LN6@P?:

; 979  : 	else cout << "Obstawiono zak³ad " << typ_zak³adu << endl; //Wypisanie wczytanego typu zak³adu

  0019b	8b f4		 mov	 esi, esp
  0019d	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  001a2	8b 45 20	 mov	 eax, DWORD PTR _typ_zak³adu$[ebp]
  001a5	50		 push	 eax
  001a6	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@IOLLNBIB@Obstawiono?5zak?$LDad?5?$AA@
  001ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001b1	51		 push	 ecx
  001b2	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001b7	83 c4 08	 add	 esp, 8
  001ba	50		 push	 eax
  001bb	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  001c0	83 c4 08	 add	 esp, 8
  001c3	8b c8		 mov	 ecx, eax
  001c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  001cb	3b f4		 cmp	 esi, esp
  001cd	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN7@P?:

; 980  : 	if (co_kontynuowaæ == 'n' || co_kontynuowaæ == 'k') log << " Obstawiono zaklad " << typ_zak³adu; //Zapisanie do bufora pliku logu aktualnego informacji o typie obstawionego zak³adu

  001d2	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  001d5	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  001d8	83 f9 6e	 cmp	 ecx, 110		; 0000006eH
  001db	74 0b		 je	 SHORT $LN10@P?
  001dd	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  001e0	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  001e3	83 f9 6b	 cmp	 ecx, 107		; 0000006bH
  001e6	75 3f		 jne	 SHORT $LN9@P?
$LN10@P?:
  001e8	83 7d 18 00	 cmp	 DWORD PTR _log$[ebp], 0
  001ec	74 0e		 je	 SHORT $LN33@P?
  001ee	8b 45 18	 mov	 eax, DWORD PTR _log$[ebp]
  001f1	83 c0 10	 add	 eax, 16			; 00000010H
  001f4	89 85 00 ff ff
	ff		 mov	 DWORD PTR tv181[ebp], eax
  001fa	eb 0a		 jmp	 SHORT $LN34@P?
$LN33@P?:
  001fc	c7 85 00 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv181[ebp], 0
$LN34@P?:
  00206	8b 4d 20	 mov	 ecx, DWORD PTR _typ_zak³adu$[ebp]
  00209	51		 push	 ecx
  0020a	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@EKDPDLOA@?5Obstawiono?5zaklad?5?$AA@
  0020f	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR tv181[ebp]
  00215	52		 push	 edx
  00216	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0021b	83 c4 08	 add	 esp, 8
  0021e	50		 push	 eax
  0021f	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  00224	83 c4 08	 add	 esp, 8
$LN9@P?:

; 981  : 	if (co_kontynuowaæ == 'n' || co_kontynuowaæ == 'k') log_ogólny << " Obstawiono zaklad " << typ_zak³adu; //Zapisanie do bufora pliku logu ogólnego informacji o typie obstawionego zak³adu

  00227	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  0022a	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0022d	83 f9 6e	 cmp	 ecx, 110		; 0000006eH
  00230	74 0b		 je	 SHORT $LN12@P?
  00232	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  00235	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00238	83 f9 6b	 cmp	 ecx, 107		; 0000006bH
  0023b	75 1e		 jne	 SHORT $LN11@P?
$LN12@P?:
  0023d	8b 45 20	 mov	 eax, DWORD PTR _typ_zak³adu$[ebp]
  00240	50		 push	 eax
  00241	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@EKDPDLOA@?5Obstawiono?5zaklad?5?$AA@
  00246	8b 4d 14	 mov	 ecx, DWORD PTR _log_ogólny$[ebp]
  00249	51		 push	 ecx
  0024a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0024f	83 c4 08	 add	 esp, 8
  00252	50		 push	 eax
  00253	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  00258	83 c4 08	 add	 esp, 8
$LN11@P?:

; 982  : 	log.flush(); //Zapisanie do pliku log_aktualny.txt danych wpisanych do bufora danych

  0025b	8b 4d 18	 mov	 ecx, DWORD PTR _log$[ebp]
  0025e	83 c1 10	 add	 ecx, 16			; 00000010H
  00261	8b f4		 mov	 esi, esp
  00263	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  00269	3b f4		 cmp	 esi, esp
  0026b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 983  : 	log_ogólny.flush(); //Zapisanie do pliku log_ogólny.txt danych wpisanych do bufora danych

  00270	8b f4		 mov	 esi, esp
  00272	8b 4d 14	 mov	 ecx, DWORD PTR _log_ogólny$[ebp]
  00275	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  0027b	3b f4		 cmp	 esi, esp
  0027d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 984  : 	if (co_kontynuowaæ == 'n' || co_kontynuowaæ == 'k' || co_kontynuowaæ == 't' || co_kontynuowaæ == 'w') iloœæ_pieniêdzy -= kwota_zak³adu; //Odjêcie od iloœci pieniêdzy kwoty zak³adu

  00282	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  00285	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00288	83 f9 6e	 cmp	 ecx, 110		; 0000006eH
  0028b	74 21		 je	 SHORT $LN14@P?
  0028d	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  00290	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00293	83 f9 6b	 cmp	 ecx, 107		; 0000006bH
  00296	74 16		 je	 SHORT $LN14@P?
  00298	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  0029b	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0029e	83 f9 74	 cmp	 ecx, 116		; 00000074H
  002a1	74 0b		 je	 SHORT $LN14@P?
  002a3	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  002a6	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  002a9	83 f9 77	 cmp	 ecx, 119		; 00000077H
  002ac	75 0f		 jne	 SHORT $LN13@P?
$LN14@P?:
  002ae	8b 45 10	 mov	 eax, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  002b1	8b 4d 0c	 mov	 ecx, DWORD PTR _kwota_zak³adu$[ebp]
  002b4	8b 10		 mov	 edx, DWORD PTR [eax]
  002b6	2b 11		 sub	 edx, DWORD PTR [ecx]
  002b8	8b 45 10	 mov	 eax, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  002bb	89 10		 mov	 DWORD PTR [eax], edx
$LN13@P?:

; 985  : 	if (co_kontynuowaæ == 'n' || co_kontynuowaæ == 'k' || co_kontynuowaæ == 't') cout << "Kulka w grze, zaczekaj na wylosowanie numeru..." << endl; //Poinformowanie u¿ytkownika o rozpoczêciu losowania

  002bd	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  002c0	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  002c3	83 f9 6e	 cmp	 ecx, 110		; 0000006eH
  002c6	74 16		 je	 SHORT $LN16@P?
  002c8	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  002cb	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  002ce	83 f9 6b	 cmp	 ecx, 107		; 0000006bH
  002d1	74 0b		 je	 SHORT $LN16@P?
  002d3	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  002d6	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  002d9	83 f9 74	 cmp	 ecx, 116		; 00000074H
  002dc	75 29		 jne	 SHORT $LN15@P?
$LN16@P?:
  002de	8b f4		 mov	 esi, esp
  002e0	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  002e5	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@EJNBAHOM@Kulka?5w?5grze?0?5zaczekaj?5na?5wyloso@
  002ea	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  002ef	50		 push	 eax
  002f0	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002f5	83 c4 08	 add	 esp, 8
  002f8	8b c8		 mov	 ecx, eax
  002fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00300	3b f4		 cmp	 esi, esp
  00302	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN15@P?:

; 986  : 	if (co_kontynuowaæ == 'n' || co_kontynuowaæ == 'k' || co_kontynuowaæ == 't') wylosowana_liczba = Zakrêæ_Ruletk¹(); //Wylosowanie i przypisanie do zmiennej liczby bêdêcej na  wylosowanej pozycji na kole ruletki

  00307	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  0030a	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0030d	83 f9 6e	 cmp	 ecx, 110		; 0000006eH
  00310	74 16		 je	 SHORT $LN19@P?
  00312	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  00315	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00318	83 f9 6b	 cmp	 ecx, 107		; 0000006bH
  0031b	74 0b		 je	 SHORT $LN19@P?
  0031d	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  00320	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00323	83 f9 74	 cmp	 ecx, 116		; 00000074H
  00326	75 0c		 jne	 SHORT $LN17@P?
$LN19@P?:
  00328	e8 00 00 00 00	 call	 ?Zakrêæ_Ruletk¹@@YAHXZ	; Zakrêæ_Ruletk¹
  0032d	8b 4d 24	 mov	 ecx, DWORD PTR _wylosowana_liczba$[ebp]
  00330	89 01		 mov	 DWORD PTR [ecx], eax

; 987  : 	else {

  00332	eb 6f		 jmp	 SHORT $LN18@P?
$LN17@P?:

; 988  : 		cout << "Wylosowano numer "; //Poinformowaniu o wylosowaniu liczby

  00334	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@IEHJKDDM@Wylosowano?5numer?5?$AA@
  00339	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0033e	50		 push	 eax
  0033f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00344	83 c4 08	 add	 esp, 8

; 989  : 		Change_Col(Ruletka_plansza_kolor_col[wylosowana_liczba]); //Zmiana koloru tekstu w konsoli zgodnie z kolorem numeru na ruletce

  00347	8b 45 24	 mov	 eax, DWORD PTR _wylosowana_liczba$[ebp]
  0034a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0034c	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR ?Ruletka_plansza_kolor_col@@3QBHB[ecx*4]
  00353	52		 push	 edx
  00354	e8 00 00 00 00	 call	 ?Change_Col@@YAXABH@Z	; Change_Col
  00359	83 c4 04	 add	 esp, 4

; 990  : 		cout << wylosowana_liczba; //Wypisanie wylosowanej liczby

  0035c	8b f4		 mov	 esi, esp
  0035e	8b 45 24	 mov	 eax, DWORD PTR _wylosowana_liczba$[ebp]
  00361	8b 08		 mov	 ecx, DWORD PTR [eax]
  00363	51		 push	 ecx
  00364	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0036a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00370	3b f4		 cmp	 esi, esp
  00372	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 991  : 		Change_Col(7); //Powrót do standardowego koloru tekstu w konsoli

  00377	c7 85 14 ff ff
	ff 07 00 00 00	 mov	 DWORD PTR $T2[ebp], 7
  00381	8d 85 14 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00387	50		 push	 eax
  00388	e8 00 00 00 00	 call	 ?Change_Col@@YAXABH@Z	; Change_Col
  0038d	83 c4 04	 add	 esp, 4

; 992  : 		cout << ". "; //Wypisanie kropki koñcz¹cej zdanie

  00390	68 00 00 00 00	 push	 OFFSET ??_C@_02KHOJGJKF@?4?5?$AA@
  00395	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0039a	50		 push	 eax
  0039b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003a0	83 c4 08	 add	 esp, 8
$LN18@P?:

; 993  : 	}
; 994  : 	if (co_kontynuowaæ == 'n' || co_kontynuowaæ == 'k' || co_kontynuowaæ == 't') log << " Wylosowano " << wylosowana_liczba; //Zapisanie do bufora pliku logu aktualnego informacji o wylosowanej liczbie

  003a3	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  003a6	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  003a9	83 f9 6e	 cmp	 ecx, 110		; 0000006eH
  003ac	74 16		 je	 SHORT $LN21@P?
  003ae	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  003b1	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  003b4	83 f9 6b	 cmp	 ecx, 107		; 0000006bH
  003b7	74 0b		 je	 SHORT $LN21@P?
  003b9	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  003bc	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  003bf	83 f9 74	 cmp	 ecx, 116		; 00000074H
  003c2	75 49		 jne	 SHORT $LN20@P?
$LN21@P?:
  003c4	83 7d 18 00	 cmp	 DWORD PTR _log$[ebp], 0
  003c8	74 0e		 je	 SHORT $LN35@P?
  003ca	8b 45 18	 mov	 eax, DWORD PTR _log$[ebp]
  003cd	83 c0 10	 add	 eax, 16			; 00000010H
  003d0	89 85 00 ff ff
	ff		 mov	 DWORD PTR tv256[ebp], eax
  003d6	eb 0a		 jmp	 SHORT $LN36@P?
$LN35@P?:
  003d8	c7 85 00 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv256[ebp], 0
$LN36@P?:
  003e2	8b f4		 mov	 esi, esp
  003e4	8b 4d 24	 mov	 ecx, DWORD PTR _wylosowana_liczba$[ebp]
  003e7	8b 11		 mov	 edx, DWORD PTR [ecx]
  003e9	52		 push	 edx
  003ea	68 00 00 00 00	 push	 OFFSET ??_C@_0N@CGNKGGIC@?5Wylosowano?5?$AA@
  003ef	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR tv256[ebp]
  003f5	50		 push	 eax
  003f6	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003fb	83 c4 08	 add	 esp, 8
  003fe	8b c8		 mov	 ecx, eax
  00400	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00406	3b f4		 cmp	 esi, esp
  00408	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN20@P?:

; 995  : 	if (co_kontynuowaæ == 'n' || co_kontynuowaæ == 'k' || co_kontynuowaæ == 't') log_ogólny << " Wylosowano " << wylosowana_liczba; //Zapisanie do bufora pliku logu ogólnego informacji o wylosowanej liczbie

  0040d	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  00410	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00413	83 f9 6e	 cmp	 ecx, 110		; 0000006eH
  00416	74 16		 je	 SHORT $LN23@P?
  00418	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  0041b	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0041e	83 f9 6b	 cmp	 ecx, 107		; 0000006bH
  00421	74 0b		 je	 SHORT $LN23@P?
  00423	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  00426	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00429	83 f9 74	 cmp	 ecx, 116		; 00000074H
  0042c	75 28		 jne	 SHORT $LN22@P?
$LN23@P?:
  0042e	8b f4		 mov	 esi, esp
  00430	8b 45 24	 mov	 eax, DWORD PTR _wylosowana_liczba$[ebp]
  00433	8b 08		 mov	 ecx, DWORD PTR [eax]
  00435	51		 push	 ecx
  00436	68 00 00 00 00	 push	 OFFSET ??_C@_0N@CGNKGGIC@?5Wylosowano?5?$AA@
  0043b	8b 55 14	 mov	 edx, DWORD PTR _log_ogólny$[ebp]
  0043e	52		 push	 edx
  0043f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00444	83 c4 08	 add	 esp, 8
  00447	8b c8		 mov	 ecx, eax
  00449	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0044f	3b f4		 cmp	 esi, esp
  00451	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN22@P?:

; 996  : 	log.flush(); //Zapisanie do pliku log_aktualny.txt danych wpisanych do bufora danych

  00456	8b 4d 18	 mov	 ecx, DWORD PTR _log$[ebp]
  00459	83 c1 10	 add	 ecx, 16			; 00000010H
  0045c	8b f4		 mov	 esi, esp
  0045e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  00464	3b f4		 cmp	 esi, esp
  00466	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 997  : 	log_ogólny.flush(); //Zapisanie do pliku log_ogólny.txt danych wpisanych do bufora danych

  0046b	8b f4		 mov	 esi, esp
  0046d	8b 4d 14	 mov	 ecx, DWORD PTR _log_ogólny$[ebp]
  00470	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  00476	3b f4		 cmp	 esi, esp
  00478	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 998  : 	if (co_kontynuowaæ == 'n' || co_kontynuowaæ == 'k' || co_kontynuowaæ == 't') Odczytaj_liczbê(wylosowana_liczba, typ_zak³adu);

  0047d	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  00480	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00483	83 f9 6e	 cmp	 ecx, 110		; 0000006eH
  00486	74 16		 je	 SHORT $LN25@P?
  00488	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  0048b	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0048e	83 f9 6b	 cmp	 ecx, 107		; 0000006bH
  00491	74 0b		 je	 SHORT $LN25@P?
  00493	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  00496	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00499	83 f9 74	 cmp	 ecx, 116		; 00000074H
  0049c	75 10		 jne	 SHORT $LN24@P?
$LN25@P?:
  0049e	8b 45 20	 mov	 eax, DWORD PTR _typ_zak³adu$[ebp]
  004a1	50		 push	 eax
  004a2	8b 4d 24	 mov	 ecx, DWORD PTR _wylosowana_liczba$[ebp]
  004a5	51		 push	 ecx
  004a6	e8 00 00 00 00	 call	 ?Odczytaj_liczbê@@YAXABHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Odczytaj_liczbê
  004ab	83 c4 08	 add	 esp, 8
$LN24@P?:

; 999  : 	if (co_kontynuowaæ == 'n' || co_kontynuowaæ == 'k' || co_kontynuowaæ == 't' || co_kontynuowaæ == 'w') wygrana = SprawdŸ_Zak³ad(kwota_zak³adu, typ_zak³adu, wylosowana_liczba);

  004ae	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  004b1	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  004b4	83 f9 6e	 cmp	 ecx, 110		; 0000006eH
  004b7	74 21		 je	 SHORT $LN27@P?
  004b9	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  004bc	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  004bf	83 f9 6b	 cmp	 ecx, 107		; 0000006bH
  004c2	74 16		 je	 SHORT $LN27@P?
  004c4	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  004c7	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  004ca	83 f9 74	 cmp	 ecx, 116		; 00000074H
  004cd	74 0b		 je	 SHORT $LN27@P?
  004cf	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  004d2	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  004d5	83 f9 77	 cmp	 ecx, 119		; 00000077H
  004d8	75 35		 jne	 SHORT $LN26@P?
$LN27@P?:
  004da	8b 45 24	 mov	 eax, DWORD PTR _wylosowana_liczba$[ebp]
  004dd	50		 push	 eax
  004de	83 ec 1c	 sub	 esp, 28			; 0000001cH
  004e1	8b cc		 mov	 ecx, esp
  004e3	89 a5 08 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], esp
  004e9	8b 55 20	 mov	 edx, DWORD PTR _typ_zak³adu$[ebp]
  004ec	52		 push	 edx
  004ed	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  004f2	8b 45 0c	 mov	 eax, DWORD PTR _kwota_zak³adu$[ebp]
  004f5	50		 push	 eax
  004f6	e8 00 00 00 00	 call	 ?SprawdŸ_Zak³ad@@YAHABHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; SprawdŸ_Zak³ad
  004fb	83 c4 24	 add	 esp, 36			; 00000024H
  004fe	89 85 00 ff ff
	ff		 mov	 DWORD PTR tv302[ebp], eax
  00504	8b 4d 08	 mov	 ecx, DWORD PTR _wygrana$[ebp]
  00507	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR tv302[ebp]
  0050d	89 11		 mov	 DWORD PTR [ecx], edx
$LN26@P?:

; 1000 : 	if (co_kontynuowaæ == 'n' || co_kontynuowaæ == 'k' || co_kontynuowaæ == 't' || co_kontynuowaæ == 'w') Og³oœ_wynik(wygrana, kwota_zak³adu, iloœæ_pieniêdzy, log_ogólny, log);

  0050f	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  00512	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00515	83 f9 6e	 cmp	 ecx, 110		; 0000006eH
  00518	74 21		 je	 SHORT $LN29@P?
  0051a	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  0051d	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00520	83 f9 6b	 cmp	 ecx, 107		; 0000006bH
  00523	74 16		 je	 SHORT $LN29@P?
  00525	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  00528	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0052b	83 f9 74	 cmp	 ecx, 116		; 00000074H
  0052e	74 0b		 je	 SHORT $LN29@P?
  00530	8b 45 1c	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  00533	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00536	83 f9 77	 cmp	 ecx, 119		; 00000077H
  00539	75 1c		 jne	 SHORT $LN1@P?
$LN29@P?:
  0053b	8b 45 18	 mov	 eax, DWORD PTR _log$[ebp]
  0053e	50		 push	 eax
  0053f	8b 4d 14	 mov	 ecx, DWORD PTR _log_ogólny$[ebp]
  00542	51		 push	 ecx
  00543	8b 55 10	 mov	 edx, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  00546	52		 push	 edx
  00547	8b 45 0c	 mov	 eax, DWORD PTR _kwota_zak³adu$[ebp]
  0054a	50		 push	 eax
  0054b	8b 4d 08	 mov	 ecx, DWORD PTR _wygrana$[ebp]
  0054e	51		 push	 ecx
  0054f	e8 00 00 00 00	 call	 ?Og³oœ_wynik@@YAXABH0AAHAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@@Z ; Og³oœ_wynik
  00554	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@P?:

; 1001 : }

  00557	5f		 pop	 edi
  00558	5e		 pop	 esi
  00559	5b		 pop	 ebx
  0055a	81 c4 00 01 00
	00		 add	 esp, 256		; 00000100H
  00560	3b ec		 cmp	 ebp, esp
  00562	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00567	8b e5		 mov	 esp, ebp
  00569	5d		 pop	 ebp
  0056a	c3		 ret	 0
?Pêtla_g³ówna@@YAXAAH00AAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AADAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; Pêtla_g³ówna
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?Koniec_gry@@YAXAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AAH@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_log_ogólny$ = 8					; size = 4
_log$ = 12						; size = 4
_iloœæ_pieniêdzy$ = 16					; size = 4
?Koniec_gry@@YAXAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AAH@Z PROC ; Koniec_gry, COMDAT

; 937  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 938  : 	cout << endl << "Koñczysz grê z wynikiem " << iloœæ_pieniêdzy << "$" << endl; //Poinformowanie u¿ytkownika o saldzie konta

  0001e	8b f4		 mov	 esi, esp
  00020	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_01EPMOAMKG@$?$AA@
  0002a	8b fc		 mov	 edi, esp
  0002c	8b 45 10	 mov	 eax, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  0002f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00031	51		 push	 ecx
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@GCHIFPGC@Ko?qczysz?5gr?j?5z?5wynikiem?5?$AA@
  00037	8b dc		 mov	 ebx, esp
  00039	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0003e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0004a	3b dc		 cmp	 ebx, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00057	83 c4 08	 add	 esp, 8
  0005a	8b c8		 mov	 ecx, eax
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00062	3b fc		 cmp	 edi, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0006f	83 c4 08	 add	 esp, 8
  00072	8b c8		 mov	 ecx, eax
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0007a	3b f4		 cmp	 esi, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 939  : 	log << endl << "Koñczysz grê z wynikiem " << iloœæ_pieniêdzy << "$" << endl; //Zapisanie do bufora pliku logu aktualnego informacji o saldzie konta u¿ytkownika

  00081	8b f4		 mov	 esi, esp
  00083	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_01EPMOAMKG@$?$AA@
  0008d	8b fc		 mov	 edi, esp
  0008f	8b 45 10	 mov	 eax, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  00092	8b 08		 mov	 ecx, DWORD PTR [eax]
  00094	51		 push	 ecx
  00095	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@GCHIFPGC@Ko?qczysz?5gr?j?5z?5wynikiem?5?$AA@
  0009a	8b dc		 mov	 ebx, esp
  0009c	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  000a1	8b 4d 0c	 mov	 ecx, DWORD PTR _log$[ebp]
  000a4	83 c1 10	 add	 ecx, 16			; 00000010H
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  000ad	3b dc		 cmp	 ebx, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b4	50		 push	 eax
  000b5	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000ba	83 c4 08	 add	 esp, 8
  000bd	8b c8		 mov	 ecx, eax
  000bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  000c5	3b fc		 cmp	 edi, esp
  000c7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000d2	83 c4 08	 add	 esp, 8
  000d5	8b c8		 mov	 ecx, eax
  000d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  000dd	3b f4		 cmp	 esi, esp
  000df	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 940  : 	log_ogólny << "Koñczysz grê z wynikiem " << iloœæ_pieniêdzy << "$" << endl; //Zapisanie do bufora pliku logu ogólnego informacji o saldzie konta u¿ytkownika

  000e4	8b f4		 mov	 esi, esp
  000e6	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  000eb	68 00 00 00 00	 push	 OFFSET ??_C@_01EPMOAMKG@$?$AA@
  000f0	8b fc		 mov	 edi, esp
  000f2	8b 45 10	 mov	 eax, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  000f5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f7	51		 push	 ecx
  000f8	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@GCHIFPGC@Ko?qczysz?5gr?j?5z?5wynikiem?5?$AA@
  000fd	8b 55 08	 mov	 edx, DWORD PTR _log_ogólny$[ebp]
  00100	52		 push	 edx
  00101	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00106	83 c4 08	 add	 esp, 8
  00109	8b c8		 mov	 ecx, eax
  0010b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00111	3b fc		 cmp	 edi, esp
  00113	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00118	50		 push	 eax
  00119	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0011e	83 c4 08	 add	 esp, 8
  00121	8b c8		 mov	 ecx, eax
  00123	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00129	3b f4		 cmp	 esi, esp
  0012b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 941  : 	log.flush(); //Zapisanie do pliku log_aktualny.txt danych wpisanych do bufora danych

  00130	8b 4d 0c	 mov	 ecx, DWORD PTR _log$[ebp]
  00133	83 c1 10	 add	 ecx, 16			; 00000010H
  00136	8b f4		 mov	 esi, esp
  00138	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  0013e	3b f4		 cmp	 esi, esp
  00140	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 942  : 	log_ogólny.flush(); //Zapisanie do pliku log_ogólny.txt danych wpisanych do bufora danych

  00145	8b f4		 mov	 esi, esp
  00147	8b 4d 08	 mov	 ecx, DWORD PTR _log_ogólny$[ebp]
  0014a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  00150	3b f4		 cmp	 esi, esp
  00152	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 943  : 	log.close();

  00157	8b 4d 0c	 mov	 ecx, DWORD PTR _log$[ebp]
  0015a	e8 00 00 00 00	 call	 ?close@?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_fstream<char,std::char_traits<char> >::close

; 944  : 	remove("log_aktualny.txt"); //Usuniêcie pliku log aktualny poniewa¿ skoñczy³o siê grê

  0015f	8b f4		 mov	 esi, esp
  00161	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@KLDNCCFE@log_aktualny?4txt?$AA@
  00166	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__remove
  0016c	83 c4 04	 add	 esp, 4
  0016f	3b f4		 cmp	 esi, esp
  00171	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 945  : 
; 946  : 	if (stan_dŸwiêków == 1) //Kompilacja je¿eli stan_dŸwiêków == 1

  00176	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?stan_dŸwiêków@@3FA ; stan_dŸwiêków
  0017d	83 f8 01	 cmp	 eax, 1
  00180	75 71		 jne	 SHORT $LN5@Koniec_gry

; 947  : 		if (iloœæ_pieniêdzy == 0) //Je¿eli bud¿et jest równy 0 to

  00182	8b 45 10	 mov	 eax, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  00185	83 38 00	 cmp	 DWORD PTR [eax], 0
  00188	75 69		 jne	 SHORT $LN5@Koniec_gry

; 948  : 			if (EfektyKompletne) PlaySound("Efekty dzwiêkowe/bankrut.wav", nullptr, SND_SYNC);

  0018a	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?EfektyKompletne@@3_NA ; EfektyKompletne
  00191	85 c0		 test	 eax, eax
  00193	74 1a		 je	 SHORT $LN7@Koniec_gry
  00195	8b f4		 mov	 esi, esp
  00197	6a 00		 push	 0
  00199	6a 00		 push	 0
  0019b	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DACGNLHK@Efekty?5dzwi?jkowe?1bankrut?4wav?$AA@
  001a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PlaySoundA@12
  001a6	3b f4		 cmp	 esi, esp
  001a8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 949  : 			else

  001ad	eb 44		 jmp	 SHORT $LN5@Koniec_gry
$LN7@Koniec_gry:

; 950  : 				for (int i = 0; i < 5; ++i) //Rozpoczêcie pêtli która wykona 5 obrotów

  001af	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  001b6	eb 09		 jmp	 SHORT $LN4@Koniec_gry
$LN2@Koniec_gry:
  001b8	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  001bb	83 c0 01	 add	 eax, 1
  001be	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@Koniec_gry:
  001c1	83 7d f8 05	 cmp	 DWORD PTR _i$1[ebp], 5
  001c5	7d 2c		 jge	 SHORT $LN5@Koniec_gry

; 951  : 				{
; 952  : 					cout << "\a"; //Wywo³anie pikniêcia w g³oœniku

  001c7	68 00 00 00 00	 push	 OFFSET ??_C@_01PBGHHLMH@?$AH?$AA@
  001cc	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001d1	50		 push	 eax
  001d2	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001d7	83 c4 08	 add	 esp, 8

; 953  : 					Sleep(czas_przerwy_dzwiêku); //Przerwa przed kolejnym pikniêciem //Przerwa przed kolejnym pikniêciem

  001da	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?czas_przerwy_dzwiêku@@3FA ; czas_przerwy_dzwiêku
  001e1	8b f4		 mov	 esi, esp
  001e3	50		 push	 eax
  001e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4
  001ea	3b f4		 cmp	 esi, esp
  001ec	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 954  : 				}

  001f1	eb c5		 jmp	 SHORT $LN2@Koniec_gry
$LN5@Koniec_gry:

; 955  : 
; 956  : 	if (iloœæ_pieniêdzy > kwota_pocz¹tkowa && iloœæ_pieniêdzy < kwota_pocz¹tkowa * 2)

  001f3	8b 45 10	 mov	 eax, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  001f6	8b 08		 mov	 ecx, DWORD PTR [eax]
  001f8	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?kwota_pocz¹tkowa@@3HA ; kwota_pocz¹tkowa
  001fe	0f 8e 9c 00 00
	00		 jle	 $LN9@Koniec_gry
  00204	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kwota_pocz¹tkowa@@3HA ; kwota_pocz¹tkowa
  00209	d1 e0		 shl	 eax, 1
  0020b	8b 4d 10	 mov	 ecx, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  0020e	39 01		 cmp	 DWORD PTR [ecx], eax
  00210	0f 8d 8a 00 00
	00		 jge	 $LN9@Koniec_gry

; 957  : 	{
; 958  : 		cout << "Gratuluje zwiêkszy³eœ swój zasób finansowy" << endl; //Wyœwietlenie gratulacji z powodu zwiêkszenia bud¿etu

  00216	8b f4		 mov	 esi, esp
  00218	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0021d	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@DCKMMPCF@Gratuluje?5zwi?jkszy?$LDe?$JM?5sw?sj?5zas?sb@
  00222	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00227	50		 push	 eax
  00228	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0022d	83 c4 08	 add	 esp, 8
  00230	8b c8		 mov	 ecx, eax
  00232	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00238	3b f4		 cmp	 esi, esp
  0023a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 959  : 		if (EfektyKompletne)

  0023f	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?EfektyKompletne@@3_NA ; EfektyKompletne
  00246	85 c0		 test	 eax, eax
  00248	74 51		 je	 SHORT $LN11@Koniec_gry

; 960  : 			if (rand() % 1) PlaySound("Efekty dzwiêkowe/wygrana1.wav", nullptr, SND_SYNC);

  0024a	8b f4		 mov	 esi, esp
  0024c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  00252	3b f4		 cmp	 esi, esp
  00254	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00259	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  0025e	79 05		 jns	 SHORT $LN17@Koniec_gry
  00260	48		 dec	 eax
  00261	83 c8 ff	 or	 eax, -1
  00264	40		 inc	 eax
$LN17@Koniec_gry:
  00265	85 c0		 test	 eax, eax
  00267	74 1a		 je	 SHORT $LN12@Koniec_gry
  00269	8b f4		 mov	 esi, esp
  0026b	6a 00		 push	 0
  0026d	6a 00		 push	 0
  0026f	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@OAKNDKAH@Efekty?5dzwi?jkowe?1wygrana1?4wav?$AA@
  00274	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PlaySoundA@12
  0027a	3b f4		 cmp	 esi, esp
  0027c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00281	eb 18		 jmp	 SHORT $LN11@Koniec_gry
$LN12@Koniec_gry:

; 961  : 			else PlaySound("Efekty dzwiêkowe/wygrana2.wav", nullptr, SND_SYNC);

  00283	8b f4		 mov	 esi, esp
  00285	6a 00		 push	 0
  00287	6a 00		 push	 0
  00289	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@GGDJEIKJ@Efekty?5dzwi?jkowe?1wygrana2?4wav?$AA@
  0028e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PlaySoundA@12
  00294	3b f4		 cmp	 esi, esp
  00296	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN11@Koniec_gry:

; 962  : 	}

  0029b	e9 87 00 00 00	 jmp	 $LN1@Koniec_gry
$LN9@Koniec_gry:

; 963  : 	else if (iloœæ_pieniêdzy >= kwota_pocz¹tkowa * 2)

  002a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?kwota_pocz¹tkowa@@3HA ; kwota_pocz¹tkowa
  002a5	d1 e0		 shl	 eax, 1
  002a7	8b 4d 10	 mov	 ecx, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  002aa	39 01		 cmp	 DWORD PTR [ecx], eax
  002ac	7c 79		 jl	 SHORT $LN1@Koniec_gry

; 964  : 	{
; 965  : 		cout << "Gratuluje zwiêkszy³eœ " << iloœæ_pieniêdzy / kwota_pocz¹tkowa << " krotnie swój zasób finansowy" << endl; //Wyœwietlenie gratulacji z powodu zwielokrotnienia przynajmniej 2 razy bud¿etu

  002ae	8b f4		 mov	 esi, esp
  002b0	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  002b5	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@CAHFKDBP@?5krotnie?5sw?sj?5zas?sb?5finansowy?$AA@
  002ba	8b 45 10	 mov	 eax, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  002bd	8b 00		 mov	 eax, DWORD PTR [eax]
  002bf	99		 cdq
  002c0	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?kwota_pocz¹tkowa@@3HA ; kwota_pocz¹tkowa
  002c6	8b fc		 mov	 edi, esp
  002c8	50		 push	 eax
  002c9	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@GDCLDFHN@Gratuluje?5zwi?jkszy?$LDe?$JM?5?$AA@
  002ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  002d4	51		 push	 ecx
  002d5	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002da	83 c4 08	 add	 esp, 8
  002dd	8b c8		 mov	 ecx, eax
  002df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  002e5	3b fc		 cmp	 edi, esp
  002e7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002ec	50		 push	 eax
  002ed	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002f2	83 c4 08	 add	 esp, 8
  002f5	8b c8		 mov	 ecx, eax
  002f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  002fd	3b f4		 cmp	 esi, esp
  002ff	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 966  : 		if (EfektyKompletne) PlaySound("Efekty dzwiêkowe/zwielokrotnenie.wav", nullptr, SND_SYNC);

  00304	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?EfektyKompletne@@3_NA ; EfektyKompletne
  0030b	85 c0		 test	 eax, eax
  0030d	74 18		 je	 SHORT $LN1@Koniec_gry
  0030f	8b f4		 mov	 esi, esp
  00311	6a 00		 push	 0
  00313	6a 00		 push	 0
  00315	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DNPALCEH@Efekty?5dzwi?jkowe?1zwielokrotnenie@
  0031a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PlaySoundA@12
  00320	3b f4		 cmp	 esi, esp
  00322	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Koniec_gry:

; 967  : 	}
; 968  : }

  00327	5f		 pop	 edi
  00328	5e		 pop	 esi
  00329	5b		 pop	 ebx
  0032a	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00330	3b ec		 cmp	 ebp, esp
  00332	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00337	8b e5		 mov	 esp, ebp
  00339	5d		 pop	 ebp
  0033a	c3		 ret	 0
?Koniec_gry@@YAXAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AAH@Z ENDP ; Koniec_gry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?Og³oœ_wynik@@YAXABH0AAHAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@@Z
_TEXT	SEGMENT
tv295 = -236						; size = 4
tv281 = -236						; size = 4
tv218 = -236						; size = 4
tv204 = -236						; size = 4
tv91 = -236						; size = 4
tv77 = -236						; size = 4
_buf$1 = -36						; size = 28
__$ArrayPad$ = -4					; size = 4
_wygrana$ = 8						; size = 4
_kwota_zak³adu$ = 12					; size = 4
_iloœæ_pieniêdzy$ = 16					; size = 4
_log_ogólny$ = 20					; size = 4
_log$ = 24						; size = 4
?Og³oœ_wynik@@YAXABH0AAHAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@@Z PROC ; Og³oœ_wynik, COMDAT

; 880  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00012	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 881  : 	if (wygrana >= kwota_zak³adu) //Je¿eli wygrana jest wiêksza lub równa kwocie zak³adu to znaczy, ¿e siê wygra³o zak³ad

  00028	8b 45 08	 mov	 eax, DWORD PTR _wygrana$[ebp]
  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR _kwota_zak³adu$[ebp]
  0002e	8b 10		 mov	 edx, DWORD PTR [eax]
  00030	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00032	0f 8c 58 02 00
	00		 jl	 $LN2@Og?

; 882  : 	{
; 883  : 		iloœæ_pieniêdzy += wygrana; //Dopisanie do salda kwoty wygranej z zak³adu

  00038	8b 45 10	 mov	 eax, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  0003b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003d	8b 55 08	 mov	 edx, DWORD PTR _wygrana$[ebp]
  00040	03 0a		 add	 ecx, DWORD PTR [edx]
  00042	8b 45 10	 mov	 eax, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  00045	89 08		 mov	 DWORD PTR [eax], ecx

; 884  : 		if (styl_liczenia_wygranej) iloœæ_pieniêdzy += kwota_zak³adu; //Dopisanie do salda kwoty zak³adu

  00047	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?styl_liczenia_wygranej@@3FA ; styl_liczenia_wygranej
  0004e	85 c0		 test	 eax, eax
  00050	74 0f		 je	 SHORT $LN4@Og?
  00052	8b 45 10	 mov	 eax, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  00055	8b 08		 mov	 ecx, DWORD PTR [eax]
  00057	8b 55 0c	 mov	 edx, DWORD PTR _kwota_zak³adu$[ebp]
  0005a	03 0a		 add	 ecx, DWORD PTR [edx]
  0005c	8b 45 10	 mov	 eax, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  0005f	89 08		 mov	 DWORD PTR [eax], ecx
$LN4@Og?:

; 885  : 		log << " Wygrywasz " << wygrana << "$"; //Zapisanie do bufora pliku logu aktualnego informacji o kwocie wygranej zak³adu

  00061	83 7d 18 00	 cmp	 DWORD PTR _log$[ebp], 0
  00065	74 0e		 je	 SHORT $LN14@Og?
  00067	8b 45 18	 mov	 eax, DWORD PTR _log$[ebp]
  0006a	83 c0 10	 add	 eax, 16			; 00000010H
  0006d	89 85 14 ff ff
	ff		 mov	 DWORD PTR tv77[ebp], eax
  00073	eb 0a		 jmp	 SHORT $LN15@Og?
$LN14@Og?:
  00075	c7 85 14 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv77[ebp], 0
$LN15@Og?:
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_01EPMOAMKG@$?$AA@
  00084	8b f4		 mov	 esi, esp
  00086	8b 4d 08	 mov	 ecx, DWORD PTR _wygrana$[ebp]
  00089	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008b	52		 push	 edx
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GPFIMODH@?5Wygrywasz?5?$AA@
  00091	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR tv77[ebp]
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0009d	83 c4 08	 add	 esp, 8
  000a0	8b c8		 mov	 ecx, eax
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  000a8	3b f4		 cmp	 esi, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000b5	83 c4 08	 add	 esp, 8

; 886  : 		log << " Posiadasz " << iloœæ_pieniêdzy << "$" << endl; //Zapisanie do bufora pliku logu aktualnego informacji o saldzie konta u¿ytkownika

  000b8	83 7d 18 00	 cmp	 DWORD PTR _log$[ebp], 0
  000bc	74 0e		 je	 SHORT $LN16@Og?
  000be	8b 45 18	 mov	 eax, DWORD PTR _log$[ebp]
  000c1	83 c0 10	 add	 eax, 16			; 00000010H
  000c4	89 85 14 ff ff
	ff		 mov	 DWORD PTR tv91[ebp], eax
  000ca	eb 0a		 jmp	 SHORT $LN17@Og?
$LN16@Og?:
  000cc	c7 85 14 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv91[ebp], 0
$LN17@Og?:
  000d6	8b f4		 mov	 esi, esp
  000d8	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  000dd	68 00 00 00 00	 push	 OFFSET ??_C@_01EPMOAMKG@$?$AA@
  000e2	8b fc		 mov	 edi, esp
  000e4	8b 4d 10	 mov	 ecx, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  000e7	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e9	52		 push	 edx
  000ea	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GNFNLGIH@?5Posiadasz?5?$AA@
  000ef	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR tv91[ebp]
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000fb	83 c4 08	 add	 esp, 8
  000fe	8b c8		 mov	 ecx, eax
  00100	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00106	3b fc		 cmp	 edi, esp
  00108	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010d	50		 push	 eax
  0010e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00113	83 c4 08	 add	 esp, 8
  00116	8b c8		 mov	 ecx, eax
  00118	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0011e	3b f4		 cmp	 esi, esp
  00120	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 887  : 		log_ogólny << " Wygrywasz " << wygrana << "$"; //Zapisanie do bufora pliku logu ogólnego informacji o kwocie wygranej zak³adu

  00125	68 00 00 00 00	 push	 OFFSET ??_C@_01EPMOAMKG@$?$AA@
  0012a	8b f4		 mov	 esi, esp
  0012c	8b 45 08	 mov	 eax, DWORD PTR _wygrana$[ebp]
  0012f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00131	51		 push	 ecx
  00132	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GPFIMODH@?5Wygrywasz?5?$AA@
  00137	8b 55 14	 mov	 edx, DWORD PTR _log_ogólny$[ebp]
  0013a	52		 push	 edx
  0013b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00140	83 c4 08	 add	 esp, 8
  00143	8b c8		 mov	 ecx, eax
  00145	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0014b	3b f4		 cmp	 esi, esp
  0014d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00152	50		 push	 eax
  00153	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00158	83 c4 08	 add	 esp, 8

; 888  : 		log_ogólny << " Posiadasz " << iloœæ_pieniêdzy << "$" << endl; //Zapisanie do bufora pliku logu ogólnego informacji o saldzie konta u¿ytkownika

  0015b	8b f4		 mov	 esi, esp
  0015d	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00162	68 00 00 00 00	 push	 OFFSET ??_C@_01EPMOAMKG@$?$AA@
  00167	8b fc		 mov	 edi, esp
  00169	8b 45 10	 mov	 eax, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  0016c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016e	51		 push	 ecx
  0016f	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GNFNLGIH@?5Posiadasz?5?$AA@
  00174	8b 55 14	 mov	 edx, DWORD PTR _log_ogólny$[ebp]
  00177	52		 push	 edx
  00178	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0017d	83 c4 08	 add	 esp, 8
  00180	8b c8		 mov	 ecx, eax
  00182	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00188	3b fc		 cmp	 edi, esp
  0018a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0018f	50		 push	 eax
  00190	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00195	83 c4 08	 add	 esp, 8
  00198	8b c8		 mov	 ecx, eax
  0019a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  001a0	3b f4		 cmp	 esi, esp
  001a2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 889  : 		log.flush(); //Zapisanie do pliku log_aktualny.txt danych wpisanych do bufora danych

  001a7	8b 4d 18	 mov	 ecx, DWORD PTR _log$[ebp]
  001aa	83 c1 10	 add	 ecx, 16			; 00000010H
  001ad	8b f4		 mov	 esi, esp
  001af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  001b5	3b f4		 cmp	 esi, esp
  001b7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 890  : 		log_ogólny.flush(); //Zapisanie do pliku log_ogólny.txt danych wpisanych do bufora danych

  001bc	8b f4		 mov	 esi, esp
  001be	8b 4d 14	 mov	 ecx, DWORD PTR _log_ogólny$[ebp]
  001c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  001c7	3b f4		 cmp	 esi, esp
  001c9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 891  : 		if (stan_dŸwiêków)

  001ce	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?stan_dŸwiêków@@3FA ; stan_dŸwiêków
  001d5	85 c0		 test	 eax, eax
  001d7	0f 84 ae 00 00
	00		 je	 $LN5@Og?

; 892  : 		{
; 893  : 			if (G³osyKompletne)

  001dd	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?G³osyKompletne@@3_NA ; G³osyKompletne
  001e4	85 c0		 test	 eax, eax
  001e6	74 3c		 je	 SHORT $LN6@Og?

; 894  : 			{
; 895  : 				string buf = G³os + "win.wav";

  001e8	68 00 00 00 00	 push	 OFFSET ??_C@_07KIPBKJCE@win?4wav?$AA@
  001ed	68 00 00 00 00	 push	 OFFSET ?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  001f2	8d 45 dc	 lea	 eax, DWORD PTR _buf$1[ebp]
  001f5	50		 push	 eax
  001f6	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  001fb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 896  : 				PlaySound(buf.c_str(), nullptr, SND_SYNC);

  001fe	8b f4		 mov	 esi, esp
  00200	6a 00		 push	 0
  00202	6a 00		 push	 0
  00204	8d 4d dc	 lea	 ecx, DWORD PTR _buf$1[ebp]
  00207	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0020c	50		 push	 eax
  0020d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PlaySoundA@12
  00213	3b f4		 cmp	 esi, esp
  00215	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 897  : 			}

  0021a	8d 4d dc	 lea	 ecx, DWORD PTR _buf$1[ebp]
  0021d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 898  : 			else

  00222	eb 67		 jmp	 SHORT $LN5@Og?
$LN6@Og?:

; 899  : 			{
; 900  : 				cout << "\a"; //Wywo³anie pikniêcia w g³oœniku

  00224	68 00 00 00 00	 push	 OFFSET ??_C@_01PBGHHLMH@?$AH?$AA@
  00229	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0022e	50		 push	 eax
  0022f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00234	83 c4 08	 add	 esp, 8

; 901  : 				Sleep(czas_przerwy_dzwiêku); //Przerwa przed kolejnym pikniêciem

  00237	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?czas_przerwy_dzwiêku@@3FA ; czas_przerwy_dzwiêku
  0023e	8b f4		 mov	 esi, esp
  00240	50		 push	 eax
  00241	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4
  00247	3b f4		 cmp	 esi, esp
  00249	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 902  : 				cout << "\a"; //Wywo³anie pikniêcia w g³oœniku

  0024e	68 00 00 00 00	 push	 OFFSET ??_C@_01PBGHHLMH@?$AH?$AA@
  00253	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00258	50		 push	 eax
  00259	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0025e	83 c4 08	 add	 esp, 8

; 903  : 				Sleep(czas_przerwy_dzwiêku); //Przerwa przed kolejnym pikniêciem

  00261	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?czas_przerwy_dzwiêku@@3FA ; czas_przerwy_dzwiêku
  00268	8b f4		 mov	 esi, esp
  0026a	50		 push	 eax
  0026b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4
  00271	3b f4		 cmp	 esi, esp
  00273	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 904  : 				cout << "\a"; //Wywo³anie pikniêcia w g³oœniku

  00278	68 00 00 00 00	 push	 OFFSET ??_C@_01PBGHHLMH@?$AH?$AA@
  0027d	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00282	50		 push	 eax
  00283	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00288	83 c4 08	 add	 esp, 8
$LN5@Og?:

; 905  : 			}
; 906  : 		}
; 907  : 	}

  0028b	e9 75 03 00 00	 jmp	 $LN1@Og?
$LN2@Og?:

; 908  : 	else if (wygrana == (kwota_zak³adu / 2)) //Je¿eli wygrana jest równa po³owie kwocie zak³adu to znaczy, ¿e dostaje siê zwrot po³owy kwoty zak³adu

  00290	8b 45 0c	 mov	 eax, DWORD PTR _kwota_zak³adu$[ebp]
  00293	8b 00		 mov	 eax, DWORD PTR [eax]
  00295	99		 cdq
  00296	2b c2		 sub	 eax, edx
  00298	d1 f8		 sar	 eax, 1
  0029a	8b 4d 08	 mov	 ecx, DWORD PTR _wygrana$[ebp]
  0029d	39 01		 cmp	 DWORD PTR [ecx], eax
  0029f	0f 85 c9 01 00
	00		 jne	 $LN8@Og?

; 909  : 	{
; 910  : 		iloœæ_pieniêdzy += wygrana; //Dopisanie do salda kwoty zwrotu z zak³adu

  002a5	8b 45 10	 mov	 eax, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  002a8	8b 08		 mov	 ecx, DWORD PTR [eax]
  002aa	8b 55 08	 mov	 edx, DWORD PTR _wygrana$[ebp]
  002ad	03 0a		 add	 ecx, DWORD PTR [edx]
  002af	8b 45 10	 mov	 eax, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  002b2	89 08		 mov	 DWORD PTR [eax], ecx

; 911  : 		log << " Dostajesz polowe zak³adu " << wygrana << "$"; //Zapisanie do bufora pliku logu aktualnego informacji o kwocie zwrotu zak³adu

  002b4	83 7d 18 00	 cmp	 DWORD PTR _log$[ebp], 0
  002b8	74 0e		 je	 SHORT $LN18@Og?
  002ba	8b 45 18	 mov	 eax, DWORD PTR _log$[ebp]
  002bd	83 c0 10	 add	 eax, 16			; 00000010H
  002c0	89 85 14 ff ff
	ff		 mov	 DWORD PTR tv204[ebp], eax
  002c6	eb 0a		 jmp	 SHORT $LN19@Og?
$LN18@Og?:
  002c8	c7 85 14 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv204[ebp], 0
$LN19@Og?:
  002d2	68 00 00 00 00	 push	 OFFSET ??_C@_01EPMOAMKG@$?$AA@
  002d7	8b f4		 mov	 esi, esp
  002d9	8b 4d 08	 mov	 ecx, DWORD PTR _wygrana$[ebp]
  002dc	8b 11		 mov	 edx, DWORD PTR [ecx]
  002de	52		 push	 edx
  002df	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@LJEGNEAJ@?5Dostajesz?5polowe?5zak?$LDadu?5?$AA@
  002e4	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR tv204[ebp]
  002ea	50		 push	 eax
  002eb	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002f0	83 c4 08	 add	 esp, 8
  002f3	8b c8		 mov	 ecx, eax
  002f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  002fb	3b f4		 cmp	 esi, esp
  002fd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00302	50		 push	 eax
  00303	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00308	83 c4 08	 add	 esp, 8

; 912  : 		log << " Posiadasz " << iloœæ_pieniêdzy << "$" << endl; //Zapisanie do bufora pliku logu aktualnego informacji o saldzie konta u¿ytkownika

  0030b	83 7d 18 00	 cmp	 DWORD PTR _log$[ebp], 0
  0030f	74 0e		 je	 SHORT $LN20@Og?
  00311	8b 45 18	 mov	 eax, DWORD PTR _log$[ebp]
  00314	83 c0 10	 add	 eax, 16			; 00000010H
  00317	89 85 14 ff ff
	ff		 mov	 DWORD PTR tv218[ebp], eax
  0031d	eb 0a		 jmp	 SHORT $LN21@Og?
$LN20@Og?:
  0031f	c7 85 14 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv218[ebp], 0
$LN21@Og?:
  00329	8b f4		 mov	 esi, esp
  0032b	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00330	68 00 00 00 00	 push	 OFFSET ??_C@_01EPMOAMKG@$?$AA@
  00335	8b fc		 mov	 edi, esp
  00337	8b 4d 10	 mov	 ecx, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  0033a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0033c	52		 push	 edx
  0033d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GNFNLGIH@?5Posiadasz?5?$AA@
  00342	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR tv218[ebp]
  00348	50		 push	 eax
  00349	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0034e	83 c4 08	 add	 esp, 8
  00351	8b c8		 mov	 ecx, eax
  00353	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00359	3b fc		 cmp	 edi, esp
  0035b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00360	50		 push	 eax
  00361	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00366	83 c4 08	 add	 esp, 8
  00369	8b c8		 mov	 ecx, eax
  0036b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00371	3b f4		 cmp	 esi, esp
  00373	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 913  : 		log_ogólny << " Dostajesz polowe zak³adu " << wygrana << "$"; //Zapisanie do bufora pliku logu ogólnego informacji o kwocie zwrotu zak³adu

  00378	68 00 00 00 00	 push	 OFFSET ??_C@_01EPMOAMKG@$?$AA@
  0037d	8b f4		 mov	 esi, esp
  0037f	8b 45 08	 mov	 eax, DWORD PTR _wygrana$[ebp]
  00382	8b 08		 mov	 ecx, DWORD PTR [eax]
  00384	51		 push	 ecx
  00385	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@LJEGNEAJ@?5Dostajesz?5polowe?5zak?$LDadu?5?$AA@
  0038a	8b 55 14	 mov	 edx, DWORD PTR _log_ogólny$[ebp]
  0038d	52		 push	 edx
  0038e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00393	83 c4 08	 add	 esp, 8
  00396	8b c8		 mov	 ecx, eax
  00398	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0039e	3b f4		 cmp	 esi, esp
  003a0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003a5	50		 push	 eax
  003a6	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003ab	83 c4 08	 add	 esp, 8

; 914  : 		log_ogólny << " Posiadasz " << iloœæ_pieniêdzy << "$" << endl; //Zapisanie do bufora pliku logu ogólnego informacji o saldzie konta u¿ytkownika

  003ae	8b f4		 mov	 esi, esp
  003b0	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  003b5	68 00 00 00 00	 push	 OFFSET ??_C@_01EPMOAMKG@$?$AA@
  003ba	8b fc		 mov	 edi, esp
  003bc	8b 45 10	 mov	 eax, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  003bf	8b 08		 mov	 ecx, DWORD PTR [eax]
  003c1	51		 push	 ecx
  003c2	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GNFNLGIH@?5Posiadasz?5?$AA@
  003c7	8b 55 14	 mov	 edx, DWORD PTR _log_ogólny$[ebp]
  003ca	52		 push	 edx
  003cb	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003d0	83 c4 08	 add	 esp, 8
  003d3	8b c8		 mov	 ecx, eax
  003d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  003db	3b fc		 cmp	 edi, esp
  003dd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003e2	50		 push	 eax
  003e3	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003e8	83 c4 08	 add	 esp, 8
  003eb	8b c8		 mov	 ecx, eax
  003ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  003f3	3b f4		 cmp	 esi, esp
  003f5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 915  : 		log.flush(); //Zapisanie do pliku log_aktualny.txt danych wpisanych do bufora danych

  003fa	8b 4d 18	 mov	 ecx, DWORD PTR _log$[ebp]
  003fd	83 c1 10	 add	 ecx, 16			; 00000010H
  00400	8b f4		 mov	 esi, esp
  00402	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  00408	3b f4		 cmp	 esi, esp
  0040a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 916  : 		log_ogólny.flush(); //Zapisanie do pliku log_ogólny.txt danych wpisanych do bufora danych

  0040f	8b f4		 mov	 esi, esp
  00411	8b 4d 14	 mov	 ecx, DWORD PTR _log_ogólny$[ebp]
  00414	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  0041a	3b f4		 cmp	 esi, esp
  0041c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 917  : 		if (!G³osyKompletne)

  00421	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?G³osyKompletne@@3_NA ; G³osyKompletne
  00428	85 c0		 test	 eax, eax
  0042a	75 3d		 jne	 SHORT $LN10@Og?

; 918  : 		{
; 919  : 			cout << "\a"; //Wywo³anie pikniêcia w g³oœniku

  0042c	68 00 00 00 00	 push	 OFFSET ??_C@_01PBGHHLMH@?$AH?$AA@
  00431	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00436	50		 push	 eax
  00437	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0043c	83 c4 08	 add	 esp, 8

; 920  : 			Sleep(czas_przerwy_dzwiêku); //Przerwa przed kolejnym pikniêciem

  0043f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?czas_przerwy_dzwiêku@@3FA ; czas_przerwy_dzwiêku
  00446	8b f4		 mov	 esi, esp
  00448	50		 push	 eax
  00449	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4
  0044f	3b f4		 cmp	 esi, esp
  00451	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 921  : 			cout << "\a"; //Wywo³anie pikniêcia w g³oœniku

  00456	68 00 00 00 00	 push	 OFFSET ??_C@_01PBGHHLMH@?$AH?$AA@
  0045b	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00460	50		 push	 eax
  00461	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00466	83 c4 08	 add	 esp, 8
$LN10@Og?:

; 922  : 		}
; 923  : 	}

  00469	e9 97 01 00 00	 jmp	 $LN1@Og?
$LN8@Og?:

; 924  : 	else if (wygrana == 0) //Je¿eli wygrana jest równa 0 to znaczy, ¿e siê zak³ad przegra³o

  0046e	8b 45 08	 mov	 eax, DWORD PTR _wygrana$[ebp]
  00471	83 38 00	 cmp	 DWORD PTR [eax], 0
  00474	0f 85 8b 01 00
	00		 jne	 $LN1@Og?

; 925  : 	{
; 926  : 		log << " Przegrales " << kwota_zak³adu << "$"; //Zapisanie do bufora pliku logu aktualnego informacji o przegranej kwocie

  0047a	83 7d 18 00	 cmp	 DWORD PTR _log$[ebp], 0
  0047e	74 0e		 je	 SHORT $LN22@Og?
  00480	8b 45 18	 mov	 eax, DWORD PTR _log$[ebp]
  00483	83 c0 10	 add	 eax, 16			; 00000010H
  00486	89 85 14 ff ff
	ff		 mov	 DWORD PTR tv281[ebp], eax
  0048c	eb 0a		 jmp	 SHORT $LN23@Og?
$LN22@Og?:
  0048e	c7 85 14 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv281[ebp], 0
$LN23@Og?:
  00498	68 00 00 00 00	 push	 OFFSET ??_C@_01EPMOAMKG@$?$AA@
  0049d	8b f4		 mov	 esi, esp
  0049f	8b 4d 0c	 mov	 ecx, DWORD PTR _kwota_zak³adu$[ebp]
  004a2	8b 11		 mov	 edx, DWORD PTR [ecx]
  004a4	52		 push	 edx
  004a5	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NPCHEJIF@?5Przegrales?5?$AA@
  004aa	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR tv281[ebp]
  004b0	50		 push	 eax
  004b1	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  004b6	83 c4 08	 add	 esp, 8
  004b9	8b c8		 mov	 ecx, eax
  004bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  004c1	3b f4		 cmp	 esi, esp
  004c3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004c8	50		 push	 eax
  004c9	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  004ce	83 c4 08	 add	 esp, 8

; 927  : 		log << " Posiadasz " << iloœæ_pieniêdzy << "$" << endl; //Zapisanie do bufora pliku logu aktualnego informacji o saldzie konta u¿ytkownika

  004d1	83 7d 18 00	 cmp	 DWORD PTR _log$[ebp], 0
  004d5	74 0e		 je	 SHORT $LN24@Og?
  004d7	8b 45 18	 mov	 eax, DWORD PTR _log$[ebp]
  004da	83 c0 10	 add	 eax, 16			; 00000010H
  004dd	89 85 14 ff ff
	ff		 mov	 DWORD PTR tv295[ebp], eax
  004e3	eb 0a		 jmp	 SHORT $LN25@Og?
$LN24@Og?:
  004e5	c7 85 14 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv295[ebp], 0
$LN25@Og?:
  004ef	8b f4		 mov	 esi, esp
  004f1	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  004f6	68 00 00 00 00	 push	 OFFSET ??_C@_01EPMOAMKG@$?$AA@
  004fb	8b fc		 mov	 edi, esp
  004fd	8b 4d 10	 mov	 ecx, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  00500	8b 11		 mov	 edx, DWORD PTR [ecx]
  00502	52		 push	 edx
  00503	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GNFNLGIH@?5Posiadasz?5?$AA@
  00508	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR tv295[ebp]
  0050e	50		 push	 eax
  0050f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00514	83 c4 08	 add	 esp, 8
  00517	8b c8		 mov	 ecx, eax
  00519	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0051f	3b fc		 cmp	 edi, esp
  00521	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00526	50		 push	 eax
  00527	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0052c	83 c4 08	 add	 esp, 8
  0052f	8b c8		 mov	 ecx, eax
  00531	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00537	3b f4		 cmp	 esi, esp
  00539	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 928  : 		log_ogólny << " Przegrales " << kwota_zak³adu << "$"; //Zapisanie do bufora pliku logu ogólnego informacji o przegranej kwocie

  0053e	68 00 00 00 00	 push	 OFFSET ??_C@_01EPMOAMKG@$?$AA@
  00543	8b f4		 mov	 esi, esp
  00545	8b 45 0c	 mov	 eax, DWORD PTR _kwota_zak³adu$[ebp]
  00548	8b 08		 mov	 ecx, DWORD PTR [eax]
  0054a	51		 push	 ecx
  0054b	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NPCHEJIF@?5Przegrales?5?$AA@
  00550	8b 55 14	 mov	 edx, DWORD PTR _log_ogólny$[ebp]
  00553	52		 push	 edx
  00554	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00559	83 c4 08	 add	 esp, 8
  0055c	8b c8		 mov	 ecx, eax
  0055e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00564	3b f4		 cmp	 esi, esp
  00566	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0056b	50		 push	 eax
  0056c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00571	83 c4 08	 add	 esp, 8

; 929  : 		log_ogólny << " Posiadasz " << iloœæ_pieniêdzy << "$" << endl; //Zapisanie do bufora pliku logu aktualnego informacji o saldzie konta u¿ytkownika

  00574	8b f4		 mov	 esi, esp
  00576	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0057b	68 00 00 00 00	 push	 OFFSET ??_C@_01EPMOAMKG@$?$AA@
  00580	8b fc		 mov	 edi, esp
  00582	8b 45 10	 mov	 eax, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  00585	8b 08		 mov	 ecx, DWORD PTR [eax]
  00587	51		 push	 ecx
  00588	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GNFNLGIH@?5Posiadasz?5?$AA@
  0058d	8b 55 14	 mov	 edx, DWORD PTR _log_ogólny$[ebp]
  00590	52		 push	 edx
  00591	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00596	83 c4 08	 add	 esp, 8
  00599	8b c8		 mov	 ecx, eax
  0059b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  005a1	3b fc		 cmp	 edi, esp
  005a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005a8	50		 push	 eax
  005a9	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  005ae	83 c4 08	 add	 esp, 8
  005b1	8b c8		 mov	 ecx, eax
  005b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  005b9	3b f4		 cmp	 esi, esp
  005bb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 930  : 		log.flush(); //Zapisanie do pliku log_aktualny.txt danych wpisanych do bufora danych

  005c0	8b 4d 18	 mov	 ecx, DWORD PTR _log$[ebp]
  005c3	83 c1 10	 add	 ecx, 16			; 00000010H
  005c6	8b f4		 mov	 esi, esp
  005c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  005ce	3b f4		 cmp	 esi, esp
  005d0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 931  : 		log_ogólny.flush(); //Zapisanie do pliku log_ogólny.txt danych wpisanych do bufora danych

  005d5	8b f4		 mov	 esi, esp
  005d7	8b 4d 14	 mov	 ecx, DWORD PTR _log_ogólny$[ebp]
  005da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  005e0	3b f4		 cmp	 esi, esp
  005e2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 932  : 		if (!G³osyKompletne) cout << "\a"; //Wywo³anie pikniêcia w g³oœniku

  005e7	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?G³osyKompletne@@3_NA ; G³osyKompletne
  005ee	85 c0		 test	 eax, eax
  005f0	75 13		 jne	 SHORT $LN1@Og?
  005f2	68 00 00 00 00	 push	 OFFSET ??_C@_01PBGHHLMH@?$AH?$AA@
  005f7	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  005fc	50		 push	 eax
  005fd	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00602	83 c4 08	 add	 esp, 8
$LN1@Og?:

; 933  : 	}
; 934  : }

  00605	52		 push	 edx
  00606	8b cd		 mov	 ecx, ebp
  00608	50		 push	 eax
  00609	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN29@Og?
  0060f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00614	58		 pop	 eax
  00615	5a		 pop	 edx
  00616	5f		 pop	 edi
  00617	5e		 pop	 esi
  00618	5b		 pop	 ebx
  00619	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0061c	33 cd		 xor	 ecx, ebp
  0061e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00623	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  00629	3b ec		 cmp	 ebp, esp
  0062b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00630	8b e5		 mov	 esp, ebp
  00632	5d		 pop	 ebp
  00633	c3		 ret	 0
$LN29@Og?:
  00634	01 00 00 00	 DD	 1
  00638	00 00 00 00	 DD	 $LN28@Og?
$LN28@Og?:
  0063c	dc ff ff ff	 DD	 -36			; ffffffdcH
  00640	1c 00 00 00	 DD	 28			; 0000001cH
  00644	00 00 00 00	 DD	 $LN27@Og?
$LN27@Og?:
  00648	62		 DB	 98			; 00000062H
  00649	75		 DB	 117			; 00000075H
  0064a	66		 DB	 102			; 00000066H
  0064b	00		 DB	 0
?Og³oœ_wynik@@YAXABH0AAHAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@@Z ENDP ; Og³oœ_wynik
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?SprawdŸ_ustawienia@@YAXXZ
_TEXT	SEGMENT
_ustawienia$2 = -424					; size = 176
_buf$3 = -240						; size = 28
_ustawienia$4 = -204					; size = 184
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?SprawdŸ_ustawienia@@YAXXZ PROC				; SprawdŸ_ustawienia, COMDAT

; 780  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SprawdŸ_ustawienia@@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 60 02 00
	00		 sub	 esp, 608		; 00000260H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 94 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-620]
  00020	b9 98 00 00 00	 mov	 ecx, 152		; 00000098H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 781  : 	if (!_access("setting.txt", 0)) // Sprawdzenie dostêpu do pliku (je¿eli takowy istnieje, musi istnieæ plik)

  00040	8b f4		 mov	 esi, esp
  00042	6a 00		 push	 0
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0M@COFBHHKL@setting?4txt?$AA@
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___access
  0004f	83 c4 08	 add	 esp, 8
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	85 c0		 test	 eax, eax
  0005b	0f 85 ba 00 00
	00		 jne	 $LN4@SprawdŸ_u

; 782  : 	{
; 783  : 		ifstream ustawienia;

  00061	68 b8 00 00 00	 push	 184			; 000000b8H
  00066	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _ustawienia$4[ebp]
  0006c	e8 00 00 00 00	 call	 ?__autoclassinit2@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXI@Z
  00071	6a 01		 push	 1
  00073	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _ustawienia$4[ebp]
  00079	e8 00 00 00 00	 call	 ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
  0007e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 784  : 		ustawienia.open("setting.txt");

  00085	6a 40		 push	 64			; 00000040H
  00087	6a 01		 push	 1
  00089	68 00 00 00 00	 push	 OFFSET ??_C@_0M@COFBHHKL@setting?4txt?$AA@
  0008e	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _ustawienia$4[ebp]
  00094	e8 00 00 00 00	 call	 ?open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z ; std::basic_ifstream<char,std::char_traits<char> >::open

; 785  : 		string buf;

  00099	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _buf$3[ebp]
  0009f	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000a4	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
$LN2@SprawdŸ_u:

; 786  : 		while (!ustawienia.eof())

  000a8	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _ustawienia$4[ebp]
  000ae	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b1	8d 8c 0d 34 ff
	ff ff		 lea	 ecx, DWORD PTR _ustawienia$4[ebp+ecx]
  000b8	8b f4		 mov	 esi, esp
  000ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@ios_base@std@@QBE_NXZ
  000c0	3b f4		 cmp	 esi, esp
  000c2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c7	0f b6 d0	 movzx	 edx, al
  000ca	85 d2		 test	 edx, edx
  000cc	75 27		 jne	 SHORT $LN3@SprawdŸ_u

; 787  : 		{
; 788  : 			getline(ustawienia, buf);

  000ce	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _buf$3[ebp]
  000d4	50		 push	 eax
  000d5	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _ustawienia$4[ebp]
  000db	51		 push	 ecx
  000dc	e8 00 00 00 00	 call	 ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
  000e1	83 c4 08	 add	 esp, 8

; 789  : 			Ustaw_ustawienia(buf);

  000e4	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _buf$3[ebp]
  000ea	50		 push	 eax
  000eb	e8 00 00 00 00	 call	 ?Ustaw_ustawienia@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Ustaw_ustawienia
  000f0	83 c4 04	 add	 esp, 4

; 790  : 		}

  000f3	eb b3		 jmp	 SHORT $LN2@SprawdŸ_u
$LN3@SprawdŸ_u:

; 791  : 	}

  000f5	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000f9	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _buf$3[ebp]
  000ff	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00104	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0010b	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _ustawienia$4[ebp]
  00111	e8 00 00 00 00	 call	 ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ

; 792  : 	else

  00116	e9 18 02 00 00	 jmp	 $LN5@SprawdŸ_u
$LN4@SprawdŸ_u:

; 793  : 	{
; 794  : 		ofstream ustawienia;

  0011b	68 b0 00 00 00	 push	 176			; 000000b0H
  00120	8d 8d 58 fe ff
	ff		 lea	 ecx, DWORD PTR _ustawienia$2[ebp]
  00126	e8 00 00 00 00	 call	 ?__autoclassinit2@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXI@Z
  0012b	6a 01		 push	 1
  0012d	8d 8d 58 fe ff
	ff		 lea	 ecx, DWORD PTR _ustawienia$2[ebp]
  00133	e8 00 00 00 00	 call	 ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
  00138	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 795  : 		ustawienia.open("setting.txt");

  0013f	6a 40		 push	 64			; 00000040H
  00141	6a 02		 push	 2
  00143	68 00 00 00 00	 push	 OFFSET ??_C@_0M@COFBHHKL@setting?4txt?$AA@
  00148	8d 8d 58 fe ff
	ff		 lea	 ecx, DWORD PTR _ustawienia$2[ebp]
  0014e	e8 00 00 00 00	 call	 ?open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z ; std::basic_ofstream<char,std::char_traits<char> >::open

; 796  : 		ustawienia << "iloœæ_minimalna_obrotów_ruletki 2" << endl;

  00153	8b f4		 mov	 esi, esp
  00155	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0015a	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@GBEJJAFD@ilo?$JM?f_minimalna_obrot?sw_ruletki?5@
  0015f	8d 85 58 fe ff
	ff		 lea	 eax, DWORD PTR _ustawienia$2[ebp]
  00165	50		 push	 eax
  00166	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0016b	83 c4 08	 add	 esp, 8
  0016e	8b c8		 mov	 ecx, eax
  00170	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00176	3b f4		 cmp	 esi, esp
  00178	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 797  : 		ustawienia << "iloœæ_max_dodatkowych_obrotów_ruletki 3" << endl;

  0017d	8b f4		 mov	 esi, esp
  0017f	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00184	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KGOEKJAK@ilo?$JM?f_max_dodatkowych_obrot?sw_ru@
  00189	8d 85 58 fe ff
	ff		 lea	 eax, DWORD PTR _ustawienia$2[ebp]
  0018f	50		 push	 eax
  00190	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00195	83 c4 08	 add	 esp, 8
  00198	8b c8		 mov	 ecx, eax
  0019a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  001a0	3b f4		 cmp	 esi, esp
  001a2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 798  : 		ustawienia << "czas_przeskoku_kulki_szybki 50" << endl;

  001a7	8b f4		 mov	 esi, esp
  001a9	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  001ae	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@NMHFMMDP@czas_przeskoku_kulki_szybki?550?$AA@
  001b3	8d 85 58 fe ff
	ff		 lea	 eax, DWORD PTR _ustawienia$2[ebp]
  001b9	50		 push	 eax
  001ba	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001bf	83 c4 08	 add	 esp, 8
  001c2	8b c8		 mov	 ecx, eax
  001c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  001ca	3b f4		 cmp	 esi, esp
  001cc	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 799  : 		ustawienia << "czas_przeskoku_kulki_wolny 75" << endl;

  001d1	8b f4		 mov	 esi, esp
  001d3	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  001d8	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@ELNOLLHD@czas_przeskoku_kulki_wolny?575?$AA@
  001dd	8d 85 58 fe ff
	ff		 lea	 eax, DWORD PTR _ustawienia$2[ebp]
  001e3	50		 push	 eax
  001e4	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001e9	83 c4 08	 add	 esp, 8
  001ec	8b c8		 mov	 ecx, eax
  001ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  001f4	3b f4		 cmp	 esi, esp
  001f6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 800  : 		ustawienia << "czas_przerwy_dzwiêku 500" << endl;

  001fb	8b f4		 mov	 esi, esp
  001fd	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00202	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@OHAGCGBG@czas_przerwy_dzwi?jku?5500?$AA@
  00207	8d 85 58 fe ff
	ff		 lea	 eax, DWORD PTR _ustawienia$2[ebp]
  0020d	50		 push	 eax
  0020e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00213	83 c4 08	 add	 esp, 8
  00216	8b c8		 mov	 ecx, eax
  00218	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0021e	3b f4		 cmp	 esi, esp
  00220	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 801  : 		ustawienia << "styl_liczenia_wygranej 1" << endl;

  00225	8b f4		 mov	 esi, esp
  00227	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0022c	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@NJDCNPPC@styl_liczenia_wygranej?51?$AA@
  00231	8d 85 58 fe ff
	ff		 lea	 eax, DWORD PTR _ustawienia$2[ebp]
  00237	50		 push	 eax
  00238	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0023d	83 c4 08	 add	 esp, 8
  00240	8b c8		 mov	 ecx, eax
  00242	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00248	3b f4		 cmp	 esi, esp
  0024a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 802  : 		ustawienia << "kwota_pocz¹tkowa 1000" << endl;

  0024f	8b f4		 mov	 esi, esp
  00251	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00256	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@DNDOADBI@kwota_pocz?$LJtkowa?51000?$AA@
  0025b	8d 85 58 fe ff
	ff		 lea	 eax, DWORD PTR _ustawienia$2[ebp]
  00261	50		 push	 eax
  00262	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00267	83 c4 08	 add	 esp, 8
  0026a	8b c8		 mov	 ecx, eax
  0026c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00272	3b f4		 cmp	 esi, esp
  00274	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 803  : 		ustawienia << "stan_dŸwiêków 1" << endl;

  00279	8b f4		 mov	 esi, esp
  0027b	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00280	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@ILKGKHCK@stan_d?$JPwi?jk?sw?51?$AA@
  00285	8d 85 58 fe ff
	ff		 lea	 eax, DWORD PTR _ustawienia$2[ebp]
  0028b	50		 push	 eax
  0028c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00291	83 c4 08	 add	 esp, 8
  00294	8b c8		 mov	 ecx, eax
  00296	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0029c	3b f4		 cmp	 esi, esp
  0029e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 804  : 		ustawienia << "czy_kontynuowaæ_grê 1" << endl;

  002a3	8b f4		 mov	 esi, esp
  002a5	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  002aa	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@EMABALP@czy_kontynuowa?f_gr?j?51?$AA@
  002af	8d 85 58 fe ff
	ff		 lea	 eax, DWORD PTR _ustawienia$2[ebp]
  002b5	50		 push	 eax
  002b6	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002bb	83 c4 08	 add	 esp, 8
  002be	8b c8		 mov	 ecx, eax
  002c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  002c6	3b f4		 cmp	 esi, esp
  002c8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 805  : 		ustawienia << "g³os_odczytu_numeru 1" << endl;

  002cd	8b f4		 mov	 esi, esp
  002cf	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  002d4	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@COMBOMN@g?$LDos_odczytu_numeru?51?$AA@
  002d9	8d 85 58 fe ff
	ff		 lea	 eax, DWORD PTR _ustawienia$2[ebp]
  002df	50		 push	 eax
  002e0	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002e5	83 c4 08	 add	 esp, 8
  002e8	8b c8		 mov	 ecx, eax
  002ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  002f0	3b f4		 cmp	 esi, esp
  002f2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 806  : 		ustawienia << "g³os_szybkoœæ_odczytu_numeru 4" << endl;

  002f7	8b f4		 mov	 esi, esp
  002f9	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  002fe	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@CJDLAIMM@g?$LDos_szybko?$JM?f_odczytu_numeru?54?$AA@
  00303	8d 85 58 fe ff
	ff		 lea	 eax, DWORD PTR _ustawienia$2[ebp]
  00309	50		 push	 eax
  0030a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0030f	83 c4 08	 add	 esp, 8
  00312	8b c8		 mov	 ecx, eax
  00314	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0031a	3b f4		 cmp	 esi, esp
  0031c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 807  : 	}

  00321	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00328	8d 8d 58 fe ff
	ff		 lea	 ecx, DWORD PTR _ustawienia$2[ebp]
  0032e	e8 00 00 00 00	 call	 ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
$LN5@SprawdŸ_u:

; 808  : 
; 809  : 	if (czas_przeskoku_kulki_wolny < czas_przeskoku_kulki_szybki)

  00333	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?czas_przeskoku_kulki_wolny@@3FA ; czas_przeskoku_kulki_wolny
  0033a	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR ?czas_przeskoku_kulki_szybki@@3FA ; czas_przeskoku_kulki_szybki
  00341	3b c1		 cmp	 eax, ecx
  00343	7d 68		 jge	 SHORT $LN6@SprawdŸ_u

; 810  : 	{
; 811  : 		cout << "Wartoœæ wolnego czasu przeskoku kulki musi byæ ni¿sza ni¿ wartoœæ szybkiego czasu przeskoku kulki" << endl; //(Wartoœci tych zmiennych to czas opóŸnienia wiêc im jest wy¿szy tym d³u¿sza przerwa)

  00345	8b f4		 mov	 esi, esp
  00347	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0034c	68 00 00 00 00	 push	 OFFSET ??_C@_0GC@FGDMKFMP@Warto?$JM?f?5wolnego?5czasu?5przeskoku?5@
  00351	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00356	50		 push	 eax
  00357	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0035c	83 c4 08	 add	 esp, 8
  0035f	8b c8		 mov	 ecx, eax
  00361	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00367	3b f4		 cmp	 esi, esp
  00369	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 812  : 		cout << "Ustawiam domyœne ustawienie" << endl;

  0036e	8b f4		 mov	 esi, esp
  00370	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00375	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@BFHMOJCD@Ustawiam?5domy?$JMne?5ustawienie?$AA@
  0037a	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0037f	50		 push	 eax
  00380	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00385	83 c4 08	 add	 esp, 8
  00388	8b c8		 mov	 ecx, eax
  0038a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00390	3b f4		 cmp	 esi, esp
  00392	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 813  : 		czas_przeskoku_kulki_szybki = 50;

  00397	b8 32 00 00 00	 mov	 eax, 50			; 00000032H
  0039c	66 a3 00 00 00
	00		 mov	 WORD PTR ?czas_przeskoku_kulki_szybki@@3FA, ax ; czas_przeskoku_kulki_szybki

; 814  : 		czas_przeskoku_kulki_wolny = 75;

  003a2	b8 4b 00 00 00	 mov	 eax, 75			; 0000004bH
  003a7	66 a3 00 00 00
	00		 mov	 WORD PTR ?czas_przeskoku_kulki_wolny@@3FA, ax ; czas_przeskoku_kulki_wolny
$LN6@SprawdŸ_u:

; 815  : 	}
; 816  : 	if (iloœæ_minimalna_obrotów_ruletki < 0)

  003ad	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?iloœæ_minimalna_obrotów_ruletki@@3FA ; iloœæ_minimalna_obrotów_ruletki
  003b4	85 c0		 test	 eax, eax
  003b6	7d 5d		 jge	 SHORT $LN7@SprawdŸ_u

; 817  : 	{
; 818  : 		cout << "Iloœæ minimalna obrotów ruletki nie mo¿e byæ mniejsza od 0" << endl;

  003b8	8b f4		 mov	 esi, esp
  003ba	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  003bf	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@EDLBNLFA@Ilo?$JM?f?5minimalna?5obrot?sw?5ruletki?5@
  003c4	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  003c9	50		 push	 eax
  003ca	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003cf	83 c4 08	 add	 esp, 8
  003d2	8b c8		 mov	 ecx, eax
  003d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  003da	3b f4		 cmp	 esi, esp
  003dc	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 819  : 		cout << "Ustawiam domyœne ustawienie" << endl;

  003e1	8b f4		 mov	 esi, esp
  003e3	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  003e8	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@BFHMOJCD@Ustawiam?5domy?$JMne?5ustawienie?$AA@
  003ed	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  003f2	50		 push	 eax
  003f3	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003f8	83 c4 08	 add	 esp, 8
  003fb	8b c8		 mov	 ecx, eax
  003fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00403	3b f4		 cmp	 esi, esp
  00405	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 820  : 		iloœæ_minimalna_obrotów_ruletki = 2;

  0040a	b8 02 00 00 00	 mov	 eax, 2
  0040f	66 a3 00 00 00
	00		 mov	 WORD PTR ?iloœæ_minimalna_obrotów_ruletki@@3FA, ax ; iloœæ_minimalna_obrotów_ruletki
$LN7@SprawdŸ_u:

; 821  : 	}
; 822  : 	if (iloœæ_max_dodatkowych_obrotów_ruletki < 0)

  00415	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?iloœæ_max_dodatkowych_obrotów_ruletki@@3FA ; iloœæ_max_dodatkowych_obrotów_ruletki
  0041c	85 c0		 test	 eax, eax
  0041e	7d 5d		 jge	 SHORT $LN8@SprawdŸ_u

; 823  : 	{
; 824  : 		cout << "Iloœæ max obrotów ruletki nie mo¿e byæ mniejsza od 0" << endl;

  00420	8b f4		 mov	 esi, esp
  00422	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00427	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@PACHBLM@Ilo?$JM?f?5max?5obrot?sw?5ruletki?5nie?5mo@
  0042c	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00431	50		 push	 eax
  00432	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00437	83 c4 08	 add	 esp, 8
  0043a	8b c8		 mov	 ecx, eax
  0043c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00442	3b f4		 cmp	 esi, esp
  00444	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 825  : 		cout << "Ustawiam domyœne ustawienie" << endl;

  00449	8b f4		 mov	 esi, esp
  0044b	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00450	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@BFHMOJCD@Ustawiam?5domy?$JMne?5ustawienie?$AA@
  00455	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0045a	50		 push	 eax
  0045b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00460	83 c4 08	 add	 esp, 8
  00463	8b c8		 mov	 ecx, eax
  00465	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0046b	3b f4		 cmp	 esi, esp
  0046d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 826  : 		iloœæ_max_dodatkowych_obrotów_ruletki = 3;

  00472	b8 03 00 00 00	 mov	 eax, 3
  00477	66 a3 00 00 00
	00		 mov	 WORD PTR ?iloœæ_max_dodatkowych_obrotów_ruletki@@3FA, ax ; iloœæ_max_dodatkowych_obrotów_ruletki
$LN8@SprawdŸ_u:

; 827  : 	}
; 828  : 	if ((iloœæ_minimalna_obrotów_ruletki == 0) && (iloœæ_max_dodatkowych_obrotów_ruletki == 0))

  0047d	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?iloœæ_minimalna_obrotów_ruletki@@3FA ; iloœæ_minimalna_obrotów_ruletki
  00484	85 c0		 test	 eax, eax
  00486	75 73		 jne	 SHORT $LN9@SprawdŸ_u
  00488	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?iloœæ_max_dodatkowych_obrotów_ruletki@@3FA ; iloœæ_max_dodatkowych_obrotów_ruletki
  0048f	85 c0		 test	 eax, eax
  00491	75 68		 jne	 SHORT $LN9@SprawdŸ_u

; 829  : 	{
; 830  : 		cout << "Jedna z deklaracji w sprawie obrotów ruletki musi byæ wiêksza od zera" << endl;

  00493	8b f4		 mov	 esi, esp
  00495	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0049a	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@FJFKONPC@Jedna?5z?5deklaracji?5w?5sprawie?5obr@
  0049f	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  004a4	50		 push	 eax
  004a5	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  004aa	83 c4 08	 add	 esp, 8
  004ad	8b c8		 mov	 ecx, eax
  004af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  004b5	3b f4		 cmp	 esi, esp
  004b7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 831  : 		cout << "Ustawiam domyœne ustawienie" << endl;

  004bc	8b f4		 mov	 esi, esp
  004be	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  004c3	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@BFHMOJCD@Ustawiam?5domy?$JMne?5ustawienie?$AA@
  004c8	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  004cd	50		 push	 eax
  004ce	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  004d3	83 c4 08	 add	 esp, 8
  004d6	8b c8		 mov	 ecx, eax
  004d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  004de	3b f4		 cmp	 esi, esp
  004e0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 832  : 		iloœæ_minimalna_obrotów_ruletki = 2;

  004e5	b8 02 00 00 00	 mov	 eax, 2
  004ea	66 a3 00 00 00
	00		 mov	 WORD PTR ?iloœæ_minimalna_obrotów_ruletki@@3FA, ax ; iloœæ_minimalna_obrotów_ruletki

; 833  : 		iloœæ_max_dodatkowych_obrotów_ruletki = 3;

  004f0	b8 03 00 00 00	 mov	 eax, 3
  004f5	66 a3 00 00 00
	00		 mov	 WORD PTR ?iloœæ_max_dodatkowych_obrotów_ruletki@@3FA, ax ; iloœæ_max_dodatkowych_obrotów_ruletki
$LN9@SprawdŸ_u:

; 834  : 	}
; 835  : 	if (((styl_liczenia_wygranej > 1) || (styl_liczenia_wygranej < 0)))

  004fb	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?styl_liczenia_wygranej@@3FA ; styl_liczenia_wygranej
  00502	83 f8 01	 cmp	 eax, 1
  00505	7f 0b		 jg	 SHORT $LN11@SprawdŸ_u
  00507	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?styl_liczenia_wygranej@@3FA ; styl_liczenia_wygranej
  0050e	85 c0		 test	 eax, eax
  00510	7d 5d		 jge	 SHORT $LN10@SprawdŸ_u
$LN11@SprawdŸ_u:

; 836  : 	{
; 837  : 		cout << "Styl liczeia wygranej przyjmuje wartoœci tylko 0 lub 1" << endl;

  00512	8b f4		 mov	 esi, esp
  00514	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00519	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@EDACBMH@Styl?5liczeia?5wygranej?5przyjmuje?5@
  0051e	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00523	50		 push	 eax
  00524	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00529	83 c4 08	 add	 esp, 8
  0052c	8b c8		 mov	 ecx, eax
  0052e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00534	3b f4		 cmp	 esi, esp
  00536	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 838  : 		cout << "Ustawiam domyœne ustawienie" << endl;

  0053b	8b f4		 mov	 esi, esp
  0053d	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00542	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@BFHMOJCD@Ustawiam?5domy?$JMne?5ustawienie?$AA@
  00547	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0054c	50		 push	 eax
  0054d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00552	83 c4 08	 add	 esp, 8
  00555	8b c8		 mov	 ecx, eax
  00557	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0055d	3b f4		 cmp	 esi, esp
  0055f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 839  : 		styl_liczenia_wygranej = 1;

  00564	b8 01 00 00 00	 mov	 eax, 1
  00569	66 a3 00 00 00
	00		 mov	 WORD PTR ?styl_liczenia_wygranej@@3FA, ax ; styl_liczenia_wygranej
$LN10@SprawdŸ_u:

; 840  : 	}
; 841  : 	if (czas_przerwy_dzwiêku < 0)

  0056f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?czas_przerwy_dzwiêku@@3FA ; czas_przerwy_dzwiêku
  00576	85 c0		 test	 eax, eax
  00578	7d 5d		 jge	 SHORT $LN12@SprawdŸ_u

; 842  : 	{
; 843  : 		cout << "Czas przerwy dŸwiêku nie mo¿e byæ mniejszy od zera" << endl;

  0057a	8b f4		 mov	 esi, esp
  0057c	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00581	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@CJFGHGHP@Czas?5przerwy?5d?$JPwi?jku?5nie?5mo?$LPe?5by@
  00586	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0058b	50		 push	 eax
  0058c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00591	83 c4 08	 add	 esp, 8
  00594	8b c8		 mov	 ecx, eax
  00596	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0059c	3b f4		 cmp	 esi, esp
  0059e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 844  : 		cout << "Ustawiam domyœne ustawienie" << endl;

  005a3	8b f4		 mov	 esi, esp
  005a5	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  005aa	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@BFHMOJCD@Ustawiam?5domy?$JMne?5ustawienie?$AA@
  005af	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  005b4	50		 push	 eax
  005b5	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  005ba	83 c4 08	 add	 esp, 8
  005bd	8b c8		 mov	 ecx, eax
  005bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  005c5	3b f4		 cmp	 esi, esp
  005c7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 845  : 		czas_przerwy_dzwiêku = 500;

  005cc	b8 f4 01 00 00	 mov	 eax, 500		; 000001f4H
  005d1	66 a3 00 00 00
	00		 mov	 WORD PTR ?czas_przerwy_dzwiêku@@3FA, ax ; czas_przerwy_dzwiêku
$LN12@SprawdŸ_u:

; 846  : 	}
; 847  : 	if (kwota_pocz¹tkowa < 0)

  005d7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?kwota_pocz¹tkowa@@3HA, 0 ; kwota_pocz¹tkowa
  005de	7d 5c		 jge	 SHORT $LN13@SprawdŸ_u

; 848  : 	{
; 849  : 		cout << "Kwota pocz¹tkowa nie mo¿e byæ mniejsza od zera" << endl;

  005e0	8b f4		 mov	 esi, esp
  005e2	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  005e7	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@ODEFLMCC@Kwota?5pocz?$LJtkowa?5nie?5mo?$LPe?5by?f?5mn@
  005ec	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  005f1	50		 push	 eax
  005f2	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  005f7	83 c4 08	 add	 esp, 8
  005fa	8b c8		 mov	 ecx, eax
  005fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00602	3b f4		 cmp	 esi, esp
  00604	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 850  : 		cout << "Ustawiam domyœne ustawienie" << endl;

  00609	8b f4		 mov	 esi, esp
  0060b	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00610	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@BFHMOJCD@Ustawiam?5domy?$JMne?5ustawienie?$AA@
  00615	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0061a	50		 push	 eax
  0061b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00620	83 c4 08	 add	 esp, 8
  00623	8b c8		 mov	 ecx, eax
  00625	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0062b	3b f4		 cmp	 esi, esp
  0062d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 851  : 		kwota_pocz¹tkowa = 1000;

  00632	c7 05 00 00 00
	00 e8 03 00 00	 mov	 DWORD PTR ?kwota_pocz¹tkowa@@3HA, 1000 ; kwota_pocz¹tkowa, 000003e8H
$LN13@SprawdŸ_u:

; 852  : 	}
; 853  : 	if ((stan_dŸwiêków > 1) || (stan_dŸwiêków < 0))

  0063c	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?stan_dŸwiêków@@3FA ; stan_dŸwiêków
  00643	83 f8 01	 cmp	 eax, 1
  00646	7f 0b		 jg	 SHORT $LN15@SprawdŸ_u
  00648	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?stan_dŸwiêków@@3FA ; stan_dŸwiêków
  0064f	85 c0		 test	 eax, eax
  00651	7d 5d		 jge	 SHORT $LN14@SprawdŸ_u
$LN15@SprawdŸ_u:

; 854  : 	{
; 855  : 		cout << "Stan dŸwiêków przyjmuje wartoœci tylko 0 lub 1" << endl;

  00653	8b f4		 mov	 esi, esp
  00655	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0065a	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@LNDFINPO@Stan?5d?$JPwi?jk?sw?5przyjmuje?5warto?$JMci@
  0065f	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00664	50		 push	 eax
  00665	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0066a	83 c4 08	 add	 esp, 8
  0066d	8b c8		 mov	 ecx, eax
  0066f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00675	3b f4		 cmp	 esi, esp
  00677	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 856  : 		cout << "Ustawiam domyœne ustawienie" << endl;

  0067c	8b f4		 mov	 esi, esp
  0067e	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00683	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@BFHMOJCD@Ustawiam?5domy?$JMne?5ustawienie?$AA@
  00688	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0068d	50		 push	 eax
  0068e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00693	83 c4 08	 add	 esp, 8
  00696	8b c8		 mov	 ecx, eax
  00698	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0069e	3b f4		 cmp	 esi, esp
  006a0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 857  : 		stan_dŸwiêków = 1;

  006a5	b8 01 00 00 00	 mov	 eax, 1
  006aa	66 a3 00 00 00
	00		 mov	 WORD PTR ?stan_dŸwiêków@@3FA, ax ; stan_dŸwiêków
$LN14@SprawdŸ_u:

; 858  : 	}
; 859  : 	if ((czy_kontynuowaæ_grê > 1) || (czy_kontynuowaæ_grê < 0))

  006b0	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?czy_kontynuowaæ_grê@@3FA ; czy_kontynuowaæ_grê
  006b7	83 f8 01	 cmp	 eax, 1
  006ba	7f 0b		 jg	 SHORT $LN17@SprawdŸ_u
  006bc	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?czy_kontynuowaæ_grê@@3FA ; czy_kontynuowaæ_grê
  006c3	85 c0		 test	 eax, eax
  006c5	7d 5d		 jge	 SHORT $LN16@SprawdŸ_u
$LN17@SprawdŸ_u:

; 860  : 	{
; 861  : 		cout << "Opcja kontynuowania gry przyjmuje wartoœci tylko 0 lub 1" << endl;

  006c7	8b f4		 mov	 esi, esp
  006c9	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  006ce	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@OKKJHGDF@Opcja?5kontynuowania?5gry?5przyjmuj@
  006d3	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  006d8	50		 push	 eax
  006d9	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  006de	83 c4 08	 add	 esp, 8
  006e1	8b c8		 mov	 ecx, eax
  006e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  006e9	3b f4		 cmp	 esi, esp
  006eb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 862  : 		cout << "Ustawiam domyœne ustawienie" << endl;

  006f0	8b f4		 mov	 esi, esp
  006f2	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  006f7	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@BFHMOJCD@Ustawiam?5domy?$JMne?5ustawienie?$AA@
  006fc	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00701	50		 push	 eax
  00702	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00707	83 c4 08	 add	 esp, 8
  0070a	8b c8		 mov	 ecx, eax
  0070c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00712	3b f4		 cmp	 esi, esp
  00714	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 863  : 		czy_kontynuowaæ_grê = 1;

  00719	b8 01 00 00 00	 mov	 eax, 1
  0071e	66 a3 00 00 00
	00		 mov	 WORD PTR ?czy_kontynuowaæ_grê@@3FA, ax ; czy_kontynuowaæ_grê
$LN16@SprawdŸ_u:

; 864  : 	}
; 865  : 	if ((g³os_odczytu_numeru > 10) || (g³os_odczytu_numeru < 0))

  00724	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?g³os_odczytu_numeru@@3FA ; g³os_odczytu_numeru
  0072b	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0072e	7f 0b		 jg	 SHORT $LN19@SprawdŸ_u
  00730	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?g³os_odczytu_numeru@@3FA ; g³os_odczytu_numeru
  00737	85 c0		 test	 eax, eax
  00739	7d 5d		 jge	 SHORT $LN18@SprawdŸ_u
$LN19@SprawdŸ_u:

; 866  : 	{
; 867  : 		cout << "Opcja g³os odczytu numeru przyjmuje wartoœci w przedziale <0;10>" << endl;

  0073b	8b f4		 mov	 esi, esp
  0073d	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00742	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@BADOFEHO@Opcja?5g?$LDos?5odczytu?5numeru?5przyjm@
  00747	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0074c	50		 push	 eax
  0074d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00752	83 c4 08	 add	 esp, 8
  00755	8b c8		 mov	 ecx, eax
  00757	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0075d	3b f4		 cmp	 esi, esp
  0075f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 868  : 		cout << "Ustawiam domyœne ustawienie" << endl;

  00764	8b f4		 mov	 esi, esp
  00766	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0076b	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@BFHMOJCD@Ustawiam?5domy?$JMne?5ustawienie?$AA@
  00770	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00775	50		 push	 eax
  00776	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0077b	83 c4 08	 add	 esp, 8
  0077e	8b c8		 mov	 ecx, eax
  00780	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00786	3b f4		 cmp	 esi, esp
  00788	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 869  : 		g³os_odczytu_numeru = 1;

  0078d	b8 01 00 00 00	 mov	 eax, 1
  00792	66 a3 00 00 00
	00		 mov	 WORD PTR ?g³os_odczytu_numeru@@3FA, ax ; g³os_odczytu_numeru
$LN18@SprawdŸ_u:

; 870  : 	}
; 871  : 	if ((g³os_szybkoœæ_odczytu_numeru > 5) || (g³os_szybkoœæ_odczytu_numeru < 0))

  00798	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?g³os_szybkoœæ_odczytu_numeru@@3FA ; g³os_szybkoœæ_odczytu_numeru
  0079f	83 f8 05	 cmp	 eax, 5
  007a2	7f 0b		 jg	 SHORT $LN21@SprawdŸ_u
  007a4	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?g³os_szybkoœæ_odczytu_numeru@@3FA ; g³os_szybkoœæ_odczytu_numeru
  007ab	85 c0		 test	 eax, eax
  007ad	7d 5d		 jge	 SHORT $LN1@SprawdŸ_u
$LN21@SprawdŸ_u:

; 872  : 	{
; 873  : 		cout << "Opcja szybkoœæ g³osu odczytu przyjmuje wartoœci w przedziale <0;5>" << endl;

  007af	8b f4		 mov	 esi, esp
  007b1	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  007b6	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@HLOPCNMJ@Opcja?5szybko?$JM?f?5g?$LDosu?5odczytu?5prz@
  007bb	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  007c0	50		 push	 eax
  007c1	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  007c6	83 c4 08	 add	 esp, 8
  007c9	8b c8		 mov	 ecx, eax
  007cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  007d1	3b f4		 cmp	 esi, esp
  007d3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 874  : 		cout << "Ustawiam domyœne ustawienie" << endl;

  007d8	8b f4		 mov	 esi, esp
  007da	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  007df	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@BFHMOJCD@Ustawiam?5domy?$JMne?5ustawienie?$AA@
  007e4	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  007e9	50		 push	 eax
  007ea	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  007ef	83 c4 08	 add	 esp, 8
  007f2	8b c8		 mov	 ecx, eax
  007f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  007fa	3b f4		 cmp	 esi, esp
  007fc	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 875  : 		g³os_szybkoœæ_odczytu_numeru = 4;

  00801	b8 04 00 00 00	 mov	 eax, 4
  00806	66 a3 00 00 00
	00		 mov	 WORD PTR ?g³os_szybkoœæ_odczytu_numeru@@3FA, ax ; g³os_szybkoœæ_odczytu_numeru
$LN1@SprawdŸ_u:

; 876  : 	}
; 877  : }

  0080c	52		 push	 edx
  0080d	8b cd		 mov	 ecx, ebp
  0080f	50		 push	 eax
  00810	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN31@SprawdŸ_u
  00816	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0081b	58		 pop	 eax
  0081c	5a		 pop	 edx
  0081d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00820	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00827	59		 pop	 ecx
  00828	5f		 pop	 edi
  00829	5e		 pop	 esi
  0082a	5b		 pop	 ebx
  0082b	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0082e	33 cd		 xor	 ecx, ebp
  00830	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00835	81 c4 6c 02 00
	00		 add	 esp, 620		; 0000026cH
  0083b	3b ec		 cmp	 ebp, esp
  0083d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00842	8b e5		 mov	 esp, ebp
  00844	5d		 pop	 ebp
  00845	c3		 ret	 0
  00846	66 90		 npad	 2
$LN31@SprawdŸ_u:
  00848	03 00 00 00	 DD	 3
  0084c	00 00 00 00	 DD	 $LN30@SprawdŸ_u
$LN30@SprawdŸ_u:
  00850	34 ff ff ff	 DD	 -204			; ffffff34H
  00854	b8 00 00 00	 DD	 184			; 000000b8H
  00858	00 00 00 00	 DD	 $LN26@SprawdŸ_u
  0085c	10 ff ff ff	 DD	 -240			; ffffff10H
  00860	1c 00 00 00	 DD	 28			; 0000001cH
  00864	00 00 00 00	 DD	 $LN27@SprawdŸ_u
  00868	58 fe ff ff	 DD	 -424			; fffffe58H
  0086c	b0 00 00 00	 DD	 176			; 000000b0H
  00870	00 00 00 00	 DD	 $LN28@SprawdŸ_u
$LN28@SprawdŸ_u:
  00874	75		 DB	 117			; 00000075H
  00875	73		 DB	 115			; 00000073H
  00876	74		 DB	 116			; 00000074H
  00877	61		 DB	 97			; 00000061H
  00878	77		 DB	 119			; 00000077H
  00879	69		 DB	 105			; 00000069H
  0087a	65		 DB	 101			; 00000065H
  0087b	6e		 DB	 110			; 0000006eH
  0087c	69		 DB	 105			; 00000069H
  0087d	61		 DB	 97			; 00000061H
  0087e	00		 DB	 0
$LN27@SprawdŸ_u:
  0087f	62		 DB	 98			; 00000062H
  00880	75		 DB	 117			; 00000075H
  00881	66		 DB	 102			; 00000066H
  00882	00		 DB	 0
$LN26@SprawdŸ_u:
  00883	75		 DB	 117			; 00000075H
  00884	73		 DB	 115			; 00000073H
  00885	74		 DB	 116			; 00000074H
  00886	61		 DB	 97			; 00000061H
  00887	77		 DB	 119			; 00000077H
  00888	69		 DB	 105			; 00000069H
  00889	65		 DB	 101			; 00000065H
  0088a	6e		 DB	 110			; 0000006eH
  0088b	69		 DB	 105			; 00000069H
  0088c	61		 DB	 97			; 00000061H
  0088d	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SprawdŸ_ustawienia@@YAXXZ$0:
  00000	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR _ustawienia$4[ebp]
  00006	e9 00 00 00 00	 jmp	 ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
__unwindfunclet$?SprawdŸ_ustawienia@@YAXXZ$1:
  0000b	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _buf$3[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SprawdŸ_ustawienia@@YAXXZ$2:
  00016	8d 8d 58 fe ff
	ff		 lea	 ecx, DWORD PTR _ustawienia$2[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
__ehhandler$?SprawdŸ_ustawienia@@YAXXZ:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 8a 90 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-624]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00038	33 c8		 xor	 ecx, eax
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SprawdŸ_ustawienia@@YAXXZ
  00044	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SprawdŸ_ustawienia@@YAXXZ ENDP				; SprawdŸ_ustawienia
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?SprawdŸ_Pliki@@YAXXZ
_TEXT	SEGMENT
tv428 = -1176						; size = 4
tv422 = -1176						; size = 4
tv416 = -1176						; size = 4
tv315 = -1172						; size = 4
tv277 = -1172						; size = 4
tv237 = -1172						; size = 4
tv71 = -1172						; size = 4
$T2 = -1164						; size = 28
$T3 = -1128						; size = 28
$T4 = -1092						; size = 28
_numers$5 = -672					; size = 176
_i$6 = -488						; size = 2
_numers$7 = -476					; size = 176
_i$8 = -292						; size = 2
_numers$9 = -280					; size = 176
_i$10 = -96						; size = 2
_buf$ = -84						; size = 28
_g³os_nazwa$ = -48					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?SprawdŸ_Pliki@@YAXXZ PROC				; SprawdŸ_Pliki, COMDAT

; 608  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SprawdŸ_Pliki@@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 8c 04 00
	00		 sub	 esp, 1164		; 0000048cH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 68 fb ff
	ff		 lea	 edi, DWORD PTR [ebp-1176]
  00020	b9 23 01 00 00	 mov	 ecx, 291		; 00000123H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 609  : 	string g³os_nazwa;

  00040	8d 4d d0	 lea	 ecx, DWORD PTR _g³os_nazwa$[ebp]
  00043	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 610  : 	string buf;

  0004f	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  00052	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00057	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 611  : 
; 612  : 	switch (g³os_odczytu_numeru)

  0005b	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?g³os_odczytu_numeru@@3FA ; g³os_odczytu_numeru
  00062	89 85 6c fb ff
	ff		 mov	 DWORD PTR tv71[ebp], eax
  00068	8b 8d 6c fb ff
	ff		 mov	 ecx, DWORD PTR tv71[ebp]
  0006e	83 e9 01	 sub	 ecx, 1
  00071	89 8d 6c fb ff
	ff		 mov	 DWORD PTR tv71[ebp], ecx
  00077	83 bd 6c fb ff
	ff 08		 cmp	 DWORD PTR tv71[ebp], 8
  0007e	0f 87 92 00 00
	00		 ja	 $LN2@SprawdŸ_P
  00084	8b 95 6c fb ff
	ff		 mov	 edx, DWORD PTR tv71[ebp]
  0008a	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN52@SprawdŸ_P[edx*4]
$LN13@SprawdŸ_P:

; 613  : 	{
; 614  : 	case 1:
; 615  : 	{
; 616  : 		g³os_nazwa = "Jacek ";

  00091	68 00 00 00 00	 push	 OFFSET ??_C@_06ECCMNMIG@Jacek?5?$AA@
  00096	8d 4d d0	 lea	 ecx, DWORD PTR _g³os_nazwa$[ebp]
  00099	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 617  : 		break;

  0009e	eb 76		 jmp	 SHORT $LN2@SprawdŸ_P
$LN14@SprawdŸ_P:

; 618  : 	}
; 619  : 	case 2:
; 620  : 	{
; 621  : 		g³os_nazwa = "Ewa ";

  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_04IDLHMCEL@Ewa?5?$AA@
  000a5	8d 4d d0	 lea	 ecx, DWORD PTR _g³os_nazwa$[ebp]
  000a8	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 622  : 		break;

  000ad	eb 67		 jmp	 SHORT $LN2@SprawdŸ_P
$LN15@SprawdŸ_P:

; 623  : 	}
; 624  : 	case 3:
; 625  : 	{
; 626  : 		g³os_nazwa = "Maja ";

  000af	68 00 00 00 00	 push	 OFFSET ??_C@_05NBKDILMB@Maja?5?$AA@
  000b4	8d 4d d0	 lea	 ecx, DWORD PTR _g³os_nazwa$[ebp]
  000b7	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 627  : 		break;

  000bc	eb 58		 jmp	 SHORT $LN2@SprawdŸ_P
$LN16@SprawdŸ_P:

; 628  : 	}
; 629  : 	case 4:
; 630  : 	{
; 631  : 		g³os_nazwa = "Jan ";

  000be	68 00 00 00 00	 push	 OFFSET ??_C@_04HPMJBKOE@Jan?5?$AA@
  000c3	8d 4d d0	 lea	 ecx, DWORD PTR _g³os_nazwa$[ebp]
  000c6	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 632  : 		break;

  000cb	eb 49		 jmp	 SHORT $LN2@SprawdŸ_P
$LN17@SprawdŸ_P:

; 633  : 	}
; 634  : 	case 5:
; 635  : 	{
; 636  : 		g³os_nazwa = "Jacek 2";

  000cd	68 00 00 00 00	 push	 OFFSET ??_C@_07OJOJFOLI@Jacek?52?$AA@
  000d2	8d 4d d0	 lea	 ecx, DWORD PTR _g³os_nazwa$[ebp]
  000d5	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 637  : 		break;

  000da	eb 3a		 jmp	 SHORT $LN2@SprawdŸ_P
$LN18@SprawdŸ_P:

; 638  : 	}
; 639  : 
; 640  : 	case 6:
; 641  : 	{
; 642  : 		g³os_nazwa = "Ewa 2";

  000dc	68 00 00 00 00	 push	 OFFSET ??_C@_05MPNHLKL@Ewa?52?$AA@
  000e1	8d 4d d0	 lea	 ecx, DWORD PTR _g³os_nazwa$[ebp]
  000e4	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 643  : 		break;

  000e9	eb 2b		 jmp	 SHORT $LN2@SprawdŸ_P
$LN19@SprawdŸ_P:

; 644  : 	}
; 645  : 	case 7:
; 646  : 	{
; 647  : 		g³os_nazwa = "Maja 2";

  000eb	68 00 00 00 00	 push	 OFFSET ??_C@_06BMCAFNM@Maja?52?$AA@
  000f0	8d 4d d0	 lea	 ecx, DWORD PTR _g³os_nazwa$[ebp]
  000f3	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 648  : 		break;

  000f8	eb 1c		 jmp	 SHORT $LN2@SprawdŸ_P
$LN20@SprawdŸ_P:

; 649  : 	}
; 650  : 	case 8:
; 651  : 	{
; 652  : 		g³os_nazwa = "Jan 2";

  000fa	68 00 00 00 00	 push	 OFFSET ??_C@_05EKGILLAK@Jan?52?$AA@
  000ff	8d 4d d0	 lea	 ecx, DWORD PTR _g³os_nazwa$[ebp]
  00102	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 653  : 		break;

  00107	eb 0d		 jmp	 SHORT $LN2@SprawdŸ_P
$LN21@SprawdŸ_P:

; 654  : 	}
; 655  : 	case 9:
; 656  : 	{
; 657  : 		g³os_nazwa = "Agata ";

  00109	68 00 00 00 00	 push	 OFFSET ??_C@_06JIAINCN@Agata?5?$AA@
  0010e	8d 4d d0	 lea	 ecx, DWORD PTR _g³os_nazwa$[ebp]
  00111	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
$LN2@SprawdŸ_P:

; 658  : 		break;
; 659  : 	}
; 660  : 	default:
; 661  : 		break;
; 662  : 	}
; 663  : 
; 664  : 	G³os = "G³os/";

  00116	68 00 00 00 00	 push	 OFFSET ??_C@_05CMOJBPHN@G?$LDos?1?$AA@
  0011b	b9 00 00 00 00	 mov	 ecx, OFFSET ?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  00120	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 665  : 	G³os += g³os_nazwa;

  00125	8d 45 d0	 lea	 eax, DWORD PTR _g³os_nazwa$[ebp]
  00128	50		 push	 eax
  00129	b9 00 00 00 00	 mov	 ecx, OFFSET ?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  0012e	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 666  : 	G³os += "_";

  00133	68 00 00 00 00	 push	 OFFSET ??_C@_01IDAFKMJL@_?$AA@
  00138	b9 00 00 00 00	 mov	 ecx, OFFSET ?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  0013d	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 667  : 	G³os += '0' + g³os_szybkoœæ_odczytu_numeru;

  00142	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?g³os_szybkoœæ_odczytu_numeru@@3FA ; g³os_szybkoœæ_odczytu_numeru
  00149	83 c0 30	 add	 eax, 48			; 00000030H
  0014c	50		 push	 eax
  0014d	b9 00 00 00 00	 mov	 ecx, OFFSET ?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  00152	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 668  : 	G³os += "/";

  00157	68 00 00 00 00	 push	 OFFSET ??_C@_01KMDKNFGN@?1?$AA@
  0015c	b9 00 00 00 00	 mov	 ecx, OFFSET ?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  00161	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 669  : 
; 670  : 	buf = G³os;

  00166	68 00 00 00 00	 push	 OFFSET ?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  0016b	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  0016e	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 671  : 	buf += "p.wav";

  00173	68 00 00 00 00	 push	 OFFSET ??_C@_05PNHGCFLK@p?4wav?$AA@
  00178	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  0017b	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 672  : 	if ((_access(buf.c_str(), 0)))

  00180	8b f4		 mov	 esi, esp
  00182	6a 00		 push	 0
  00184	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  00187	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0018c	50		 push	 eax
  0018d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___access
  00193	83 c4 08	 add	 esp, 8
  00196	3b f4		 cmp	 esi, esp
  00198	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0019d	85 c0		 test	 eax, eax
  0019f	74 50		 je	 SHORT $LN23@SprawdŸ_P

; 673  : 	{
; 674  : 		cout << "Brak wszystkich plików dla g³osu, wy³¹czono odczytywanie wyniku" << endl;

  001a1	8b f4		 mov	 esi, esp
  001a3	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  001a8	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@BAJGLA@Brak?5wszystkich?5plik?sw?5dla?5g?$LDosu@
  001ad	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001b2	50		 push	 eax
  001b3	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001b8	83 c4 08	 add	 esp, 8
  001bb	8b c8		 mov	 ecx, eax
  001bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  001c3	3b f4		 cmp	 esi, esp
  001c5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 675  : 		G³osyKompletne = false;

  001ca	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?G³osyKompletne@@3_NA, 0 ; G³osyKompletne

; 676  : 		return;

  001d1	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001d5	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  001d8	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001dd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001e4	8d 4d d0	 lea	 ecx, DWORD PTR _g³os_nazwa$[ebp]
  001e7	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001ec	e9 ba 07 00 00	 jmp	 $LN1@SprawdŸ_P
$LN23@SprawdŸ_P:

; 677  : 	}
; 678  : 
; 679  : 	buf = G³os;

  001f1	68 00 00 00 00	 push	 OFFSET ?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  001f6	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  001f9	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 680  : 	buf += "n.wav";

  001fe	68 00 00 00 00	 push	 OFFSET ??_C@_05MEKKEGFB@n?4wav?$AA@
  00203	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  00206	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 681  : 	if ((_access(buf.c_str(), 0)))

  0020b	8b f4		 mov	 esi, esp
  0020d	6a 00		 push	 0
  0020f	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  00212	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00217	50		 push	 eax
  00218	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___access
  0021e	83 c4 08	 add	 esp, 8
  00221	3b f4		 cmp	 esi, esp
  00223	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00228	85 c0		 test	 eax, eax
  0022a	74 50		 je	 SHORT $LN24@SprawdŸ_P

; 682  : 	{
; 683  : 		cout << "Brak wszystkich plików dla g³osu, wy³¹czono odczytywanie wyniku" << endl;

  0022c	8b f4		 mov	 esi, esp
  0022e	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00233	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@BAJGLA@Brak?5wszystkich?5plik?sw?5dla?5g?$LDosu@
  00238	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0023d	50		 push	 eax
  0023e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00243	83 c4 08	 add	 esp, 8
  00246	8b c8		 mov	 ecx, eax
  00248	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0024e	3b f4		 cmp	 esi, esp
  00250	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 684  : 		G³osyKompletne = false;

  00255	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?G³osyKompletne@@3_NA, 0 ; G³osyKompletne

; 685  : 		return;

  0025c	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00260	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  00263	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00268	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0026f	8d 4d d0	 lea	 ecx, DWORD PTR _g³os_nazwa$[ebp]
  00272	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00277	e9 2f 07 00 00	 jmp	 $LN1@SprawdŸ_P
$LN24@SprawdŸ_P:

; 686  : 	}
; 687  : 
; 688  : 	buf = G³os;

  0027c	68 00 00 00 00	 push	 OFFSET ?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  00281	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  00284	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 689  : 	buf += "r.wav";

  00289	68 00 00 00 00	 push	 OFFSET ??_C@_05LALOIELB@r?4wav?$AA@
  0028e	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  00291	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 690  : 	if ((_access(buf.c_str(), 0)))

  00296	8b f4		 mov	 esi, esp
  00298	6a 00		 push	 0
  0029a	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  0029d	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  002a2	50		 push	 eax
  002a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___access
  002a9	83 c4 08	 add	 esp, 8
  002ac	3b f4		 cmp	 esi, esp
  002ae	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002b3	85 c0		 test	 eax, eax
  002b5	74 50		 je	 SHORT $LN25@SprawdŸ_P

; 691  : 	{
; 692  : 		cout << "Brak wszystkich plików dla g³osu, wy³¹czono odczytywanie wyniku" << endl;

  002b7	8b f4		 mov	 esi, esp
  002b9	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  002be	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@BAJGLA@Brak?5wszystkich?5plik?sw?5dla?5g?$LDosu@
  002c3	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  002c8	50		 push	 eax
  002c9	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002ce	83 c4 08	 add	 esp, 8
  002d1	8b c8		 mov	 ecx, eax
  002d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  002d9	3b f4		 cmp	 esi, esp
  002db	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 693  : 		G³osyKompletne = false;

  002e0	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?G³osyKompletne@@3_NA, 0 ; G³osyKompletne

; 694  : 		return;

  002e7	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  002eb	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  002ee	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  002f3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002fa	8d 4d d0	 lea	 ecx, DWORD PTR _g³os_nazwa$[ebp]
  002fd	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00302	e9 a4 06 00 00	 jmp	 $LN1@SprawdŸ_P
$LN25@SprawdŸ_P:

; 695  : 	}
; 696  : 
; 697  : 	buf = G³os;

  00307	68 00 00 00 00	 push	 OFFSET ?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  0030c	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  0030f	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 698  : 	buf += "b.wav";

  00314	68 00 00 00 00	 push	 OFFSET ??_C@_05LDGIIGCK@b?4wav?$AA@
  00319	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  0031c	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 699  : 	if ((_access(buf.c_str(), 0)))

  00321	8b f4		 mov	 esi, esp
  00323	6a 00		 push	 0
  00325	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  00328	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0032d	50		 push	 eax
  0032e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___access
  00334	83 c4 08	 add	 esp, 8
  00337	3b f4		 cmp	 esi, esp
  00339	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0033e	85 c0		 test	 eax, eax
  00340	74 50		 je	 SHORT $LN26@SprawdŸ_P

; 700  : 	{
; 701  : 		cout << "Brak wszystkich plików dla g³osu, wy³¹czono odczytywanie wyniku" << endl;

  00342	8b f4		 mov	 esi, esp
  00344	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00349	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@BAJGLA@Brak?5wszystkich?5plik?sw?5dla?5g?$LDosu@
  0034e	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00353	50		 push	 eax
  00354	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00359	83 c4 08	 add	 esp, 8
  0035c	8b c8		 mov	 ecx, eax
  0035e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00364	3b f4		 cmp	 esi, esp
  00366	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 702  : 		G³osyKompletne = false;

  0036b	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?G³osyKompletne@@3_NA, 0 ; G³osyKompletne

; 703  : 		return;

  00372	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00376	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  00379	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0037e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00385	8d 4d d0	 lea	 ecx, DWORD PTR _g³os_nazwa$[ebp]
  00388	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0038d	e9 19 06 00 00	 jmp	 $LN1@SprawdŸ_P
$LN26@SprawdŸ_P:

; 704  : 	}
; 705  : 
; 706  : 	buf = G³os;

  00392	68 00 00 00 00	 push	 OFFSET ?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  00397	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  0039a	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 707  : 	buf += "g.wav";

  0039f	68 00 00 00 00	 push	 OFFSET ??_C@_05ODKFBHJJ@g?4wav?$AA@
  003a4	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  003a7	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 708  : 	if ((_access(buf.c_str(), 0)))

  003ac	8b f4		 mov	 esi, esp
  003ae	6a 00		 push	 0
  003b0	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  003b3	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  003b8	50		 push	 eax
  003b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___access
  003bf	83 c4 08	 add	 esp, 8
  003c2	3b f4		 cmp	 esi, esp
  003c4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003c9	85 c0		 test	 eax, eax
  003cb	74 50		 je	 SHORT $LN27@SprawdŸ_P

; 709  : 	{
; 710  : 		cout << "Brak wszystkich plików dla g³osu, wy³¹czono odczytywanie wyniku" << endl;

  003cd	8b f4		 mov	 esi, esp
  003cf	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  003d4	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@BAJGLA@Brak?5wszystkich?5plik?sw?5dla?5g?$LDosu@
  003d9	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  003de	50		 push	 eax
  003df	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003e4	83 c4 08	 add	 esp, 8
  003e7	8b c8		 mov	 ecx, eax
  003e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  003ef	3b f4		 cmp	 esi, esp
  003f1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 711  : 		G³osyKompletne = false;

  003f6	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?G³osyKompletne@@3_NA, 0 ; G³osyKompletne

; 712  : 		return;

  003fd	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00401	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  00404	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00409	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00410	8d 4d d0	 lea	 ecx, DWORD PTR _g³os_nazwa$[ebp]
  00413	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00418	e9 8e 05 00 00	 jmp	 $LN1@SprawdŸ_P
$LN27@SprawdŸ_P:

; 713  : 	}
; 714  : 
; 715  : 	buf = G³os;

  0041d	68 00 00 00 00	 push	 OFFSET ?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  00422	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  00425	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 716  : 	buf += "d.wav";

  0042a	68 00 00 00 00	 push	 OFFSET ??_C@_05GFDBGFDH@d?4wav?$AA@
  0042f	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  00432	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 717  : 	if ((_access(buf.c_str(), 0)))

  00437	8b f4		 mov	 esi, esp
  00439	6a 00		 push	 0
  0043b	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  0043e	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00443	50		 push	 eax
  00444	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___access
  0044a	83 c4 08	 add	 esp, 8
  0044d	3b f4		 cmp	 esi, esp
  0044f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00454	85 c0		 test	 eax, eax
  00456	74 50		 je	 SHORT $LN28@SprawdŸ_P

; 718  : 	{
; 719  : 		cout << "Brak wszystkich plików dla g³osu, wy³¹czono odczytywanie wyniku" << endl;

  00458	8b f4		 mov	 esi, esp
  0045a	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0045f	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@BAJGLA@Brak?5wszystkich?5plik?sw?5dla?5g?$LDosu@
  00464	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00469	50		 push	 eax
  0046a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0046f	83 c4 08	 add	 esp, 8
  00472	8b c8		 mov	 ecx, eax
  00474	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0047a	3b f4		 cmp	 esi, esp
  0047c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 720  : 		G³osyKompletne = false;

  00481	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?G³osyKompletne@@3_NA, 0 ; G³osyKompletne

; 721  : 		return;

  00488	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0048c	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  0048f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00494	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0049b	8d 4d d0	 lea	 ecx, DWORD PTR _g³os_nazwa$[ebp]
  0049e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  004a3	e9 03 05 00 00	 jmp	 $LN1@SprawdŸ_P
$LN28@SprawdŸ_P:

; 722  : 	}
; 723  : 
; 724  : 	for (unsigned short i = 1; i <= 3; ++i)

  004a8	b8 01 00 00 00	 mov	 eax, 1
  004ad	66 89 45 a0	 mov	 WORD PTR _i$10[ebp], ax
  004b1	eb 0c		 jmp	 SHORT $LN6@SprawdŸ_P
$LN4@SprawdŸ_P:
  004b3	66 8b 45 a0	 mov	 ax, WORD PTR _i$10[ebp]
  004b7	66 83 c0 01	 add	 ax, 1
  004bb	66 89 45 a0	 mov	 WORD PTR _i$10[ebp], ax
$LN6@SprawdŸ_P:
  004bf	0f b7 45 a0	 movzx	 eax, WORD PTR _i$10[ebp]
  004c3	83 f8 03	 cmp	 eax, 3
  004c6	0f 8f 3e 01 00
	00		 jg	 $LN5@SprawdŸ_P

; 725  : 	{
; 726  : 		buf = G³os;

  004cc	68 00 00 00 00	 push	 OFFSET ?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  004d1	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  004d4	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 727  : 		buf += "k";

  004d9	68 00 00 00 00	 push	 OFFSET ??_C@_01DICPFPGM@k?$AA@
  004de	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  004e1	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 728  : 		stringstream numers;

  004e6	68 b0 00 00 00	 push	 176			; 000000b0H
  004eb	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _numers$9[ebp]
  004f1	e8 00 00 00 00	 call	 ?__autoclassinit2@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
  004f6	6a 01		 push	 1
  004f8	6a 03		 push	 3
  004fa	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _numers$9[ebp]
  00500	e8 00 00 00 00	 call	 ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  00505	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 729  : 		numers << i;

  00509	8b f4		 mov	 esi, esp
  0050b	0f b7 45 a0	 movzx	 eax, WORD PTR _i$10[ebp]
  0050f	50		 push	 eax
  00510	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _numers$9[ebp+16]
  00516	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
  0051c	3b f4		 cmp	 esi, esp
  0051e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 730  : 		buf += numers.str();

  00523	8d 85 bc fb ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  00529	50		 push	 eax
  0052a	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _numers$9[ebp]
  00530	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00535	89 85 6c fb ff
	ff		 mov	 DWORD PTR tv237[ebp], eax
  0053b	8b 8d 6c fb ff
	ff		 mov	 ecx, DWORD PTR tv237[ebp]
  00541	89 8d 68 fb ff
	ff		 mov	 DWORD PTR tv416[ebp], ecx
  00547	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0054b	8b 95 68 fb ff
	ff		 mov	 edx, DWORD PTR tv416[ebp]
  00551	52		 push	 edx
  00552	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  00555	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
  0055a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0055e	8d 8d bc fb ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00564	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 731  : 		buf += ".wav";

  00569	68 00 00 00 00	 push	 OFFSET ??_C@_04IBLEHOMF@?4wav?$AA@
  0056e	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  00571	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 732  : 		if ((_access(buf.c_str(), 0)))

  00576	8b f4		 mov	 esi, esp
  00578	6a 00		 push	 0
  0057a	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  0057d	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00582	50		 push	 eax
  00583	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___access
  00589	83 c4 08	 add	 esp, 8
  0058c	3b f4		 cmp	 esi, esp
  0058e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00593	85 c0		 test	 eax, eax
  00595	74 5f		 je	 SHORT $LN29@SprawdŸ_P

; 733  : 		{
; 734  : 			cout << "Brak wszystkich plików dla g³osu, wy³¹czono odczytywanie wyniku" << endl;

  00597	8b f4		 mov	 esi, esp
  00599	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0059e	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@BAJGLA@Brak?5wszystkich?5plik?sw?5dla?5g?$LDosu@
  005a3	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  005a8	50		 push	 eax
  005a9	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  005ae	83 c4 08	 add	 esp, 8
  005b1	8b c8		 mov	 ecx, eax
  005b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  005b9	3b f4		 cmp	 esi, esp
  005bb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 735  : 			G³osyKompletne = false;

  005c0	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?G³osyKompletne@@3_NA, 0 ; G³osyKompletne

; 736  : 			return;

  005c7	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  005cb	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _numers$9[ebp]
  005d1	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
  005d6	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  005da	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  005dd	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  005e2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  005e9	8d 4d d0	 lea	 ecx, DWORD PTR _g³os_nazwa$[ebp]
  005ec	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  005f1	e9 b5 03 00 00	 jmp	 $LN1@SprawdŸ_P
$LN29@SprawdŸ_P:

; 737  : 		}
; 738  : 	}

  005f6	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  005fa	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _numers$9[ebp]
  00600	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
  00605	e9 a9 fe ff ff	 jmp	 $LN4@SprawdŸ_P
$LN5@SprawdŸ_P:

; 739  : 
; 740  : 	for (unsigned short i = 1; i <= 12; ++i)

  0060a	b8 01 00 00 00	 mov	 eax, 1
  0060f	66 89 85 dc fe
	ff ff		 mov	 WORD PTR _i$8[ebp], ax
  00616	eb 12		 jmp	 SHORT $LN9@SprawdŸ_P
$LN7@SprawdŸ_P:
  00618	66 8b 85 dc fe
	ff ff		 mov	 ax, WORD PTR _i$8[ebp]
  0061f	66 83 c0 01	 add	 ax, 1
  00623	66 89 85 dc fe
	ff ff		 mov	 WORD PTR _i$8[ebp], ax
$LN9@SprawdŸ_P:
  0062a	0f b7 85 dc fe
	ff ff		 movzx	 eax, WORD PTR _i$8[ebp]
  00631	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  00634	0f 8f 41 01 00
	00		 jg	 $LN8@SprawdŸ_P

; 741  : 	{
; 742  : 		buf = G³os;

  0063a	68 00 00 00 00	 push	 OFFSET ?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  0063f	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  00642	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 743  : 		buf += "w";

  00647	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w?$AA@
  0064c	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  0064f	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 744  : 		stringstream numers;

  00654	68 b0 00 00 00	 push	 176			; 000000b0H
  00659	8d 8d 24 fe ff
	ff		 lea	 ecx, DWORD PTR _numers$7[ebp]
  0065f	e8 00 00 00 00	 call	 ?__autoclassinit2@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
  00664	6a 01		 push	 1
  00666	6a 03		 push	 3
  00668	8d 8d 24 fe ff
	ff		 lea	 ecx, DWORD PTR _numers$7[ebp]
  0066e	e8 00 00 00 00	 call	 ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  00673	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 745  : 		numers << i;

  00677	8b f4		 mov	 esi, esp
  00679	0f b7 85 dc fe
	ff ff		 movzx	 eax, WORD PTR _i$8[ebp]
  00680	50		 push	 eax
  00681	8d 8d 34 fe ff
	ff		 lea	 ecx, DWORD PTR _numers$7[ebp+16]
  00687	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
  0068d	3b f4		 cmp	 esi, esp
  0068f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 746  : 		buf += numers.str();

  00694	8d 85 98 fb ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0069a	50		 push	 eax
  0069b	8d 8d 24 fe ff
	ff		 lea	 ecx, DWORD PTR _numers$7[ebp]
  006a1	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
  006a6	89 85 6c fb ff
	ff		 mov	 DWORD PTR tv277[ebp], eax
  006ac	8b 8d 6c fb ff
	ff		 mov	 ecx, DWORD PTR tv277[ebp]
  006b2	89 8d 68 fb ff
	ff		 mov	 DWORD PTR tv422[ebp], ecx
  006b8	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  006bc	8b 95 68 fb ff
	ff		 mov	 edx, DWORD PTR tv422[ebp]
  006c2	52		 push	 edx
  006c3	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  006c6	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
  006cb	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  006cf	8d 8d 98 fb ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  006d5	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 747  : 		buf += ".wav";

  006da	68 00 00 00 00	 push	 OFFSET ??_C@_04IBLEHOMF@?4wav?$AA@
  006df	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  006e2	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 748  : 		if ((_access(buf.c_str(), 0)))

  006e7	8b f4		 mov	 esi, esp
  006e9	6a 00		 push	 0
  006eb	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  006ee	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  006f3	50		 push	 eax
  006f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___access
  006fa	83 c4 08	 add	 esp, 8
  006fd	3b f4		 cmp	 esi, esp
  006ff	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00704	85 c0		 test	 eax, eax
  00706	74 5f		 je	 SHORT $LN30@SprawdŸ_P

; 749  : 		{
; 750  : 			cout << "Brak wszystkich plików dla g³osu, wy³¹czono odczytywanie wyniku" << endl;

  00708	8b f4		 mov	 esi, esp
  0070a	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0070f	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@BAJGLA@Brak?5wszystkich?5plik?sw?5dla?5g?$LDosu@
  00714	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00719	50		 push	 eax
  0071a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0071f	83 c4 08	 add	 esp, 8
  00722	8b c8		 mov	 ecx, eax
  00724	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0072a	3b f4		 cmp	 esi, esp
  0072c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 751  : 			G³osyKompletne = false;

  00731	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?G³osyKompletne@@3_NA, 0 ; G³osyKompletne

; 752  : 			return;

  00738	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0073c	8d 8d 24 fe ff
	ff		 lea	 ecx, DWORD PTR _numers$7[ebp]
  00742	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
  00747	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0074b	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  0074e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00753	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0075a	8d 4d d0	 lea	 ecx, DWORD PTR _g³os_nazwa$[ebp]
  0075d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00762	e9 44 02 00 00	 jmp	 $LN1@SprawdŸ_P
$LN30@SprawdŸ_P:

; 753  : 		}
; 754  : 	}

  00767	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0076b	8d 8d 24 fe ff
	ff		 lea	 ecx, DWORD PTR _numers$7[ebp]
  00771	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
  00776	e9 9d fe ff ff	 jmp	 $LN7@SprawdŸ_P
$LN8@SprawdŸ_P:

; 755  : 
; 756  : 	for (unsigned short i = 0; i <= 36; ++i)

  0077b	33 c0		 xor	 eax, eax
  0077d	66 89 85 18 fe
	ff ff		 mov	 WORD PTR _i$6[ebp], ax
  00784	eb 12		 jmp	 SHORT $LN12@SprawdŸ_P
$LN10@SprawdŸ_P:
  00786	66 8b 85 18 fe
	ff ff		 mov	 ax, WORD PTR _i$6[ebp]
  0078d	66 83 c0 01	 add	 ax, 1
  00791	66 89 85 18 fe
	ff ff		 mov	 WORD PTR _i$6[ebp], ax
$LN12@SprawdŸ_P:
  00798	0f b7 85 18 fe
	ff ff		 movzx	 eax, WORD PTR _i$6[ebp]
  0079f	83 f8 24	 cmp	 eax, 36			; 00000024H
  007a2	0f 8f 34 01 00
	00		 jg	 $LN11@SprawdŸ_P

; 757  : 	{
; 758  : 		buf = G³os;

  007a8	68 00 00 00 00	 push	 OFFSET ?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  007ad	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  007b0	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 759  : 		stringstream numers;

  007b5	68 b0 00 00 00	 push	 176			; 000000b0H
  007ba	8d 8d 60 fd ff
	ff		 lea	 ecx, DWORD PTR _numers$5[ebp]
  007c0	e8 00 00 00 00	 call	 ?__autoclassinit2@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
  007c5	6a 01		 push	 1
  007c7	6a 03		 push	 3
  007c9	8d 8d 60 fd ff
	ff		 lea	 ecx, DWORD PTR _numers$5[ebp]
  007cf	e8 00 00 00 00	 call	 ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  007d4	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6

; 760  : 		numers << i;

  007d8	8b f4		 mov	 esi, esp
  007da	0f b7 85 18 fe
	ff ff		 movzx	 eax, WORD PTR _i$6[ebp]
  007e1	50		 push	 eax
  007e2	8d 8d 70 fd ff
	ff		 lea	 ecx, DWORD PTR _numers$5[ebp+16]
  007e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
  007ee	3b f4		 cmp	 esi, esp
  007f0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 761  : 		buf += numers.str();

  007f5	8d 85 74 fb ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  007fb	50		 push	 eax
  007fc	8d 8d 60 fd ff
	ff		 lea	 ecx, DWORD PTR _numers$5[ebp]
  00802	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00807	89 85 6c fb ff
	ff		 mov	 DWORD PTR tv315[ebp], eax
  0080d	8b 8d 6c fb ff
	ff		 mov	 ecx, DWORD PTR tv315[ebp]
  00813	89 8d 68 fb ff
	ff		 mov	 DWORD PTR tv428[ebp], ecx
  00819	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  0081d	8b 95 68 fb ff
	ff		 mov	 edx, DWORD PTR tv428[ebp]
  00823	52		 push	 edx
  00824	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  00827	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
  0082c	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00830	8d 8d 74 fb ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00836	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 762  : 		buf += ".wav";

  0083b	68 00 00 00 00	 push	 OFFSET ??_C@_04IBLEHOMF@?4wav?$AA@
  00840	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  00843	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 763  : 		if ((_access(buf.c_str(), 0)))

  00848	8b f4		 mov	 esi, esp
  0084a	6a 00		 push	 0
  0084c	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  0084f	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00854	50		 push	 eax
  00855	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___access
  0085b	83 c4 08	 add	 esp, 8
  0085e	3b f4		 cmp	 esi, esp
  00860	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00865	85 c0		 test	 eax, eax
  00867	74 5f		 je	 SHORT $LN31@SprawdŸ_P

; 764  : 		{
; 765  : 			cout << "Brak wszystkich plików dla g³osu, wy³¹czono odczytywanie wyniku" << endl;

  00869	8b f4		 mov	 esi, esp
  0086b	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00870	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@BAJGLA@Brak?5wszystkich?5plik?sw?5dla?5g?$LDosu@
  00875	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0087a	50		 push	 eax
  0087b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00880	83 c4 08	 add	 esp, 8
  00883	8b c8		 mov	 ecx, eax
  00885	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0088b	3b f4		 cmp	 esi, esp
  0088d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 766  : 			G³osyKompletne = false;

  00892	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?G³osyKompletne@@3_NA, 0 ; G³osyKompletne

; 767  : 			return;

  00899	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0089d	8d 8d 60 fd ff
	ff		 lea	 ecx, DWORD PTR _numers$5[ebp]
  008a3	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
  008a8	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  008ac	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  008af	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  008b4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  008bb	8d 4d d0	 lea	 ecx, DWORD PTR _g³os_nazwa$[ebp]
  008be	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  008c3	e9 e3 00 00 00	 jmp	 $LN1@SprawdŸ_P
$LN31@SprawdŸ_P:

; 768  : 		}
; 769  : 	}

  008c8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  008cc	8d 8d 60 fd ff
	ff		 lea	 ecx, DWORD PTR _numers$5[ebp]
  008d2	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
  008d7	e9 aa fe ff ff	 jmp	 $LN10@SprawdŸ_P
$LN11@SprawdŸ_P:

; 770  : 
; 771  : 	if (stan_dŸwiêków == 1)

  008dc	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?stan_dŸwiêków@@3FA ; stan_dŸwiêków
  008e3	83 f8 01	 cmp	 eax, 1
  008e6	0f 85 a4 00 00
	00		 jne	 $LN32@SprawdŸ_P

; 772  : 		if ((_access("Efekty dzwiêkowe/bankrut.wav", 0)) || (_access("Efekty dzwiêkowe/wygrana1.wav", 0)) || (_access("Efekty dzwiêkowe/wygrana2.wav", 0)) || (_access("Efekty dzwiêkowe/zwielokrotnenie.wav", 0)))

  008ec	8b f4		 mov	 esi, esp
  008ee	6a 00		 push	 0
  008f0	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DACGNLHK@Efekty?5dzwi?jkowe?1bankrut?4wav?$AA@
  008f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___access
  008fb	83 c4 08	 add	 esp, 8
  008fe	3b f4		 cmp	 esi, esp
  00900	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00905	85 c0		 test	 eax, eax
  00907	75 57		 jne	 SHORT $LN34@SprawdŸ_P
  00909	8b f4		 mov	 esi, esp
  0090b	6a 00		 push	 0
  0090d	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@OAKNDKAH@Efekty?5dzwi?jkowe?1wygrana1?4wav?$AA@
  00912	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___access
  00918	83 c4 08	 add	 esp, 8
  0091b	3b f4		 cmp	 esi, esp
  0091d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00922	85 c0		 test	 eax, eax
  00924	75 3a		 jne	 SHORT $LN34@SprawdŸ_P
  00926	8b f4		 mov	 esi, esp
  00928	6a 00		 push	 0
  0092a	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@GGDJEIKJ@Efekty?5dzwi?jkowe?1wygrana2?4wav?$AA@
  0092f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___access
  00935	83 c4 08	 add	 esp, 8
  00938	3b f4		 cmp	 esi, esp
  0093a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0093f	85 c0		 test	 eax, eax
  00941	75 1d		 jne	 SHORT $LN34@SprawdŸ_P
  00943	8b f4		 mov	 esi, esp
  00945	6a 00		 push	 0
  00947	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DNPALCEH@Efekty?5dzwi?jkowe?1zwielokrotnenie@
  0094c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___access
  00952	83 c4 08	 add	 esp, 8
  00955	3b f4		 cmp	 esi, esp
  00957	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0095c	85 c0		 test	 eax, eax
  0095e	74 30		 je	 SHORT $LN32@SprawdŸ_P
$LN34@SprawdŸ_P:

; 773  : 		{
; 774  : 			cout << "Brak plików dla efektów dŸwiêkowych, wy³¹czono efekty dŸwiêkowe muzyczne, w³¹czono efekty systemowe" << endl;

  00960	8b f4		 mov	 esi, esp
  00962	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00967	68 00 00 00 00	 push	 OFFSET ??_C@_0GE@BGEAJNPD@Brak?5plik?sw?5dla?5efekt?sw?5d?$JPwi?jkow@
  0096c	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00971	50		 push	 eax
  00972	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00977	83 c4 08	 add	 esp, 8
  0097a	8b c8		 mov	 ecx, eax
  0097c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00982	3b f4		 cmp	 esi, esp
  00984	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 775  : 			EfektyKompletne = false;

  00989	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?EfektyKompletne@@3_NA, 0 ; EfektyKompletne
$LN32@SprawdŸ_P:

; 776  : 		}
; 777  : }

  00990	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00994	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  00997	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0099c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  009a3	8d 4d d0	 lea	 ecx, DWORD PTR _g³os_nazwa$[ebp]
  009a6	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN1@SprawdŸ_P:
  009ab	52		 push	 edx
  009ac	8b cd		 mov	 ecx, ebp
  009ae	50		 push	 eax
  009af	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN51@SprawdŸ_P
  009b5	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  009ba	58		 pop	 eax
  009bb	5a		 pop	 edx
  009bc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  009bf	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  009c6	59		 pop	 ecx
  009c7	5f		 pop	 edi
  009c8	5e		 pop	 esi
  009c9	5b		 pop	 ebx
  009ca	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  009cd	33 cd		 xor	 ecx, ebp
  009cf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  009d4	81 c4 98 04 00
	00		 add	 esp, 1176		; 00000498H
  009da	3b ec		 cmp	 ebp, esp
  009dc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  009e1	8b e5		 mov	 esp, ebp
  009e3	5d		 pop	 ebp
  009e4	c3		 ret	 0
  009e5	0f 1f 00	 npad	 3
$LN51@SprawdŸ_P:
  009e8	05 00 00 00	 DD	 5
  009ec	00 00 00 00	 DD	 $LN50@SprawdŸ_P
$LN50@SprawdŸ_P:
  009f0	d0 ff ff ff	 DD	 -48			; ffffffd0H
  009f4	1c 00 00 00	 DD	 28			; 0000001cH
  009f8	00 00 00 00	 DD	 $LN44@SprawdŸ_P
  009fc	ac ff ff ff	 DD	 -84			; ffffffacH
  00a00	1c 00 00 00	 DD	 28			; 0000001cH
  00a04	00 00 00 00	 DD	 $LN45@SprawdŸ_P
  00a08	e8 fe ff ff	 DD	 -280			; fffffee8H
  00a0c	b0 00 00 00	 DD	 176			; 000000b0H
  00a10	00 00 00 00	 DD	 $LN46@SprawdŸ_P
  00a14	24 fe ff ff	 DD	 -476			; fffffe24H
  00a18	b0 00 00 00	 DD	 176			; 000000b0H
  00a1c	00 00 00 00	 DD	 $LN47@SprawdŸ_P
  00a20	60 fd ff ff	 DD	 -672			; fffffd60H
  00a24	b0 00 00 00	 DD	 176			; 000000b0H
  00a28	00 00 00 00	 DD	 $LN48@SprawdŸ_P
$LN48@SprawdŸ_P:
  00a2c	6e		 DB	 110			; 0000006eH
  00a2d	75		 DB	 117			; 00000075H
  00a2e	6d		 DB	 109			; 0000006dH
  00a2f	65		 DB	 101			; 00000065H
  00a30	72		 DB	 114			; 00000072H
  00a31	73		 DB	 115			; 00000073H
  00a32	00		 DB	 0
$LN47@SprawdŸ_P:
  00a33	6e		 DB	 110			; 0000006eH
  00a34	75		 DB	 117			; 00000075H
  00a35	6d		 DB	 109			; 0000006dH
  00a36	65		 DB	 101			; 00000065H
  00a37	72		 DB	 114			; 00000072H
  00a38	73		 DB	 115			; 00000073H
  00a39	00		 DB	 0
$LN46@SprawdŸ_P:
  00a3a	6e		 DB	 110			; 0000006eH
  00a3b	75		 DB	 117			; 00000075H
  00a3c	6d		 DB	 109			; 0000006dH
  00a3d	65		 DB	 101			; 00000065H
  00a3e	72		 DB	 114			; 00000072H
  00a3f	73		 DB	 115			; 00000073H
  00a40	00		 DB	 0
$LN45@SprawdŸ_P:
  00a41	62		 DB	 98			; 00000062H
  00a42	75		 DB	 117			; 00000075H
  00a43	66		 DB	 102			; 00000066H
  00a44	00		 DB	 0
$LN44@SprawdŸ_P:
  00a45	67		 DB	 103			; 00000067H
  00a46	c5		 DB	 -59			; ffffffc5H
  00a47	82		 DB	 -126			; ffffff82H
  00a48	6f		 DB	 111			; 0000006fH
  00a49	73		 DB	 115			; 00000073H
  00a4a	5f		 DB	 95			; 0000005fH
  00a4b	6e		 DB	 110			; 0000006eH
  00a4c	61		 DB	 97			; 00000061H
  00a4d	7a		 DB	 122			; 0000007aH
  00a4e	77		 DB	 119			; 00000077H
  00a4f	61		 DB	 97			; 00000061H
  00a50	00		 DB	 0
  00a51	0f 1f 00	 npad	 3
$LN52@SprawdŸ_P:
  00a54	00 00 00 00	 DD	 $LN13@SprawdŸ_P
  00a58	00 00 00 00	 DD	 $LN14@SprawdŸ_P
  00a5c	00 00 00 00	 DD	 $LN15@SprawdŸ_P
  00a60	00 00 00 00	 DD	 $LN16@SprawdŸ_P
  00a64	00 00 00 00	 DD	 $LN17@SprawdŸ_P
  00a68	00 00 00 00	 DD	 $LN18@SprawdŸ_P
  00a6c	00 00 00 00	 DD	 $LN19@SprawdŸ_P
  00a70	00 00 00 00	 DD	 $LN20@SprawdŸ_P
  00a74	00 00 00 00	 DD	 $LN21@SprawdŸ_P
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SprawdŸ_Pliki@@YAXXZ$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _g³os_nazwa$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SprawdŸ_Pliki@@YAXXZ$1:
  00008	8d 4d ac	 lea	 ecx, DWORD PTR _buf$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SprawdŸ_Pliki@@YAXXZ$2:
  00010	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _numers$9[ebp]
  00016	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__unwindfunclet$?SprawdŸ_Pliki@@YAXXZ$3:
  0001b	8d 8d bc fb ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00021	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SprawdŸ_Pliki@@YAXXZ$4:
  00026	8d 8d 24 fe ff
	ff		 lea	 ecx, DWORD PTR _numers$7[ebp]
  0002c	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__unwindfunclet$?SprawdŸ_Pliki@@YAXXZ$5:
  00031	8d 8d 98 fb ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00037	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SprawdŸ_Pliki@@YAXXZ$6:
  0003c	8d 8d 60 fd ff
	ff		 lea	 ecx, DWORD PTR _numers$5[ebp]
  00042	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__unwindfunclet$?SprawdŸ_Pliki@@YAXXZ$7:
  00047	8d 8d 74 fb ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0004d	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?SprawdŸ_Pliki@@YAXXZ:
  00052	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00056	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00059	8b 8a 64 fb ff
	ff		 mov	 ecx, DWORD PTR [edx-1180]
  0005f	33 c8		 xor	 ecx, eax
  00061	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00066	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00069	33 c8		 xor	 ecx, eax
  0006b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00070	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SprawdŸ_Pliki@@YAXXZ
  00075	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SprawdŸ_Pliki@@YAXXZ ENDP				; SprawdŸ_Pliki
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?Wczytaj_z_pliku@@YAXAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AADAAH33AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
tv672 = -512						; size = 4
tv653 = -512						; size = 4
tv634 = -512						; size = 4
tv612 = -512						; size = 4
_buf2$2 = -312						; size = 28
_koniec$3 = -276					; size = 2
_pocz¹tek$4 = -264					; size = 2
_koniec$5 = -252					; size = 2
_buf2$6 = -240						; size = 28
_pocz¹tek$7 = -204					; size = 2
_koniec$8 = -192					; size = 4
_buf2$9 = -180						; size = 28
_pocz¹tek$10 = -144					; size = 2
_buf2$11 = -132						; size = 28
_pocz¹tek$12 = -96					; size = 2
_bufor2$13 = -84					; size = 28
_buf$14 = -48						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_log_ogólny$ = 8					; size = 4
_log$ = 12						; size = 4
_co_kontynuowaæ$ = 16					; size = 4
_iloœæ_pieniêdzy$ = 20					; size = 4
_kwota_zak³adu$ = 24					; size = 4
_wylosowana_liczba$ = 28				; size = 4
_typ_zak³adu$ = 32					; size = 4
?Wczytaj_z_pliku@@YAXAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AADAAH33AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; Wczytaj_z_pliku, COMDAT

; 447  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Wczytaj_z_pliku@@YAXAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AADAAH33AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec f4 01 00
	00		 sub	 esp, 500		; 000001f4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 00 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-512]
  00020	b9 7d 00 00 00	 mov	 ecx, 125		; 0000007dH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 448  : 	if (!czy_kontynuowaæ_grê) //Kompilacja je¿eli czy_kontynuowaæ_grê == 0

  00040	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?czy_kontynuowaæ_grê@@3FA ; czy_kontynuowaæ_grê
  00047	85 c0		 test	 eax, eax
  00049	0f 85 87 00 00
	00		 jne	 $LN30@Wczytaj_z_

; 449  : 		if (!_access("log_aktualny.txt", 0)) // Sprawdzenie dostêpu do pliku (je¿eli takowy istnieje, musi istnieæ plik)

  0004f	8b f4		 mov	 esi, esp
  00051	6a 00		 push	 0
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@KLDNCCFE@log_aktualny?4txt?$AA@
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___access
  0005e	83 c4 08	 add	 esp, 8
  00061	3b f4		 cmp	 esi, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	85 c0		 test	 eax, eax
  0006a	75 6a		 jne	 SHORT $LN30@Wczytaj_z_

; 450  : 		{
; 451  : 			co_kontynuowaæ = 'n'; //Przypisanie znaku rozpoczêcia rundy od pocz¹tku

  0006c	8b 45 10	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  0006f	c6 00 6e	 mov	 BYTE PTR [eax], 110	; 0000006eH

; 452  : 			remove("log_aktualny.txt"); //Usuniêcie pliku log aktualny poniewa¿ rozpoczyna siê now¹ grê

  00072	8b f4		 mov	 esi, esp
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@KLDNCCFE@log_aktualny?4txt?$AA@
  00079	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__remove
  0007f	83 c4 04	 add	 esp, 4
  00082	3b f4		 cmp	 esi, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 453  : 			log_ogólny << endl << "Uruchomiono ponownie grê z wy³¹czon¹ opcj¹ kontynuowania" << endl; //Wpisanie do buforu logu ogólnego informacje o rozpoczêciu nowej gry spowodowane ustawieniem gry

  00089	8b f4		 mov	 esi, esp
  0008b	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@EFIKGJBI@Uruchomiono?5ponownie?5gr?j?5z?5wy?$LD?$LJc@
  00095	8b fc		 mov	 edi, esp
  00097	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0009c	8b 4d 08	 mov	 ecx, DWORD PTR _log_ogólny$[ebp]
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  000a5	3b fc		 cmp	 edi, esp
  000a7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000b2	83 c4 08	 add	 esp, 8
  000b5	8b c8		 mov	 ecx, eax
  000b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  000bd	3b f4		 cmp	 esi, esp
  000bf	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 454  : 			log_ogólny.flush(); //Zapisanie do pliku log_ogólny.txt danych wpisanych do bufora danych

  000c4	8b f4		 mov	 esi, esp
  000c6	8b 4d 08	 mov	 ecx, DWORD PTR _log_ogólny$[ebp]
  000c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  000cf	3b f4		 cmp	 esi, esp
  000d1	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN30@Wczytaj_z_:

; 455  : 		}
; 456  : 
; 457  : 	if (!_access("log_aktualny.txt", 0)) // Sprawdzenie dostêpu do pliku (je¿eli takowy istnieje, musi istnieæ plik)

  000d6	8b f4		 mov	 esi, esp
  000d8	6a 00		 push	 0
  000da	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@KLDNCCFE@log_aktualny?4txt?$AA@
  000df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___access
  000e5	83 c4 08	 add	 esp, 8
  000e8	3b f4		 cmp	 esi, esp
  000ea	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ef	85 c0		 test	 eax, eax
  000f1	0f 85 d7 0a 00
	00		 jne	 $LN32@Wczytaj_z_

; 458  : 	{
; 459  : 		log.open("log_aktualny.txt", ios::in); //Otworzenie pliku w trybie odczytu z pliku

  000f7	6a 40		 push	 64			; 00000040H
  000f9	6a 01		 push	 1
  000fb	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@KLDNCCFE@log_aktualny?4txt?$AA@
  00100	8b 4d 0c	 mov	 ecx, DWORD PTR _log$[ebp]
  00103	e8 00 00 00 00	 call	 ?open@?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z ; std::basic_fstream<char,std::char_traits<char> >::open

; 460  : 		string buf, bufor2; //Uworzenie 2 buforów na tekst, pierwszy na ostatni¹ linie tekst, drugi na przedostani¹ nie pust¹ linie tekstu lub ostani¹ w przypadku gdy ostania jest pusta

  00108	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  0010b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00110	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00117	8d 4d ac	 lea	 ecx, DWORD PTR _bufor2$13[ebp]
  0011a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0011f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 461  : 		getline(log, buf); //Odczyt ca³ej lini z pliku

  00123	8d 45 d0	 lea	 eax, DWORD PTR _buf$14[ebp]
  00126	50		 push	 eax
  00127	8b 4d 0c	 mov	 ecx, DWORD PTR _log$[ebp]
  0012a	51		 push	 ecx
  0012b	e8 00 00 00 00	 call	 ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
  00130	83 c4 08	 add	 esp, 8
$LN2@Wczytaj_z_:

; 462  : 		while (!log.eof()) //Pêtla dzia³j¹ca do czasu kiedy kursor odczytu z pliku nie bêdzie na koñcu pliku

  00133	8b 45 0c	 mov	 eax, DWORD PTR _log$[ebp]
  00136	8b 08		 mov	 ecx, DWORD PTR [eax]
  00138	8b 55 0c	 mov	 edx, DWORD PTR _log$[ebp]
  0013b	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0013e	8b f4		 mov	 esi, esp
  00140	8b ca		 mov	 ecx, edx
  00142	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@ios_base@std@@QBE_NXZ
  00148	3b f4		 cmp	 esi, esp
  0014a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0014f	0f b6 c0	 movzx	 eax, al
  00152	85 c0		 test	 eax, eax
  00154	75 36		 jne	 SHORT $LN3@Wczytaj_z_

; 463  : 		{
; 464  : 			if (buf != "") bufor2 = buf; //Sprawdzenie czy odczytana linia nie jest pusta, je¿eli nie jest pusta to skopiowanie do drugiego bufora celem posiadania dwóch ostatnich linijek tekstu bêd¹cego w pliku

  00156	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0015b	8d 45 d0	 lea	 eax, DWORD PTR _buf$14[ebp]
  0015e	50		 push	 eax
  0015f	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00164	83 c4 08	 add	 esp, 8
  00167	0f b6 c8	 movzx	 ecx, al
  0016a	85 c9		 test	 ecx, ecx
  0016c	74 0c		 je	 SHORT $LN34@Wczytaj_z_
  0016e	8d 45 d0	 lea	 eax, DWORD PTR _buf$14[ebp]
  00171	50		 push	 eax
  00172	8d 4d ac	 lea	 ecx, DWORD PTR _bufor2$13[ebp]
  00175	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
$LN34@Wczytaj_z_:

; 465  : 			getline(log, buf); //Odczyt ca³ej lini z pliku

  0017a	8d 45 d0	 lea	 eax, DWORD PTR _buf$14[ebp]
  0017d	50		 push	 eax
  0017e	8b 4d 0c	 mov	 ecx, DWORD PTR _log$[ebp]
  00181	51		 push	 ecx
  00182	e8 00 00 00 00	 call	 ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
  00187	83 c4 08	 add	 esp, 8

; 466  : 		}

  0018a	eb a7		 jmp	 SHORT $LN2@Wczytaj_z_
$LN3@Wczytaj_z_:

; 467  : 		if (buf == "") buf = bufor2; //Sprawdzenie czy linia w buforze jest pusta, je¿eli jest pusta to zastopienie jej poprzedni¹ lini¹ tekstu z pliku

  0018c	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00191	8d 45 d0	 lea	 eax, DWORD PTR _buf$14[ebp]
  00194	50		 push	 eax
  00195	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0019a	83 c4 08	 add	 esp, 8
  0019d	0f b6 c8	 movzx	 ecx, al
  001a0	85 c9		 test	 ecx, ecx
  001a2	74 0c		 je	 SHORT $LN35@Wczytaj_z_
  001a4	8d 45 ac	 lea	 eax, DWORD PTR _bufor2$13[ebp]
  001a7	50		 push	 eax
  001a8	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  001ab	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
$LN35@Wczytaj_z_:

; 468  : 		if (buf.find("Posiadasz") != string::npos) //Sprawdzenie czy w ostatniej niepustej lini znajduj¹ siê s³owa œwiadcz¹ce o skoñczeniu rundy

  001b0	6a 00		 push	 0
  001b2	68 00 00 00 00	 push	 OFFSET ??_C@_09LFKNBKJA@Posiadasz?$AA@
  001b7	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  001ba	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  001bf	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  001c5	0f 84 c1 00 00
	00		 je	 $LN36@Wczytaj_z_

; 469  : 		{
; 470  : 			co_kontynuowaæ = 'n'; //Je¿eli siê znajduj¹ to przypisanie znaku rozpoczêcia rundy od pocz¹tku

  001cb	8b 45 10	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  001ce	c6 00 6e	 mov	 BYTE PTR [eax], 110	; 0000006eH

; 471  : 			auto pocz¹tek = (unsigned short)buf.size(); //Utworzenie i przypisanie do zmiennej wskazuj¹cej pocz¹tek tekst pozycji ostatniego znaku tekstu o kwocie pieniêdzy któr¹ posiada jeszcze gracz, typ zmiennej auto wsazuje, ¿e kompilator sam wybierze typ zmiennej

  001d1	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  001d4	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  001d9	66 89 45 a0	 mov	 WORD PTR _pocz¹tek$12[ebp], ax
$LN4@Wczytaj_z_:

; 472  : 			while (buf[pocz¹tek] != ' ' && pocz¹tek > 0) --pocz¹tek; //Poszukiwanie od koñca spacji po której jest kwota pieniêdzy któr¹ posiada jeszcze gracz

  001dd	0f b7 45 a0	 movzx	 eax, WORD PTR _pocz¹tek$12[ebp]
  001e1	50		 push	 eax
  001e2	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  001e5	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  001ea	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  001ed	83 f9 20	 cmp	 ecx, 32			; 00000020H
  001f0	74 16		 je	 SHORT $LN5@Wczytaj_z_
  001f2	0f b7 45 a0	 movzx	 eax, WORD PTR _pocz¹tek$12[ebp]
  001f6	85 c0		 test	 eax, eax
  001f8	7e 0e		 jle	 SHORT $LN5@Wczytaj_z_
  001fa	66 8b 45 a0	 mov	 ax, WORD PTR _pocz¹tek$12[ebp]
  001fe	66 83 e8 01	 sub	 ax, 1
  00202	66 89 45 a0	 mov	 WORD PTR _pocz¹tek$12[ebp], ax
  00206	eb d5		 jmp	 SHORT $LN4@Wczytaj_z_
$LN5@Wczytaj_z_:

; 473  : 			++pocz¹tek; //Kwota jest na nastêpnym znaku wiêc przesuniêcie o jeden znak do przodu

  00208	66 8b 45 a0	 mov	 ax, WORD PTR _pocz¹tek$12[ebp]
  0020c	66 83 c0 01	 add	 ax, 1
  00210	66 89 45 a0	 mov	 WORD PTR _pocz¹tek$12[ebp], ax

; 474  : 			string buf2 = buf; //Utworzenie bufora pomocniczego do ciêcia tekstu i w³o¿enie do niego wczeœniej odczytanego tekstu

  00214	8d 45 d0	 lea	 eax, DWORD PTR _buf$14[ebp]
  00217	50		 push	 eax
  00218	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$11[ebp]
  0021e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00223	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 475  : 			buf2.erase(0, pocz¹tek); //Usuniêcie z bufora pomocniczego tekstu z lewej strony, aby tekst rozpoczyna³ siê liczb¹

  00227	0f b7 45 a0	 movzx	 eax, WORD PTR _pocz¹tek$12[ebp]
  0022b	50		 push	 eax
  0022c	6a 00		 push	 0
  0022e	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$11[ebp]
  00234	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 476  : 			buf2.erase(buf2.size() - 1, 1); //Usuniêcie z bufora pomocniczego znaku dolara z prawej strony

  00239	6a 01		 push	 1
  0023b	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$11[ebp]
  00241	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00246	83 e8 01	 sub	 eax, 1
  00249	50		 push	 eax
  0024a	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$11[ebp]
  00250	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 477  : 			iloœæ_pieniêdzy = atoi(buf2.c_str()); //Zamiana liczby w tekœcie na wartoœæ w zmiennnej liczbowej

  00255	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$11[ebp]
  0025b	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00260	8b f4		 mov	 esi, esp
  00262	50		 push	 eax
  00263	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00269	83 c4 04	 add	 esp, 4
  0026c	3b f4		 cmp	 esi, esp
  0026e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00273	8b 4d 14	 mov	 ecx, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  00276	89 01		 mov	 DWORD PTR [ecx], eax

; 478  : 		}

  00278	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0027c	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$11[ebp]
  00282	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00287	e9 09 09 00 00	 jmp	 $LN37@Wczytaj_z_
$LN36@Wczytaj_z_:

; 479  : 		else if (buf.find("Wylosowano") != string::npos) //Sprawdzenie czy w ostatniej niepustej lini znajduj¹ siê s³owa œwiadcz¹ce o wylosowaniu liczby

  0028c	6a 00		 push	 0
  0028e	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DAFLKCID@Wylosowano?$AA@
  00293	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  00296	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  0029b	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  002a1	0f 84 ab 03 00
	00		 je	 $LN38@Wczytaj_z_

; 480  : 		{
; 481  : 			co_kontynuowaæ = 'w'; //Je¿eli siê znajduj¹ to przypisanie znaku rozpoczêcia rundy od sprawdzenia wygranej

  002a7	8b 45 10	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  002aa	c6 00 77	 mov	 BYTE PTR [eax], 119	; 00000077H

; 482  : 			unsigned short pocz¹tek = 0; //Utworzenie i przypisanie zera do zmiennej wskazuj¹cej pocz¹tek tekst o wylosowanej liczbie

  002ad	33 c0		 xor	 eax, eax
  002af	66 89 85 70 ff
	ff ff		 mov	 WORD PTR _pocz¹tek$10[ebp], ax
$LN6@Wczytaj_z_:

; 483  : 			while (buf[pocz¹tek] != 'y' && pocz¹tek < (int)buf.size()) ++pocz¹tek; //Poszukiwanie od pocz¹tku litery y która wystêpuje w wyrazie po którym jest wylosowana liczba

  002b6	0f b7 85 70 ff
	ff ff		 movzx	 eax, WORD PTR _pocz¹tek$10[ebp]
  002bd	50		 push	 eax
  002be	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  002c1	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  002c6	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  002c9	83 f9 79	 cmp	 ecx, 121		; 00000079H
  002cc	74 27		 je	 SHORT $LN7@Wczytaj_z_
  002ce	0f b7 b5 70 ff
	ff ff		 movzx	 esi, WORD PTR _pocz¹tek$10[ebp]
  002d5	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  002d8	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  002dd	3b f0		 cmp	 esi, eax
  002df	7d 14		 jge	 SHORT $LN7@Wczytaj_z_
  002e1	66 8b 85 70 ff
	ff ff		 mov	 ax, WORD PTR _pocz¹tek$10[ebp]
  002e8	66 83 c0 01	 add	 ax, 1
  002ec	66 89 85 70 ff
	ff ff		 mov	 WORD PTR _pocz¹tek$10[ebp], ax
  002f3	eb c1		 jmp	 SHORT $LN6@Wczytaj_z_
$LN7@Wczytaj_z_:

; 484  : 			pocz¹tek += 10; //Przesuniêcie o +10 pozycji pocz¹tku tekstu o po której jest wylosowana liczba

  002f5	0f b7 85 70 ff
	ff ff		 movzx	 eax, WORD PTR _pocz¹tek$10[ebp]
  002fc	83 c0 0a	 add	 eax, 10			; 0000000aH
  002ff	66 89 85 70 ff
	ff ff		 mov	 WORD PTR _pocz¹tek$10[ebp], ax

; 485  : 			string buf2 = buf; //Utworzenie bufora pomocniczego do ciêcia tekstu i w³o¿enie do niego wczeœniej odczytanego tekstu

  00306	8d 45 d0	 lea	 eax, DWORD PTR _buf$14[ebp]
  00309	50		 push	 eax
  0030a	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$9[ebp]
  00310	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00315	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 486  : 			buf2.erase(0, pocz¹tek); //Usuniêcie z bufora pomocniczego tekstu z lewej strony, aby tekst rozpoczyna³ siê liczb¹

  00319	0f b7 85 70 ff
	ff ff		 movzx	 eax, WORD PTR _pocz¹tek$10[ebp]
  00320	50		 push	 eax
  00321	6a 00		 push	 0
  00323	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$9[ebp]
  00329	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 487  : 			wylosowana_liczba = atoi(buf2.c_str()); //Zamiana liczby w tekœcie na wartoœæ w zmiennnej liczbowej

  0032e	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$9[ebp]
  00334	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00339	8b f4		 mov	 esi, esp
  0033b	50		 push	 eax
  0033c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00342	83 c4 04	 add	 esp, 4
  00345	3b f4		 cmp	 esi, esp
  00347	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0034c	8b 4d 1c	 mov	 ecx, DWORD PTR _wylosowana_liczba$[ebp]
  0034f	89 01		 mov	 DWORD PTR [ecx], eax

; 488  : 			pocz¹tek = 0; //Przypisanie zera do zmiennej wskazuj¹cej pocz¹tek tekst o typie zak³adu

  00351	33 c0		 xor	 eax, eax
  00353	66 89 85 70 ff
	ff ff		 mov	 WORD PTR _pocz¹tek$10[ebp], ax
$LN8@Wczytaj_z_:

; 489  : 			while (buf[pocz¹tek] != 'd' && pocz¹tek < (int)buf.size()) ++pocz¹tek;

  0035a	0f b7 85 70 ff
	ff ff		 movzx	 eax, WORD PTR _pocz¹tek$10[ebp]
  00361	50		 push	 eax
  00362	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  00365	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0036a	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0036d	83 f9 64	 cmp	 ecx, 100		; 00000064H
  00370	74 27		 je	 SHORT $LN9@Wczytaj_z_
  00372	0f b7 b5 70 ff
	ff ff		 movzx	 esi, WORD PTR _pocz¹tek$10[ebp]
  00379	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  0037c	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00381	3b f0		 cmp	 esi, eax
  00383	7d 14		 jge	 SHORT $LN9@Wczytaj_z_
  00385	66 8b 85 70 ff
	ff ff		 mov	 ax, WORD PTR _pocz¹tek$10[ebp]
  0038c	66 83 c0 01	 add	 ax, 1
  00390	66 89 85 70 ff
	ff ff		 mov	 WORD PTR _pocz¹tek$10[ebp], ax
  00397	eb c1		 jmp	 SHORT $LN8@Wczytaj_z_
$LN9@Wczytaj_z_:

; 490  : 			pocz¹tek += 2;  //Przesuniêcie o +2 pozycji pocz¹tku tekstu o po której jest typ zak³adu

  00399	0f b7 85 70 ff
	ff ff		 movzx	 eax, WORD PTR _pocz¹tek$10[ebp]
  003a0	83 c0 02	 add	 eax, 2
  003a3	66 89 85 70 ff
	ff ff		 mov	 WORD PTR _pocz¹tek$10[ebp], ax

; 491  : 			buf2 = buf; //Utworzenie bufora pomocniczego do ciêcia tekstu i w³o¿enie do niego wczeœniej odczytanego tekstu

  003aa	8d 45 d0	 lea	 eax, DWORD PTR _buf$14[ebp]
  003ad	50		 push	 eax
  003ae	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$9[ebp]
  003b4	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 492  : 			buf2.erase(0, pocz¹tek); //Usuniêcie z bufora pomocniczego tekstu z lewej strony, aby tekst rozpoczyna³ siê liczb¹

  003b9	0f b7 85 70 ff
	ff ff		 movzx	 eax, WORD PTR _pocz¹tek$10[ebp]
  003c0	50		 push	 eax
  003c1	6a 00		 push	 0
  003c3	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$9[ebp]
  003c9	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 493  : 			buf2.erase(buf2.find(" Wylosowano"), buf2.size() - buf2.find(" Wylosowano"));

  003ce	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$9[ebp]
  003d4	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  003d9	8b f0		 mov	 esi, eax
  003db	6a 00		 push	 0
  003dd	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DIDIAOPI@?5Wylosowano?$AA@
  003e2	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$9[ebp]
  003e8	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  003ed	2b f0		 sub	 esi, eax
  003ef	56		 push	 esi
  003f0	6a 00		 push	 0
  003f2	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DIDIAOPI@?5Wylosowano?$AA@
  003f7	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$9[ebp]
  003fd	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00402	50		 push	 eax
  00403	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$9[ebp]
  00409	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 494  : 			typ_zak³adu = buf2; //Przypisanie do zmiennej przechowywuj¹cej typ zak³adu wczytanego typu zak³adu

  0040e	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR _buf2$9[ebp]
  00414	50		 push	 eax
  00415	8b 4d 20	 mov	 ecx, DWORD PTR _typ_zak³adu$[ebp]
  00418	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 495  : 			buf.erase(buf.find("Obstawiono zaklad"), buf.size() - buf.find("Obstawiono zaklad"));

  0041d	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  00420	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00425	8b f0		 mov	 esi, eax
  00427	6a 00		 push	 0
  00429	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@EAGHPBJK@Obstawiono?5zaklad?$AA@
  0042e	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  00431	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00436	2b f0		 sub	 esi, eax
  00438	56		 push	 esi
  00439	6a 00		 push	 0
  0043b	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@EAGHPBJK@Obstawiono?5zaklad?$AA@
  00440	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  00443	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00448	50		 push	 eax
  00449	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  0044c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 496  : 			pocz¹tek = 0; //Przypisanie zera do zmiennej wskazuj¹cej pocz¹tek tekst o kwocie zak³adu

  00451	33 c0		 xor	 eax, eax
  00453	66 89 85 70 ff
	ff ff		 mov	 WORD PTR _pocz¹tek$10[ebp], ax

; 497  : 			if (buf[12] == 'a') { pocz¹tek = 14; } //Sprawdzenie czy na pozycji 12 teksty znajduje siê litera a œwiadcz¹ca o wyrazie po którym jest kwota zak³adu, je¿eli tak to pozycja pocz¹tkowa tekstu wynosi 14

  0045a	6a 0c		 push	 12			; 0000000cH
  0045c	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  0045f	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00464	0f be 00	 movsx	 eax, BYTE PTR [eax]
  00467	83 f8 61	 cmp	 eax, 97			; 00000061H
  0046a	75 0e		 jne	 SHORT $LN10@Wczytaj_z_
  0046c	b8 0e 00 00 00	 mov	 eax, 14			; 0000000eH
  00471	66 89 85 70 ff
	ff ff		 mov	 WORD PTR _pocz¹tek$10[ebp], ax

; 498  : 			else //Je¿eli nie to

  00478	eb 53		 jmp	 SHORT $LN41@Wczytaj_z_
$LN10@Wczytaj_z_:

; 499  : 			{
; 500  : 				while (buf[pocz¹tek] != 'z' && pocz¹tek < (unsigned short)buf.size()) ++pocz¹tek; //Poszukanie litery z œwiadcz¹cej o wyrazie po którym jest kwota zak³adu

  0047a	0f b7 85 70 ff
	ff ff		 movzx	 eax, WORD PTR _pocz¹tek$10[ebp]
  00481	50		 push	 eax
  00482	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  00485	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0048a	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0048d	83 f9 7a	 cmp	 ecx, 122		; 0000007aH
  00490	74 2a		 je	 SHORT $LN11@Wczytaj_z_
  00492	0f b7 b5 70 ff
	ff ff		 movzx	 esi, WORD PTR _pocz¹tek$10[ebp]
  00499	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  0049c	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  004a1	0f b7 c0	 movzx	 eax, ax
  004a4	3b f0		 cmp	 esi, eax
  004a6	7d 14		 jge	 SHORT $LN11@Wczytaj_z_
  004a8	66 8b 85 70 ff
	ff ff		 mov	 ax, WORD PTR _pocz¹tek$10[ebp]
  004af	66 83 c0 01	 add	 ax, 1
  004b3	66 89 85 70 ff
	ff ff		 mov	 WORD PTR _pocz¹tek$10[ebp], ax
  004ba	eb be		 jmp	 SHORT $LN10@Wczytaj_z_
$LN11@Wczytaj_z_:

; 501  : 				pocz¹tek += 3; //Po znalezienu z przesuwamy pozycje +3

  004bc	0f b7 85 70 ff
	ff ff		 movzx	 eax, WORD PTR _pocz¹tek$10[ebp]
  004c3	83 c0 03	 add	 eax, 3
  004c6	66 89 85 70 ff
	ff ff		 mov	 WORD PTR _pocz¹tek$10[ebp], ax
$LN41@Wczytaj_z_:

; 502  : 			}
; 503  : 			int koniec = pocz¹tek + 1; //Przypisanie do zmiennej pozycji pocz¹tku +1 wskazuj¹cej koniec tekst o kwocie zak³adu

  004cd	0f b7 85 70 ff
	ff ff		 movzx	 eax, WORD PTR _pocz¹tek$10[ebp]
  004d4	83 c0 01	 add	 eax, 1
  004d7	89 85 40 ff ff
	ff		 mov	 DWORD PTR _koniec$8[ebp], eax
$LN12@Wczytaj_z_:

; 504  : 			while (buf[koniec] != '$' && koniec < (unsigned short)buf.size()) ++koniec; //Poszukujemy znaku dolara przed którym jest kwota zak³adu

  004dd	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _koniec$8[ebp]
  004e3	50		 push	 eax
  004e4	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  004e7	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  004ec	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  004ef	83 f9 24	 cmp	 ecx, 36			; 00000024H
  004f2	74 24		 je	 SHORT $LN13@Wczytaj_z_
  004f4	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  004f7	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  004fc	0f b7 c0	 movzx	 eax, ax
  004ff	39 85 40 ff ff
	ff		 cmp	 DWORD PTR _koniec$8[ebp], eax
  00505	7d 11		 jge	 SHORT $LN13@Wczytaj_z_
  00507	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _koniec$8[ebp]
  0050d	83 c0 01	 add	 eax, 1
  00510	89 85 40 ff ff
	ff		 mov	 DWORD PTR _koniec$8[ebp], eax
  00516	eb c5		 jmp	 SHORT $LN12@Wczytaj_z_
$LN13@Wczytaj_z_:

; 505  : 			buf2 = buf; //Utworzenie bufora pomocniczego do ciêcia tekstu i w³o¿enie do niego wczeœniej odczytanego tekstu

  00518	8d 45 d0	 lea	 eax, DWORD PTR _buf$14[ebp]
  0051b	50		 push	 eax
  0051c	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$9[ebp]
  00522	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 506  : 			buf2.erase(koniec, buf2.size() - koniec); //Usuniêcie z bufora pomocniczego tekstu z prawej strony, aby tekst koñczy³ siê liczb¹

  00527	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$9[ebp]
  0052d	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00532	2b 85 40 ff ff
	ff		 sub	 eax, DWORD PTR _koniec$8[ebp]
  00538	50		 push	 eax
  00539	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _koniec$8[ebp]
  0053f	50		 push	 eax
  00540	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$9[ebp]
  00546	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 507  : 			buf2.erase(0, pocz¹tek); //Usuniêcie z bufora pomocniczego tekstu z lewej strony, aby tekst rozpoczyna³ siê liczb¹

  0054b	0f b7 85 70 ff
	ff ff		 movzx	 eax, WORD PTR _pocz¹tek$10[ebp]
  00552	50		 push	 eax
  00553	6a 00		 push	 0
  00555	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$9[ebp]
  0055b	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 508  : 			kwota_zak³adu = atoi(buf2.c_str()); //Zamiana liczby w tekœcie na wartoœæ w zmiennnej liczbowej

  00560	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$9[ebp]
  00566	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0056b	8b f4		 mov	 esi, esp
  0056d	50		 push	 eax
  0056e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00574	83 c4 04	 add	 esp, 4
  00577	3b f4		 cmp	 esi, esp
  00579	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0057e	8b 4d 18	 mov	 ecx, DWORD PTR _kwota_zak³adu$[ebp]
  00581	89 01		 mov	 DWORD PTR [ecx], eax

; 509  : 			pocz¹tek = (unsigned short)bufor2.size(); //Utworzenie i przypisanie do zmiennej wskazuj¹cej pocz¹tek tekst o kwocie pieniêdzy któr¹ posiada jeszcze gracz

  00583	8d 4d ac	 lea	 ecx, DWORD PTR _bufor2$13[ebp]
  00586	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  0058b	66 89 85 70 ff
	ff ff		 mov	 WORD PTR _pocz¹tek$10[ebp], ax
$LN14@Wczytaj_z_:

; 510  : 			while (bufor2[pocz¹tek] != ' ' && pocz¹tek > 0) --pocz¹tek; //Poszukiwanie od koñca spacji po której jest kwota pieniêdzy któr¹ posiada jeszcze gracz

  00592	0f b7 85 70 ff
	ff ff		 movzx	 eax, WORD PTR _pocz¹tek$10[ebp]
  00599	50		 push	 eax
  0059a	8d 4d ac	 lea	 ecx, DWORD PTR _bufor2$13[ebp]
  0059d	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  005a2	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  005a5	83 f9 20	 cmp	 ecx, 32			; 00000020H
  005a8	74 1f		 je	 SHORT $LN15@Wczytaj_z_
  005aa	0f b7 85 70 ff
	ff ff		 movzx	 eax, WORD PTR _pocz¹tek$10[ebp]
  005b1	85 c0		 test	 eax, eax
  005b3	7e 14		 jle	 SHORT $LN15@Wczytaj_z_
  005b5	66 8b 85 70 ff
	ff ff		 mov	 ax, WORD PTR _pocz¹tek$10[ebp]
  005bc	66 83 e8 01	 sub	 ax, 1
  005c0	66 89 85 70 ff
	ff ff		 mov	 WORD PTR _pocz¹tek$10[ebp], ax
  005c7	eb c9		 jmp	 SHORT $LN14@Wczytaj_z_
$LN15@Wczytaj_z_:

; 511  : 			++pocz¹tek; //Kwota jest na nastêpnym znaku wiêc przesuniêcie o jeden znak do przodu

  005c9	66 8b 85 70 ff
	ff ff		 mov	 ax, WORD PTR _pocz¹tek$10[ebp]
  005d0	66 83 c0 01	 add	 ax, 1
  005d4	66 89 85 70 ff
	ff ff		 mov	 WORD PTR _pocz¹tek$10[ebp], ax

; 512  : 			buf2 = bufor2; //Przypisanie do bufora pomocniczego do ciêcia tekstu i w³o¿enie do niego linie o jedn¹ wczeœniej wczeœniej odczytanego tekstu

  005db	8d 45 ac	 lea	 eax, DWORD PTR _bufor2$13[ebp]
  005de	50		 push	 eax
  005df	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$9[ebp]
  005e5	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 513  : 			buf2.erase(0, pocz¹tek); //Usuniêcie z bufora pomocniczego tekstu z lewej strony, aby tekst rozpoczyna³ siê liczb¹

  005ea	0f b7 85 70 ff
	ff ff		 movzx	 eax, WORD PTR _pocz¹tek$10[ebp]
  005f1	50		 push	 eax
  005f2	6a 00		 push	 0
  005f4	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$9[ebp]
  005fa	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 514  : 			buf2.erase(buf2.size() - 1, 1); //Usuniêcie z bufora pomocniczego znaku dolara z prawej strony

  005ff	6a 01		 push	 1
  00601	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$9[ebp]
  00607	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  0060c	83 e8 01	 sub	 eax, 1
  0060f	50		 push	 eax
  00610	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$9[ebp]
  00616	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 515  : 			iloœæ_pieniêdzy = atoi(buf2.c_str()); //Zamiana liczby w tekœcie na wartoœæ w zmiennnej liczbowej

  0061b	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$9[ebp]
  00621	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00626	8b f4		 mov	 esi, esp
  00628	50		 push	 eax
  00629	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  0062f	83 c4 04	 add	 esp, 4
  00632	3b f4		 cmp	 esi, esp
  00634	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00639	8b 4d 14	 mov	 ecx, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  0063c	89 01		 mov	 DWORD PTR [ecx], eax

; 516  : 		}

  0063e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00642	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$9[ebp]
  00648	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0064d	e9 43 05 00 00	 jmp	 $LN37@Wczytaj_z_
$LN38@Wczytaj_z_:

; 517  : 		else if (buf.find("Obstawiono zaklad") != string::npos) //Sprawdzenie czy w ostatniej niepustej lini znajduj¹ siê s³owa œwiadcz¹ce o typie obstawionego zak³adu

  00652	6a 00		 push	 0
  00654	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@EAGHPBJK@Obstawiono?5zaklad?$AA@
  00659	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  0065c	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00661	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  00667	0f 84 d7 02 00
	00		 je	 $LN42@Wczytaj_z_

; 518  : 		{
; 519  : 			co_kontynuowaæ = 't'; //Je¿eli siê znajduj¹ to przypisanie znaku rozpoczêcia rundy od wylosowania liczby

  0066d	8b 45 10	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  00670	c6 00 74	 mov	 BYTE PTR [eax], 116	; 00000074H

; 520  : 			unsigned short pocz¹tek = 0; //Utworzenie i przypisanie zera do zmiennej wskazuj¹cej pocz¹tek tekst o typie zak³adu

  00673	33 c0		 xor	 eax, eax
  00675	66 89 85 34 ff
	ff ff		 mov	 WORD PTR _pocz¹tek$7[ebp], ax
$LN16@Wczytaj_z_:

; 521  : 			while (buf[pocz¹tek] != 'd' && pocz¹tek < (unsigned short)buf.size()) ++pocz¹tek;

  0067c	0f b7 85 34 ff
	ff ff		 movzx	 eax, WORD PTR _pocz¹tek$7[ebp]
  00683	50		 push	 eax
  00684	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  00687	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0068c	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0068f	83 f9 64	 cmp	 ecx, 100		; 00000064H
  00692	74 2a		 je	 SHORT $LN17@Wczytaj_z_
  00694	0f b7 b5 34 ff
	ff ff		 movzx	 esi, WORD PTR _pocz¹tek$7[ebp]
  0069b	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  0069e	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  006a3	0f b7 c0	 movzx	 eax, ax
  006a6	3b f0		 cmp	 esi, eax
  006a8	7d 14		 jge	 SHORT $LN17@Wczytaj_z_
  006aa	66 8b 85 34 ff
	ff ff		 mov	 ax, WORD PTR _pocz¹tek$7[ebp]
  006b1	66 83 c0 01	 add	 ax, 1
  006b5	66 89 85 34 ff
	ff ff		 mov	 WORD PTR _pocz¹tek$7[ebp], ax
  006bc	eb be		 jmp	 SHORT $LN16@Wczytaj_z_
$LN17@Wczytaj_z_:

; 522  : 			pocz¹tek += 2; //Przesuniêcie pozycji pocz¹tku tekstu o 2 po której jest typ zak³adu

  006be	0f b7 85 34 ff
	ff ff		 movzx	 eax, WORD PTR _pocz¹tek$7[ebp]
  006c5	83 c0 02	 add	 eax, 2
  006c8	66 89 85 34 ff
	ff ff		 mov	 WORD PTR _pocz¹tek$7[ebp], ax

; 523  : 			string buf2 = buf; //Utworzenie bufora pomocniczego do ciêcia tekstu i w³o¿enie do niego wczeœniej odczytanego tekstu

  006cf	8d 45 d0	 lea	 eax, DWORD PTR _buf$14[ebp]
  006d2	50		 push	 eax
  006d3	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$6[ebp]
  006d9	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  006de	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 524  : 			buf2.erase(0, pocz¹tek); //Usuniêcie z bufora pomocniczego tekstu z lewej strony, aby tekst rozpoczyna³ siê liczb¹

  006e2	0f b7 85 34 ff
	ff ff		 movzx	 eax, WORD PTR _pocz¹tek$7[ebp]
  006e9	50		 push	 eax
  006ea	6a 00		 push	 0
  006ec	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$6[ebp]
  006f2	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 525  : 			typ_zak³adu = buf2; //Przypisanie do zmiennej przechowywuj¹cej typ zak³adu wczytanego typu zak³adu

  006f7	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _buf2$6[ebp]
  006fd	50		 push	 eax
  006fe	8b 4d 20	 mov	 ecx, DWORD PTR _typ_zak³adu$[ebp]
  00701	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 526  : 			buf.erase(buf.find("Obstawiono zaklad"), buf.size() - buf.find("Obstawiono zaklad"));

  00706	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  00709	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  0070e	8b f0		 mov	 esi, eax
  00710	6a 00		 push	 0
  00712	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@EAGHPBJK@Obstawiono?5zaklad?$AA@
  00717	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  0071a	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  0071f	2b f0		 sub	 esi, eax
  00721	56		 push	 esi
  00722	6a 00		 push	 0
  00724	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@EAGHPBJK@Obstawiono?5zaklad?$AA@
  00729	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  0072c	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00731	50		 push	 eax
  00732	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  00735	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 527  : 			pocz¹tek = 0; //Przypisanie zera do zmiennej wskazuj¹cej pocz¹tek tekst o kwocie zak³adu

  0073a	33 c0		 xor	 eax, eax
  0073c	66 89 85 34 ff
	ff ff		 mov	 WORD PTR _pocz¹tek$7[ebp], ax

; 528  : 			if (buf[12] == 'a') pocz¹tek = 14; //Sprawdzenie czy na pozycji 12 teksty znajduje siê litera a œwiadcz¹ca o wyrazie po którym jest kwota zak³adu, je¿eli tak to pozycja pocz¹tkowa tekstu wynosi 14

  00743	6a 0c		 push	 12			; 0000000cH
  00745	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  00748	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0074d	0f be 00	 movsx	 eax, BYTE PTR [eax]
  00750	83 f8 61	 cmp	 eax, 97			; 00000061H
  00753	75 0e		 jne	 SHORT $LN18@Wczytaj_z_
  00755	b8 0e 00 00 00	 mov	 eax, 14			; 0000000eH
  0075a	66 89 85 34 ff
	ff ff		 mov	 WORD PTR _pocz¹tek$7[ebp], ax

; 529  : 			else //Je¿eli nie to

  00761	eb 50		 jmp	 SHORT $LN45@Wczytaj_z_
$LN18@Wczytaj_z_:

; 530  : 			{
; 531  : 				while (buf[pocz¹tek] != 'z' && pocz¹tek < (int)buf.size()) ++pocz¹tek; //Poszukanie litery z œwiadcz¹cej o wyrazie po którym jest kwota zak³adu

  00763	0f b7 85 34 ff
	ff ff		 movzx	 eax, WORD PTR _pocz¹tek$7[ebp]
  0076a	50		 push	 eax
  0076b	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  0076e	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00773	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00776	83 f9 7a	 cmp	 ecx, 122		; 0000007aH
  00779	74 27		 je	 SHORT $LN19@Wczytaj_z_
  0077b	0f b7 b5 34 ff
	ff ff		 movzx	 esi, WORD PTR _pocz¹tek$7[ebp]
  00782	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  00785	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  0078a	3b f0		 cmp	 esi, eax
  0078c	7d 14		 jge	 SHORT $LN19@Wczytaj_z_
  0078e	66 8b 85 34 ff
	ff ff		 mov	 ax, WORD PTR _pocz¹tek$7[ebp]
  00795	66 83 c0 01	 add	 ax, 1
  00799	66 89 85 34 ff
	ff ff		 mov	 WORD PTR _pocz¹tek$7[ebp], ax
  007a0	eb c1		 jmp	 SHORT $LN18@Wczytaj_z_
$LN19@Wczytaj_z_:

; 532  : 				pocz¹tek += 3; //Po znalezienu z przesuwamy pozycje +3

  007a2	0f b7 85 34 ff
	ff ff		 movzx	 eax, WORD PTR _pocz¹tek$7[ebp]
  007a9	83 c0 03	 add	 eax, 3
  007ac	66 89 85 34 ff
	ff ff		 mov	 WORD PTR _pocz¹tek$7[ebp], ax
$LN45@Wczytaj_z_:

; 533  : 			}
; 534  : 			unsigned short koniec = pocz¹tek + 1; //Przypisanie do zmiennej pozycji pocz¹tku +1 wskazuj¹cej koniec tekst o kwocie zak³adu

  007b3	0f b7 85 34 ff
	ff ff		 movzx	 eax, WORD PTR _pocz¹tek$7[ebp]
  007ba	83 c0 01	 add	 eax, 1
  007bd	66 89 85 04 ff
	ff ff		 mov	 WORD PTR _koniec$5[ebp], ax
$LN20@Wczytaj_z_:

; 535  : 			while (buf[koniec] != '$' && koniec < (unsigned short)buf.size()) ++koniec; //Pêtla poszukuj¹ca znaku dolara, pêtla koñczy siê znalezieniem znaku dolara

  007c4	0f b7 85 04 ff
	ff ff		 movzx	 eax, WORD PTR _koniec$5[ebp]
  007cb	50		 push	 eax
  007cc	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  007cf	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  007d4	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  007d7	83 f9 24	 cmp	 ecx, 36			; 00000024H
  007da	74 2a		 je	 SHORT $LN21@Wczytaj_z_
  007dc	0f b7 b5 04 ff
	ff ff		 movzx	 esi, WORD PTR _koniec$5[ebp]
  007e3	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  007e6	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  007eb	0f b7 c0	 movzx	 eax, ax
  007ee	3b f0		 cmp	 esi, eax
  007f0	7d 14		 jge	 SHORT $LN21@Wczytaj_z_
  007f2	66 8b 85 04 ff
	ff ff		 mov	 ax, WORD PTR _koniec$5[ebp]
  007f9	66 83 c0 01	 add	 ax, 1
  007fd	66 89 85 04 ff
	ff ff		 mov	 WORD PTR _koniec$5[ebp], ax
  00804	eb be		 jmp	 SHORT $LN20@Wczytaj_z_
$LN21@Wczytaj_z_:

; 536  : 			buf2 = buf; //W³o¿enie do bufora pomocniczego do ciêcia tekstu wczeœniej odczytanego tekstu

  00806	8d 45 d0	 lea	 eax, DWORD PTR _buf$14[ebp]
  00809	50		 push	 eax
  0080a	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$6[ebp]
  00810	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 537  : 			buf2.erase(koniec, buf2.size() - koniec); //Usuniêcie z bufora pomocniczego tekstu z prawej strony, aby tekst koñczy³ siê liczb¹

  00815	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$6[ebp]
  0081b	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00820	0f b7 8d 04 ff
	ff ff		 movzx	 ecx, WORD PTR _koniec$5[ebp]
  00827	2b c1		 sub	 eax, ecx
  00829	50		 push	 eax
  0082a	0f b7 95 04 ff
	ff ff		 movzx	 edx, WORD PTR _koniec$5[ebp]
  00831	52		 push	 edx
  00832	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$6[ebp]
  00838	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 538  : 			buf2.erase(0, pocz¹tek); //Usuniêcie z bufora pomocniczego tekstu z lewej strony, aby tekst rozpoczyna³ siê liczb¹

  0083d	0f b7 85 34 ff
	ff ff		 movzx	 eax, WORD PTR _pocz¹tek$7[ebp]
  00844	50		 push	 eax
  00845	6a 00		 push	 0
  00847	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$6[ebp]
  0084d	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 539  : 			kwota_zak³adu = atoi(buf2.c_str()); //Zamiana liczby w tekœcie na wartoœæ w zmiennnej liczbowej

  00852	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$6[ebp]
  00858	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0085d	8b f4		 mov	 esi, esp
  0085f	50		 push	 eax
  00860	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00866	83 c4 04	 add	 esp, 4
  00869	3b f4		 cmp	 esi, esp
  0086b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00870	8b 4d 18	 mov	 ecx, DWORD PTR _kwota_zak³adu$[ebp]
  00873	89 01		 mov	 DWORD PTR [ecx], eax

; 540  : 			pocz¹tek = (unsigned short)bufor2.size(); //Utworzenie i przypisanie do zmiennej wskazuj¹cej pocz¹tek tekst o kwocie pieniêdzy któr¹ posiada jeszcze gracz

  00875	8d 4d ac	 lea	 ecx, DWORD PTR _bufor2$13[ebp]
  00878	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  0087d	66 89 85 34 ff
	ff ff		 mov	 WORD PTR _pocz¹tek$7[ebp], ax
$LN22@Wczytaj_z_:

; 541  : 			while (bufor2[pocz¹tek] != ' ' && pocz¹tek > 0) --pocz¹tek; //Poszukiwanie od koñca spacji po której jest kwota pieniêdzy któr¹ posiada jeszcze gracz

  00884	0f b7 85 34 ff
	ff ff		 movzx	 eax, WORD PTR _pocz¹tek$7[ebp]
  0088b	50		 push	 eax
  0088c	8d 4d ac	 lea	 ecx, DWORD PTR _bufor2$13[ebp]
  0088f	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00894	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00897	83 f9 20	 cmp	 ecx, 32			; 00000020H
  0089a	74 1f		 je	 SHORT $LN23@Wczytaj_z_
  0089c	0f b7 85 34 ff
	ff ff		 movzx	 eax, WORD PTR _pocz¹tek$7[ebp]
  008a3	85 c0		 test	 eax, eax
  008a5	7e 14		 jle	 SHORT $LN23@Wczytaj_z_
  008a7	66 8b 85 34 ff
	ff ff		 mov	 ax, WORD PTR _pocz¹tek$7[ebp]
  008ae	66 83 e8 01	 sub	 ax, 1
  008b2	66 89 85 34 ff
	ff ff		 mov	 WORD PTR _pocz¹tek$7[ebp], ax
  008b9	eb c9		 jmp	 SHORT $LN22@Wczytaj_z_
$LN23@Wczytaj_z_:

; 542  : 			++pocz¹tek; //Kwota jest na nastêpnym znaku wiêc przesuniêcie o jeden znak do przodu

  008bb	66 8b 85 34 ff
	ff ff		 mov	 ax, WORD PTR _pocz¹tek$7[ebp]
  008c2	66 83 c0 01	 add	 ax, 1
  008c6	66 89 85 34 ff
	ff ff		 mov	 WORD PTR _pocz¹tek$7[ebp], ax

; 543  : 			buf2 = bufor2; //Przypisanie do bufora pomocniczego do ciêcia tekstu i w³o¿enie do niego linie o jedn¹ wczeœniej wczeœniej odczytanego tekstu

  008cd	8d 45 ac	 lea	 eax, DWORD PTR _bufor2$13[ebp]
  008d0	50		 push	 eax
  008d1	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$6[ebp]
  008d7	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 544  : 			buf2.erase(0, pocz¹tek); //Usuniêcie z bufora pomocniczego tekstu z lewej strony, aby tekst rozpoczyna³ siê liczb¹

  008dc	0f b7 85 34 ff
	ff ff		 movzx	 eax, WORD PTR _pocz¹tek$7[ebp]
  008e3	50		 push	 eax
  008e4	6a 00		 push	 0
  008e6	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$6[ebp]
  008ec	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 545  : 			buf2.erase(buf2.size() - 1, 1); //Usuniêcie z bufora pomocniczego znaku dolara z prawej strony

  008f1	6a 01		 push	 1
  008f3	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$6[ebp]
  008f9	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  008fe	83 e8 01	 sub	 eax, 1
  00901	50		 push	 eax
  00902	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$6[ebp]
  00908	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 546  : 			iloœæ_pieniêdzy = atoi(buf2.c_str()); //Zamiana liczby w tekœcie na wartoœæ w zmiennnej liczbowej

  0090d	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$6[ebp]
  00913	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00918	8b f4		 mov	 esi, esp
  0091a	50		 push	 eax
  0091b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00921	83 c4 04	 add	 esp, 4
  00924	3b f4		 cmp	 esi, esp
  00926	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0092b	8b 4d 14	 mov	 ecx, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  0092e	89 01		 mov	 DWORD PTR [ecx], eax

; 547  : 		}

  00930	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00934	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$6[ebp]
  0093a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0093f	e9 51 02 00 00	 jmp	 $LN37@Wczytaj_z_
$LN42@Wczytaj_z_:

; 548  : 		else if (buf.find("Obstawiono za") != string::npos) //Sprawdzenie czy w ostatniej niepustej lini znajduj¹ siê s³owa œwiadcz¹ce o kwocie obstawionego zak³adu

  00944	6a 00		 push	 0
  00946	68 00 00 00 00	 push	 OFFSET ??_C@_0O@POHKAIHJ@Obstawiono?5za?$AA@
  0094b	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  0094e	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00953	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  00959	0f 84 11 02 00
	00		 je	 $LN46@Wczytaj_z_

; 549  : 		{
; 550  : 			co_kontynuowaæ = 'k';  //Je¿eli siê znajduj¹ to przypisanie znaku rozpoczêcia rundy od zapytania o typ zak³adu

  0095f	8b 45 10	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  00962	c6 00 6b	 mov	 BYTE PTR [eax], 107	; 0000006bH

; 551  : 			unsigned short pocz¹tek = 0; //Utworzenie i przypisanie do zmiennej wskazuj¹cej pocz¹tek tekst o kwocie pieniêdzy któr¹ posiada jeszcze gracz

  00965	33 c0		 xor	 eax, eax
  00967	66 89 85 f8 fe
	ff ff		 mov	 WORD PTR _pocz¹tek$4[ebp], ax

; 552  : 			if (buf[12] == 'a') { pocz¹tek = 14; } //Sprawdzenie czy na pozycji 12 teksty znajduje siê litera a œwiadcz¹ca o wyrazie po którym jest kwota zak³adu, je¿eli tak to pozycja pocz¹tkowa tekstu wynosi 14

  0096e	6a 0c		 push	 12			; 0000000cH
  00970	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  00973	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00978	0f be 00	 movsx	 eax, BYTE PTR [eax]
  0097b	83 f8 61	 cmp	 eax, 97			; 00000061H
  0097e	75 0e		 jne	 SHORT $LN24@Wczytaj_z_
  00980	b8 0e 00 00 00	 mov	 eax, 14			; 0000000eH
  00985	66 89 85 f8 fe
	ff ff		 mov	 WORD PTR _pocz¹tek$4[ebp], ax

; 553  : 			else //Je¿eli nie to

  0098c	eb 53		 jmp	 SHORT $LN49@Wczytaj_z_
$LN24@Wczytaj_z_:

; 554  : 			{
; 555  : 				while (buf[pocz¹tek] != 'z' && pocz¹tek < (unsigned short)buf.size()) ++pocz¹tek; //Poszukanie litery z œwiadcz¹cej o wyrazie po którym jest kwota zak³adu

  0098e	0f b7 85 f8 fe
	ff ff		 movzx	 eax, WORD PTR _pocz¹tek$4[ebp]
  00995	50		 push	 eax
  00996	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  00999	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0099e	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  009a1	83 f9 7a	 cmp	 ecx, 122		; 0000007aH
  009a4	74 2a		 je	 SHORT $LN25@Wczytaj_z_
  009a6	0f b7 b5 f8 fe
	ff ff		 movzx	 esi, WORD PTR _pocz¹tek$4[ebp]
  009ad	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  009b0	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  009b5	0f b7 c0	 movzx	 eax, ax
  009b8	3b f0		 cmp	 esi, eax
  009ba	7d 14		 jge	 SHORT $LN25@Wczytaj_z_
  009bc	66 8b 85 f8 fe
	ff ff		 mov	 ax, WORD PTR _pocz¹tek$4[ebp]
  009c3	66 83 c0 01	 add	 ax, 1
  009c7	66 89 85 f8 fe
	ff ff		 mov	 WORD PTR _pocz¹tek$4[ebp], ax
  009ce	eb be		 jmp	 SHORT $LN24@Wczytaj_z_
$LN25@Wczytaj_z_:

; 556  : 				pocz¹tek += 3; //Po znalezienu z przesuwamy pozycje +3

  009d0	0f b7 85 f8 fe
	ff ff		 movzx	 eax, WORD PTR _pocz¹tek$4[ebp]
  009d7	83 c0 03	 add	 eax, 3
  009da	66 89 85 f8 fe
	ff ff		 mov	 WORD PTR _pocz¹tek$4[ebp], ax
$LN49@Wczytaj_z_:

; 557  : 			}
; 558  : 			unsigned short koniec = pocz¹tek + 1; //Utworzenie i przypisanie do zmiennej pozycji pocz¹tku +1 wskazuj¹cej koniec tekst o kwocie zak³adu

  009e1	0f b7 85 f8 fe
	ff ff		 movzx	 eax, WORD PTR _pocz¹tek$4[ebp]
  009e8	83 c0 01	 add	 eax, 1
  009eb	66 89 85 ec fe
	ff ff		 mov	 WORD PTR _koniec$3[ebp], ax
$LN26@Wczytaj_z_:

; 559  : 			while (buf[koniec] != '$' && koniec < (int)buf.size()) ++koniec;

  009f2	0f b7 85 ec fe
	ff ff		 movzx	 eax, WORD PTR _koniec$3[ebp]
  009f9	50		 push	 eax
  009fa	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  009fd	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00a02	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00a05	83 f9 24	 cmp	 ecx, 36			; 00000024H
  00a08	74 27		 je	 SHORT $LN27@Wczytaj_z_
  00a0a	0f b7 b5 ec fe
	ff ff		 movzx	 esi, WORD PTR _koniec$3[ebp]
  00a11	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  00a14	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00a19	3b f0		 cmp	 esi, eax
  00a1b	7d 14		 jge	 SHORT $LN27@Wczytaj_z_
  00a1d	66 8b 85 ec fe
	ff ff		 mov	 ax, WORD PTR _koniec$3[ebp]
  00a24	66 83 c0 01	 add	 ax, 1
  00a28	66 89 85 ec fe
	ff ff		 mov	 WORD PTR _koniec$3[ebp], ax
  00a2f	eb c1		 jmp	 SHORT $LN26@Wczytaj_z_
$LN27@Wczytaj_z_:

; 560  : 			string buf2 = buf; //Utworzenie bufora pomocniczego do ciêcia tekstu i w³o¿enie do niego wczeœniej odczytanego tekstu

  00a31	8d 45 d0	 lea	 eax, DWORD PTR _buf$14[ebp]
  00a34	50		 push	 eax
  00a35	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _buf2$2[ebp]
  00a3b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00a40	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5

; 561  : 			buf2.erase(koniec, buf2.size() - koniec); //Usuniêcie z bufora pomocniczego tekstu z prawej strony, aby tekst koñczy³ siê liczb¹

  00a44	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _buf2$2[ebp]
  00a4a	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00a4f	0f b7 8d ec fe
	ff ff		 movzx	 ecx, WORD PTR _koniec$3[ebp]
  00a56	2b c1		 sub	 eax, ecx
  00a58	50		 push	 eax
  00a59	0f b7 95 ec fe
	ff ff		 movzx	 edx, WORD PTR _koniec$3[ebp]
  00a60	52		 push	 edx
  00a61	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _buf2$2[ebp]
  00a67	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 562  : 			buf2.erase(0, pocz¹tek); //Usuniêcie z bufora pomocniczego tekstu z lewej strony, aby tekst rozpoczyna³ siê liczb¹

  00a6c	0f b7 85 f8 fe
	ff ff		 movzx	 eax, WORD PTR _pocz¹tek$4[ebp]
  00a73	50		 push	 eax
  00a74	6a 00		 push	 0
  00a76	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _buf2$2[ebp]
  00a7c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 563  : 			kwota_zak³adu = atoi(buf2.c_str()); //Zamiana liczby w tekœcie na wartoœæ w zmiennnej liczbowej

  00a81	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _buf2$2[ebp]
  00a87	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00a8c	8b f4		 mov	 esi, esp
  00a8e	50		 push	 eax
  00a8f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00a95	83 c4 04	 add	 esp, 4
  00a98	3b f4		 cmp	 esi, esp
  00a9a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00a9f	8b 4d 18	 mov	 ecx, DWORD PTR _kwota_zak³adu$[ebp]
  00aa2	89 01		 mov	 DWORD PTR [ecx], eax

; 564  : 			pocz¹tek = (unsigned short)bufor2.size(); //Utworzenie i przypisanie do zmiennej wskazuj¹cej pocz¹tek tekst o kwocie pieniêdzy któr¹ posiada jeszcze gracz

  00aa4	8d 4d ac	 lea	 ecx, DWORD PTR _bufor2$13[ebp]
  00aa7	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00aac	66 89 85 f8 fe
	ff ff		 mov	 WORD PTR _pocz¹tek$4[ebp], ax
$LN28@Wczytaj_z_:

; 565  : 			while (bufor2[pocz¹tek] != ' ' && pocz¹tek > 0) --pocz¹tek; //Poszukiwanie od koñca spacji po której jest kwota pieniêdzy któr¹ posiada jeszcze gracz

  00ab3	0f b7 85 f8 fe
	ff ff		 movzx	 eax, WORD PTR _pocz¹tek$4[ebp]
  00aba	50		 push	 eax
  00abb	8d 4d ac	 lea	 ecx, DWORD PTR _bufor2$13[ebp]
  00abe	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00ac3	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00ac6	83 f9 20	 cmp	 ecx, 32			; 00000020H
  00ac9	74 1f		 je	 SHORT $LN29@Wczytaj_z_
  00acb	0f b7 85 f8 fe
	ff ff		 movzx	 eax, WORD PTR _pocz¹tek$4[ebp]
  00ad2	85 c0		 test	 eax, eax
  00ad4	7e 14		 jle	 SHORT $LN29@Wczytaj_z_
  00ad6	66 8b 85 f8 fe
	ff ff		 mov	 ax, WORD PTR _pocz¹tek$4[ebp]
  00add	66 83 e8 01	 sub	 ax, 1
  00ae1	66 89 85 f8 fe
	ff ff		 mov	 WORD PTR _pocz¹tek$4[ebp], ax
  00ae8	eb c9		 jmp	 SHORT $LN28@Wczytaj_z_
$LN29@Wczytaj_z_:

; 566  : 			++pocz¹tek; //Kwota jest na nastêpnym znaku wiêc przesuniêcie o jeden znak do przodu

  00aea	66 8b 85 f8 fe
	ff ff		 mov	 ax, WORD PTR _pocz¹tek$4[ebp]
  00af1	66 83 c0 01	 add	 ax, 1
  00af5	66 89 85 f8 fe
	ff ff		 mov	 WORD PTR _pocz¹tek$4[ebp], ax

; 567  : 			buf2 = bufor2; //Przypisanie do bufora pomocniczego do ciêcia tekstu i w³o¿enie do niego linie o jedn¹ wczeœniej wczeœniej odczytanego tekstu

  00afc	8d 45 ac	 lea	 eax, DWORD PTR _bufor2$13[ebp]
  00aff	50		 push	 eax
  00b00	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _buf2$2[ebp]
  00b06	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 568  : 			buf2.erase(0, pocz¹tek); //Usuniêcie z bufora pomocniczego tekstu z lewej strony, aby tekst rozpoczyna³ siê liczb¹

  00b0b	0f b7 85 f8 fe
	ff ff		 movzx	 eax, WORD PTR _pocz¹tek$4[ebp]
  00b12	50		 push	 eax
  00b13	6a 00		 push	 0
  00b15	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _buf2$2[ebp]
  00b1b	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 569  : 			buf2.erase(buf2.size() - 1, 1); //Usuniêcie z bufora pomocniczego znaku dolara z prawej strony

  00b20	6a 01		 push	 1
  00b22	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _buf2$2[ebp]
  00b28	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00b2d	83 e8 01	 sub	 eax, 1
  00b30	50		 push	 eax
  00b31	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _buf2$2[ebp]
  00b37	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 570  : 			iloœæ_pieniêdzy = atoi(buf2.c_str()); //Zamiana liczby w tekœcie na wartoœæ w zmiennnej liczbowej

  00b3c	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _buf2$2[ebp]
  00b42	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00b47	8b f4		 mov	 esi, esp
  00b49	50		 push	 eax
  00b4a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00b50	83 c4 04	 add	 esp, 4
  00b53	3b f4		 cmp	 esi, esp
  00b55	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b5a	8b 4d 14	 mov	 ecx, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  00b5d	89 01		 mov	 DWORD PTR [ecx], eax

; 571  : 		}

  00b5f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00b63	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _buf2$2[ebp]
  00b69	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00b6e	eb 25		 jmp	 SHORT $LN37@Wczytaj_z_
$LN46@Wczytaj_z_:

; 572  : 		else if (buf.find("Gra rozpoczeta dnia") != string::npos) //Sprawdzenie czy w ostatniej niepustej lini znajduj¹ siê s³owa œwiadcz¹ce o rozpoczêciu nowej gry

  00b70	6a 00		 push	 0
  00b72	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CILJHICG@Gra?5rozpoczeta?5dnia?$AA@
  00b77	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  00b7a	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00b7f	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  00b85	74 08		 je	 SHORT $LN50@Wczytaj_z_

; 573  : 		{
; 574  : 			co_kontynuowaæ = 'n'; //Je¿eli siê znajduj¹ to przypisanie znaku rozpoczêcia rundy od pocz¹tku

  00b87	8b 45 10	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  00b8a	c6 00 6e	 mov	 BYTE PTR [eax], 110	; 0000006eH

; 575  : 		}
; 576  : 		else //Je¿eli coœ pójdzie nie tak, to warunek aby gra siê niewysypa³a

  00b8d	eb 06		 jmp	 SHORT $LN37@Wczytaj_z_
$LN50@Wczytaj_z_:

; 577  : 		{
; 578  : 			co_kontynuowaæ = 'n'; //Je¿eli siê znajduj¹ to przypisanie znaku rozpoczêcia rundy od pocz¹tku

  00b8f	8b 45 10	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  00b92	c6 00 6e	 mov	 BYTE PTR [eax], 110	; 0000006eH
$LN37@Wczytaj_z_:

; 579  : 		}
; 580  : 		log.close(); //Zamkniêcie pliku logu ogólnego

  00b95	8b 4d 0c	 mov	 ecx, DWORD PTR _log$[ebp]
  00b98	e8 00 00 00 00	 call	 ?close@?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_fstream<char,std::char_traits<char> >::close

; 581  : 		log.open("log_aktualny.txt", ios::out | ios::app); //Ponowne wczytanie pliku, teraz tylko do odczytu i ustawienie kursora zapisu na koniec pliku

  00b9d	6a 40		 push	 64			; 00000040H
  00b9f	6a 0a		 push	 10			; 0000000aH
  00ba1	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@KLDNCCFE@log_aktualny?4txt?$AA@
  00ba6	8b 4d 0c	 mov	 ecx, DWORD PTR _log$[ebp]
  00ba9	e8 00 00 00 00	 call	 ?open@?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z ; std::basic_fstream<char,std::char_traits<char> >::open

; 582  : 	}

  00bae	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00bb2	8d 4d ac	 lea	 ecx, DWORD PTR _bufor2$13[ebp]
  00bb5	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00bba	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00bc1	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  00bc4	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 583  : 	else

  00bc9	e9 99 03 00 00	 jmp	 $LN1@Wczytaj_z_
$LN32@Wczytaj_z_:

; 584  : 	{
; 585  : 		co_kontynuowaæ = 'n'; //Przypisanie znaku rozpoczêcia rundy od pocz¹tku

  00bce	8b 45 10	 mov	 eax, DWORD PTR _co_kontynuowaæ$[ebp]
  00bd1	c6 00 6e	 mov	 BYTE PTR [eax], 110	; 0000006eH

; 586  : 		log.open("log_aktualny.txt", ios::out);

  00bd4	6a 40		 push	 64			; 00000040H
  00bd6	6a 02		 push	 2
  00bd8	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@KLDNCCFE@log_aktualny?4txt?$AA@
  00bdd	8b 4d 0c	 mov	 ecx, DWORD PTR _log$[ebp]
  00be0	e8 00 00 00 00	 call	 ?open@?$basic_fstream@DU?$char_traits@D@std@@@std@@QAEXPBDHH@Z ; std::basic_fstream<char,std::char_traits<char> >::open

; 587  : 		GetSystemTime(&Czas); //Pobieranie aktualnej daty i czasu z zegara systemowego

  00be5	8b f4		 mov	 esi, esp
  00be7	68 00 00 00 00	 push	 OFFSET ?Czas@@3U_SYSTEMTIME@@A ; Czas
  00bec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemTime@4
  00bf2	3b f4		 cmp	 esi, esp
  00bf4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 588  : 		log << "Gra rozpoczeta dnia " << Czas.wDay << "." << Czas.wMonth << "." << Czas.wYear << " o godzinie "; //Wpisanie do bufora zapisu danych o dniu,miesi¹cu i roku do pliku log_aktualny.txt

  00bf9	83 7d 0c 00	 cmp	 DWORD PTR _log$[ebp], 0
  00bfd	74 0e		 je	 SHORT $LN59@Wczytaj_z_
  00bff	8b 45 0c	 mov	 eax, DWORD PTR _log$[ebp]
  00c02	83 c0 10	 add	 eax, 16			; 00000010H
  00c05	89 85 00 fe ff
	ff		 mov	 DWORD PTR tv612[ebp], eax
  00c0b	eb 0a		 jmp	 SHORT $LN60@Wczytaj_z_
$LN59@Wczytaj_z_:
  00c0d	c7 85 00 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv612[ebp], 0
$LN60@Wczytaj_z_:
  00c17	68 00 00 00 00	 push	 OFFSET ??_C@_0N@KHLIPMCA@?5o?5godzinie?5?$AA@
  00c1c	8b f4		 mov	 esi, esp
  00c1e	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR ?Czas@@3U_SYSTEMTIME@@A
  00c25	51		 push	 ecx
  00c26	68 00 00 00 00	 push	 OFFSET ??_C@_01LFCBOECM@?4?$AA@
  00c2b	8b fc		 mov	 edi, esp
  00c2d	0f b7 15 02 00
	00 00		 movzx	 edx, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+2
  00c34	52		 push	 edx
  00c35	68 00 00 00 00	 push	 OFFSET ??_C@_01LFCBOECM@?4?$AA@
  00c3a	8b dc		 mov	 ebx, esp
  00c3c	0f b7 05 06 00
	00 00		 movzx	 eax, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+6
  00c43	50		 push	 eax
  00c44	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@EHKBBICH@Gra?5rozpoczeta?5dnia?5?$AA@
  00c49	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR tv612[ebp]
  00c4f	51		 push	 ecx
  00c50	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00c55	83 c4 08	 add	 esp, 8
  00c58	8b c8		 mov	 ecx, eax
  00c5a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
  00c60	3b dc		 cmp	 ebx, esp
  00c62	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00c67	50		 push	 eax
  00c68	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00c6d	83 c4 08	 add	 esp, 8
  00c70	8b c8		 mov	 ecx, eax
  00c72	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
  00c78	3b fc		 cmp	 edi, esp
  00c7a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00c7f	50		 push	 eax
  00c80	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00c85	83 c4 08	 add	 esp, 8
  00c88	8b c8		 mov	 ecx, eax
  00c8a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
  00c90	3b f4		 cmp	 esi, esp
  00c92	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00c97	50		 push	 eax
  00c98	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00c9d	83 c4 08	 add	 esp, 8

; 589  : 		if (Czas.wHour < 10) log << "0"; //Wpisanie do bufora zapisu znaku zera dla równego formatowania godzinny je¿eli godzina jest minejsza ni¿ 10 do pliku log_aktualny.txt

  00ca0	0f b7 05 08 00
	00 00		 movzx	 eax, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+8
  00ca7	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00caa	7d 32		 jge	 SHORT $LN52@Wczytaj_z_
  00cac	83 7d 0c 00	 cmp	 DWORD PTR _log$[ebp], 0
  00cb0	74 0e		 je	 SHORT $LN61@Wczytaj_z_
  00cb2	8b 45 0c	 mov	 eax, DWORD PTR _log$[ebp]
  00cb5	83 c0 10	 add	 eax, 16			; 00000010H
  00cb8	89 85 00 fe ff
	ff		 mov	 DWORD PTR tv634[ebp], eax
  00cbe	eb 0a		 jmp	 SHORT $LN62@Wczytaj_z_
$LN61@Wczytaj_z_:
  00cc0	c7 85 00 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv634[ebp], 0
$LN62@Wczytaj_z_:
  00cca	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  00ccf	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR tv634[ebp]
  00cd5	51		 push	 ecx
  00cd6	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00cdb	83 c4 08	 add	 esp, 8
$LN52@Wczytaj_z_:

; 590  : 		log << Czas.wHour << ":"; //Wpisanie do bufora zapisu znaku : dla rozdzielenia godzin od minut do pliku log_aktualny.txt

  00cde	68 00 00 00 00	 push	 OFFSET ??_C@_01JLIPDDHJ@?3?$AA@
  00ce3	8b f4		 mov	 esi, esp
  00ce5	0f b7 05 08 00
	00 00		 movzx	 eax, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+8
  00cec	50		 push	 eax
  00ced	8b 4d 0c	 mov	 ecx, DWORD PTR _log$[ebp]
  00cf0	83 c1 10	 add	 ecx, 16			; 00000010H
  00cf3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
  00cf9	3b f4		 cmp	 esi, esp
  00cfb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00d00	50		 push	 eax
  00d01	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00d06	83 c4 08	 add	 esp, 8

; 591  : 		if (Czas.wMinute < 10) log << "0"; //Wpisanie do bufora zapisu znaku zera dla równego formatowania minut je¿eli minuty jest minejsze ni¿ 10 do pliku log_aktualny.txt

  00d09	0f b7 05 0a 00
	00 00		 movzx	 eax, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+10
  00d10	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00d13	7d 32		 jge	 SHORT $LN53@Wczytaj_z_
  00d15	83 7d 0c 00	 cmp	 DWORD PTR _log$[ebp], 0
  00d19	74 0e		 je	 SHORT $LN63@Wczytaj_z_
  00d1b	8b 45 0c	 mov	 eax, DWORD PTR _log$[ebp]
  00d1e	83 c0 10	 add	 eax, 16			; 00000010H
  00d21	89 85 00 fe ff
	ff		 mov	 DWORD PTR tv653[ebp], eax
  00d27	eb 0a		 jmp	 SHORT $LN64@Wczytaj_z_
$LN63@Wczytaj_z_:
  00d29	c7 85 00 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv653[ebp], 0
$LN64@Wczytaj_z_:
  00d33	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  00d38	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR tv653[ebp]
  00d3e	51		 push	 ecx
  00d3f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00d44	83 c4 08	 add	 esp, 8
$LN53@Wczytaj_z_:

; 592  : 		log << Czas.wMinute << ":"; //Wpisanie do bufora zapisu znaku : dla rozdzielenia minut od sekund do pliku log_aktualny.txt

  00d47	68 00 00 00 00	 push	 OFFSET ??_C@_01JLIPDDHJ@?3?$AA@
  00d4c	8b f4		 mov	 esi, esp
  00d4e	0f b7 05 0a 00
	00 00		 movzx	 eax, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+10
  00d55	50		 push	 eax
  00d56	8b 4d 0c	 mov	 ecx, DWORD PTR _log$[ebp]
  00d59	83 c1 10	 add	 ecx, 16			; 00000010H
  00d5c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
  00d62	3b f4		 cmp	 esi, esp
  00d64	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00d69	50		 push	 eax
  00d6a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00d6f	83 c4 08	 add	 esp, 8

; 593  : 		if (Czas.wSecond < 10) log << "0"; //Wpisanie do bufora zapisu znaku zera dla równego formatowania sekund je¿eli sekundy jest minejsza ni¿ 10 do pliku log_aktualny.txt

  00d72	0f b7 05 0c 00
	00 00		 movzx	 eax, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+12
  00d79	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00d7c	7d 32		 jge	 SHORT $LN54@Wczytaj_z_
  00d7e	83 7d 0c 00	 cmp	 DWORD PTR _log$[ebp], 0
  00d82	74 0e		 je	 SHORT $LN65@Wczytaj_z_
  00d84	8b 45 0c	 mov	 eax, DWORD PTR _log$[ebp]
  00d87	83 c0 10	 add	 eax, 16			; 00000010H
  00d8a	89 85 00 fe ff
	ff		 mov	 DWORD PTR tv672[ebp], eax
  00d90	eb 0a		 jmp	 SHORT $LN66@Wczytaj_z_
$LN65@Wczytaj_z_:
  00d92	c7 85 00 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv672[ebp], 0
$LN66@Wczytaj_z_:
  00d9c	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  00da1	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR tv672[ebp]
  00da7	51		 push	 ecx
  00da8	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00dad	83 c4 08	 add	 esp, 8
$LN54@Wczytaj_z_:

; 594  : 		log << Czas.wSecond << endl; // Wpisanie do bufora zapisu danych o sekundzie do pliku log_aktualny.txt

  00db0	8b f4		 mov	 esi, esp
  00db2	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00db7	8b fc		 mov	 edi, esp
  00db9	0f b7 05 0c 00
	00 00		 movzx	 eax, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+12
  00dc0	50		 push	 eax
  00dc1	8b 4d 0c	 mov	 ecx, DWORD PTR _log$[ebp]
  00dc4	83 c1 10	 add	 ecx, 16			; 00000010H
  00dc7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
  00dcd	3b fc		 cmp	 edi, esp
  00dcf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00dd4	8b c8		 mov	 ecx, eax
  00dd6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00ddc	3b f4		 cmp	 esi, esp
  00dde	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 595  : 		log_ogólny << "Nowa gra rozpoczeta dnia " << Czas.wDay << "." << Czas.wMonth << "." << Czas.wYear << " o godzinie "; //Wpisanie do bufora zapisu danych o dniu,miesi¹cu i roku do pliku log_ogólny.txt

  00de3	68 00 00 00 00	 push	 OFFSET ??_C@_0N@KHLIPMCA@?5o?5godzinie?5?$AA@
  00de8	8b f4		 mov	 esi, esp
  00dea	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ?Czas@@3U_SYSTEMTIME@@A
  00df1	50		 push	 eax
  00df2	68 00 00 00 00	 push	 OFFSET ??_C@_01LFCBOECM@?4?$AA@
  00df7	8b fc		 mov	 edi, esp
  00df9	0f b7 0d 02 00
	00 00		 movzx	 ecx, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+2
  00e00	51		 push	 ecx
  00e01	68 00 00 00 00	 push	 OFFSET ??_C@_01LFCBOECM@?4?$AA@
  00e06	8b dc		 mov	 ebx, esp
  00e08	0f b7 15 06 00
	00 00		 movzx	 edx, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+6
  00e0f	52		 push	 edx
  00e10	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@PLEOEKGI@Nowa?5gra?5rozpoczeta?5dnia?5?$AA@
  00e15	8b 45 08	 mov	 eax, DWORD PTR _log_ogólny$[ebp]
  00e18	50		 push	 eax
  00e19	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00e1e	83 c4 08	 add	 esp, 8
  00e21	8b c8		 mov	 ecx, eax
  00e23	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
  00e29	3b dc		 cmp	 ebx, esp
  00e2b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00e30	50		 push	 eax
  00e31	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00e36	83 c4 08	 add	 esp, 8
  00e39	8b c8		 mov	 ecx, eax
  00e3b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
  00e41	3b fc		 cmp	 edi, esp
  00e43	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00e48	50		 push	 eax
  00e49	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00e4e	83 c4 08	 add	 esp, 8
  00e51	8b c8		 mov	 ecx, eax
  00e53	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
  00e59	3b f4		 cmp	 esi, esp
  00e5b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00e60	50		 push	 eax
  00e61	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00e66	83 c4 08	 add	 esp, 8

; 596  : 		if (Czas.wHour < 10) log_ogólny << "0"; //Wpisanie do bufora zapisu znaku zera dla równego formatowania godzinny je¿eli godzina jest minejsza ni¿ 10 do pliku log_ogólny.txt

  00e69	0f b7 05 08 00
	00 00		 movzx	 eax, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+8
  00e70	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00e73	7d 11		 jge	 SHORT $LN55@Wczytaj_z_
  00e75	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  00e7a	8b 45 08	 mov	 eax, DWORD PTR _log_ogólny$[ebp]
  00e7d	50		 push	 eax
  00e7e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00e83	83 c4 08	 add	 esp, 8
$LN55@Wczytaj_z_:

; 597  : 		log_ogólny << Czas.wHour << ":";//Wpisanie do bufora zapisu znaku : dla rozdzielenia godzin od minut do pliku log_aktualny.txt

  00e86	68 00 00 00 00	 push	 OFFSET ??_C@_01JLIPDDHJ@?3?$AA@
  00e8b	8b f4		 mov	 esi, esp
  00e8d	0f b7 05 08 00
	00 00		 movzx	 eax, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+8
  00e94	50		 push	 eax
  00e95	8b 4d 08	 mov	 ecx, DWORD PTR _log_ogólny$[ebp]
  00e98	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
  00e9e	3b f4		 cmp	 esi, esp
  00ea0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00ea5	50		 push	 eax
  00ea6	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00eab	83 c4 08	 add	 esp, 8

; 598  : 		if (Czas.wMinute < 10) log_ogólny << "0"; //Wpisanie do bufora zapisu znaku zera dla równego formatowania minut je¿eli minuty jest minejsza ni¿ 10 do pliku log_ogólny.txt

  00eae	0f b7 05 0a 00
	00 00		 movzx	 eax, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+10
  00eb5	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00eb8	7d 11		 jge	 SHORT $LN56@Wczytaj_z_
  00eba	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  00ebf	8b 45 08	 mov	 eax, DWORD PTR _log_ogólny$[ebp]
  00ec2	50		 push	 eax
  00ec3	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00ec8	83 c4 08	 add	 esp, 8
$LN56@Wczytaj_z_:

; 599  : 		log_ogólny << Czas.wMinute << ":"; //Wpisanie do bufora zapisu znaku : dla rozdzielenia minut od sekund do pliku log_ogólny.txt

  00ecb	68 00 00 00 00	 push	 OFFSET ??_C@_01JLIPDDHJ@?3?$AA@
  00ed0	8b f4		 mov	 esi, esp
  00ed2	0f b7 05 0a 00
	00 00		 movzx	 eax, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+10
  00ed9	50		 push	 eax
  00eda	8b 4d 08	 mov	 ecx, DWORD PTR _log_ogólny$[ebp]
  00edd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
  00ee3	3b f4		 cmp	 esi, esp
  00ee5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00eea	50		 push	 eax
  00eeb	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00ef0	83 c4 08	 add	 esp, 8

; 600  : 		if (Czas.wSecond < 10) log_ogólny << "0"; //Wpisanie do bufora zapisu znaku zera dla równego formatowania sekund je¿eli sekundy jest minejsza ni¿ 10 do pliku log_ogólny.txt

  00ef3	0f b7 05 0c 00
	00 00		 movzx	 eax, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+12
  00efa	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00efd	7d 11		 jge	 SHORT $LN57@Wczytaj_z_
  00eff	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  00f04	8b 45 08	 mov	 eax, DWORD PTR _log_ogólny$[ebp]
  00f07	50		 push	 eax
  00f08	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00f0d	83 c4 08	 add	 esp, 8
$LN57@Wczytaj_z_:

; 601  : 		log_ogólny << Czas.wSecond << endl; // Wpisanie do bufora zapisu danych o sekundzie do pliku log_ogólny.txt

  00f10	8b f4		 mov	 esi, esp
  00f12	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00f17	8b fc		 mov	 edi, esp
  00f19	0f b7 05 0c 00
	00 00		 movzx	 eax, WORD PTR ?Czas@@3U_SYSTEMTIME@@A+12
  00f20	50		 push	 eax
  00f21	8b 4d 08	 mov	 ecx, DWORD PTR _log_ogólny$[ebp]
  00f24	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@G@Z
  00f2a	3b fc		 cmp	 edi, esp
  00f2c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00f31	8b c8		 mov	 ecx, eax
  00f33	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00f39	3b f4		 cmp	 esi, esp
  00f3b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 602  : 		log.flush(); //Zapisanie do pliku log_aktualny.txt danych wpisanych do bufora danych

  00f40	8b 4d 0c	 mov	 ecx, DWORD PTR _log$[ebp]
  00f43	83 c1 10	 add	 ecx, 16			; 00000010H
  00f46	8b f4		 mov	 esi, esp
  00f48	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  00f4e	3b f4		 cmp	 esi, esp
  00f50	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 603  : 		log_ogólny.flush(); //Zapisanie do pliku log_ogólny.txt danych wpisanych do bufora danych

  00f55	8b f4		 mov	 esi, esp
  00f57	8b 4d 08	 mov	 ecx, DWORD PTR _log_ogólny$[ebp]
  00f5a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  00f60	3b f4		 cmp	 esi, esp
  00f62	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Wczytaj_z_:

; 604  : 	}
; 605  : }

  00f67	52		 push	 edx
  00f68	8b cd		 mov	 ecx, ebp
  00f6a	50		 push	 eax
  00f6b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN81@Wczytaj_z_
  00f71	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00f76	58		 pop	 eax
  00f77	5a		 pop	 edx
  00f78	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00f7b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00f82	59		 pop	 ecx
  00f83	5f		 pop	 edi
  00f84	5e		 pop	 esi
  00f85	5b		 pop	 ebx
  00f86	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00f89	33 cd		 xor	 ecx, ebp
  00f8b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00f90	81 c4 00 02 00
	00		 add	 esp, 512		; 00000200H
  00f96	3b ec		 cmp	 ebp, esp
  00f98	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00f9d	8b e5		 mov	 esp, ebp
  00f9f	5d		 pop	 ebp
  00fa0	c3		 ret	 0
  00fa1	0f 1f 00	 npad	 3
$LN81@Wczytaj_z_:
  00fa4	06 00 00 00	 DD	 6
  00fa8	00 00 00 00	 DD	 $LN80@Wczytaj_z_
$LN80@Wczytaj_z_:
  00fac	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00fb0	1c 00 00 00	 DD	 28			; 0000001cH
  00fb4	00 00 00 00	 DD	 $LN73@Wczytaj_z_
  00fb8	ac ff ff ff	 DD	 -84			; ffffffacH
  00fbc	1c 00 00 00	 DD	 28			; 0000001cH
  00fc0	00 00 00 00	 DD	 $LN74@Wczytaj_z_
  00fc4	7c ff ff ff	 DD	 -132			; ffffff7cH
  00fc8	1c 00 00 00	 DD	 28			; 0000001cH
  00fcc	00 00 00 00	 DD	 $LN75@Wczytaj_z_
  00fd0	4c ff ff ff	 DD	 -180			; ffffff4cH
  00fd4	1c 00 00 00	 DD	 28			; 0000001cH
  00fd8	00 00 00 00	 DD	 $LN76@Wczytaj_z_
  00fdc	10 ff ff ff	 DD	 -240			; ffffff10H
  00fe0	1c 00 00 00	 DD	 28			; 0000001cH
  00fe4	00 00 00 00	 DD	 $LN77@Wczytaj_z_
  00fe8	c8 fe ff ff	 DD	 -312			; fffffec8H
  00fec	1c 00 00 00	 DD	 28			; 0000001cH
  00ff0	00 00 00 00	 DD	 $LN78@Wczytaj_z_
$LN78@Wczytaj_z_:
  00ff4	62		 DB	 98			; 00000062H
  00ff5	75		 DB	 117			; 00000075H
  00ff6	66		 DB	 102			; 00000066H
  00ff7	32		 DB	 50			; 00000032H
  00ff8	00		 DB	 0
$LN77@Wczytaj_z_:
  00ff9	62		 DB	 98			; 00000062H
  00ffa	75		 DB	 117			; 00000075H
  00ffb	66		 DB	 102			; 00000066H
  00ffc	32		 DB	 50			; 00000032H
  00ffd	00		 DB	 0
$LN76@Wczytaj_z_:
  00ffe	62		 DB	 98			; 00000062H
  00fff	75		 DB	 117			; 00000075H
  01000	66		 DB	 102			; 00000066H
  01001	32		 DB	 50			; 00000032H
  01002	00		 DB	 0
$LN75@Wczytaj_z_:
  01003	62		 DB	 98			; 00000062H
  01004	75		 DB	 117			; 00000075H
  01005	66		 DB	 102			; 00000066H
  01006	32		 DB	 50			; 00000032H
  01007	00		 DB	 0
$LN74@Wczytaj_z_:
  01008	62		 DB	 98			; 00000062H
  01009	75		 DB	 117			; 00000075H
  0100a	66		 DB	 102			; 00000066H
  0100b	6f		 DB	 111			; 0000006fH
  0100c	72		 DB	 114			; 00000072H
  0100d	32		 DB	 50			; 00000032H
  0100e	00		 DB	 0
$LN73@Wczytaj_z_:
  0100f	62		 DB	 98			; 00000062H
  01010	75		 DB	 117			; 00000075H
  01011	66		 DB	 102			; 00000066H
  01012	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Wczytaj_z_pliku@@YAXAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AADAAH33AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _buf$14[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Wczytaj_z_pliku@@YAXAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AADAAH33AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$1:
  00008	8d 4d ac	 lea	 ecx, DWORD PTR _bufor2$13[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Wczytaj_z_pliku@@YAXAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AADAAH33AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$2:
  00010	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$11[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Wczytaj_z_pliku@@YAXAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AADAAH33AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$3:
  0001b	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$9[ebp]
  00021	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Wczytaj_z_pliku@@YAXAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AADAAH33AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$4:
  00026	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _buf2$6[ebp]
  0002c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Wczytaj_z_pliku@@YAXAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AADAAH33AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$5:
  00031	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _buf2$2[ebp]
  00037	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?Wczytaj_z_pliku@@YAXAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AADAAH33AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z:
  0003c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00040	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00043	8b 8a fc fd ff
	ff		 mov	 ecx, DWORD PTR [edx-516]
  00049	33 c8		 xor	 ecx, eax
  0004b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00050	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00053	33 c8		 xor	 ecx, eax
  00055	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Wczytaj_z_pliku@@YAXAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AADAAH33AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
  0005f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Wczytaj_z_pliku@@YAXAAV?$basic_ofstream@DU?$char_traits@D@std@@@std@@AAV?$basic_fstream@DU?$char_traits@D@std@@@2@AADAAH33AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; Wczytaj_z_pliku
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?Odczytaj_liczbê@@YAXABHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
tv323 = -1216						; size = 4
tv344 = -1212						; size = 4
tv343 = -1208						; size = 4
tv321 = -1208						; size = 4
tv340 = -1204						; size = 4
tv338 = -1204						; size = 4
tv336 = -1204						; size = 4
tv334 = -1204						; size = 4
tv332 = -1204						; size = 4
tv330 = -1204						; size = 4
tv328 = -1204						; size = 4
tv326 = -1204						; size = 4
tv292 = -1204						; size = 4
tv71 = -1204						; size = 4
$T2 = -1196						; size = 28
$T3 = -1160						; size = 28
$T4 = -1124						; size = 28
$T5 = -1088						; size = 28
$T6 = -1052						; size = 28
$T7 = -1016						; size = 28
$T8 = -980						; size = 28
$T9 = -944						; size = 28
$T10 = -908						; size = 28
$T11 = -872						; size = 28
$T12 = -836						; size = 28
_numers$13 = -416					; size = 176
_wynik$ = -232						; size = 28
_numers$ = -196						; size = 176
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_wylosowana_liczba$ = 8					; size = 4
_typ_zak³adu$ = 12					; size = 4
?Odczytaj_liczbê@@YAXABHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Odczytaj_liczbê, COMDAT

; 389  : void Odczytaj_liczbê(const int & wylosowana_liczba, const string & typ_zak³adu) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Odczytaj_liczbê@@YAXABHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec b4 04 00
	00		 sub	 esp, 1204		; 000004b4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 40 fb ff
	ff		 lea	 edi, DWORD PTR [ebp-1216]
  00020	b9 2d 01 00 00	 mov	 ecx, 301		; 0000012dH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 390  : 	if (g³os_odczytu_numeru == 0) return;

  00040	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?g³os_odczytu_numeru@@3FA ; g³os_odczytu_numeru
  00047	85 c0		 test	 eax, eax
  00049	75 05		 jne	 SHORT $LN2@Odczytaj_l
  0004b	e9 fa 05 00 00	 jmp	 $LN1@Odczytaj_l
$LN2@Odczytaj_l:

; 391  : 	if (!G³osyKompletne) return;

  00050	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?G³osyKompletne@@3_NA ; G³osyKompletne
  00057	85 c0		 test	 eax, eax
  00059	75 05		 jne	 SHORT $LN3@Odczytaj_l
  0005b	e9 ea 05 00 00	 jmp	 $LN1@Odczytaj_l
$LN3@Odczytaj_l:

; 392  : 
; 393  : 	stringstream numers;

  00060	68 b0 00 00 00	 push	 176			; 000000b0H
  00065	8d 8d 3c ff ff
	ff		 lea	 ecx, DWORD PTR _numers$[ebp]
  0006b	e8 00 00 00 00	 call	 ?__autoclassinit2@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
  00070	6a 01		 push	 1
  00072	6a 03		 push	 3
  00074	8d 8d 3c ff ff
	ff		 lea	 ecx, DWORD PTR _numers$[ebp]
  0007a	e8 00 00 00 00	 call	 ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  0007f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 394  : 	numers << wylosowana_liczba;

  00086	8b f4		 mov	 esi, esp
  00088	8b 45 08	 mov	 eax, DWORD PTR _wylosowana_liczba$[ebp]
  0008b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008d	51		 push	 ecx
  0008e	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _numers$[ebp+16]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 395  : 	string wynik = G³os + numers.str() + ".wav";

  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_04IBLEHOMF@?4wav?$AA@
  000a6	8d 85 bc fc ff
	ff		 lea	 eax, DWORD PTR $T12[ebp]
  000ac	50		 push	 eax
  000ad	8d 8d 3c ff ff
	ff		 lea	 ecx, DWORD PTR _numers$[ebp]
  000b3	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
  000b8	89 85 4c fb ff
	ff		 mov	 DWORD PTR tv71[ebp], eax
  000be	8b 8d 4c fb ff
	ff		 mov	 ecx, DWORD PTR tv71[ebp]
  000c4	89 8d 48 fb ff
	ff		 mov	 DWORD PTR tv321[ebp], ecx
  000ca	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000ce	8b 95 48 fb ff
	ff		 mov	 edx, DWORD PTR tv321[ebp]
  000d4	52		 push	 edx
  000d5	68 00 00 00 00	 push	 OFFSET ?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  000da	8d 85 98 fc ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@$$QAV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000e6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e9	89 85 44 fb ff
	ff		 mov	 DWORD PTR tv344[ebp], eax
  000ef	8b 8d 44 fb ff
	ff		 mov	 ecx, DWORD PTR tv344[ebp]
  000f5	89 8d 40 fb ff
	ff		 mov	 DWORD PTR tv323[ebp], ecx
  000fb	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000ff	8b 95 40 fb ff
	ff		 mov	 edx, DWORD PTR tv323[ebp]
  00105	52		 push	 edx
  00106	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR _wynik$[ebp]
  0010c	50		 push	 eax
  0010d	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00112	83 c4 0c	 add	 esp, 12			; 0000000cH
  00115	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00119	8d 8d 98 fc ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  0011f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00124	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00128	8d 8d bc fc ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  0012e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 396  : 	PlaySound(wynik.c_str(), nullptr, SND_SYNC);

  00133	8b f4		 mov	 esi, esp
  00135	6a 00		 push	 0
  00137	6a 00		 push	 0
  00139	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _wynik$[ebp]
  0013f	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00144	50		 push	 eax
  00145	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PlaySoundA@12
  0014b	3b f4		 cmp	 esi, esp
  0014d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 397  : 	wynik.clear();

  00152	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _wynik$[ebp]
  00158	e8 00 00 00 00	 call	 ?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear

; 398  : 	if (typ_zak³adu == "p" || typ_zak³adu == "n")

  0015d	68 00 00 00 00	 push	 OFFSET ??_C@_01JBBJJEPG@p?$AA@
  00162	8b 45 0c	 mov	 eax, DWORD PTR _typ_zak³adu$[ebp]
  00165	50		 push	 eax
  00166	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0016b	83 c4 08	 add	 esp, 8
  0016e	0f b6 c8	 movzx	 ecx, al
  00171	85 c9		 test	 ecx, ecx
  00173	75 1c		 jne	 SHORT $LN6@Odczytaj_l
  00175	68 00 00 00 00	 push	 OFFSET ??_C@_01EFFIKLCJ@n?$AA@
  0017a	8b 45 0c	 mov	 eax, DWORD PTR _typ_zak³adu$[ebp]
  0017d	50		 push	 eax
  0017e	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  00183	83 c4 08	 add	 esp, 8
  00186	0f b6 c8	 movzx	 ecx, al
  00189	85 c9		 test	 ecx, ecx
  0018b	0f 84 d3 00 00
	00		 je	 $LN4@Odczytaj_l
$LN6@Odczytaj_l:

; 399  : 		if (wylosowana_liczba % 2 == 0)

  00191	8b 45 08	 mov	 eax, DWORD PTR _wylosowana_liczba$[ebp]
  00194	8b 08		 mov	 ecx, DWORD PTR [eax]
  00196	81 e1 01 00 00
	80		 and	 ecx, -2147483647	; 80000001H
  0019c	79 05		 jns	 SHORT $LN43@Odczytaj_l
  0019e	49		 dec	 ecx
  0019f	83 c9 fe	 or	 ecx, -2			; fffffffeH
  001a2	41		 inc	 ecx
$LN43@Odczytaj_l:
  001a3	85 c9		 test	 ecx, ecx
  001a5	75 5d		 jne	 SHORT $LN7@Odczytaj_l

; 400  : 		{
; 401  : 			wynik = G³os + "p.wav";

  001a7	68 00 00 00 00	 push	 OFFSET ??_C@_05PNHGCFLK@p?4wav?$AA@
  001ac	68 00 00 00 00	 push	 OFFSET ?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  001b1	8d 85 74 fc ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
  001b7	50		 push	 eax
  001b8	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  001bd	83 c4 0c	 add	 esp, 12			; 0000000cH
  001c0	89 85 4c fb ff
	ff		 mov	 DWORD PTR tv326[ebp], eax
  001c6	8b 8d 4c fb ff
	ff		 mov	 ecx, DWORD PTR tv326[ebp]
  001cc	51		 push	 ecx
  001cd	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _wynik$[ebp]
  001d3	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  001d8	8d 8d 74 fc ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  001de	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 402  : 			PlaySound(wynik.c_str(), nullptr, SND_SYNC);

  001e3	8b f4		 mov	 esi, esp
  001e5	6a 00		 push	 0
  001e7	6a 00		 push	 0
  001e9	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _wynik$[ebp]
  001ef	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  001f4	50		 push	 eax
  001f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PlaySoundA@12
  001fb	3b f4		 cmp	 esi, esp
  001fd	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 403  : 		}
; 404  : 		else

  00202	eb 5b		 jmp	 SHORT $LN8@Odczytaj_l
$LN7@Odczytaj_l:

; 405  : 		{
; 406  : 			wynik = G³os + "n.wav";

  00204	68 00 00 00 00	 push	 OFFSET ??_C@_05MEKKEGFB@n?4wav?$AA@
  00209	68 00 00 00 00	 push	 OFFSET ?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  0020e	8d 85 50 fc ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  00214	50		 push	 eax
  00215	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0021a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0021d	89 85 4c fb ff
	ff		 mov	 DWORD PTR tv328[ebp], eax
  00223	8b 8d 4c fb ff
	ff		 mov	 ecx, DWORD PTR tv328[ebp]
  00229	51		 push	 ecx
  0022a	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _wynik$[ebp]
  00230	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00235	8d 8d 50 fc ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  0023b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 407  : 			PlaySound(wynik.c_str(), nullptr, SND_SYNC);

  00240	8b f4		 mov	 esi, esp
  00242	6a 00		 push	 0
  00244	6a 00		 push	 0
  00246	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _wynik$[ebp]
  0024c	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00251	50		 push	 eax
  00252	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PlaySoundA@12
  00258	3b f4		 cmp	 esi, esp
  0025a	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN8@Odczytaj_l:

; 408  : 		}

  0025f	e9 c5 03 00 00	 jmp	 $LN5@Odczytaj_l
$LN4@Odczytaj_l:

; 409  : 	else if (typ_zak³adu == "r" || typ_zak³adu == "b")

  00264	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00269	8b 45 0c	 mov	 eax, DWORD PTR _typ_zak³adu$[ebp]
  0026c	50		 push	 eax
  0026d	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  00272	83 c4 08	 add	 esp, 8
  00275	0f b6 c8	 movzx	 ecx, al
  00278	85 c9		 test	 ecx, ecx
  0027a	75 1c		 jne	 SHORT $LN11@Odczytaj_l
  0027c	68 00 00 00 00	 push	 OFFSET ??_C@_01OJONOECF@b?$AA@
  00281	8b 45 0c	 mov	 eax, DWORD PTR _typ_zak³adu$[ebp]
  00284	50		 push	 eax
  00285	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0028a	83 c4 08	 add	 esp, 8
  0028d	0f b6 c8	 movzx	 ecx, al
  00290	85 c9		 test	 ecx, ecx
  00292	0f 84 ce 00 00
	00		 je	 $LN9@Odczytaj_l
$LN11@Odczytaj_l:

; 410  : 		if (Ruletka_plansza_kolor[wylosowana_liczba] == 'r') {

  00298	8b 45 08	 mov	 eax, DWORD PTR _wylosowana_liczba$[ebp]
  0029b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0029d	0f be 91 00 00
	00 00		 movsx	 edx, BYTE PTR ?Ruletka_plansza_kolor@@3QBDB[ecx]
  002a4	83 fa 72	 cmp	 edx, 114		; 00000072H
  002a7	75 5d		 jne	 SHORT $LN12@Odczytaj_l

; 411  : 			wynik = G³os + "r.wav";

  002a9	68 00 00 00 00	 push	 OFFSET ??_C@_05LALOIELB@r?4wav?$AA@
  002ae	68 00 00 00 00	 push	 OFFSET ?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  002b3	8d 85 2c fc ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  002b9	50		 push	 eax
  002ba	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  002bf	83 c4 0c	 add	 esp, 12			; 0000000cH
  002c2	89 85 4c fb ff
	ff		 mov	 DWORD PTR tv330[ebp], eax
  002c8	8b 8d 4c fb ff
	ff		 mov	 ecx, DWORD PTR tv330[ebp]
  002ce	51		 push	 ecx
  002cf	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _wynik$[ebp]
  002d5	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  002da	8d 8d 2c fc ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  002e0	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 412  : 			PlaySound(wynik.c_str(), nullptr, SND_SYNC);

  002e5	8b f4		 mov	 esi, esp
  002e7	6a 00		 push	 0
  002e9	6a 00		 push	 0
  002eb	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _wynik$[ebp]
  002f1	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  002f6	50		 push	 eax
  002f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PlaySoundA@12
  002fd	3b f4		 cmp	 esi, esp
  002ff	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 413  : 		}
; 414  : 		else {

  00304	eb 5b		 jmp	 SHORT $LN13@Odczytaj_l
$LN12@Odczytaj_l:

; 415  : 			wynik = G³os + "b.wav";

  00306	68 00 00 00 00	 push	 OFFSET ??_C@_05LDGIIGCK@b?4wav?$AA@
  0030b	68 00 00 00 00	 push	 OFFSET ?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  00310	8d 85 08 fc ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  00316	50		 push	 eax
  00317	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0031c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0031f	89 85 4c fb ff
	ff		 mov	 DWORD PTR tv332[ebp], eax
  00325	8b 8d 4c fb ff
	ff		 mov	 ecx, DWORD PTR tv332[ebp]
  0032b	51		 push	 ecx
  0032c	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _wynik$[ebp]
  00332	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00337	8d 8d 08 fc ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  0033d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 416  : 			PlaySound(wynik.c_str(), nullptr, SND_SYNC);

  00342	8b f4		 mov	 esi, esp
  00344	6a 00		 push	 0
  00346	6a 00		 push	 0
  00348	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _wynik$[ebp]
  0034e	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00353	50		 push	 eax
  00354	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PlaySoundA@12
  0035a	3b f4		 cmp	 esi, esp
  0035c	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN13@Odczytaj_l:

; 417  : 		}

  00361	e9 c3 02 00 00	 jmp	 $LN5@Odczytaj_l
$LN9@Odczytaj_l:

; 418  : 	else if (typ_zak³adu == "g" || typ_zak³adu == "d")

  00366	68 00 00 00 00	 push	 OFFSET ??_C@_01JEJKBAGA@g?$AA@
  0036b	8b 45 0c	 mov	 eax, DWORD PTR _typ_zak³adu$[ebp]
  0036e	50		 push	 eax
  0036f	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  00374	83 c4 08	 add	 esp, 8
  00377	0f b6 c8	 movzx	 ecx, al
  0037a	85 c9		 test	 ecx, ecx
  0037c	75 1c		 jne	 SHORT $LN16@Odczytaj_l
  0037e	68 00 00 00 00	 push	 OFFSET ??_C@_01LPLHEDKD@d?$AA@
  00383	8b 45 0c	 mov	 eax, DWORD PTR _typ_zak³adu$[ebp]
  00386	50		 push	 eax
  00387	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0038c	83 c4 08	 add	 esp, 8
  0038f	0f b6 c8	 movzx	 ecx, al
  00392	85 c9		 test	 ecx, ecx
  00394	0f 84 c5 00 00
	00		 je	 $LN14@Odczytaj_l
$LN16@Odczytaj_l:

; 419  : 		if (wylosowana_liczba < 19)

  0039a	8b 45 08	 mov	 eax, DWORD PTR _wylosowana_liczba$[ebp]
  0039d	83 38 13	 cmp	 DWORD PTR [eax], 19	; 00000013H
  003a0	7d 5d		 jge	 SHORT $LN17@Odczytaj_l

; 420  : 		{
; 421  : 			wynik = G³os + "g.wav";

  003a2	68 00 00 00 00	 push	 OFFSET ??_C@_05ODKFBHJJ@g?4wav?$AA@
  003a7	68 00 00 00 00	 push	 OFFSET ?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  003ac	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  003b2	50		 push	 eax
  003b3	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  003b8	83 c4 0c	 add	 esp, 12			; 0000000cH
  003bb	89 85 4c fb ff
	ff		 mov	 DWORD PTR tv334[ebp], eax
  003c1	8b 8d 4c fb ff
	ff		 mov	 ecx, DWORD PTR tv334[ebp]
  003c7	51		 push	 ecx
  003c8	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _wynik$[ebp]
  003ce	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  003d3	8d 8d e4 fb ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  003d9	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 422  : 			PlaySound(wynik.c_str(), nullptr, SND_SYNC);

  003de	8b f4		 mov	 esi, esp
  003e0	6a 00		 push	 0
  003e2	6a 00		 push	 0
  003e4	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _wynik$[ebp]
  003ea	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  003ef	50		 push	 eax
  003f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PlaySoundA@12
  003f6	3b f4		 cmp	 esi, esp
  003f8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 423  : 		}
; 424  : 		else {

  003fd	eb 5b		 jmp	 SHORT $LN18@Odczytaj_l
$LN17@Odczytaj_l:

; 425  : 			wynik = G³os + "d.wav";

  003ff	68 00 00 00 00	 push	 OFFSET ??_C@_05GFDBGFDH@d?4wav?$AA@
  00404	68 00 00 00 00	 push	 OFFSET ?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  00409	8d 85 c0 fb ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  0040f	50		 push	 eax
  00410	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00415	83 c4 0c	 add	 esp, 12			; 0000000cH
  00418	89 85 4c fb ff
	ff		 mov	 DWORD PTR tv336[ebp], eax
  0041e	8b 8d 4c fb ff
	ff		 mov	 ecx, DWORD PTR tv336[ebp]
  00424	51		 push	 ecx
  00425	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _wynik$[ebp]
  0042b	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00430	8d 8d c0 fb ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00436	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 426  : 			PlaySound(wynik.c_str(), nullptr, SND_SYNC);

  0043b	8b f4		 mov	 esi, esp
  0043d	6a 00		 push	 0
  0043f	6a 00		 push	 0
  00441	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _wynik$[ebp]
  00447	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0044c	50		 push	 eax
  0044d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PlaySoundA@12
  00453	3b f4		 cmp	 esi, esp
  00455	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN18@Odczytaj_l:

; 427  : 		}

  0045a	e9 ca 01 00 00	 jmp	 $LN5@Odczytaj_l
$LN14@Odczytaj_l:

; 428  : 	else if (typ_zak³adu[0] == 'k')

  0045f	6a 00		 push	 0
  00461	8b 4d 0c	 mov	 ecx, DWORD PTR _typ_zak³adu$[ebp]
  00464	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00469	0f be 00	 movsx	 eax, BYTE PTR [eax]
  0046c	83 f8 6b	 cmp	 eax, 107		; 0000006bH
  0046f	0f 85 8f 00 00
	00		 jne	 $LN19@Odczytaj_l

; 429  : 	{
; 430  : 		wynik = G³os + "k";

  00475	68 00 00 00 00	 push	 OFFSET ??_C@_01DICPFPGM@k?$AA@
  0047a	68 00 00 00 00	 push	 OFFSET ?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  0047f	8d 85 9c fb ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  00485	50		 push	 eax
  00486	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0048b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0048e	89 85 4c fb ff
	ff		 mov	 DWORD PTR tv338[ebp], eax
  00494	8b 8d 4c fb ff
	ff		 mov	 ecx, DWORD PTR tv338[ebp]
  0049a	51		 push	 ecx
  0049b	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _wynik$[ebp]
  004a1	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  004a6	8d 8d 9c fb ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  004ac	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 431  : 		wynik += (((wylosowana_liczba - 1) % 3) + 49);

  004b1	8b 45 08	 mov	 eax, DWORD PTR _wylosowana_liczba$[ebp]
  004b4	8b 00		 mov	 eax, DWORD PTR [eax]
  004b6	83 e8 01	 sub	 eax, 1
  004b9	99		 cdq
  004ba	b9 03 00 00 00	 mov	 ecx, 3
  004bf	f7 f9		 idiv	 ecx
  004c1	83 c2 31	 add	 edx, 49			; 00000031H
  004c4	52		 push	 edx
  004c5	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _wynik$[ebp]
  004cb	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 432  : 		wynik += ".wav";

  004d0	68 00 00 00 00	 push	 OFFSET ??_C@_04IBLEHOMF@?4wav?$AA@
  004d5	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _wynik$[ebp]
  004db	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 433  : 		PlaySound(wynik.c_str(), nullptr, SND_SYNC);

  004e0	8b f4		 mov	 esi, esp
  004e2	6a 00		 push	 0
  004e4	6a 00		 push	 0
  004e6	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _wynik$[ebp]
  004ec	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  004f1	50		 push	 eax
  004f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PlaySoundA@12
  004f8	3b f4		 cmp	 esi, esp
  004fa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004ff	e9 25 01 00 00	 jmp	 $LN5@Odczytaj_l
$LN19@Odczytaj_l:

; 434  : 	}
; 435  : 	else if (typ_zak³adu[0] == 'w')

  00504	6a 00		 push	 0
  00506	8b 4d 0c	 mov	 ecx, DWORD PTR _typ_zak³adu$[ebp]
  00509	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0050e	0f be 00	 movsx	 eax, BYTE PTR [eax]
  00511	83 f8 77	 cmp	 eax, 119		; 00000077H
  00514	0f 85 0f 01 00
	00		 jne	 $LN5@Odczytaj_l

; 436  : 	{
; 437  : 		wynik = G³os + "w";

  0051a	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w?$AA@
  0051f	68 00 00 00 00	 push	 OFFSET ?G³os@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; G³os
  00524	8d 85 78 fb ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0052a	50		 push	 eax
  0052b	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00530	83 c4 0c	 add	 esp, 12			; 0000000cH
  00533	89 85 4c fb ff
	ff		 mov	 DWORD PTR tv340[ebp], eax
  00539	8b 8d 4c fb ff
	ff		 mov	 ecx, DWORD PTR tv340[ebp]
  0053f	51		 push	 ecx
  00540	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _wynik$[ebp]
  00546	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  0054b	8d 8d 78 fb ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00551	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 438  : 		stringstream numers;

  00556	68 b0 00 00 00	 push	 176			; 000000b0H
  0055b	8d 8d 60 fe ff
	ff		 lea	 ecx, DWORD PTR _numers$13[ebp]
  00561	e8 00 00 00 00	 call	 ?__autoclassinit2@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
  00566	6a 01		 push	 1
  00568	6a 03		 push	 3
  0056a	8d 8d 60 fe ff
	ff		 lea	 ecx, DWORD PTR _numers$13[ebp]
  00570	e8 00 00 00 00	 call	 ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >
  00575	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6

; 439  : 		numers << ((wylosowana_liczba - 1) / 3 + 1);

  00579	8b 45 08	 mov	 eax, DWORD PTR _wylosowana_liczba$[ebp]
  0057c	8b 00		 mov	 eax, DWORD PTR [eax]
  0057e	83 e8 01	 sub	 eax, 1
  00581	99		 cdq
  00582	b9 03 00 00 00	 mov	 ecx, 3
  00587	f7 f9		 idiv	 ecx
  00589	83 c0 01	 add	 eax, 1
  0058c	8b f4		 mov	 esi, esp
  0058e	50		 push	 eax
  0058f	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR _numers$13[ebp+16]
  00595	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0059b	3b f4		 cmp	 esi, esp
  0059d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 440  : 		wynik += numers.str();

  005a2	8d 85 54 fb ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  005a8	50		 push	 eax
  005a9	8d 8d 60 fe ff
	ff		 lea	 ecx, DWORD PTR _numers$13[ebp]
  005af	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
  005b4	89 85 4c fb ff
	ff		 mov	 DWORD PTR tv292[ebp], eax
  005ba	8b 8d 4c fb ff
	ff		 mov	 ecx, DWORD PTR tv292[ebp]
  005c0	89 8d 48 fb ff
	ff		 mov	 DWORD PTR tv343[ebp], ecx
  005c6	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  005ca	8b 95 48 fb ff
	ff		 mov	 edx, DWORD PTR tv343[ebp]
  005d0	52		 push	 edx
  005d1	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _wynik$[ebp]
  005d7	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
  005dc	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  005e0	8d 8d 54 fb ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  005e6	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 441  : 		wynik += ".wav";

  005eb	68 00 00 00 00	 push	 OFFSET ??_C@_04IBLEHOMF@?4wav?$AA@
  005f0	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _wynik$[ebp]
  005f6	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 442  : 		PlaySound(wynik.c_str(), nullptr, SND_SYNC);

  005fb	8b f4		 mov	 esi, esp
  005fd	6a 00		 push	 0
  005ff	6a 00		 push	 0
  00601	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _wynik$[ebp]
  00607	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0060c	50		 push	 eax
  0060d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PlaySoundA@12
  00613	3b f4		 cmp	 esi, esp
  00615	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 443  : 	}

  0061a	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0061e	8d 8d 60 fe ff
	ff		 lea	 ecx, DWORD PTR _numers$13[ebp]
  00624	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN5@Odczytaj_l:

; 444  : }

  00629	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0062d	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _wynik$[ebp]
  00633	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00638	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0063f	8d 8d 3c ff ff
	ff		 lea	 ecx, DWORD PTR _numers$[ebp]
  00645	e8 00 00 00 00	 call	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN1@Odczytaj_l:
  0064a	52		 push	 edx
  0064b	8b cd		 mov	 ecx, ebp
  0064d	50		 push	 eax
  0064e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN42@Odczytaj_l
  00654	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00659	58		 pop	 eax
  0065a	5a		 pop	 edx
  0065b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0065e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00665	59		 pop	 ecx
  00666	5f		 pop	 edi
  00667	5e		 pop	 esi
  00668	5b		 pop	 ebx
  00669	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0066c	33 cd		 xor	 ecx, ebp
  0066e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00673	81 c4 c0 04 00
	00		 add	 esp, 1216		; 000004c0H
  00679	3b ec		 cmp	 ebp, esp
  0067b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00680	8b e5		 mov	 esp, ebp
  00682	5d		 pop	 ebp
  00683	c3		 ret	 0
$LN42@Odczytaj_l:
  00684	03 00 00 00	 DD	 3
  00688	00 00 00 00	 DD	 $LN41@Odczytaj_l
$LN41@Odczytaj_l:
  0068c	3c ff ff ff	 DD	 -196			; ffffff3cH
  00690	b0 00 00 00	 DD	 176			; 000000b0H
  00694	00 00 00 00	 DD	 $LN37@Odczytaj_l
  00698	18 ff ff ff	 DD	 -232			; ffffff18H
  0069c	1c 00 00 00	 DD	 28			; 0000001cH
  006a0	00 00 00 00	 DD	 $LN38@Odczytaj_l
  006a4	60 fe ff ff	 DD	 -416			; fffffe60H
  006a8	b0 00 00 00	 DD	 176			; 000000b0H
  006ac	00 00 00 00	 DD	 $LN39@Odczytaj_l
$LN39@Odczytaj_l:
  006b0	6e		 DB	 110			; 0000006eH
  006b1	75		 DB	 117			; 00000075H
  006b2	6d		 DB	 109			; 0000006dH
  006b3	65		 DB	 101			; 00000065H
  006b4	72		 DB	 114			; 00000072H
  006b5	73		 DB	 115			; 00000073H
  006b6	00		 DB	 0
$LN38@Odczytaj_l:
  006b7	77		 DB	 119			; 00000077H
  006b8	79		 DB	 121			; 00000079H
  006b9	6e		 DB	 110			; 0000006eH
  006ba	69		 DB	 105			; 00000069H
  006bb	6b		 DB	 107			; 0000006bH
  006bc	00		 DB	 0
$LN37@Odczytaj_l:
  006bd	6e		 DB	 110			; 0000006eH
  006be	75		 DB	 117			; 00000075H
  006bf	6d		 DB	 109			; 0000006dH
  006c0	65		 DB	 101			; 00000065H
  006c1	72		 DB	 114			; 00000072H
  006c2	73		 DB	 115			; 00000073H
  006c3	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Odczytaj_liczbê@@YAXABHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8d 8d 3c ff ff
	ff		 lea	 ecx, DWORD PTR _numers$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__unwindfunclet$?Odczytaj_liczbê@@YAXABHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  0000b	8d 8d bc fc ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Odczytaj_liczbê@@YAXABHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2:
  00016	8d 8d 98 fc ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Odczytaj_liczbê@@YAXABHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3:
  00021	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _wynik$[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Odczytaj_liczbê@@YAXABHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$12:
  0002c	8d 8d 60 fe ff
	ff		 lea	 ecx, DWORD PTR _numers$13[ebp]
  00032	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__unwindfunclet$?Odczytaj_liczbê@@YAXABHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$13:
  00037	8d 8d 54 fb ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?Odczytaj_liczbê@@YAXABHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  00042	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00046	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00049	8b 8a 3c fb ff
	ff		 mov	 ecx, DWORD PTR [edx-1220]
  0004f	33 c8		 xor	 ecx, eax
  00051	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00056	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00059	33 c8		 xor	 ecx, eax
  0005b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00060	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Odczytaj_liczbê@@YAXABHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00065	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Odczytaj_liczbê@@YAXABHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Odczytaj_liczbê
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?Wylosuj@@YAHABH0@Z
_TEXT	SEGMENT
tv92 = -6632						; size = 8
$T2 = -6620						; size = 28
_distribution$ = -5048					; size = 8
_generator$3 = -5032					; size = 5000
_generator$ = -21					; size = 1
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_od_liczby$ = 8						; size = 4
_do_liczby$ = 12					; size = 4
?Wylosuj@@YAHABH0@Z PROC				; Wylosuj, COMDAT

; 375  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Wylosuj@@YAHABH0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 dc 19 00 00	 mov	 eax, 6620		; 000019dcH
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	53		 push	 ebx
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 18 e6 ff
	ff		 lea	 edi, DWORD PTR [ebp-6632]
  00024	b9 77 06 00 00	 mov	 ecx, 1655		; 00000677H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	50		 push	 eax
  0003b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 376  : 	random_device generator; //Generator liczb losowych, który generuje niedeterministyczne liczby losowe, jeœli s¹ obs³ugiwane.

  00044	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00049	8d 8d 24 e6 ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0004f	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005b	8d 85 24 e6 ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00061	50		 push	 eax
  00062	8d 4d eb	 lea	 ecx, DWORD PTR _generator$[ebp]
  00065	e8 00 00 00 00	 call	 ??0random_device@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::random_device::random_device
  0006a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00071	8d 8d 24 e6 ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00077	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 377  : 	if (generator.entropy() != 32) //Je¿eli entropia jest mniejsza od 32 oznacza, ¿e komputer nie dysponuje mo¿liwoœci¹ u¿ycia tego generatora liczb losowy

  0007c	8d 4d eb	 lea	 ecx, DWORD PTR _generator$[ebp]
  0007f	e8 00 00 00 00	 call	 ?entropy@random_device@std@@QAENXZ ; std::random_device::entropy
  00084	dd 9d 18 e6 ff
	ff		 fstp	 QWORD PTR tv92[ebp]
  0008a	f2 0f 10 85 18
	e6 ff ff	 movsd	 xmm0, QWORD PTR tv92[ebp]
  00092	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@4040000000000000
  0009a	9f		 lahf
  0009b	f6 c4 44	 test	 ah, 68			; 00000044H
  0009e	7b 16		 jnp	 SHORT $LN2@Wylosuj

; 378  : 	{
; 379  : #if defined(__x86_64__) || defined(_M_X64) || defined(__x86_64) || defined(__amd64) || defined(__amd64__) || defined(_M_AMD64) //Sprawdzenie czy sytem operacyjny jest 64-bitowy
; 380  : 		mt19937_64 generator((unsigned int)time(nullptr)); //Dla 64 bitowego systemu zamiast powy¿szego generatora u¿ywa generator liczb pseudolosowych Mersenne Twister 19937 w wersji 64 bitowej
; 381  : #else
; 382  : 		mt19937 generator((unsigned int)time(nullptr)); //Dla 32 bitowego systemu zamiast powy¿szego generatora u¿ywa generator liczb pseudolosowych Mersenne Twister 19937 w wersji 32 bitowej

  000a0	6a 00		 push	 0
  000a2	e8 00 00 00 00	 call	 _time
  000a7	83 c4 04	 add	 esp, 4
  000aa	50		 push	 eax
  000ab	8d 8d 58 ec ff
	ff		 lea	 ecx, DWORD PTR _generator$3[ebp]
  000b1	e8 00 00 00 00	 call	 ??0?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@QAE@I@Z ; std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>
$LN2@Wylosuj:

; 383  : #endif
; 384  : 	}
; 385  : 	uniform_int_distribution<int> distribution(od_liczby, do_liczby); //Wsazuje zakres generowanych liczb

  000b6	8b 45 0c	 mov	 eax, DWORD PTR _do_liczby$[ebp]
  000b9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000bb	51		 push	 ecx
  000bc	8b 55 08	 mov	 edx, DWORD PTR _od_liczby$[ebp]
  000bf	8b 02		 mov	 eax, DWORD PTR [edx]
  000c1	50		 push	 eax
  000c2	8d 8d 48 ec ff
	ff		 lea	 ecx, DWORD PTR _distribution$[ebp]
  000c8	e8 00 00 00 00	 call	 ??0?$uniform_int_distribution@H@std@@QAE@HH@Z ; std::uniform_int_distribution<int>::uniform_int_distribution<int>

; 386  : 	return distribution(generator); //Zwraca wygenerowan¹ liczbê

  000cd	8d 45 eb	 lea	 eax, DWORD PTR _generator$[ebp]
  000d0	50		 push	 eax
  000d1	8d 8d 48 ec ff
	ff		 lea	 ecx, DWORD PTR _distribution$[ebp]
  000d7	e8 00 00 00 00	 call	 ??$?RVrandom_device@std@@@?$uniform_int@H@std@@QBEHAAVrandom_device@1@@Z ; std::uniform_int<int>::operator()<std::random_device>

; 387  : }

  000dc	52		 push	 edx
  000dd	8b cd		 mov	 ecx, ebp
  000df	50		 push	 eax
  000e0	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@Wylosuj
  000e6	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000eb	58		 pop	 eax
  000ec	5a		 pop	 edx
  000ed	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f7	59		 pop	 ecx
  000f8	5f		 pop	 edi
  000f9	5e		 pop	 esi
  000fa	5b		 pop	 ebx
  000fb	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fe	33 cd		 xor	 ecx, ebp
  00100	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00105	81 c4 e8 19 00
	00		 add	 esp, 6632		; 000019e8H
  0010b	3b ec		 cmp	 ebp, esp
  0010d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c3		 ret	 0
  00116	66 90		 npad	 2
$LN10@Wylosuj:
  00118	03 00 00 00	 DD	 3
  0011c	00 00 00 00	 DD	 $LN9@Wylosuj
$LN9@Wylosuj:
  00120	eb ff ff ff	 DD	 -21			; ffffffebH
  00124	01 00 00 00	 DD	 1
  00128	00 00 00 00	 DD	 $LN5@Wylosuj
  0012c	58 ec ff ff	 DD	 -5032			; ffffec58H
  00130	88 13 00 00	 DD	 5000			; 00001388H
  00134	00 00 00 00	 DD	 $LN6@Wylosuj
  00138	48 ec ff ff	 DD	 -5048			; ffffec48H
  0013c	08 00 00 00	 DD	 8
  00140	00 00 00 00	 DD	 $LN7@Wylosuj
$LN7@Wylosuj:
  00144	64		 DB	 100			; 00000064H
  00145	69		 DB	 105			; 00000069H
  00146	73		 DB	 115			; 00000073H
  00147	74		 DB	 116			; 00000074H
  00148	72		 DB	 114			; 00000072H
  00149	69		 DB	 105			; 00000069H
  0014a	62		 DB	 98			; 00000062H
  0014b	75		 DB	 117			; 00000075H
  0014c	74		 DB	 116			; 00000074H
  0014d	69		 DB	 105			; 00000069H
  0014e	6f		 DB	 111			; 0000006fH
  0014f	6e		 DB	 110			; 0000006eH
  00150	00		 DB	 0
$LN6@Wylosuj:
  00151	67		 DB	 103			; 00000067H
  00152	65		 DB	 101			; 00000065H
  00153	6e		 DB	 110			; 0000006eH
  00154	65		 DB	 101			; 00000065H
  00155	72		 DB	 114			; 00000072H
  00156	61		 DB	 97			; 00000061H
  00157	74		 DB	 116			; 00000074H
  00158	6f		 DB	 111			; 0000006fH
  00159	72		 DB	 114			; 00000072H
  0015a	00		 DB	 0
$LN5@Wylosuj:
  0015b	67		 DB	 103			; 00000067H
  0015c	65		 DB	 101			; 00000065H
  0015d	6e		 DB	 110			; 0000006eH
  0015e	65		 DB	 101			; 00000065H
  0015f	72		 DB	 114			; 00000072H
  00160	61		 DB	 97			; 00000061H
  00161	74		 DB	 116			; 00000074H
  00162	6f		 DB	 111			; 0000006fH
  00163	72		 DB	 114			; 00000072H
  00164	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Wylosuj@@YAHABH0@Z$0:
  00000	8d 8d 24 e6 ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?Wylosuj@@YAHABH0@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 14 e6 ff
	ff		 mov	 ecx, DWORD PTR [edx-6636]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Wylosuj@@YAHABH0@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Wylosuj@@YAHABH0@Z ENDP				; Wylosuj
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?Czy_Kontynuowaæ@@YA_NABH@Z
_TEXT	SEGMENT
$T2 = -273						; size = 1
$T3 = -261						; size = 1
$T4 = -249						; size = 1
_tak_nie$ = -48						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_iloœæ_pieniêdzy$ = 8					; size = 4
?Czy_Kontynuowaæ@@YA_NABH@Z PROC			; Czy_Kontynuowaæ, COMDAT

; 328  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Czy_Kontynuowaæ@@YA_NABH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd e8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-280]
  00020	b9 43 00 00 00	 mov	 ecx, 67			; 00000043H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 329  : 	string tak_nie; //Zadeklarowanie zmiennej typu string

  00040	8d 4d d0	 lea	 ecx, DWORD PTR _tak_nie$[ebp]
  00043	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 330  : 
; 331  : 	if (iloœæ_pieniêdzy == 0) //Je¿eli posiadana iloœæ gotówki jest róna 0

  0004f	8b 45 08	 mov	 eax, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  00052	83 38 00	 cmp	 DWORD PTR [eax], 0
  00055	75 4a		 jne	 SHORT $LN2@Czy_Kontyn

; 332  : 	{
; 333  : 		cout << "Nie mo¿esz kontynuowaæ, przegra³eœ wszystko" << endl; //Poinformowanie u¿ytkownika, ¿e jest bankrutem

  00057	8b f4		 mov	 esi, esp
  00059	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@BIICBBPD@Nie?5mo?$LPesz?5kontynuowa?f?0?5przegra?$LD@
  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0006e	83 c4 08	 add	 esp, 8
  00071	8b c8		 mov	 ecx, eax
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00079	3b f4		 cmp	 esi, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 334  : 		return false; //Zwrot wartoœci false, co oznacza, ¿e kolejna runda siê nie odbêdzie

  00080	c6 85 07 ff ff
	ff 00		 mov	 BYTE PTR $T4[ebp], 0
  00087	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008e	8d 4d d0	 lea	 ecx, DWORD PTR _tak_nie$[ebp]
  00091	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00096	8a 85 07 ff ff
	ff		 mov	 al, BYTE PTR $T4[ebp]
  0009c	e9 ad 01 00 00	 jmp	 $LN1@Czy_Kontyn
$LN2@Czy_Kontyn:

; 335  : 	}
; 336  : 
; 337  : 	while (true) //Rozpoczêcie pêtli nieskoñczonej

  000a1	b8 01 00 00 00	 mov	 eax, 1
  000a6	85 c0		 test	 eax, eax
  000a8	0f 84 91 01 00
	00		 je	 $LN3@Czy_Kontyn

; 338  : 	{
; 339  : 		cout << "Na koncie masz " << iloœæ_pieniêdzy << "$, czy chcesz grac dalej('t' - tak, 'n' - nie) ?" << endl; //Pointormowanie o stanie konta i zapytanie o to czy gra dalej

  000ae	8b f4		 mov	 esi, esp
  000b0	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  000b5	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@MONJHHJM@$?0?5czy?5chcesz?5grac?5dalej?$CI?8t?8?5?9?5t@
  000ba	8b fc		 mov	 edi, esp
  000bc	8b 45 08	 mov	 eax, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  000bf	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c1	51		 push	 ecx
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@KCLBOCHC@Na?5koncie?5masz?5?$AA@
  000c7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000cd	52		 push	 edx
  000ce	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000d3	83 c4 08	 add	 esp, 8
  000d6	8b c8		 mov	 ecx, eax
  000d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  000de	3b fc		 cmp	 edi, esp
  000e0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000eb	83 c4 08	 add	 esp, 8
  000ee	8b c8		 mov	 ecx, eax
  000f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  000f6	3b f4		 cmp	 esi, esp
  000f8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 340  : 		cin >> tak_nie; //Pobranie od u¿ytkownika odpowiedzi na powy¿sze pytanie

  000fd	8d 45 d0	 lea	 eax, DWORD PTR _tak_nie$[ebp]
  00100	50		 push	 eax
  00101	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  00107	51		 push	 ecx
  00108	e8 00 00 00 00	 call	 ??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
  0010d	83 c4 08	 add	 esp, 8

; 341  : 		if (tak_nie == "t" || tak_nie == "tak" || tak_nie == "Tak" || tak_nie == "TAK" || tak_nie == "n" || tak_nie == "nie" || tak_nie == "Nie" || tak_nie == "NIE") //Sprawdzenie czy odpowiedŸ pasuje do mo¿liwoœci

  00110	68 00 00 00 00	 push	 OFFSET ??_C@_01PFHFFBPC@t?$AA@
  00115	8d 45 d0	 lea	 eax, DWORD PTR _tak_nie$[ebp]
  00118	50		 push	 eax
  00119	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0011e	83 c4 08	 add	 esp, 8
  00121	0f b6 c8	 movzx	 ecx, al
  00124	85 c9		 test	 ecx, ecx
  00126	0f 85 ac 00 00
	00		 jne	 $LN6@Czy_Kontyn
  0012c	68 00 00 00 00	 push	 OFFSET ??_C@_03PFPKAEFD@tak?$AA@
  00131	8d 45 d0	 lea	 eax, DWORD PTR _tak_nie$[ebp]
  00134	50		 push	 eax
  00135	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0013a	83 c4 08	 add	 esp, 8
  0013d	0f b6 c8	 movzx	 ecx, al
  00140	85 c9		 test	 ecx, ecx
  00142	0f 85 90 00 00
	00		 jne	 $LN6@Czy_Kontyn
  00148	68 00 00 00 00	 push	 OFFSET ??_C@_03FFMIKLGN@Tak?$AA@
  0014d	8d 45 d0	 lea	 eax, DWORD PTR _tak_nie$[ebp]
  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  00156	83 c4 08	 add	 esp, 8
  00159	0f b6 c8	 movzx	 ecx, al
  0015c	85 c9		 test	 ecx, ecx
  0015e	75 78		 jne	 SHORT $LN6@Czy_Kontyn
  00160	68 00 00 00 00	 push	 OFFSET ??_C@_03PIABMJCP@TAK?$AA@
  00165	8d 45 d0	 lea	 eax, DWORD PTR _tak_nie$[ebp]
  00168	50		 push	 eax
  00169	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0016e	83 c4 08	 add	 esp, 8
  00171	0f b6 c8	 movzx	 ecx, al
  00174	85 c9		 test	 ecx, ecx
  00176	75 60		 jne	 SHORT $LN6@Czy_Kontyn
  00178	68 00 00 00 00	 push	 OFFSET ??_C@_01EFFIKLCJ@n?$AA@
  0017d	8d 45 d0	 lea	 eax, DWORD PTR _tak_nie$[ebp]
  00180	50		 push	 eax
  00181	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  00186	83 c4 08	 add	 esp, 8
  00189	0f b6 c8	 movzx	 ecx, al
  0018c	85 c9		 test	 ecx, ecx
  0018e	75 48		 jne	 SHORT $LN6@Czy_Kontyn
  00190	68 00 00 00 00	 push	 OFFSET ??_C@_03FKMOMPJO@nie?$AA@
  00195	8d 45 d0	 lea	 eax, DWORD PTR _tak_nie$[ebp]
  00198	50		 push	 eax
  00199	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0019e	83 c4 08	 add	 esp, 8
  001a1	0f b6 c8	 movzx	 ecx, al
  001a4	85 c9		 test	 ecx, ecx
  001a6	75 30		 jne	 SHORT $LN6@Czy_Kontyn
  001a8	68 00 00 00 00	 push	 OFFSET ??_C@_03PKPMGAKA@Nie?$AA@
  001ad	8d 45 d0	 lea	 eax, DWORD PTR _tak_nie$[ebp]
  001b0	50		 push	 eax
  001b1	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  001b6	83 c4 08	 add	 esp, 8
  001b9	0f b6 c8	 movzx	 ecx, al
  001bc	85 c9		 test	 ecx, ecx
  001be	75 18		 jne	 SHORT $LN6@Czy_Kontyn
  001c0	68 00 00 00 00	 push	 OFFSET ??_C@_03FHDFACOC@NIE?$AA@
  001c5	8d 45 d0	 lea	 eax, DWORD PTR _tak_nie$[ebp]
  001c8	50		 push	 eax
  001c9	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  001ce	83 c4 08	 add	 esp, 8
  001d1	0f b6 c8	 movzx	 ecx, al
  001d4	85 c9		 test	 ecx, ecx
  001d6	74 62		 je	 SHORT $LN5@Czy_Kontyn
$LN6@Czy_Kontyn:

; 342  : 			if (tak_nie[0] == 't' || tak_nie[0] == 'T') return true; //Je¿eli pasuje to sprawdzam czy pierwsza litera to t i zwracam wartoœæ true

  001d8	6a 00		 push	 0
  001da	8d 4d d0	 lea	 ecx, DWORD PTR _tak_nie$[ebp]
  001dd	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  001e2	0f be 00	 movsx	 eax, BYTE PTR [eax]
  001e5	83 f8 74	 cmp	 eax, 116		; 00000074H
  001e8	74 12		 je	 SHORT $LN9@Czy_Kontyn
  001ea	6a 00		 push	 0
  001ec	8d 4d d0	 lea	 ecx, DWORD PTR _tak_nie$[ebp]
  001ef	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  001f4	0f be 00	 movsx	 eax, BYTE PTR [eax]
  001f7	83 f8 54	 cmp	 eax, 84			; 00000054H
  001fa	75 20		 jne	 SHORT $LN7@Czy_Kontyn
$LN9@Czy_Kontyn:
  001fc	c6 85 fb fe ff
	ff 01		 mov	 BYTE PTR $T3[ebp], 1
  00203	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0020a	8d 4d d0	 lea	 ecx, DWORD PTR _tak_nie$[ebp]
  0020d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00212	8a 85 fb fe ff
	ff		 mov	 al, BYTE PTR $T3[ebp]
  00218	eb 34		 jmp	 SHORT $LN1@Czy_Kontyn
  0021a	eb 1e		 jmp	 SHORT $LN5@Czy_Kontyn
$LN7@Czy_Kontyn:

; 343  : 			else return false; //W przeciwym wypadku zwracam wartoœæ false

  0021c	c6 85 ef fe ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
  00223	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0022a	8d 4d d0	 lea	 ecx, DWORD PTR _tak_nie$[ebp]
  0022d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00232	8a 85 ef fe ff
	ff		 mov	 al, BYTE PTR $T2[ebp]
  00238	eb 14		 jmp	 SHORT $LN1@Czy_Kontyn
$LN5@Czy_Kontyn:

; 344  : 	}

  0023a	e9 62 fe ff ff	 jmp	 $LN2@Czy_Kontyn
$LN3@Czy_Kontyn:

; 345  : }

  0023f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00246	8d 4d d0	 lea	 ecx, DWORD PTR _tak_nie$[ebp]
  00249	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN1@Czy_Kontyn:
  0024e	52		 push	 edx
  0024f	8b cd		 mov	 ecx, ebp
  00251	50		 push	 eax
  00252	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN15@Czy_Kontyn
  00258	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0025d	58		 pop	 eax
  0025e	5a		 pop	 edx
  0025f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00262	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00269	59		 pop	 ecx
  0026a	5f		 pop	 edi
  0026b	5e		 pop	 esi
  0026c	5b		 pop	 ebx
  0026d	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00270	33 cd		 xor	 ecx, ebp
  00272	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00277	81 c4 18 01 00
	00		 add	 esp, 280		; 00000118H
  0027d	3b ec		 cmp	 ebp, esp
  0027f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00284	8b e5		 mov	 esp, ebp
  00286	5d		 pop	 ebp
  00287	c3		 ret	 0
$LN15@Czy_Kontyn:
  00288	01 00 00 00	 DD	 1
  0028c	00 00 00 00	 DD	 $LN14@Czy_Kontyn
$LN14@Czy_Kontyn:
  00290	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00294	1c 00 00 00	 DD	 28			; 0000001cH
  00298	00 00 00 00	 DD	 $LN12@Czy_Kontyn
$LN12@Czy_Kontyn:
  0029c	74		 DB	 116			; 00000074H
  0029d	61		 DB	 97			; 00000061H
  0029e	6b		 DB	 107			; 0000006bH
  0029f	5f		 DB	 95			; 0000005fH
  002a0	6e		 DB	 110			; 0000006eH
  002a1	69		 DB	 105			; 00000069H
  002a2	65		 DB	 101			; 00000065H
  002a3	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Czy_Kontynuowaæ@@YA_NABH@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _tak_nie$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?Czy_Kontynuowaæ@@YA_NABH@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a e4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-284]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Czy_Kontynuowaæ@@YA_NABH@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Czy_Kontynuowaæ@@YA_NABH@Z ENDP			; Czy_Kontynuowaæ
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?SprawdŸ_Zak³ad@@YAHABHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
_TEXT	SEGMENT
$T2 = -224						; size = 4
_wygrana$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_kwota$ = 8						; size = 4
_typ_zak³adu$ = 12					; size = 28
_wylosowana_liczba$ = 40				; size = 4
?SprawdŸ_Zak³ad@@YAHABHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z PROC ; SprawdŸ_Zak³ad, COMDAT

; 275  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SprawdŸ_Zak³ad@@YAHABHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00020	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 276  : 	int wygrana = kwota; //Deklaracja zmiennej przechowywuj¹ca kwotê wygran¹ lub zwrócon¹ przy wylosowaniu 0

  00044	8b 45 08	 mov	 eax, DWORD PTR _kwota$[ebp]
  00047	8b 08		 mov	 ecx, DWORD PTR [eax]
  00049	89 4d ec	 mov	 DWORD PTR _wygrana$[ebp], ecx

; 277  : 
; 278  : 	if (wylosowana_liczba == 0) //Warunek sprawdzaj¹cy czy wylosowano 0

  0004c	8b 45 28	 mov	 eax, DWORD PTR _wylosowana_liczba$[ebp]
  0004f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00052	0f 85 3e 01 00
	00		 jne	 $LN2@SprawdŸ_Z

; 279  : 	{ //Je¿eli tak to
; 280  : 		if (typ_zak³adu == "p") wygrana /= 2; //Je¿eli typ zak³adu by³ p to wygrana, a dok³adniej zwrot wynosi po³owê zak³adu

  00058	68 00 00 00 00	 push	 OFFSET ??_C@_01JBBJJEPG@p?$AA@
  0005d	8d 45 0c	 lea	 eax, DWORD PTR _typ_zak³adu$[ebp]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  00066	83 c4 08	 add	 esp, 8
  00069	0f b6 c8	 movzx	 ecx, al
  0006c	85 c9		 test	 ecx, ecx
  0006e	74 10		 je	 SHORT $LN4@SprawdŸ_Z
  00070	8b 45 ec	 mov	 eax, DWORD PTR _wygrana$[ebp]
  00073	99		 cdq
  00074	2b c2		 sub	 eax, edx
  00076	d1 f8		 sar	 eax, 1
  00078	89 45 ec	 mov	 DWORD PTR _wygrana$[ebp], eax
  0007b	e9 11 01 00 00	 jmp	 $LN5@SprawdŸ_Z
$LN4@SprawdŸ_Z:

; 281  : 		else if (typ_zak³adu == "n") wygrana /= 2; //Je¿eli typ zak³adu by³ p to wygrana, a dok³adniej zwrot wynosi po³owê zak³adu

  00080	68 00 00 00 00	 push	 OFFSET ??_C@_01EFFIKLCJ@n?$AA@
  00085	8d 45 0c	 lea	 eax, DWORD PTR _typ_zak³adu$[ebp]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0008e	83 c4 08	 add	 esp, 8
  00091	0f b6 c8	 movzx	 ecx, al
  00094	85 c9		 test	 ecx, ecx
  00096	74 10		 je	 SHORT $LN6@SprawdŸ_Z
  00098	8b 45 ec	 mov	 eax, DWORD PTR _wygrana$[ebp]
  0009b	99		 cdq
  0009c	2b c2		 sub	 eax, edx
  0009e	d1 f8		 sar	 eax, 1
  000a0	89 45 ec	 mov	 DWORD PTR _wygrana$[ebp], eax
  000a3	e9 e9 00 00 00	 jmp	 $LN5@SprawdŸ_Z
$LN6@SprawdŸ_Z:

; 282  : 		else if (typ_zak³adu == "r") wygrana /= 2; //Je¿eli typ zak³adu by³ r to wygrana, a dok³adniej zwrot wynosi po³owê zak³adu

  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  000ad	8d 45 0c	 lea	 eax, DWORD PTR _typ_zak³adu$[ebp]
  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  000b6	83 c4 08	 add	 esp, 8
  000b9	0f b6 c8	 movzx	 ecx, al
  000bc	85 c9		 test	 ecx, ecx
  000be	74 10		 je	 SHORT $LN8@SprawdŸ_Z
  000c0	8b 45 ec	 mov	 eax, DWORD PTR _wygrana$[ebp]
  000c3	99		 cdq
  000c4	2b c2		 sub	 eax, edx
  000c6	d1 f8		 sar	 eax, 1
  000c8	89 45 ec	 mov	 DWORD PTR _wygrana$[ebp], eax
  000cb	e9 c1 00 00 00	 jmp	 $LN5@SprawdŸ_Z
$LN8@SprawdŸ_Z:

; 283  : 		else if (typ_zak³adu == "b") wygrana /= 2; //Je¿eli typ zak³adu by³ b to wygrana, a dok³adniej zwrot wynosi po³owê zak³adu

  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_01OJONOECF@b?$AA@
  000d5	8d 45 0c	 lea	 eax, DWORD PTR _typ_zak³adu$[ebp]
  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  000de	83 c4 08	 add	 esp, 8
  000e1	0f b6 c8	 movzx	 ecx, al
  000e4	85 c9		 test	 ecx, ecx
  000e6	74 10		 je	 SHORT $LN10@SprawdŸ_Z
  000e8	8b 45 ec	 mov	 eax, DWORD PTR _wygrana$[ebp]
  000eb	99		 cdq
  000ec	2b c2		 sub	 eax, edx
  000ee	d1 f8		 sar	 eax, 1
  000f0	89 45 ec	 mov	 DWORD PTR _wygrana$[ebp], eax
  000f3	e9 99 00 00 00	 jmp	 $LN5@SprawdŸ_Z
$LN10@SprawdŸ_Z:

; 284  : 		else if (typ_zak³adu == "g") wygrana /= 2; //Je¿eli typ zak³adu by³ g to wygrana, a dok³adniej zwrot wynosi po³owê zak³adu

  000f8	68 00 00 00 00	 push	 OFFSET ??_C@_01JEJKBAGA@g?$AA@
  000fd	8d 45 0c	 lea	 eax, DWORD PTR _typ_zak³adu$[ebp]
  00100	50		 push	 eax
  00101	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  00106	83 c4 08	 add	 esp, 8
  00109	0f b6 c8	 movzx	 ecx, al
  0010c	85 c9		 test	 ecx, ecx
  0010e	74 0d		 je	 SHORT $LN12@SprawdŸ_Z
  00110	8b 45 ec	 mov	 eax, DWORD PTR _wygrana$[ebp]
  00113	99		 cdq
  00114	2b c2		 sub	 eax, edx
  00116	d1 f8		 sar	 eax, 1
  00118	89 45 ec	 mov	 DWORD PTR _wygrana$[ebp], eax
  0011b	eb 74		 jmp	 SHORT $LN5@SprawdŸ_Z
$LN12@SprawdŸ_Z:

; 285  : 		else if (typ_zak³adu == "d") wygrana /= 2; //Je¿eli typ zak³adu by³ d to wygrana, a dok³adniej zwrot wynosi po³owê zak³adu

  0011d	68 00 00 00 00	 push	 OFFSET ??_C@_01LPLHEDKD@d?$AA@
  00122	8d 45 0c	 lea	 eax, DWORD PTR _typ_zak³adu$[ebp]
  00125	50		 push	 eax
  00126	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0012b	83 c4 08	 add	 esp, 8
  0012e	0f b6 c8	 movzx	 ecx, al
  00131	85 c9		 test	 ecx, ecx
  00133	74 0d		 je	 SHORT $LN14@SprawdŸ_Z
  00135	8b 45 ec	 mov	 eax, DWORD PTR _wygrana$[ebp]
  00138	99		 cdq
  00139	2b c2		 sub	 eax, edx
  0013b	d1 f8		 sar	 eax, 1
  0013d	89 45 ec	 mov	 DWORD PTR _wygrana$[ebp], eax
  00140	eb 4f		 jmp	 SHORT $LN5@SprawdŸ_Z
$LN14@SprawdŸ_Z:

; 286  : 		else if (typ_zak³adu[0] == 'k') wygrana *= 0; //Je¿eli typ zak³adu by³ k to przegra³o siê zak³ad

  00142	6a 00		 push	 0
  00144	8d 4d 0c	 lea	 ecx, DWORD PTR _typ_zak³adu$[ebp]
  00147	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0014c	0f be 00	 movsx	 eax, BYTE PTR [eax]
  0014f	83 f8 6b	 cmp	 eax, 107		; 0000006bH
  00152	75 09		 jne	 SHORT $LN16@SprawdŸ_Z
  00154	6b 45 ec 00	 imul	 eax, DWORD PTR _wygrana$[ebp], 0
  00158	89 45 ec	 mov	 DWORD PTR _wygrana$[ebp], eax
  0015b	eb 34		 jmp	 SHORT $LN5@SprawdŸ_Z
$LN16@SprawdŸ_Z:

; 287  : 		else if (typ_zak³adu[0] == 'w') wygrana *= 0; //Je¿eli typ zak³adu by³ k to przegra³o siê zak³ad

  0015d	6a 00		 push	 0
  0015f	8d 4d 0c	 lea	 ecx, DWORD PTR _typ_zak³adu$[ebp]
  00162	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00167	0f be 00	 movsx	 eax, BYTE PTR [eax]
  0016a	83 f8 77	 cmp	 eax, 119		; 00000077H
  0016d	75 09		 jne	 SHORT $LN18@SprawdŸ_Z
  0016f	6b 45 ec 00	 imul	 eax, DWORD PTR _wygrana$[ebp], 0
  00173	89 45 ec	 mov	 DWORD PTR _wygrana$[ebp], eax
  00176	eb 19		 jmp	 SHORT $LN5@SprawdŸ_Z
$LN18@SprawdŸ_Z:

; 288  : 		else if (typ_zak³adu[0] == '0') wygrana *= 35; //Je¿eli typ zak³adu by³ 0 to przegra³o siê zak³ad

  00178	6a 00		 push	 0
  0017a	8d 4d 0c	 lea	 ecx, DWORD PTR _typ_zak³adu$[ebp]
  0017d	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00182	0f be 00	 movsx	 eax, BYTE PTR [eax]
  00185	83 f8 30	 cmp	 eax, 48			; 00000030H
  00188	75 07		 jne	 SHORT $LN5@SprawdŸ_Z
  0018a	6b 45 ec 23	 imul	 eax, DWORD PTR _wygrana$[ebp], 35
  0018e	89 45 ec	 mov	 DWORD PTR _wygrana$[ebp], eax
$LN5@SprawdŸ_Z:

; 289  : 	}
; 290  : 	else //Je¿eli wylosowana liczba nie jest zerem to

  00191	e9 4a 02 00 00	 jmp	 $LN3@SprawdŸ_Z
$LN2@SprawdŸ_Z:

; 291  : 	{
; 292  : 		if (typ_zak³adu == "p") //Je¿eli typ zak³adu to p

  00196	68 00 00 00 00	 push	 OFFSET ??_C@_01JBBJJEPG@p?$AA@
  0019b	8d 45 0c	 lea	 eax, DWORD PTR _typ_zak³adu$[ebp]
  0019e	50		 push	 eax
  0019f	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  001a4	83 c4 08	 add	 esp, 8
  001a7	0f b6 c8	 movzx	 ecx, al
  001aa	85 c9		 test	 ecx, ecx
  001ac	74 2a		 je	 SHORT $LN21@SprawdŸ_Z

; 293  : 			if (wylosowana_liczba % 2 == 0) wygrana *= 1; //To sprawdzam czy wylosowana liczba jest parzysta, je¿eli tak to wygrana jest 1:1

  001ae	8b 45 28	 mov	 eax, DWORD PTR _wylosowana_liczba$[ebp]
  001b1	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b3	81 e1 01 00 00
	80		 and	 ecx, -2147483647	; 80000001H
  001b9	79 05		 jns	 SHORT $LN62@SprawdŸ_Z
  001bb	49		 dec	 ecx
  001bc	83 c9 fe	 or	 ecx, -2			; fffffffeH
  001bf	41		 inc	 ecx
$LN62@SprawdŸ_Z:
  001c0	85 c9		 test	 ecx, ecx
  001c2	75 08		 jne	 SHORT $LN23@SprawdŸ_Z
  001c4	8b 45 ec	 mov	 eax, DWORD PTR _wygrana$[ebp]
  001c7	89 45 ec	 mov	 DWORD PTR _wygrana$[ebp], eax
  001ca	eb 07		 jmp	 SHORT $LN24@SprawdŸ_Z
$LN23@SprawdŸ_Z:

; 294  : 			else wygrana *= 0; //Je¿eli wylosowana liczba nie jest parzysta to przegra³o siê zak³ad

  001cc	6b 45 ec 00	 imul	 eax, DWORD PTR _wygrana$[ebp], 0
  001d0	89 45 ec	 mov	 DWORD PTR _wygrana$[ebp], eax
$LN24@SprawdŸ_Z:
  001d3	e9 08 02 00 00	 jmp	 $LN3@SprawdŸ_Z
$LN21@SprawdŸ_Z:

; 295  : 		else if (typ_zak³adu == "n") //Je¿eli typ zak³adu to n

  001d8	68 00 00 00 00	 push	 OFFSET ??_C@_01EFFIKLCJ@n?$AA@
  001dd	8d 45 0c	 lea	 eax, DWORD PTR _typ_zak³adu$[ebp]
  001e0	50		 push	 eax
  001e1	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  001e6	83 c4 08	 add	 esp, 8
  001e9	0f b6 c8	 movzx	 ecx, al
  001ec	85 c9		 test	 ecx, ecx
  001ee	74 2b		 je	 SHORT $LN25@SprawdŸ_Z

; 296  : 			if (wylosowana_liczba % 2 == 1) wygrana *= 1; //To sprawdzam czy wylosowana liczba jest nieparzysta, je¿eli tak to wygrana jest 1:1

  001f0	8b 45 28	 mov	 eax, DWORD PTR _wylosowana_liczba$[ebp]
  001f3	8b 08		 mov	 ecx, DWORD PTR [eax]
  001f5	81 e1 01 00 00
	80		 and	 ecx, -2147483647	; 80000001H
  001fb	79 05		 jns	 SHORT $LN63@SprawdŸ_Z
  001fd	49		 dec	 ecx
  001fe	83 c9 fe	 or	 ecx, -2			; fffffffeH
  00201	41		 inc	 ecx
$LN63@SprawdŸ_Z:
  00202	83 f9 01	 cmp	 ecx, 1
  00205	75 08		 jne	 SHORT $LN27@SprawdŸ_Z
  00207	8b 45 ec	 mov	 eax, DWORD PTR _wygrana$[ebp]
  0020a	89 45 ec	 mov	 DWORD PTR _wygrana$[ebp], eax
  0020d	eb 07		 jmp	 SHORT $LN28@SprawdŸ_Z
$LN27@SprawdŸ_Z:

; 297  : 			else wygrana *= 0; //Je¿eli obstawiony numer nie jest nieparzysta to przegra³o siê zak³ad

  0020f	6b 45 ec 00	 imul	 eax, DWORD PTR _wygrana$[ebp], 0
  00213	89 45 ec	 mov	 DWORD PTR _wygrana$[ebp], eax
$LN28@SprawdŸ_Z:
  00216	e9 c5 01 00 00	 jmp	 $LN3@SprawdŸ_Z
$LN25@SprawdŸ_Z:

; 298  : 		else if (typ_zak³adu == "r") //Je¿eli typ zak³adu to n

  0021b	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00220	8d 45 0c	 lea	 eax, DWORD PTR _typ_zak³adu$[ebp]
  00223	50		 push	 eax
  00224	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  00229	83 c4 08	 add	 esp, 8
  0022c	0f b6 c8	 movzx	 ecx, al
  0022f	85 c9		 test	 ecx, ecx
  00231	74 25		 je	 SHORT $LN29@SprawdŸ_Z

; 299  : 			if (Ruletka_plansza_kolor[wylosowana_liczba] == 'r') wygrana *= 1; //To sprawdzam czy wylosowana liczba jest czerwona, je¿eli tak to wygrana jest 1:1

  00233	8b 45 28	 mov	 eax, DWORD PTR _wylosowana_liczba$[ebp]
  00236	8b 08		 mov	 ecx, DWORD PTR [eax]
  00238	0f be 91 00 00
	00 00		 movsx	 edx, BYTE PTR ?Ruletka_plansza_kolor@@3QBDB[ecx]
  0023f	83 fa 72	 cmp	 edx, 114		; 00000072H
  00242	75 08		 jne	 SHORT $LN31@SprawdŸ_Z
  00244	8b 45 ec	 mov	 eax, DWORD PTR _wygrana$[ebp]
  00247	89 45 ec	 mov	 DWORD PTR _wygrana$[ebp], eax
  0024a	eb 07		 jmp	 SHORT $LN32@SprawdŸ_Z
$LN31@SprawdŸ_Z:

; 300  : 			else wygrana *= 0; //Je¿eli wylosowana liczba nie jest czerwony to przegra³o siê zak³ad

  0024c	6b 45 ec 00	 imul	 eax, DWORD PTR _wygrana$[ebp], 0
  00250	89 45 ec	 mov	 DWORD PTR _wygrana$[ebp], eax
$LN32@SprawdŸ_Z:
  00253	e9 88 01 00 00	 jmp	 $LN3@SprawdŸ_Z
$LN29@SprawdŸ_Z:

; 301  : 		else if (typ_zak³adu == "b") //Je¿eli typ zak³adu to n

  00258	68 00 00 00 00	 push	 OFFSET ??_C@_01OJONOECF@b?$AA@
  0025d	8d 45 0c	 lea	 eax, DWORD PTR _typ_zak³adu$[ebp]
  00260	50		 push	 eax
  00261	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  00266	83 c4 08	 add	 esp, 8
  00269	0f b6 c8	 movzx	 ecx, al
  0026c	85 c9		 test	 ecx, ecx
  0026e	74 25		 je	 SHORT $LN33@SprawdŸ_Z

; 302  : 			if (Ruletka_plansza_kolor[wylosowana_liczba] == 'b') wygrana *= 1; //To sprawdzam czy wylosowana liczba jest czarna, je¿eli tak to wygrana jest 1:1

  00270	8b 45 28	 mov	 eax, DWORD PTR _wylosowana_liczba$[ebp]
  00273	8b 08		 mov	 ecx, DWORD PTR [eax]
  00275	0f be 91 00 00
	00 00		 movsx	 edx, BYTE PTR ?Ruletka_plansza_kolor@@3QBDB[ecx]
  0027c	83 fa 62	 cmp	 edx, 98			; 00000062H
  0027f	75 08		 jne	 SHORT $LN35@SprawdŸ_Z
  00281	8b 45 ec	 mov	 eax, DWORD PTR _wygrana$[ebp]
  00284	89 45 ec	 mov	 DWORD PTR _wygrana$[ebp], eax
  00287	eb 07		 jmp	 SHORT $LN36@SprawdŸ_Z
$LN35@SprawdŸ_Z:

; 303  : 			else wygrana *= 0; //Je¿eli wylosowana liczba nie jest czarny to przegra³o siê zak³ad

  00289	6b 45 ec 00	 imul	 eax, DWORD PTR _wygrana$[ebp], 0
  0028d	89 45 ec	 mov	 DWORD PTR _wygrana$[ebp], eax
$LN36@SprawdŸ_Z:
  00290	e9 4b 01 00 00	 jmp	 $LN3@SprawdŸ_Z
$LN33@SprawdŸ_Z:

; 304  : 		else if (typ_zak³adu == "g") //Je¿eli typ zak³adu to g

  00295	68 00 00 00 00	 push	 OFFSET ??_C@_01JEJKBAGA@g?$AA@
  0029a	8d 45 0c	 lea	 eax, DWORD PTR _typ_zak³adu$[ebp]
  0029d	50		 push	 eax
  0029e	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  002a3	83 c4 08	 add	 esp, 8
  002a6	0f b6 c8	 movzx	 ecx, al
  002a9	85 c9		 test	 ecx, ecx
  002ab	74 1c		 je	 SHORT $LN37@SprawdŸ_Z

; 305  : 			if (wylosowana_liczba < 19) wygrana *= 1; //To sprawdzam czy wylosowana liczba jest od 1 do 18, je¿eli tak to wygrana jest 1:1

  002ad	8b 45 28	 mov	 eax, DWORD PTR _wylosowana_liczba$[ebp]
  002b0	83 38 13	 cmp	 DWORD PTR [eax], 19	; 00000013H
  002b3	7d 08		 jge	 SHORT $LN39@SprawdŸ_Z
  002b5	8b 45 ec	 mov	 eax, DWORD PTR _wygrana$[ebp]
  002b8	89 45 ec	 mov	 DWORD PTR _wygrana$[ebp], eax
  002bb	eb 07		 jmp	 SHORT $LN40@SprawdŸ_Z
$LN39@SprawdŸ_Z:

; 306  : 			else wygrana *= 0; //Je¿eli wylosowana liczba nie nale¿y do przedzia³u [1,18] to przegra³o siê zak³ad

  002bd	6b 45 ec 00	 imul	 eax, DWORD PTR _wygrana$[ebp], 0
  002c1	89 45 ec	 mov	 DWORD PTR _wygrana$[ebp], eax
$LN40@SprawdŸ_Z:
  002c4	e9 17 01 00 00	 jmp	 $LN3@SprawdŸ_Z
$LN37@SprawdŸ_Z:

; 307  : 		else if (typ_zak³adu == "d") //Je¿eli typ zak³adu to d

  002c9	68 00 00 00 00	 push	 OFFSET ??_C@_01LPLHEDKD@d?$AA@
  002ce	8d 45 0c	 lea	 eax, DWORD PTR _typ_zak³adu$[ebp]
  002d1	50		 push	 eax
  002d2	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  002d7	83 c4 08	 add	 esp, 8
  002da	0f b6 c8	 movzx	 ecx, al
  002dd	85 c9		 test	 ecx, ecx
  002df	74 1c		 je	 SHORT $LN41@SprawdŸ_Z

; 308  : 			if (wylosowana_liczba > 18) wygrana *= 1; //To sprawdzam czy wylosowana liczba jest od 19 do 36, je¿eli tak to wygrana jest 1:1

  002e1	8b 45 28	 mov	 eax, DWORD PTR _wylosowana_liczba$[ebp]
  002e4	83 38 12	 cmp	 DWORD PTR [eax], 18	; 00000012H
  002e7	7e 08		 jle	 SHORT $LN43@SprawdŸ_Z
  002e9	8b 45 ec	 mov	 eax, DWORD PTR _wygrana$[ebp]
  002ec	89 45 ec	 mov	 DWORD PTR _wygrana$[ebp], eax
  002ef	eb 07		 jmp	 SHORT $LN44@SprawdŸ_Z
$LN43@SprawdŸ_Z:

; 309  : 			else wygrana *= 0; //Je¿eli wylosowana liczba nie nale¿y do przedzia³u [19,36] to przegra³o siê zak³ad

  002f1	6b 45 ec 00	 imul	 eax, DWORD PTR _wygrana$[ebp], 0
  002f5	89 45 ec	 mov	 DWORD PTR _wygrana$[ebp], eax
$LN44@SprawdŸ_Z:
  002f8	e9 e3 00 00 00	 jmp	 $LN3@SprawdŸ_Z
$LN41@SprawdŸ_Z:

; 310  : 		else if (typ_zak³adu[0] == 'k') //Je¿eli typ zak³adu to k

  002fd	6a 00		 push	 0
  002ff	8d 4d 0c	 lea	 ecx, DWORD PTR _typ_zak³adu$[ebp]
  00302	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00307	0f be 00	 movsx	 eax, BYTE PTR [eax]
  0030a	83 f8 6b	 cmp	 eax, 107		; 0000006bH
  0030d	75 3c		 jne	 SHORT $LN45@SprawdŸ_Z

; 311  : 			if ((wylosowana_liczba - 1) % 3 == typ_zak³adu[1] - 49) wygrana *= 2; //To sprawdzam czy wylosowana liczba jest z obstawionej kolumny, je¿eli tak to wygrana jest 2:1

  0030f	8b 45 28	 mov	 eax, DWORD PTR _wylosowana_liczba$[ebp]
  00312	8b 00		 mov	 eax, DWORD PTR [eax]
  00314	83 e8 01	 sub	 eax, 1
  00317	99		 cdq
  00318	b9 03 00 00 00	 mov	 ecx, 3
  0031d	f7 f9		 idiv	 ecx
  0031f	8b f2		 mov	 esi, edx
  00321	6a 01		 push	 1
  00323	8d 4d 0c	 lea	 ecx, DWORD PTR _typ_zak³adu$[ebp]
  00326	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0032b	0f be 10	 movsx	 edx, BYTE PTR [eax]
  0032e	83 ea 31	 sub	 edx, 49			; 00000031H
  00331	3b f2		 cmp	 esi, edx
  00333	75 0a		 jne	 SHORT $LN47@SprawdŸ_Z
  00335	8b 45 ec	 mov	 eax, DWORD PTR _wygrana$[ebp]
  00338	d1 e0		 shl	 eax, 1
  0033a	89 45 ec	 mov	 DWORD PTR _wygrana$[ebp], eax
  0033d	eb 07		 jmp	 SHORT $LN48@SprawdŸ_Z
$LN47@SprawdŸ_Z:

; 312  : 			else wygrana *= 0; //Je¿eli wylosowana liczba nie jest z obstawionej kolumny to przegra³o siê zak³ad

  0033f	6b 45 ec 00	 imul	 eax, DWORD PTR _wygrana$[ebp], 0
  00343	89 45 ec	 mov	 DWORD PTR _wygrana$[ebp], eax
$LN48@SprawdŸ_Z:
  00346	e9 95 00 00 00	 jmp	 $LN3@SprawdŸ_Z
$LN45@SprawdŸ_Z:

; 313  : 		else if (typ_zak³adu[0] == 'w') //Je¿eli typ zak³adu to w

  0034b	6a 00		 push	 0
  0034d	8d 4d 0c	 lea	 ecx, DWORD PTR _typ_zak³adu$[ebp]
  00350	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00355	0f be 00	 movsx	 eax, BYTE PTR [eax]
  00358	83 f8 77	 cmp	 eax, 119		; 00000077H
  0035b	75 51		 jne	 SHORT $LN49@SprawdŸ_Z

; 314  : 			if (((wylosowana_liczba - 1) / 3 + 1) == atoi(typ_zak³adu.erase(0, 1).c_str())) wygrana *= 11; //To sprawdzam czy wylosowana liczba jest z obstawionego wiersza, je¿eli tak to wygrana jest 11:1

  0035d	8b 45 28	 mov	 eax, DWORD PTR _wylosowana_liczba$[ebp]
  00360	8b 00		 mov	 eax, DWORD PTR [eax]
  00362	83 e8 01	 sub	 eax, 1
  00365	99		 cdq
  00366	b9 03 00 00 00	 mov	 ecx, 3
  0036b	f7 f9		 idiv	 ecx
  0036d	8b f0		 mov	 esi, eax
  0036f	83 c6 01	 add	 esi, 1
  00372	6a 01		 push	 1
  00374	6a 00		 push	 0
  00376	8d 4d 0c	 lea	 ecx, DWORD PTR _typ_zak³adu$[ebp]
  00379	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  0037e	8b c8		 mov	 ecx, eax
  00380	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00385	8b fc		 mov	 edi, esp
  00387	50		 push	 eax
  00388	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  0038e	83 c4 04	 add	 esp, 4
  00391	3b fc		 cmp	 edi, esp
  00393	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00398	3b f0		 cmp	 esi, eax
  0039a	75 09		 jne	 SHORT $LN51@SprawdŸ_Z
  0039c	6b 45 ec 0b	 imul	 eax, DWORD PTR _wygrana$[ebp], 11
  003a0	89 45 ec	 mov	 DWORD PTR _wygrana$[ebp], eax
  003a3	eb 07		 jmp	 SHORT $LN52@SprawdŸ_Z
$LN51@SprawdŸ_Z:

; 315  : 			else wygrana *= 0; //Je¿eli wylosowana liczba nie jest z obstawionego wiersza to przegra³o siê zak³ad

  003a5	6b 45 ec 00	 imul	 eax, DWORD PTR _wygrana$[ebp], 0
  003a9	89 45 ec	 mov	 DWORD PTR _wygrana$[ebp], eax
$LN52@SprawdŸ_Z:
  003ac	eb 32		 jmp	 SHORT $LN3@SprawdŸ_Z
$LN49@SprawdŸ_Z:

; 316  : 		else if (wylosowana_liczba == atoi(typ_zak³adu.c_str())) wygrana *= 35; //Je¿eli typ zak³adu to liczba, to sprawdzam czy wylosowana liczba jest równa obstawionej liczbie, je¿eli tak to wygrana jest 35:1

  003ae	8d 4d 0c	 lea	 ecx, DWORD PTR _typ_zak³adu$[ebp]
  003b1	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  003b6	8b f4		 mov	 esi, esp
  003b8	50		 push	 eax
  003b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  003bf	83 c4 04	 add	 esp, 4
  003c2	3b f4		 cmp	 esi, esp
  003c4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003c9	8b 4d 28	 mov	 ecx, DWORD PTR _wylosowana_liczba$[ebp]
  003cc	39 01		 cmp	 DWORD PTR [ecx], eax
  003ce	75 09		 jne	 SHORT $LN53@SprawdŸ_Z
  003d0	6b 45 ec 23	 imul	 eax, DWORD PTR _wygrana$[ebp], 35
  003d4	89 45 ec	 mov	 DWORD PTR _wygrana$[ebp], eax
  003d7	eb 07		 jmp	 SHORT $LN3@SprawdŸ_Z
$LN53@SprawdŸ_Z:

; 317  : 		else wygrana *= 0; //Je¿eli wylosowana liczba nie jest równa obstawionej liczbie to przegra³o siê zak³ad

  003d9	6b 45 ec 00	 imul	 eax, DWORD PTR _wygrana$[ebp], 0
  003dd	89 45 ec	 mov	 DWORD PTR _wygrana$[ebp], eax
$LN3@SprawdŸ_Z:

; 318  : 	}
; 319  : 
; 320  : 	if (wygrana >= kwota) cout << "Obstawiles poprawnie, wygrywasz " << wygrana << "$." << endl; //Je¿eli wygrana jest wiêksza lub równa obstawionej kwocie to informujê o tym, ¿e wygra³

  003e0	8b 45 08	 mov	 eax, DWORD PTR _kwota$[ebp]
  003e3	8b 4d ec	 mov	 ecx, DWORD PTR _wygrana$[ebp]
  003e6	3b 08		 cmp	 ecx, DWORD PTR [eax]
  003e8	7c 52		 jl	 SHORT $LN55@SprawdŸ_Z
  003ea	8b f4		 mov	 esi, esp
  003ec	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  003f1	68 00 00 00 00	 push	 OFFSET ??_C@_02DEPNMBPN@$?4?$AA@
  003f6	8b fc		 mov	 edi, esp
  003f8	8b 45 ec	 mov	 eax, DWORD PTR _wygrana$[ebp]
  003fb	50		 push	 eax
  003fc	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@MBIMKPJH@Obstawiles?5poprawnie?0?5wygrywasz?5@
  00401	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00407	51		 push	 ecx
  00408	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0040d	83 c4 08	 add	 esp, 8
  00410	8b c8		 mov	 ecx, eax
  00412	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00418	3b fc		 cmp	 edi, esp
  0041a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0041f	50		 push	 eax
  00420	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00425	83 c4 08	 add	 esp, 8
  00428	8b c8		 mov	 ecx, eax
  0042a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00430	3b f4		 cmp	 esi, esp
  00432	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00437	e9 ad 00 00 00	 jmp	 $LN56@SprawdŸ_Z
$LN55@SprawdŸ_Z:

; 321  : 	else if (wygrana == kwota / 2) cout << "Obstawiles niepoprawnie lecz uda³o Ci siê, dostajesz po³owê zak³adu " << wygrana << "$." << endl; //Je¿eli wygrana jest równa po³owie obstawionej kwocie to informujê o tym, ¿e przegra³ po³owe stawki

  0043c	8b 45 08	 mov	 eax, DWORD PTR _kwota$[ebp]
  0043f	8b 00		 mov	 eax, DWORD PTR [eax]
  00441	99		 cdq
  00442	2b c2		 sub	 eax, edx
  00444	d1 f8		 sar	 eax, 1
  00446	39 45 ec	 cmp	 DWORD PTR _wygrana$[ebp], eax
  00449	75 4f		 jne	 SHORT $LN57@SprawdŸ_Z
  0044b	8b f4		 mov	 esi, esp
  0044d	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00452	68 00 00 00 00	 push	 OFFSET ??_C@_02DEPNMBPN@$?4?$AA@
  00457	8b fc		 mov	 edi, esp
  00459	8b 45 ec	 mov	 eax, DWORD PTR _wygrana$[ebp]
  0045c	50		 push	 eax
  0045d	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@FAPGEAPP@Obstawiles?5niepoprawnie?5lecz?5uda@
  00462	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00468	51		 push	 ecx
  00469	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0046e	83 c4 08	 add	 esp, 8
  00471	8b c8		 mov	 ecx, eax
  00473	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00479	3b fc		 cmp	 edi, esp
  0047b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00480	50		 push	 eax
  00481	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00486	83 c4 08	 add	 esp, 8
  00489	8b c8		 mov	 ecx, eax
  0048b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00491	3b f4		 cmp	 esi, esp
  00493	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00498	eb 4f		 jmp	 SHORT $LN56@SprawdŸ_Z
$LN57@SprawdŸ_Z:

; 322  : 	else cout << "Obstawiles niepoprawnie, przegra³eœ " << kwota << "$." << endl; //Je¿eli wygrana jest równa zero to informujê o tym, ¿e przegra³

  0049a	8b f4		 mov	 esi, esp
  0049c	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  004a1	68 00 00 00 00	 push	 OFFSET ??_C@_02DEPNMBPN@$?4?$AA@
  004a6	8b fc		 mov	 edi, esp
  004a8	8b 45 08	 mov	 eax, DWORD PTR _kwota$[ebp]
  004ab	8b 08		 mov	 ecx, DWORD PTR [eax]
  004ad	51		 push	 ecx
  004ae	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@EMPIFKEH@Obstawiles?5niepoprawnie?0?5przegra@
  004b3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  004b9	52		 push	 edx
  004ba	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  004bf	83 c4 08	 add	 esp, 8
  004c2	8b c8		 mov	 ecx, eax
  004c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  004ca	3b fc		 cmp	 edi, esp
  004cc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004d1	50		 push	 eax
  004d2	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  004d7	83 c4 08	 add	 esp, 8
  004da	8b c8		 mov	 ecx, eax
  004dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  004e2	3b f4		 cmp	 esi, esp
  004e4	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN56@SprawdŸ_Z:

; 323  : 
; 324  : 	return wygrana; //Zwracam wartoœ wygranej lub zwrotu

  004e9	8b 45 ec	 mov	 eax, DWORD PTR _wygrana$[ebp]
  004ec	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  004f2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  004f9	8d 4d 0c	 lea	 ecx, DWORD PTR _typ_zak³adu$[ebp]
  004fc	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00501	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 325  : }

  00507	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0050a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00511	59		 pop	 ecx
  00512	5f		 pop	 edi
  00513	5e		 pop	 esi
  00514	5b		 pop	 ebx
  00515	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0051b	3b ec		 cmp	 ebp, esp
  0051d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00522	8b e5		 mov	 esp, ebp
  00524	5d		 pop	 ebp
  00525	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SprawdŸ_Zak³ad@@YAHABHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR _typ_zak³adu$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?SprawdŸ_Zak³ad@@YAHABHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SprawdŸ_Zak³ad@@YAHABHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SprawdŸ_Zak³ad@@YAHABHV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ENDP ; SprawdŸ_Zak³ad
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?Zakrêæ_Ruletk¹@@YAHXZ
_TEXT	SEGMENT
$T1 = -340						; size = 4
$T2 = -328						; size = 4
$T3 = -316						; size = 4
$T4 = -304						; size = 4
$T5 = -292						; size = 4
_i$6 = -88						; size = 4
_czas_przeskoku_kulki_wolny_przyspieszenie$ = -76	; size = 8
_wylosowana_pozycja$ = -60				; size = 4
_ii$7 = -48						; size = 4
_i$8 = -36						; size = 4
_czas_przeskoku_kulki_szybki_opóŸnienie$ = -24		; size = 8
_iloœæ_zakrêceñ$ = -8					; size = 4
?Zakrêæ_Ruletk¹@@YAHXZ PROC				; Zakrêæ_Ruletk¹, COMDAT

; 241  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 58 01 00
	00		 sub	 esp, 344		; 00000158H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd a8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-344]
  00012	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 242  : 	int iloœæ_zakrêceñ = rand() % (iloœæ_max_dodatkowych_obrotów_ruletki + 1) + iloœæ_minimalna_obrotów_ruletki; //Deklarowanie i przpisanie zmiennej liczbowj zawieraj¹c¹ pseudolosow¹ (o niskiej pseoudolosowoœci) iloœæ obrotów ruletk¹ ((od 0 do max dodatkowych obrotów ruletki) + minimalna iloœæ obrotów ruletki) zanim nastêpi finalny obrót

  0001e	8b f4		 mov	 esi, esp
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  00026	3b f4		 cmp	 esi, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR ?iloœæ_max_dodatkowych_obrotów_ruletki@@3FA ; iloœæ_max_dodatkowych_obrotów_ruletki
  00034	83 c1 01	 add	 ecx, 1
  00037	99		 cdq
  00038	f7 f9		 idiv	 ecx
  0003a	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?iloœæ_minimalna_obrotów_ruletki@@3FA ; iloœæ_minimalna_obrotów_ruletki
  00041	03 d0		 add	 edx, eax
  00043	89 55 f8	 mov	 DWORD PTR _iloœæ_zakrêceñ$[ebp], edx

; 243  : 	double czas_przeskoku_kulki_szybki_opóŸnienie = czas_przeskoku_kulki_szybki / (iloœæ_zakrêceñ * 37.0); //Deklarowanie i przpisanie zmiennej zmiennoprzecinkowej zawieraj¹c¹ czas o ile kolejna wartoœæ na kole ruletki powinna byæ szybciej pokazana

  00046	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?czas_przeskoku_kulki_szybki@@3FA ; czas_przeskoku_kulki_szybki
  0004d	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  00051	f2 0f 2a 4d f8	 cvtsi2sd xmm1, DWORD PTR _iloœæ_zakrêceñ$[ebp]
  00056	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4042800000000000
  0005e	f2 0f 5e c1	 divsd	 xmm0, xmm1
  00062	f2 0f 11 45 e8	 movsd	 QWORD PTR _czas_przeskoku_kulki_szybki_opóŸnienie$[ebp], xmm0

; 244  : 	Hide_Cursor(); //Ukrycie kursora tekstowego w konsoli

  00067	e8 00 00 00 00	 call	 ?Hide_Cursor@@YAXXZ	; Hide_Cursor

; 245  : 	for (int i = 0; i < iloœæ_zakrêceñ; ++i) //Wykonanie iloœæ_zakrêceñ obrotów ruletk¹

  0006c	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _i$8[ebp], 0
  00073	eb 09		 jmp	 SHORT $LN4@Zakr?
$LN2@Zakr?:
  00075	8b 45 dc	 mov	 eax, DWORD PTR _i$8[ebp]
  00078	83 c0 01	 add	 eax, 1
  0007b	89 45 dc	 mov	 DWORD PTR _i$8[ebp], eax
$LN4@Zakr?:
  0007e	8b 45 dc	 mov	 eax, DWORD PTR _i$8[ebp]
  00081	3b 45 f8	 cmp	 eax, DWORD PTR _iloœæ_zakrêceñ$[ebp]
  00084	0f 8d d8 00 00
	00		 jge	 $LN3@Zakr?

; 246  : 		for (int ii = 0; ii < 37; ++ii) //Przejœcie przez wszystkie pozycje ruletki

  0008a	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _ii$7[ebp], 0
  00091	eb 09		 jmp	 SHORT $LN7@Zakr?
$LN5@Zakr?:
  00093	8b 45 d0	 mov	 eax, DWORD PTR _ii$7[ebp]
  00096	83 c0 01	 add	 eax, 1
  00099	89 45 d0	 mov	 DWORD PTR _ii$7[ebp], eax
$LN7@Zakr?:
  0009c	83 7d d0 25	 cmp	 DWORD PTR _ii$7[ebp], 37 ; 00000025H
  000a0	0f 8d b7 00 00
	00		 jge	 $LN6@Zakr?

; 247  : 		{
; 248  : 			Change_Col(Ruletka_plansza_kolor_col[Ruletka_ko³o[ii]]); //Zmiana koloru tekstu w konsoli zgodnie z kolorem numeru na ruletce

  000a6	8b 45 d0	 mov	 eax, DWORD PTR _ii$7[ebp]
  000a9	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?Ruletka_ko³o@@3QBHB[eax*4]
  000b0	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR ?Ruletka_plansza_kolor_col@@3QBHB[ecx*4]
  000b7	52		 push	 edx
  000b8	e8 00 00 00 00	 call	 ?Change_Col@@YAXABH@Z	; Change_Col
  000bd	83 c4 04	 add	 esp, 4

; 249  : 			cout << Ruletka_ko³o[ii]; //Wypisanie numeru na kole ruletki na którym znajduje siê pêtla

  000c0	8b f4		 mov	 esi, esp
  000c2	8b 45 d0	 mov	 eax, DWORD PTR _ii$7[ebp]
  000c5	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?Ruletka_ko³o@@3QBHB[eax*4]
  000cc	51		 push	 ecx
  000cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  000d9	3b f4		 cmp	 esi, esp
  000db	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 250  : 			Sleep((DWORD)(czas_przeskoku_kulki_szybki_opóŸnienie*((double)i*37.0 + (double)ii))); //Przestój który zwiêksza siê co zmianê pozycji pêtli

  000e0	f2 0f 2a 45 dc	 cvtsi2sd xmm0, DWORD PTR _i$8[ebp]
  000e5	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4042800000000000
  000ed	f2 0f 2a 4d d0	 cvtsi2sd xmm1, DWORD PTR _ii$7[ebp]
  000f2	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000f6	f2 0f 59 45 e8	 mulsd	 xmm0, QWORD PTR _czas_przeskoku_kulki_szybki_opóŸnienie$[ebp]
  000fb	e8 00 00 00 00	 call	 __dtoui3
  00100	8b f4		 mov	 esi, esp
  00102	50		 push	 eax
  00103	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4
  00109	3b f4		 cmp	 esi, esp
  0010b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 251  : 			Change_Col(7); //Powrót do standardowego koloru tekstu w konsoli

  00110	c7 85 dc fe ff
	ff 07 00 00 00	 mov	 DWORD PTR $T5[ebp], 7
  0011a	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 ?Change_Col@@YAXABH@Z	; Change_Col
  00126	83 c4 04	 add	 esp, 4

; 252  : 			cout << "\b\b" << "  " << "\b\b"; //Cofniêcie kursora tekstowego do lewej strony konsoli aby zape³niæ podem spacjami czyli niewidocznym znakiem wiersza konsoli aby widaæ przejœcie pomiêdzy liczbami na ruletce

  00129	68 00 00 00 00	 push	 OFFSET ??_C@_02MGHEPNFN@?$AI?$AI?$AA@
  0012e	68 00 00 00 00	 push	 OFFSET ??_C@_02KNHHEEKP@?5?5?$AA@
  00133	68 00 00 00 00	 push	 OFFSET ??_C@_02MGHEPNFN@?$AI?$AI?$AA@
  00138	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0013d	50		 push	 eax
  0013e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00143	83 c4 08	 add	 esp, 8
  00146	50		 push	 eax
  00147	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0014c	83 c4 08	 add	 esp, 8
  0014f	50		 push	 eax
  00150	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00155	83 c4 08	 add	 esp, 8

; 253  : 		}

  00158	e9 36 ff ff ff	 jmp	 $LN5@Zakr?
$LN6@Zakr?:
  0015d	e9 13 ff ff ff	 jmp	 $LN2@Zakr?
$LN3@Zakr?:

; 254  : 	int wylosowana_pozycja = Wylosuj(0, 36); //Deklarowanie i przpisanie zmiennej liczbowj zawieraj¹c¹ losow¹ lub pseudolosow¹ liczbê (o wysokiej pseoudolosowoœci) pozycjê na ruletce

  00162	c7 85 d0 fe ff
	ff 24 00 00 00	 mov	 DWORD PTR $T4[ebp], 36	; 00000024H
  0016c	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp], 0
  00176	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  0017c	50		 push	 eax
  0017d	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00183	51		 push	 ecx
  00184	e8 00 00 00 00	 call	 ?Wylosuj@@YAHABH0@Z	; Wylosuj
  00189	83 c4 08	 add	 esp, 8
  0018c	89 45 c4	 mov	 DWORD PTR _wylosowana_pozycja$[ebp], eax

; 255  : 	double czas_przeskoku_kulki_wolny_przyspieszenie = (czas_przeskoku_kulki_wolny - czas_przeskoku_kulki_szybki) / (double)(wylosowana_pozycja); //Deklarowanie i przpisanie zmiennej zmiennoprzecinkowej zawieraj¹c¹ czas o ile kolejna wartoœæ na kole ruletki powinna byæ szybciej pokazana

  0018f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?czas_przeskoku_kulki_wolny@@3FA ; czas_przeskoku_kulki_wolny
  00196	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR ?czas_przeskoku_kulki_szybki@@3FA ; czas_przeskoku_kulki_szybki
  0019d	2b c1		 sub	 eax, ecx
  0019f	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  001a3	f2 0f 2a 4d c4	 cvtsi2sd xmm1, DWORD PTR _wylosowana_pozycja$[ebp]
  001a8	f2 0f 5e c1	 divsd	 xmm0, xmm1
  001ac	f2 0f 11 45 b4	 movsd	 QWORD PTR _czas_przeskoku_kulki_wolny_przyspieszenie$[ebp], xmm0

; 256  : 	for (int i = 0; i < wylosowana_pozycja; ++i) //Przejœcie przez pozycje do pozycji o 1 mniejszej od wylosowanej pozyji na ruletce

  001b1	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _i$6[ebp], 0
  001b8	eb 09		 jmp	 SHORT $LN10@Zakr?
$LN8@Zakr?:
  001ba	8b 45 a8	 mov	 eax, DWORD PTR _i$6[ebp]
  001bd	83 c0 01	 add	 eax, 1
  001c0	89 45 a8	 mov	 DWORD PTR _i$6[ebp], eax
$LN10@Zakr?:
  001c3	8b 45 a8	 mov	 eax, DWORD PTR _i$6[ebp]
  001c6	3b 45 c4	 cmp	 eax, DWORD PTR _wylosowana_pozycja$[ebp]
  001c9	0f 8d b5 00 00
	00		 jge	 $LN9@Zakr?

; 257  : 	{
; 258  : 		Change_Col(Ruletka_plansza_kolor_col[Ruletka_ko³o[i]]); //Zmiana koloru tekstu w konsoli zgodnie z kolorem numeru na ruletce

  001cf	8b 45 a8	 mov	 eax, DWORD PTR _i$6[ebp]
  001d2	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?Ruletka_ko³o@@3QBHB[eax*4]
  001d9	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR ?Ruletka_plansza_kolor_col@@3QBHB[ecx*4]
  001e0	52		 push	 edx
  001e1	e8 00 00 00 00	 call	 ?Change_Col@@YAXABH@Z	; Change_Col
  001e6	83 c4 04	 add	 esp, 4

; 259  : 		cout << Ruletka_ko³o[i]; //Wypisanie numeru na kole ruletki na którym znajduje siê pêtla

  001e9	8b f4		 mov	 esi, esp
  001eb	8b 45 a8	 mov	 eax, DWORD PTR _i$6[ebp]
  001ee	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?Ruletka_ko³o@@3QBHB[eax*4]
  001f5	51		 push	 ecx
  001f6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00202	3b f4		 cmp	 esi, esp
  00204	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 260  : 		Sleep((DWORD)(czas_przeskoku_kulki_szybki + (czas_przeskoku_kulki_wolny_przyspieszenie*i))); //Przestój który zwiêksza siê co zmianê pozycji pêtli

  00209	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?czas_przeskoku_kulki_szybki@@3FA ; czas_przeskoku_kulki_szybki
  00210	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  00214	f2 0f 2a 4d a8	 cvtsi2sd xmm1, DWORD PTR _i$6[ebp]
  00219	f2 0f 59 4d b4	 mulsd	 xmm1, QWORD PTR _czas_przeskoku_kulki_wolny_przyspieszenie$[ebp]
  0021e	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00222	e8 00 00 00 00	 call	 __dtoui3
  00227	8b f4		 mov	 esi, esp
  00229	50		 push	 eax
  0022a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4
  00230	3b f4		 cmp	 esi, esp
  00232	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 261  : 		Change_Col(7); //Powrót do standardowego koloru tekstu w konsoli

  00237	c7 85 b8 fe ff
	ff 07 00 00 00	 mov	 DWORD PTR $T2[ebp], 7
  00241	8d 85 b8 fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00247	50		 push	 eax
  00248	e8 00 00 00 00	 call	 ?Change_Col@@YAXABH@Z	; Change_Col
  0024d	83 c4 04	 add	 esp, 4

; 262  : 		cout << "\b\b" << "  " << "\b\b"; //Cofniêcie kursora tekstowego do lewej strony konsoli aby zape³niæ podem spacjami czyli niewidocznym znakiem wiersza konsoli aby widaæ przejœcie pomiêdzy liczbami na ruletce

  00250	68 00 00 00 00	 push	 OFFSET ??_C@_02MGHEPNFN@?$AI?$AI?$AA@
  00255	68 00 00 00 00	 push	 OFFSET ??_C@_02KNHHEEKP@?5?5?$AA@
  0025a	68 00 00 00 00	 push	 OFFSET ??_C@_02MGHEPNFN@?$AI?$AI?$AA@
  0025f	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00264	50		 push	 eax
  00265	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0026a	83 c4 08	 add	 esp, 8
  0026d	50		 push	 eax
  0026e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00273	83 c4 08	 add	 esp, 8
  00276	50		 push	 eax
  00277	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0027c	83 c4 08	 add	 esp, 8

; 263  : 	}

  0027f	e9 36 ff ff ff	 jmp	 $LN8@Zakr?
$LN9@Zakr?:

; 264  : 	cout << "Wylosowano numer "; //Poinformowanie o zakoñczeniu (wyœwietlania) losowania

  00284	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@IEHJKDDM@Wylosowano?5numer?5?$AA@
  00289	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0028e	50		 push	 eax
  0028f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00294	83 c4 08	 add	 esp, 8

; 265  : 	Change_Col(Ruletka_plansza_kolor_col[Ruletka_ko³o[wylosowana_pozycja]]);//Zmiana koloru tekstu w konsoli zgodnie z kolorem numeru na ruletce

  00297	8b 45 c4	 mov	 eax, DWORD PTR _wylosowana_pozycja$[ebp]
  0029a	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?Ruletka_ko³o@@3QBHB[eax*4]
  002a1	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR ?Ruletka_plansza_kolor_col@@3QBHB[ecx*4]
  002a8	52		 push	 edx
  002a9	e8 00 00 00 00	 call	 ?Change_Col@@YAXABH@Z	; Change_Col
  002ae	83 c4 04	 add	 esp, 4

; 266  : 	cout << Ruletka_ko³o[wylosowana_pozycja]; //Wypisanie liczby na wylosowanej pozycji ruletki

  002b1	8b f4		 mov	 esi, esp
  002b3	8b 45 c4	 mov	 eax, DWORD PTR _wylosowana_pozycja$[ebp]
  002b6	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?Ruletka_ko³o@@3QBHB[eax*4]
  002bd	51		 push	 ecx
  002be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  002c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  002ca	3b f4		 cmp	 esi, esp
  002cc	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 267  : 	Change_Col(7); //Powrót do standardowego koloru tekstu w konsoli

  002d1	c7 85 ac fe ff
	ff 07 00 00 00	 mov	 DWORD PTR $T1[ebp], 7
  002db	8d 85 ac fe ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  002e1	50		 push	 eax
  002e2	e8 00 00 00 00	 call	 ?Change_Col@@YAXABH@Z	; Change_Col
  002e7	83 c4 04	 add	 esp, 4

; 268  : 	cout << ". "; //Zakoñczenie tekstu kropk¹

  002ea	68 00 00 00 00	 push	 OFFSET ??_C@_02KHOJGJKF@?4?5?$AA@
  002ef	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  002f4	50		 push	 eax
  002f5	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002fa	83 c4 08	 add	 esp, 8

; 269  : 	Show_Cursor(); //Pokazanie kursora tekstowego w konsoli

  002fd	e8 00 00 00 00	 call	 ?Show_Cursor@@YAXXZ	; Show_Cursor

; 270  : 
; 271  : 	return Ruletka_ko³o[wylosowana_pozycja]; //Zwracam wartoœæ bêd¹c¹ na wylosowanym polu ruletki

  00302	8b 45 c4	 mov	 eax, DWORD PTR _wylosowana_pozycja$[ebp]
  00305	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?Ruletka_ko³o@@3QBHB[eax*4]

; 272  : }

  0030c	5f		 pop	 edi
  0030d	5e		 pop	 esi
  0030e	5b		 pop	 ebx
  0030f	81 c4 58 01 00
	00		 add	 esp, 344		; 00000158H
  00315	3b ec		 cmp	 ebp, esp
  00317	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0031c	8b e5		 mov	 esp, ebp
  0031e	5d		 pop	 ebp
  0031f	c3		 ret	 0
?Zakrêæ_Ruletk¹@@YAHXZ ENDP				; Zakrêæ_Ruletk¹
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?Wczytaj_Kwotê_Zak³adu@@YAXAAHABH@Z
_TEXT	SEGMENT
_i$2 = -72						; size = 2
_czy_zero$3 = -57					; size = 1
_kwota_zak³adu_s$ = -48					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_kwota_zak³adu$ = 8					; size = 4
_iloœæ_pieniêdzy$ = 12					; size = 4
?Wczytaj_Kwotê_Zak³adu@@YAXAAHABH@Z PROC		; Wczytaj_Kwotê_Zak³adu, COMDAT

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Wczytaj_Kwotê_Zak³adu@@YAXAAHABH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 00 01 00
	00		 sub	 esp, 256		; 00000100H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-268]
  00020	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 200  : 	string kwota_zak³adu_s; //Deklaracja zmiennej typu string do wczytywania kwoty aby zabezpieczyæ siê przed b³êdem wpisania do zmiennej liczbowej litery

  00040	8d 4d d0	 lea	 ecx, DWORD PTR _kwota_zak³adu_s$[ebp]
  00043	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
$LN2@Wczytaj_Kw:

; 201  : 
; 202  : 	while (true) //Rozpoczêcie pêtli nieskoñczonej

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	85 c0		 test	 eax, eax
  00056	0f 84 39 02 00
	00		 je	 $LN3@Wczytaj_Kw

; 203  : 	{
; 204  : 		cout << "Masz " << iloœæ_pieniêdzy << "$, jak¹ kwotê chcesz obstawiæ wynik?" << endl; //Podanie akualnego stanu konta i zadanie pytania o kwotê zak³adu

  0005c	8b f4		 mov	 esi, esp
  0005e	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BGACGNBA@$?0?5jak?$LJ?5kwot?j?5chcesz?5obstawi?f?5wy@
  00068	8b fc		 mov	 edi, esp
  0006a	8b 45 0c	 mov	 eax, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  0006d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006f	51		 push	 ecx
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_05OMMBNPEF@Masz?5?$AA@
  00075	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0007b	52		 push	 edx
  0007c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00081	83 c4 08	 add	 esp, 8
  00084	8b c8		 mov	 ecx, eax
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0008c	3b fc		 cmp	 edi, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00099	83 c4 08	 add	 esp, 8
  0009c	8b c8		 mov	 ecx, eax
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  000a4	3b f4		 cmp	 esi, esp
  000a6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 205  : 		cin >> kwota_zak³adu_s; //Pobranie w tekœcie kwoty zak³¹du

  000ab	8d 45 d0	 lea	 eax, DWORD PTR _kwota_zak³adu_s$[ebp]
  000ae	50		 push	 eax
  000af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  000b5	51		 push	 ecx
  000b6	e8 00 00 00 00	 call	 ??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
  000bb	83 c4 08	 add	 esp, 8

; 206  : 		kwota_zak³adu = atoi(kwota_zak³adu_s.c_str()); //Zmiana stringaa na inta i wpisanie do zmiennej kwota_zak³adu

  000be	8d 4d d0	 lea	 ecx, DWORD PTR _kwota_zak³adu_s$[ebp]
  000c1	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  000c6	8b f4		 mov	 esi, esp
  000c8	50		 push	 eax
  000c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  000cf	83 c4 04	 add	 esp, 4
  000d2	3b f4		 cmp	 esi, esp
  000d4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d9	8b 4d 08	 mov	 ecx, DWORD PTR _kwota_zak³adu$[ebp]
  000dc	89 01		 mov	 DWORD PTR [ecx], eax

; 207  : 		if (kwota_zak³adu > 0 && kwota_zak³adu <= iloœæ_pieniêdzy) //Sprawdzenie czy kwota zak³¹du jest wiêksza od zeri i mniejsza lub równa dostêpnej gotówce

  000de	8b 45 08	 mov	 eax, DWORD PTR _kwota_zak³adu$[ebp]
  000e1	83 38 00	 cmp	 DWORD PTR [eax], 0
  000e4	7e 16		 jle	 SHORT $LN7@Wczytaj_Kw
  000e6	8b 45 08	 mov	 eax, DWORD PTR _kwota_zak³adu$[ebp]
  000e9	8b 4d 0c	 mov	 ecx, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  000ec	8b 10		 mov	 edx, DWORD PTR [eax]
  000ee	3b 11		 cmp	 edx, DWORD PTR [ecx]
  000f0	7f 0a		 jg	 SHORT $LN7@Wczytaj_Kw

; 208  : 			break; //Je¿eli tak to zatrzymuje pêtle

  000f2	e9 9e 01 00 00	 jmp	 $LN3@Wczytaj_Kw

; 209  : 		else //W przeciwym wypadku

  000f7	e9 94 01 00 00	 jmp	 $LN8@Wczytaj_Kw
$LN7@Wczytaj_Kw:

; 210  : 			if (kwota_zak³adu == 0) //Je¿eli wynikiem zamiany na liczbê jest zero (wynikiem zamiany jest zero kiedy tekst to zero lub kiedy jest b³¹d zamiany) to

  000fc	8b 45 08	 mov	 eax, DWORD PTR _kwota_zak³adu$[ebp]
  000ff	83 38 00	 cmp	 DWORD PTR [eax], 0
  00102	0f 85 e4 00 00
	00		 jne	 $LN9@Wczytaj_Kw

; 211  : 			{
; 212  : 				bool czy_zero = true; //Utworzenie zmiennej informuj¹cej czy znaleziono zero w tekœcie i przypisanie jej wartoœci true

  00108	c6 45 c7 01	 mov	 BYTE PTR _czy_zero$3[ebp], 1

; 213  : 				for (short i = 0; i < (short)kwota_zak³adu_s.size(); ++i) //Rozpoczêcie pêtli numerowanej przez zmienn¹ i przez wszystkie znaki wczytanego tekst

  0010c	33 c0		 xor	 eax, eax
  0010e	66 89 45 b8	 mov	 WORD PTR _i$2[ebp], ax
  00112	eb 0c		 jmp	 SHORT $LN6@Wczytaj_Kw
$LN4@Wczytaj_Kw:
  00114	66 8b 45 b8	 mov	 ax, WORD PTR _i$2[ebp]
  00118	66 83 c0 01	 add	 ax, 1
  0011c	66 89 45 b8	 mov	 WORD PTR _i$2[ebp], ax
$LN6@Wczytaj_Kw:
  00120	0f bf 75 b8	 movsx	 esi, WORD PTR _i$2[ebp]
  00124	8d 4d d0	 lea	 ecx, DWORD PTR _kwota_zak³adu_s$[ebp]
  00127	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  0012c	98		 cwde
  0012d	3b f0		 cmp	 esi, eax
  0012f	7d 67		 jge	 SHORT $LN5@Wczytaj_Kw

; 214  : 					if (kwota_zak³adu_s[i] != '0') //Je¿eli znak na i-tej pozycji

  00131	0f bf 45 b8	 movsx	 eax, WORD PTR _i$2[ebp]
  00135	50		 push	 eax
  00136	8d 4d d0	 lea	 ecx, DWORD PTR _kwota_zak³adu_s$[ebp]
  00139	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0013e	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00141	83 f9 30	 cmp	 ecx, 48			; 00000030H
  00144	74 4d		 je	 SHORT $LN11@Wczytaj_Kw

; 215  : 					{
; 216  : 						cout << "Wprowadzi³eæ nieprawid³ow¹ wartoœæ" << endl; //Poinformowanie u¿ytkownika, ¿e nie mo¿e obstawiæ tekstowego

  00146	8b f4		 mov	 esi, esp
  00148	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0014d	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@OGNPPNBN@Wprowadzi?$LDe?f?5nieprawid?$LDow?$LJ?5warto@
  00152	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00157	50		 push	 eax
  00158	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0015d	83 c4 08	 add	 esp, 8
  00160	8b c8		 mov	 ecx, eax
  00162	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00168	3b f4		 cmp	 esi, esp
  0016a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 217  : 						if (stan_dŸwiêków) cout << "\a"; //Wywo³anie pikniêcia w g³oœniku

  0016f	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?stan_dŸwiêków@@3FA ; stan_dŸwiêków
  00176	85 c0		 test	 eax, eax
  00178	74 13		 je	 SHORT $LN12@Wczytaj_Kw
  0017a	68 00 00 00 00	 push	 OFFSET ??_C@_01PBGHHLMH@?$AH?$AA@
  0017f	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00184	50		 push	 eax
  00185	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0018a	83 c4 08	 add	 esp, 8
$LN12@Wczytaj_Kw:

; 218  : 						czy_zero = false; //Zmiana wartoœci zmiennej czy znaleziono zero w tekœcie na false

  0018d	c6 45 c7 00	 mov	 BYTE PTR _czy_zero$3[ebp], 0

; 219  : 						break; //Zatrzymanie pêtli

  00191	eb 05		 jmp	 SHORT $LN5@Wczytaj_Kw
$LN11@Wczytaj_Kw:

; 220  : 					}

  00193	e9 7c ff ff ff	 jmp	 $LN4@Wczytaj_Kw
$LN5@Wczytaj_Kw:

; 221  : 				if (czy_zero) //Sprawdzenie czy znaleziono same zera w tekœcie, je¿eli tak to

  00198	0f b6 45 c7	 movzx	 eax, BYTE PTR _czy_zero$3[ebp]
  0019c	85 c0		 test	 eax, eax
  0019e	74 47		 je	 SHORT $LN13@Wczytaj_Kw

; 222  : 				{
; 223  : 					cout << "Nie mo¿esz obstawiæ zerowego zak³adu" << endl; //Poinformowanie u¿ytkownika, ¿e nie mo¿e obstawiæ zerowego zak³adu

  001a0	8b f4		 mov	 esi, esp
  001a2	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  001a7	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@LJDHNEHM@Nie?5mo?$LPesz?5obstawi?f?5zerowego?5zak@
  001ac	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001b1	50		 push	 eax
  001b2	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001b7	83 c4 08	 add	 esp, 8
  001ba	8b c8		 mov	 ecx, eax
  001bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  001c2	3b f4		 cmp	 esi, esp
  001c4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 224  : 					if (stan_dŸwiêków) cout << "\a"; //Wywo³anie pikniêcia w g³oœniku

  001c9	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?stan_dŸwiêków@@3FA ; stan_dŸwiêków
  001d0	85 c0		 test	 eax, eax
  001d2	74 13		 je	 SHORT $LN13@Wczytaj_Kw
  001d4	68 00 00 00 00	 push	 OFFSET ??_C@_01PBGHHLMH@?$AH?$AA@
  001d9	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001de	50		 push	 eax
  001df	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001e4	83 c4 08	 add	 esp, 8
$LN13@Wczytaj_Kw:

; 225  : 				}
; 226  : 			}

  001e7	e9 a4 00 00 00	 jmp	 $LN8@Wczytaj_Kw
$LN9@Wczytaj_Kw:

; 227  : 			else if (kwota_zak³adu > iloœæ_pieniêdzy) //Je¿eli u¿ytkownik chce obstawiæ za wiêcej ni¿ ma, to

  001ec	8b 45 08	 mov	 eax, DWORD PTR _kwota_zak³adu$[ebp]
  001ef	8b 4d 0c	 mov	 ecx, DWORD PTR _iloœæ_pieniêdzy$[ebp]
  001f2	8b 10		 mov	 edx, DWORD PTR [eax]
  001f4	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001f6	7e 49		 jle	 SHORT $LN15@Wczytaj_Kw

; 228  : 			{
; 229  : 				cout << "Nie masz tyle pieniêdzy" << endl; //Poinformowanie go o tym

  001f8	8b f4		 mov	 esi, esp
  001fa	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  001ff	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CMKDFAEK@Nie?5masz?5tyle?5pieni?jdzy?$AA@
  00204	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00209	50		 push	 eax
  0020a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0020f	83 c4 08	 add	 esp, 8
  00212	8b c8		 mov	 ecx, eax
  00214	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0021a	3b f4		 cmp	 esi, esp
  0021c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 230  : 				if (stan_dŸwiêków) cout << "\a"; //Wywo³anie pikniêcia w g³oœniku

  00221	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?stan_dŸwiêków@@3FA ; stan_dŸwiêków
  00228	85 c0		 test	 eax, eax
  0022a	74 13		 je	 SHORT $LN17@Wczytaj_Kw
  0022c	68 00 00 00 00	 push	 OFFSET ??_C@_01PBGHHLMH@?$AH?$AA@
  00231	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00236	50		 push	 eax
  00237	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0023c	83 c4 08	 add	 esp, 8
$LN17@Wczytaj_Kw:

; 231  : 			}

  0023f	eb 4f		 jmp	 SHORT $LN8@Wczytaj_Kw
$LN15@Wczytaj_Kw:

; 232  : 			else if (kwota_zak³adu < 0) //Je¿eli u¿ytkownik chce obstawiæ za ujemn¹ kwotê, to

  00241	8b 45 08	 mov	 eax, DWORD PTR _kwota_zak³adu$[ebp]
  00244	83 38 00	 cmp	 DWORD PTR [eax], 0
  00247	7d 47		 jge	 SHORT $LN8@Wczytaj_Kw

; 233  : 			{
; 234  : 				cout << "Nie mo¿esz obstawiæ ujemn¹ kwot¹ zak³adu" << endl; //Poinformowanie go o tym

  00249	8b f4		 mov	 esi, esp
  0024b	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00250	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@PMIHJCIC@Nie?5mo?$LPesz?5obstawi?f?5ujemn?$LJ?5kwot?$LJ@
  00255	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0025a	50		 push	 eax
  0025b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00260	83 c4 08	 add	 esp, 8
  00263	8b c8		 mov	 ecx, eax
  00265	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0026b	3b f4		 cmp	 esi, esp
  0026d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 235  : 				if (stan_dŸwiêków) cout << "\a"; //Wywo³anie pikniêcia w g³oœniku

  00272	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?stan_dŸwiêków@@3FA ; stan_dŸwiêków
  00279	85 c0		 test	 eax, eax
  0027b	74 13		 je	 SHORT $LN8@Wczytaj_Kw
  0027d	68 00 00 00 00	 push	 OFFSET ??_C@_01PBGHHLMH@?$AH?$AA@
  00282	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00287	50		 push	 eax
  00288	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0028d	83 c4 08	 add	 esp, 8
$LN8@Wczytaj_Kw:

; 236  : 			}
; 237  : 	}

  00290	e9 ba fd ff ff	 jmp	 $LN2@Wczytaj_Kw
$LN3@Wczytaj_Kw:

; 238  : }

  00295	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0029c	8d 4d d0	 lea	 ecx, DWORD PTR _kwota_zak³adu_s$[ebp]
  0029f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  002a4	52		 push	 edx
  002a5	8b cd		 mov	 ecx, ebp
  002a7	50		 push	 eax
  002a8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN25@Wczytaj_Kw
  002ae	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  002b3	58		 pop	 eax
  002b4	5a		 pop	 edx
  002b5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002b8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002bf	59		 pop	 ecx
  002c0	5f		 pop	 edi
  002c1	5e		 pop	 esi
  002c2	5b		 pop	 ebx
  002c3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002c6	33 cd		 xor	 ecx, ebp
  002c8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002cd	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  002d3	3b ec		 cmp	 ebp, esp
  002d5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002da	8b e5		 mov	 esp, ebp
  002dc	5d		 pop	 ebp
  002dd	c3		 ret	 0
  002de	66 90		 npad	 2
$LN25@Wczytaj_Kw:
  002e0	01 00 00 00	 DD	 1
  002e4	00 00 00 00	 DD	 $LN24@Wczytaj_Kw
$LN24@Wczytaj_Kw:
  002e8	d0 ff ff ff	 DD	 -48			; ffffffd0H
  002ec	1c 00 00 00	 DD	 28			; 0000001cH
  002f0	00 00 00 00	 DD	 $LN22@Wczytaj_Kw
$LN22@Wczytaj_Kw:
  002f4	6b		 DB	 107			; 0000006bH
  002f5	77		 DB	 119			; 00000077H
  002f6	6f		 DB	 111			; 0000006fH
  002f7	74		 DB	 116			; 00000074H
  002f8	61		 DB	 97			; 00000061H
  002f9	5f		 DB	 95			; 0000005fH
  002fa	7a		 DB	 122			; 0000007aH
  002fb	61		 DB	 97			; 00000061H
  002fc	6b		 DB	 107			; 0000006bH
  002fd	c5		 DB	 -59			; ffffffc5H
  002fe	82		 DB	 -126			; ffffff82H
  002ff	61		 DB	 97			; 00000061H
  00300	64		 DB	 100			; 00000064H
  00301	75		 DB	 117			; 00000075H
  00302	5f		 DB	 95			; 0000005fH
  00303	73		 DB	 115			; 00000073H
  00304	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Wczytaj_Kwotê_Zak³adu@@YAXAAHABH@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _kwota_zak³adu_s$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?Wczytaj_Kwotê_Zak³adu@@YAXAAHABH@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a f0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-272]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Wczytaj_Kwotê_Zak³adu@@YAXAAHABH@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Wczytaj_Kwotê_Zak³adu@@YAXAAHABH@Z ENDP		; Wczytaj_Kwotê_Zak³adu
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
$T2 = -252						; size = 4
_zaklad_typ$ = -48					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; Obstaw, COMDAT

; 119  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec f4 00 00
	00		 sub	 esp, 244		; 000000f4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 00 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-256]
  00020	b9 3d 00 00 00	 mov	 ecx, 61			; 0000003dH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 120  : 	string zaklad_typ; //Deklaracja zmiennej typu string przechowywuj¹cej typ zak³adu

  0004a	8d 4d d0	 lea	 ecx, DWORD PTR _zaklad_typ$[ebp]
  0004d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
$LN4@Obstaw:

; 121  : 
; 122  : 	do { //Pêtla do aby wykona³a siê conajmniej raz
; 123  : 		cout << "Jak¹ opcje chcesz obstawic ? (zgodnie z poni¿szym opisem) :" << endl; //Zadanie pytania u¿ytkownikowi

  00059	8b f4		 mov	 esi, esp
  0005b	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@FGCBIOFJ@Jak?$LJ?5opcje?5chcesz?5obstawic?5?$DP?5?$CIzg@
  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00070	83 c4 08	 add	 esp, 8
  00073	8b c8		 mov	 ecx, eax
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 124  : 		cout << "p - parzyste" << endl; //Wskazaæ mo¿liw¹ odpowiedŸ

  00082	8b f4		 mov	 esi, esp
  00084	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00089	68 00 00 00 00	 push	 OFFSET ??_C@_0N@KLINIBPG@p?5?9?5parzyste?$AA@
  0008e	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00099	83 c4 08	 add	 esp, 8
  0009c	8b c8		 mov	 ecx, eax
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  000a4	3b f4		 cmp	 esi, esp
  000a6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 125  : 		cout << "n - nieparzyste" << endl; //Wskazaæ mo¿liw¹ odpowiedŸ

  000ab	8b f4		 mov	 esi, esp
  000ad	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  000b2	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GNAADEAG@n?5?9?5nieparzyste?$AA@
  000b7	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000c2	83 c4 08	 add	 esp, 8
  000c5	8b c8		 mov	 ecx, eax
  000c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  000cd	3b f4		 cmp	 esi, esp
  000cf	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 126  : 		cout << "r - czerwone(red)" << endl; //Wskazaæ mo¿liw¹ odpowiedŸ

  000d4	8b f4		 mov	 esi, esp
  000d6	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@GOMOHEMO@r?5?9?5czerwone?$CIred?$CJ?$AA@
  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000eb	83 c4 08	 add	 esp, 8
  000ee	8b c8		 mov	 ecx, eax
  000f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  000f6	3b f4		 cmp	 esi, esp
  000f8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 127  : 		cout << "b - czarne(black)" << endl; //Wskazaæ mo¿liw¹ odpowiedŸ

  000fd	8b f4		 mov	 esi, esp
  000ff	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00104	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LKBFHLDI@b?5?9?5czarne?$CIblack?$CJ?$AA@
  00109	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0010e	50		 push	 eax
  0010f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00114	83 c4 08	 add	 esp, 8
  00117	8b c8		 mov	 ecx, eax
  00119	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0011f	3b f4		 cmp	 esi, esp
  00121	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 128  : 		cout << "g - górna po³owa" << endl; //Wskazaæ mo¿liw¹ odpowiedŸ

  00126	8b f4		 mov	 esi, esp
  00128	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0012d	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FMNKHOJE@g?5?9?5g?srna?5po?$LDowa?$AA@
  00132	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00137	50		 push	 eax
  00138	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0013d	83 c4 08	 add	 esp, 8
  00140	8b c8		 mov	 ecx, eax
  00142	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00148	3b f4		 cmp	 esi, esp
  0014a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 129  : 		cout << "d - dolna po³owa" << endl; //Wskazaæ mo¿liw¹ odpowiedŸ

  0014f	8b f4		 mov	 esi, esp
  00151	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00156	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@CHNPGJIO@d?5?9?5dolna?5po?$LDowa?$AA@
  0015b	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00160	50		 push	 eax
  00161	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00166	83 c4 08	 add	 esp, 8
  00169	8b c8		 mov	 ecx, eax
  0016b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00171	3b f4		 cmp	 esi, esp
  00173	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 130  : 		cout << "k1, k2, k3 - kolumna 1, kolumna 2, kolumna 3" << endl; //Wskazaæ mo¿liw¹ odpowiedŸ

  00178	8b f4		 mov	 esi, esp
  0017a	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0017f	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@EJBDEIIK@k1?0?5k2?0?5k3?5?9?5kolumna?51?0?5kolumna?5@
  00184	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00189	50		 push	 eax
  0018a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0018f	83 c4 08	 add	 esp, 8
  00192	8b c8		 mov	 ecx, eax
  00194	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0019a	3b f4		 cmp	 esi, esp
  0019c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 131  : 		cout << "w1, w2, ..., w12 - wiersz trzech numerów" << endl; //Wskazaæ mo¿liw¹ odpowiedŸ

  001a1	8b f4		 mov	 esi, esp
  001a3	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  001a8	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@KMEGGBFA@w1?0?5w2?0?5?4?4?4?0?5w12?5?9?5wiersz?5trzech@
  001ad	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001b2	50		 push	 eax
  001b3	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001b8	83 c4 08	 add	 esp, 8
  001bb	8b c8		 mov	 ecx, eax
  001bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  001c3	3b f4		 cmp	 esi, esp
  001c5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 132  : 		cout << "0 - 36 - pojedyncze pole o odpowiednim numerze" << endl; //Wskazaæ mo¿liw¹ odpowiedŸ

  001ca	8b f4		 mov	 esi, esp
  001cc	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  001d1	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@FOKBNGLG@0?5?9?536?5?9?5pojedyncze?5pole?5o?5odpow@
  001d6	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001db	50		 push	 eax
  001dc	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001e1	83 c4 08	 add	 esp, 8
  001e4	8b c8		 mov	 ecx, eax
  001e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  001ec	3b f4		 cmp	 esi, esp
  001ee	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 133  : 		cin >> zaklad_typ; //Pobranie od u¿ytkownika odpowiedzi na pytanie

  001f3	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  001f6	50		 push	 eax
  001f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  001fd	51		 push	 ecx
  001fe	e8 00 00 00 00	 call	 ??$?5DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator>><char,std::char_traits<char>,std::allocator<char> >
  00203	83 c4 08	 add	 esp, 8

; 134  : 	} while ( //U¿ywam takiej sk³adni poniewa¿ jeœli masz wyra¿enie z logicznymi operatorami && lub ||, to w momencie gdy wynik wyra¿enia ju¿ jest znany, to nie jest wyliczany dalej. (Poniewa¿ C++ jest "leniwe", co zarazem jest optymalne)
; 135  : 		zaklad_typ != "p" && //Sprawdzanie czy wprowadzono zak³ad na liczby parzyste
; 136  : 		zaklad_typ != "n" && //Sprawdzanie czy wprowadzono zak³ad na liczby nieparzyste
; 137  : 		zaklad_typ != "r" && //Sprawdzanie czy wprowadzono zak³ad na czerwone liczby
; 138  : 		zaklad_typ != "b" && //Sprawdzanie czy wprowadzono zak³ad na czarne liczby
; 139  : 		zaklad_typ != "g" && //Sprawdzanie czy wprowadzono zak³ad na liczby z górnej po³ówki
; 140  : 		zaklad_typ != "d" && //Sprawdzanie czy wprowadzono zak³ad na liczby z dolnej po³ówki
; 141  : 		zaklad_typ != "k1" && //Sprawdzanie czy wprowadzono zak³ad na liczby z kolumny 1
; 142  : 		zaklad_typ != "k2" && //Sprawdzanie czy wprowadzono zak³ad na liczby z kolumny 2
; 143  : 		zaklad_typ != "k3" && //Sprawdzanie czy wprowadzono zak³ad na liczby z kolumny 3
; 144  : 		zaklad_typ != "w1" && //Sprawdzanie czy wprowadzono zak³ad na liczby z wiersza 1
; 145  : 		zaklad_typ != "w2" && //Sprawdzanie czy wprowadzono zak³ad na liczby z wiersza 2
; 146  : 		zaklad_typ != "w3" && //Sprawdzanie czy wprowadzono zak³ad na liczby z wiersza 3
; 147  : 		zaklad_typ != "w4" && //Sprawdzanie czy wprowadzono zak³ad na liczby z wiersza 4
; 148  : 		zaklad_typ != "w5" && //Sprawdzanie czy wprowadzono zak³ad na liczby z wiersza 5
; 149  : 		zaklad_typ != "w6" && //Sprawdzanie czy wprowadzono zak³ad na liczby z wiersza 6
; 150  : 		zaklad_typ != "w7" && //Sprawdzanie czy wprowadzono zak³ad na liczby z wiersza 7
; 151  : 		zaklad_typ != "w8" && //Sprawdzanie czy wprowadzono zak³ad na liczby z wiersza 8
; 152  : 		zaklad_typ != "w9" && //Sprawdzanie czy wprowadzono zak³ad na liczby z wiersza 9
; 153  : 		zaklad_typ != "w10" && //Sprawdzanie czy wprowadzono zak³ad na liczby z wiersza 10
; 154  : 		zaklad_typ != "w11" && //Sprawdzanie czy wprowadzono zak³ad na liczby z wiersza 11
; 155  : 		zaklad_typ != "w12" && //Sprawdzanie czy wprowadzono zak³ad na liczby z wiersza 12
; 156  : 		zaklad_typ != "0" && //Sprawdzanie czy wprowadzono zak³ad na cyfrê 0
; 157  : 		zaklad_typ != "1" && //Sprawdzanie czy wprowadzono zak³ad na cyfrê 1
; 158  : 		zaklad_typ != "2" && //Sprawdzanie czy wprowadzono zak³ad na cyfrê 2
; 159  : 		zaklad_typ != "3" && //Sprawdzanie czy wprowadzono zak³ad na cyfrê 3
; 160  : 		zaklad_typ != "4" && //Sprawdzanie czy wprowadzono zak³ad na cyfrê 4
; 161  : 		zaklad_typ != "5" && //Sprawdzanie czy wprowadzono zak³ad na cyfrê 5
; 162  : 		zaklad_typ != "6" && //Sprawdzanie czy wprowadzono zak³ad na cyfrê 6
; 163  : 		zaklad_typ != "7" && //Sprawdzanie czy wprowadzono zak³ad na cyfrê 7
; 164  : 		zaklad_typ != "8" && //Sprawdzanie czy wprowadzono zak³ad na cyfrê 8
; 165  : 		zaklad_typ != "9" && //Sprawdzanie czy wprowadzono zak³ad na cyfrê 9
; 166  : 		zaklad_typ != "10" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 10
; 167  : 		zaklad_typ != "11" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 11
; 168  : 		zaklad_typ != "12" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 12
; 169  : 		zaklad_typ != "13" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 13
; 170  : 		zaklad_typ != "14" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 14
; 171  : 		zaklad_typ != "15" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 15
; 172  : 		zaklad_typ != "16" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 16
; 173  : 		zaklad_typ != "17" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 17
; 174  : 		zaklad_typ != "18" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 18
; 175  : 		zaklad_typ != "19" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 19
; 176  : 		zaklad_typ != "20" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 20
; 177  : 		zaklad_typ != "21" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 21
; 178  : 		zaklad_typ != "22" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 22
; 179  : 		zaklad_typ != "23" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 23
; 180  : 		zaklad_typ != "24" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 24
; 181  : 		zaklad_typ != "25" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 25
; 182  : 		zaklad_typ != "26" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 26
; 183  : 		zaklad_typ != "27" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 27
; 184  : 		zaklad_typ != "28" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 28
; 185  : 		zaklad_typ != "29" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 29
; 186  : 		zaklad_typ != "30" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 30
; 187  : 		zaklad_typ != "31" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 31
; 188  : 		zaklad_typ != "32" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 32
; 189  : 		zaklad_typ != "33" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 33
; 190  : 		zaklad_typ != "34" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 34
; 191  : 		zaklad_typ != "35" && //Sprawdzanie czy wprowadzono zak³ad na liczbê 35

  00206	68 00 00 00 00	 push	 OFFSET ??_C@_01JBBJJEPG@p?$AA@
  0020b	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  0020e	50		 push	 eax
  0020f	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00214	83 c4 08	 add	 esp, 8
  00217	0f b6 c8	 movzx	 ecx, al
  0021a	85 c9		 test	 ecx, ecx
  0021c	0f 84 28 06 00
	00		 je	 $LN3@Obstaw
  00222	68 00 00 00 00	 push	 OFFSET ??_C@_01EFFIKLCJ@n?$AA@
  00227	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  0022a	50		 push	 eax
  0022b	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00230	83 c4 08	 add	 esp, 8
  00233	0f b6 c8	 movzx	 ecx, al
  00236	85 c9		 test	 ecx, ecx
  00238	0f 84 0c 06 00
	00		 je	 $LN3@Obstaw
  0023e	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00243	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  00246	50		 push	 eax
  00247	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  0024c	83 c4 08	 add	 esp, 8
  0024f	0f b6 c8	 movzx	 ecx, al
  00252	85 c9		 test	 ecx, ecx
  00254	0f 84 f0 05 00
	00		 je	 $LN3@Obstaw
  0025a	68 00 00 00 00	 push	 OFFSET ??_C@_01OJONOECF@b?$AA@
  0025f	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  00262	50		 push	 eax
  00263	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00268	83 c4 08	 add	 esp, 8
  0026b	0f b6 c8	 movzx	 ecx, al
  0026e	85 c9		 test	 ecx, ecx
  00270	0f 84 d4 05 00
	00		 je	 $LN3@Obstaw
  00276	68 00 00 00 00	 push	 OFFSET ??_C@_01JEJKBAGA@g?$AA@
  0027b	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  0027e	50		 push	 eax
  0027f	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00284	83 c4 08	 add	 esp, 8
  00287	0f b6 c8	 movzx	 ecx, al
  0028a	85 c9		 test	 ecx, ecx
  0028c	0f 84 b8 05 00
	00		 je	 $LN3@Obstaw
  00292	68 00 00 00 00	 push	 OFFSET ??_C@_01LPLHEDKD@d?$AA@
  00297	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  0029a	50		 push	 eax
  0029b	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  002a0	83 c4 08	 add	 esp, 8
  002a3	0f b6 c8	 movzx	 ecx, al
  002a6	85 c9		 test	 ecx, ecx
  002a8	0f 84 9c 05 00
	00		 je	 $LN3@Obstaw
  002ae	68 00 00 00 00	 push	 OFFSET ??_C@_02ICGBAFJO@k1?$AA@
  002b3	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  002b6	50		 push	 eax
  002b7	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  002bc	83 c4 08	 add	 esp, 8
  002bf	0f b6 c8	 movzx	 ecx, al
  002c2	85 c9		 test	 ecx, ecx
  002c4	0f 84 80 05 00
	00		 je	 $LN3@Obstaw
  002ca	68 00 00 00 00	 push	 OFFSET ??_C@_02KJEMFGFN@k2?$AA@
  002cf	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  002d2	50		 push	 eax
  002d3	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  002d8	83 c4 08	 add	 esp, 8
  002db	0f b6 c8	 movzx	 ecx, al
  002de	85 c9		 test	 ecx, ecx
  002e0	0f 84 64 05 00
	00		 je	 $LN3@Obstaw
  002e6	68 00 00 00 00	 push	 OFFSET ??_C@_02LAFHGHBM@k3?$AA@
  002eb	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  002ee	50		 push	 eax
  002ef	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  002f4	83 c4 08	 add	 esp, 8
  002f7	0f b6 c8	 movzx	 ecx, al
  002fa	85 c9		 test	 ecx, ecx
  002fc	0f 84 48 05 00
	00		 je	 $LN3@Obstaw
  00302	68 00 00 00 00	 push	 OFFSET ??_C@_02JHFNFPIK@w1?$AA@
  00307	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  0030a	50		 push	 eax
  0030b	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00310	83 c4 08	 add	 esp, 8
  00313	0f b6 c8	 movzx	 ecx, al
  00316	85 c9		 test	 ecx, ecx
  00318	0f 84 2c 05 00
	00		 je	 $LN3@Obstaw
  0031e	68 00 00 00 00	 push	 OFFSET ??_C@_02LMHAAMEJ@w2?$AA@
  00323	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  00326	50		 push	 eax
  00327	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  0032c	83 c4 08	 add	 esp, 8
  0032f	0f b6 c8	 movzx	 ecx, al
  00332	85 c9		 test	 ecx, ecx
  00334	0f 84 10 05 00
	00		 je	 $LN3@Obstaw
  0033a	68 00 00 00 00	 push	 OFFSET ??_C@_02KFGLDNAI@w3?$AA@
  0033f	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  00342	50		 push	 eax
  00343	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00348	83 c4 08	 add	 esp, 8
  0034b	0f b6 c8	 movzx	 ecx, al
  0034e	85 c9		 test	 ecx, ecx
  00350	0f 84 f4 04 00
	00		 je	 $LN3@Obstaw
  00356	68 00 00 00 00	 push	 OFFSET ??_C@_02OKCKKLMP@w4?$AA@
  0035b	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  0035e	50		 push	 eax
  0035f	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00364	83 c4 08	 add	 esp, 8
  00367	0f b6 c8	 movzx	 ecx, al
  0036a	85 c9		 test	 ecx, ecx
  0036c	0f 84 d8 04 00
	00		 je	 $LN3@Obstaw
  00372	68 00 00 00 00	 push	 OFFSET ??_C@_02PDDBJKIO@w5?$AA@
  00377	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  0037a	50		 push	 eax
  0037b	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00380	83 c4 08	 add	 esp, 8
  00383	0f b6 c8	 movzx	 ecx, al
  00386	85 c9		 test	 ecx, ecx
  00388	0f 84 bc 04 00
	00		 je	 $LN3@Obstaw
  0038e	68 00 00 00 00	 push	 OFFSET ??_C@_02NIBMMJEN@w6?$AA@
  00393	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  00396	50		 push	 eax
  00397	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  0039c	83 c4 08	 add	 esp, 8
  0039f	0f b6 c8	 movzx	 ecx, al
  003a2	85 c9		 test	 ecx, ecx
  003a4	0f 84 a0 04 00
	00		 je	 $LN3@Obstaw
  003aa	68 00 00 00 00	 push	 OFFSET ??_C@_02MBAHPIAM@w7?$AA@
  003af	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  003b2	50		 push	 eax
  003b3	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  003b8	83 c4 08	 add	 esp, 8
  003bb	0f b6 c8	 movzx	 ecx, al
  003be	85 c9		 test	 ecx, ecx
  003c0	0f 84 84 04 00
	00		 je	 $LN3@Obstaw
  003c6	68 00 00 00 00	 push	 OFFSET ??_C@_02EGJPOEMD@w8?$AA@
  003cb	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  003ce	50		 push	 eax
  003cf	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  003d4	83 c4 08	 add	 esp, 8
  003d7	0f b6 c8	 movzx	 ecx, al
  003da	85 c9		 test	 ecx, ecx
  003dc	0f 84 68 04 00
	00		 je	 $LN3@Obstaw
  003e2	68 00 00 00 00	 push	 OFFSET ??_C@_02FPIENFIC@w9?$AA@
  003e7	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  003ea	50		 push	 eax
  003eb	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  003f0	83 c4 08	 add	 esp, 8
  003f3	0f b6 c8	 movzx	 ecx, al
  003f6	85 c9		 test	 ecx, ecx
  003f8	0f 84 4c 04 00
	00		 je	 $LN3@Obstaw
  003fe	68 00 00 00 00	 push	 OFFSET ??_C@_03NCLMABJC@w10?$AA@
  00403	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  00406	50		 push	 eax
  00407	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  0040c	83 c4 08	 add	 esp, 8
  0040f	0f b6 c8	 movzx	 ecx, al
  00412	85 c9		 test	 ecx, ecx
  00414	0f 84 30 04 00
	00		 je	 $LN3@Obstaw
  0041a	68 00 00 00 00	 push	 OFFSET ??_C@_03MLKHDAND@w11?$AA@
  0041f	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  00422	50		 push	 eax
  00423	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00428	83 c4 08	 add	 esp, 8
  0042b	0f b6 c8	 movzx	 ecx, al
  0042e	85 c9		 test	 ecx, ecx
  00430	0f 84 14 04 00
	00		 je	 $LN3@Obstaw
  00436	68 00 00 00 00	 push	 OFFSET ??_C@_03OAIKGDBA@w12?$AA@
  0043b	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  0043e	50		 push	 eax
  0043f	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00444	83 c4 08	 add	 esp, 8
  00447	0f b6 c8	 movzx	 ecx, al
  0044a	85 c9		 test	 ecx, ecx
  0044c	0f 84 f8 03 00
	00		 je	 $LN3@Obstaw
  00452	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  00457	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  0045a	50		 push	 eax
  0045b	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00460	83 c4 08	 add	 esp, 8
  00463	0f b6 c8	 movzx	 ecx, al
  00466	85 c9		 test	 ecx, ecx
  00468	0f 84 dc 03 00
	00		 je	 $LN3@Obstaw
  0046e	68 00 00 00 00	 push	 OFFSET ??_C@_01HIHLOKLC@1?$AA@
  00473	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  00476	50		 push	 eax
  00477	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  0047c	83 c4 08	 add	 esp, 8
  0047f	0f b6 c8	 movzx	 ecx, al
  00482	85 c9		 test	 ecx, ecx
  00484	0f 84 c0 03 00
	00		 je	 $LN3@Obstaw
  0048a	68 00 00 00 00	 push	 OFFSET ??_C@_01FDFGLJHB@2?$AA@
  0048f	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  00492	50		 push	 eax
  00493	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00498	83 c4 08	 add	 esp, 8
  0049b	0f b6 c8	 movzx	 ecx, al
  0049e	85 c9		 test	 ecx, ecx
  004a0	0f 84 a4 03 00
	00		 je	 $LN3@Obstaw
  004a6	68 00 00 00 00	 push	 OFFSET ??_C@_01EKENIIDA@3?$AA@
  004ab	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  004ae	50		 push	 eax
  004af	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  004b4	83 c4 08	 add	 esp, 8
  004b7	0f b6 c8	 movzx	 ecx, al
  004ba	85 c9		 test	 ecx, ecx
  004bc	0f 84 88 03 00
	00		 je	 $LN3@Obstaw
  004c2	68 00 00 00 00	 push	 OFFSET ??_C@_01FAMBOPH@4?$AA@
  004c7	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  004ca	50		 push	 eax
  004cb	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  004d0	83 c4 08	 add	 esp, 8
  004d3	0f b6 c8	 movzx	 ecx, al
  004d6	85 c9		 test	 ecx, ecx
  004d8	0f 84 6c 03 00
	00		 je	 $LN3@Obstaw
  004de	68 00 00 00 00	 push	 OFFSET ??_C@_01BMBHCPLG@5?$AA@
  004e3	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  004e6	50		 push	 eax
  004e7	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  004ec	83 c4 08	 add	 esp, 8
  004ef	0f b6 c8	 movzx	 ecx, al
  004f2	85 c9		 test	 ecx, ecx
  004f4	0f 84 50 03 00
	00		 je	 $LN3@Obstaw
  004fa	68 00 00 00 00	 push	 OFFSET ??_C@_01DHDKHMHF@6?$AA@
  004ff	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  00502	50		 push	 eax
  00503	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00508	83 c4 08	 add	 esp, 8
  0050b	0f b6 c8	 movzx	 ecx, al
  0050e	85 c9		 test	 ecx, ecx
  00510	0f 84 34 03 00
	00		 je	 $LN3@Obstaw
  00516	68 00 00 00 00	 push	 OFFSET ??_C@_01COCBENDE@7?$AA@
  0051b	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  0051e	50		 push	 eax
  0051f	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00524	83 c4 08	 add	 esp, 8
  00527	0f b6 c8	 movzx	 ecx, al
  0052a	85 c9		 test	 ecx, ecx
  0052c	0f 84 18 03 00
	00		 je	 $LN3@Obstaw
  00532	68 00 00 00 00	 push	 OFFSET ??_C@_01KJLJFBPL@8?$AA@
  00537	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  0053a	50		 push	 eax
  0053b	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00540	83 c4 08	 add	 esp, 8
  00543	0f b6 c8	 movzx	 ecx, al
  00546	85 c9		 test	 ecx, ecx
  00548	0f 84 fc 02 00
	00		 je	 $LN3@Obstaw
  0054e	68 00 00 00 00	 push	 OFFSET ??_C@_01LAKCGALK@9?$AA@
  00553	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  00556	50		 push	 eax
  00557	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  0055c	83 c4 08	 add	 esp, 8
  0055f	0f b6 c8	 movzx	 ecx, al
  00562	85 c9		 test	 ecx, ecx
  00564	0f 84 e0 02 00
	00		 je	 $LN3@Obstaw
  0056a	68 00 00 00 00	 push	 OFFSET ??_C@_02PKFBJPLJ@10?$AA@
  0056f	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  00572	50		 push	 eax
  00573	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00578	83 c4 08	 add	 esp, 8
  0057b	0f b6 c8	 movzx	 ecx, al
  0057e	85 c9		 test	 ecx, ecx
  00580	0f 84 c4 02 00
	00		 je	 $LN3@Obstaw
  00586	68 00 00 00 00	 push	 OFFSET ??_C@_02ODEKKOPI@11?$AA@
  0058b	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  0058e	50		 push	 eax
  0058f	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00594	83 c4 08	 add	 esp, 8
  00597	0f b6 c8	 movzx	 ecx, al
  0059a	85 c9		 test	 ecx, ecx
  0059c	0f 84 a8 02 00
	00		 je	 $LN3@Obstaw
  005a2	68 00 00 00 00	 push	 OFFSET ??_C@_02MIGHPNDL@12?$AA@
  005a7	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  005aa	50		 push	 eax
  005ab	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  005b0	83 c4 08	 add	 esp, 8
  005b3	0f b6 c8	 movzx	 ecx, al
  005b6	85 c9		 test	 ecx, ecx
  005b8	0f 84 8c 02 00
	00		 je	 $LN3@Obstaw
  005be	68 00 00 00 00	 push	 OFFSET ??_C@_02NBHMMMHK@13?$AA@
  005c3	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  005c6	50		 push	 eax
  005c7	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  005cc	83 c4 08	 add	 esp, 8
  005cf	0f b6 c8	 movzx	 ecx, al
  005d2	85 c9		 test	 ecx, ecx
  005d4	0f 84 70 02 00
	00		 je	 $LN3@Obstaw
  005da	68 00 00 00 00	 push	 OFFSET ??_C@_02JODNFKLN@14?$AA@
  005df	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  005e2	50		 push	 eax
  005e3	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  005e8	83 c4 08	 add	 esp, 8
  005eb	0f b6 c8	 movzx	 ecx, al
  005ee	85 c9		 test	 ecx, ecx
  005f0	0f 84 54 02 00
	00		 je	 $LN3@Obstaw
  005f6	68 00 00 00 00	 push	 OFFSET ??_C@_02IHCGGLPM@15?$AA@
  005fb	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  005fe	50		 push	 eax
  005ff	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00604	83 c4 08	 add	 esp, 8
  00607	0f b6 c8	 movzx	 ecx, al
  0060a	85 c9		 test	 ecx, ecx
  0060c	0f 84 38 02 00
	00		 je	 $LN3@Obstaw
  00612	68 00 00 00 00	 push	 OFFSET ??_C@_02KMALDIDP@16?$AA@
  00617	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  0061a	50		 push	 eax
  0061b	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00620	83 c4 08	 add	 esp, 8
  00623	0f b6 c8	 movzx	 ecx, al
  00626	85 c9		 test	 ecx, ecx
  00628	0f 84 1c 02 00
	00		 je	 $LN3@Obstaw
  0062e	68 00 00 00 00	 push	 OFFSET ??_C@_02LFBAAJHO@17?$AA@
  00633	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  00636	50		 push	 eax
  00637	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  0063c	83 c4 08	 add	 esp, 8
  0063f	0f b6 c8	 movzx	 ecx, al
  00642	85 c9		 test	 ecx, ecx
  00644	0f 84 00 02 00
	00		 je	 $LN3@Obstaw
  0064a	68 00 00 00 00	 push	 OFFSET ??_C@_02DCIIBFLB@18?$AA@
  0064f	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  00652	50		 push	 eax
  00653	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00658	83 c4 08	 add	 esp, 8
  0065b	0f b6 c8	 movzx	 ecx, al
  0065e	85 c9		 test	 ecx, ecx
  00660	0f 84 e4 01 00
	00		 je	 $LN3@Obstaw
  00666	68 00 00 00 00	 push	 OFFSET ??_C@_02CLJDCEPA@19?$AA@
  0066b	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  0066e	50		 push	 eax
  0066f	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00674	83 c4 08	 add	 esp, 8
  00677	0f b6 c8	 movzx	 ecx, al
  0067a	85 c9		 test	 ecx, ecx
  0067c	0f 84 c8 01 00
	00		 je	 $LN3@Obstaw
  00682	68 00 00 00 00	 push	 OFFSET ??_C@_02PIBHCBOA@20?$AA@
  00687	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  0068a	50		 push	 eax
  0068b	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00690	83 c4 08	 add	 esp, 8
  00693	0f b6 c8	 movzx	 ecx, al
  00696	85 c9		 test	 ecx, ecx
  00698	0f 84 ac 01 00
	00		 je	 $LN3@Obstaw
  0069e	68 00 00 00 00	 push	 OFFSET ??_C@_02OBAMBAKB@21?$AA@
  006a3	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  006a6	50		 push	 eax
  006a7	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  006ac	83 c4 08	 add	 esp, 8
  006af	0f b6 c8	 movzx	 ecx, al
  006b2	85 c9		 test	 ecx, ecx
  006b4	0f 84 90 01 00
	00		 je	 $LN3@Obstaw
  006ba	68 00 00 00 00	 push	 OFFSET ??_C@_02MKCBEDGC@22?$AA@
  006bf	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  006c2	50		 push	 eax
  006c3	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  006c8	83 c4 08	 add	 esp, 8
  006cb	0f b6 c8	 movzx	 ecx, al
  006ce	85 c9		 test	 ecx, ecx
  006d0	0f 84 74 01 00
	00		 je	 $LN3@Obstaw
  006d6	68 00 00 00 00	 push	 OFFSET ??_C@_02NDDKHCCD@23?$AA@
  006db	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  006de	50		 push	 eax
  006df	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  006e4	83 c4 08	 add	 esp, 8
  006e7	0f b6 c8	 movzx	 ecx, al
  006ea	85 c9		 test	 ecx, ecx
  006ec	0f 84 58 01 00
	00		 je	 $LN3@Obstaw
  006f2	68 00 00 00 00	 push	 OFFSET ??_C@_02JMHLOEOE@24?$AA@
  006f7	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  006fa	50		 push	 eax
  006fb	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00700	83 c4 08	 add	 esp, 8
  00703	0f b6 c8	 movzx	 ecx, al
  00706	85 c9		 test	 ecx, ecx
  00708	0f 84 3c 01 00
	00		 je	 $LN3@Obstaw
  0070e	68 00 00 00 00	 push	 OFFSET ??_C@_02IFGANFKF@25?$AA@
  00713	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  00716	50		 push	 eax
  00717	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  0071c	83 c4 08	 add	 esp, 8
  0071f	0f b6 c8	 movzx	 ecx, al
  00722	85 c9		 test	 ecx, ecx
  00724	0f 84 20 01 00
	00		 je	 $LN3@Obstaw
  0072a	68 00 00 00 00	 push	 OFFSET ??_C@_02KOENIGGG@26?$AA@
  0072f	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  00732	50		 push	 eax
  00733	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00738	83 c4 08	 add	 esp, 8
  0073b	0f b6 c8	 movzx	 ecx, al
  0073e	85 c9		 test	 ecx, ecx
  00740	0f 84 04 01 00
	00		 je	 $LN3@Obstaw
  00746	68 00 00 00 00	 push	 OFFSET ??_C@_02LHFGLHCH@27?$AA@
  0074b	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  0074e	50		 push	 eax
  0074f	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00754	83 c4 08	 add	 esp, 8
  00757	0f b6 c8	 movzx	 ecx, al
  0075a	85 c9		 test	 ecx, ecx
  0075c	0f 84 e8 00 00
	00		 je	 $LN3@Obstaw
  00762	68 00 00 00 00	 push	 OFFSET ??_C@_02DAMOKLOI@28?$AA@
  00767	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  0076a	50		 push	 eax
  0076b	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00770	83 c4 08	 add	 esp, 8
  00773	0f b6 c8	 movzx	 ecx, al
  00776	85 c9		 test	 ecx, ecx
  00778	0f 84 cc 00 00
	00		 je	 $LN3@Obstaw
  0077e	68 00 00 00 00	 push	 OFFSET ??_C@_02CJNFJKKJ@29?$AA@
  00783	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  00786	50		 push	 eax
  00787	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  0078c	83 c4 08	 add	 esp, 8
  0078f	0f b6 c8	 movzx	 ecx, al
  00792	85 c9		 test	 ecx, ecx
  00794	0f 84 b0 00 00
	00		 je	 $LN3@Obstaw
  0079a	68 00 00 00 00	 push	 OFFSET ??_C@_02PJNFELNH@30?$AA@
  0079f	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  007a2	50		 push	 eax
  007a3	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  007a8	83 c4 08	 add	 esp, 8
  007ab	0f b6 c8	 movzx	 ecx, al
  007ae	85 c9		 test	 ecx, ecx
  007b0	0f 84 94 00 00
	00		 je	 $LN3@Obstaw
  007b6	68 00 00 00 00	 push	 OFFSET ??_C@_02OAMOHKJG@31?$AA@
  007bb	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  007be	50		 push	 eax
  007bf	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  007c4	83 c4 08	 add	 esp, 8
  007c7	0f b6 c8	 movzx	 ecx, al
  007ca	85 c9		 test	 ecx, ecx
  007cc	74 7c		 je	 SHORT $LN3@Obstaw
  007ce	68 00 00 00 00	 push	 OFFSET ??_C@_02MLODCJFF@32?$AA@
  007d3	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  007d6	50		 push	 eax
  007d7	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  007dc	83 c4 08	 add	 esp, 8
  007df	0f b6 c8	 movzx	 ecx, al
  007e2	85 c9		 test	 ecx, ecx
  007e4	74 64		 je	 SHORT $LN3@Obstaw
  007e6	68 00 00 00 00	 push	 OFFSET ??_C@_02NCPIBIBE@33?$AA@
  007eb	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  007ee	50		 push	 eax
  007ef	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  007f4	83 c4 08	 add	 esp, 8
  007f7	0f b6 c8	 movzx	 ecx, al
  007fa	85 c9		 test	 ecx, ecx
  007fc	74 4c		 je	 SHORT $LN3@Obstaw
  007fe	68 00 00 00 00	 push	 OFFSET ??_C@_02JNLJIOND@34?$AA@
  00803	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  00806	50		 push	 eax
  00807	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  0080c	83 c4 08	 add	 esp, 8
  0080f	0f b6 c8	 movzx	 ecx, al
  00812	85 c9		 test	 ecx, ecx
  00814	74 34		 je	 SHORT $LN3@Obstaw
  00816	68 00 00 00 00	 push	 OFFSET ??_C@_02IEKCLPJC@35?$AA@
  0081b	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  0081e	50		 push	 eax
  0081f	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00824	83 c4 08	 add	 esp, 8
  00827	0f b6 c8	 movzx	 ecx, al
  0082a	85 c9		 test	 ecx, ecx
  0082c	74 1c		 je	 SHORT $LN3@Obstaw
  0082e	68 00 00 00 00	 push	 OFFSET ??_C@_02KPIPOMFB@36?$AA@
  00833	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  00836	50		 push	 eax
  00837	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  0083c	83 c4 08	 add	 esp, 8
  0083f	0f b6 c8	 movzx	 ecx, al
  00842	85 c9		 test	 ecx, ecx
  00844	0f 85 0f f8 ff
	ff		 jne	 $LN4@Obstaw
$LN3@Obstaw:

; 192  : 		zaklad_typ != "36" //Sprawdzanie czy wprowadzono zak³ad na liczbê 36
; 193  : 		); //Je¿eli któryœ z warunków siê niezgadza to pêtla nie jest kontynuowana
; 194  : 
; 195  : 	return zaklad_typ; //Zwracam typ zak³adu podany przez u¿ytkownika

  0084a	8d 45 d0	 lea	 eax, DWORD PTR _zaklad_typ$[ebp]
  0084d	50		 push	 eax
  0084e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00851	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00856	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  0085c	83 c9 01	 or	 ecx, 1
  0085f	89 8d 04 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  00865	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0086c	8d 4d d0	 lea	 ecx, DWORD PTR _zaklad_typ$[ebp]
  0086f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00874	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 196  : }

  00877	52		 push	 edx
  00878	8b cd		 mov	 ecx, ebp
  0087a	50		 push	 eax
  0087b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@Obstaw
  00881	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00886	58		 pop	 eax
  00887	5a		 pop	 edx
  00888	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0088b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00892	59		 pop	 ecx
  00893	5f		 pop	 edi
  00894	5e		 pop	 esi
  00895	5b		 pop	 ebx
  00896	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00899	33 cd		 xor	 ecx, ebp
  0089b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  008a0	81 c4 00 01 00
	00		 add	 esp, 256		; 00000100H
  008a6	3b ec		 cmp	 ebp, esp
  008a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  008ad	8b e5		 mov	 esp, ebp
  008af	5d		 pop	 ebp
  008b0	c3		 ret	 0
  008b1	0f 1f 00	 npad	 3
$LN13@Obstaw:
  008b4	01 00 00 00	 DD	 1
  008b8	00 00 00 00	 DD	 $LN12@Obstaw
$LN12@Obstaw:
  008bc	d0 ff ff ff	 DD	 -48			; ffffffd0H
  008c0	1c 00 00 00	 DD	 28			; 0000001cH
  008c4	00 00 00 00	 DD	 $LN10@Obstaw
$LN10@Obstaw:
  008c8	7a		 DB	 122			; 0000007aH
  008c9	61		 DB	 97			; 00000061H
  008ca	6b		 DB	 107			; 0000006bH
  008cb	6c		 DB	 108			; 0000006cH
  008cc	61		 DB	 97			; 00000061H
  008cd	64		 DB	 100			; 00000064H
  008ce	5f		 DB	 95			; 0000005fH
  008cf	74		 DB	 116			; 00000074H
  008d0	79		 DB	 121			; 00000079H
  008d1	70		 DB	 112			; 00000070H
  008d2	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _zaklad_typ$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a fc fe ff
	ff		 mov	 ecx, DWORD PTR [edx-260]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Obstaw@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; Obstaw
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ??Rrandom_device@std@@QAEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Rrandom_device@std@@QAEIXZ PROC			; std::random_device::operator(), COMDAT
; _this$ = ecx

; 6441 : 		{	// return next value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 6442 : 		return (_Random_device());

  00023	e8 00 00 00 00	 call	 ?_Random_device@std@@YAIXZ ; std::_Random_device

; 6443 : 		}

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??Rrandom_device@std@@QAEIXZ ENDP			; std::random_device::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ?entropy@random_device@std@@QAENXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?entropy@random_device@std@@QAENXZ PROC			; std::random_device::entropy, COMDAT
; _this$ = ecx

; 6436 : 		{	// return entropy of random number source

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 6437 : 		return (32.0);

  00023	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@4040000000000000

; 6438 : 		}

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?entropy@random_device@std@@QAENXZ ENDP			; std::random_device::entropy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ?max@random_device@std@@SAIXZ
_TEXT	SEGMENT
?max@random_device@std@@SAIXZ PROC			; std::random_device::max, COMDAT

; 6431 : 		{	// return maximum possible generated value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 6432 : 		return ((result_type)-1);

  0001e	83 c8 ff	 or	 eax, -1

; 6433 : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?max@random_device@std@@SAIXZ ENDP			; std::random_device::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ?min@random_device@std@@SAIXZ
_TEXT	SEGMENT
?min@random_device@std@@SAIXZ PROC			; std::random_device::min, COMDAT

; 6426 : 		{	// return minimum possible generated value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 6427 : 		return (0);

  0001e	33 c0		 xor	 eax, eax

; 6428 : 		}

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?min@random_device@std@@SAIXZ ENDP			; std::random_device::min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\random
;	COMDAT ??0random_device@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??0random_device@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::random_device::random_device, COMDAT
; _this$ = ecx

; 6420 : 	explicit random_device(const string& = "")

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 6421 : 		{	// construct
; 6422 : 		(*this)();	// force early failure if bad engine

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??Rrandom_device@std@@QAEIXZ ; std::random_device::operator()

; 6423 : 		}

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
??0random_device@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::random_device::random_device
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z
_TEXT	SEGMENT
tv69 = -196						; size = 4
__Byte$ = 8						; size = 4
__File$ = 12						; size = 4
??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z PROC		; std::_Ungetc<char>, COMDAT

; 116  : 	{	// put back a char element to a C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 117  : 	return (ungetc((unsigned char)_Byte, _File) != EOF);

  0001e	8b f4		 mov	 esi, esp
  00020	8b 45 0c	 mov	 eax, DWORD PTR __File$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR __Byte$[ebp]
  00027	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  0002a	52		 push	 edx
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ungetc
  00031	83 c4 08	 add	 esp, 8
  00034	3b f4		 cmp	 esi, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	83 f8 ff	 cmp	 eax, -1
  0003e	74 0c		 je	 SHORT $LN3@Ungetc
  00040	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv69[ebp], 1
  0004a	eb 0a		 jmp	 SHORT $LN4@Ungetc
$LN3@Ungetc:
  0004c	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv69[ebp], 0
$LN4@Ungetc:
  00056	8a 85 3c ff ff
	ff		 mov	 al, BYTE PTR tv69[ebp]

; 118  : 	}

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00065	3b ec		 cmp	 ebp, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z ENDP		; std::_Ungetc<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z
_TEXT	SEGMENT
tv69 = -196						; size = 4
__Byte$ = 8						; size = 1
__File$ = 12						; size = 4
??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z PROC		; std::_Fputc<char>, COMDAT

; 92   : 	{	// put a char element to a C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 93   : 	return (fputc(_Byte, _File) != EOF);

  0001e	8b f4		 mov	 esi, esp
  00020	8b 45 0c	 mov	 eax, DWORD PTR __File$[ebp]
  00023	50		 push	 eax
  00024	0f be 4d 08	 movsx	 ecx, BYTE PTR __Byte$[ebp]
  00028	51		 push	 ecx
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fputc
  0002f	83 c4 08	 add	 esp, 8
  00032	3b f4		 cmp	 esi, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	83 f8 ff	 cmp	 eax, -1
  0003c	74 0c		 je	 SHORT $LN3@Fputc
  0003e	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv69[ebp], 1
  00048	eb 0a		 jmp	 SHORT $LN4@Fputc
$LN3@Fputc:
  0004a	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv69[ebp], 0
$LN4@Fputc:
  00054	8a 85 3c ff ff
	ff		 mov	 al, BYTE PTR tv69[ebp]

; 94   : 	}

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00063	3b ec		 cmp	 ebp, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z ENDP		; std::_Fputc<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\fstream
;	COMDAT ??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z
_TEXT	SEGMENT
__Meta$ = -8						; size = 4
__Byte$ = 8						; size = 4
__File$ = 12						; size = 4
??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z PROC		; std::_Fgetc<char>, COMDAT

; 47   : 	{	// get a char element from a C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 48   : 	int _Meta;
; 49   : 	if ((_Meta = fgetc(_File)) == EOF)

  0001e	8b f4		 mov	 esi, esp
  00020	8b 45 0c	 mov	 eax, DWORD PTR __File$[ebp]
  00023	50		 push	 eax
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  0002a	83 c4 04	 add	 esp, 4
  0002d	3b f4		 cmp	 esi, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	89 45 f8	 mov	 DWORD PTR __Meta$[ebp], eax
  00037	83 7d f8 ff	 cmp	 DWORD PTR __Meta$[ebp], -1
  0003b	75 06		 jne	 SHORT $LN2@Fgetc

; 50   : 		return (false);

  0003d	32 c0		 xor	 al, al
  0003f	eb 0c		 jmp	 SHORT $LN1@Fgetc

; 51   : 	else

  00041	eb 0a		 jmp	 SHORT $LN1@Fgetc
$LN2@Fgetc:

; 52   : 		{	// got one, convert to char
; 53   : 		_Byte = (char)_Meta;

  00043	8b 45 08	 mov	 eax, DWORD PTR __Byte$[ebp]
  00046	8a 4d f8	 mov	 cl, BYTE PTR __Meta$[ebp]
  00049	88 08		 mov	 BYTE PTR [eax], cl

; 54   : 		return (true);

  0004b	b0 01		 mov	 al, 1
$LN1@Fgetc:

; 55   : 		}
; 56   : 	}

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00056	3b ec		 cmp	 ebp, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z ENDP		; std::_Fgetc<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xlocale
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -296						; size = 4
$T3 = -284						; size = 12
__Pfmod$4 = -72						; size = 4
__Pf$5 = -60						; size = 4
__Id$6 = -48						; size = 4
__Psave$7 = -36						; size = 4
__Lock$8 = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::ctype<char> >, COMDAT

; 505  : 	{	// get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd d4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-300]
  00020	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 506  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00040	8b f4		 mov	 esi, esp
  00042	6a 00		 push	 0
  00044	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 507  : 		const locale::facet *_Psave =
; 508  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
  00060	89 45 dc	 mov	 DWORD PTR __Psave$7[ebp], eax

; 509  : 
; 510  : 		size_t _Id = _Facet::id;

  00063	8b f4		 mov	 esi, esp
  00065	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?id@?$ctype@D@std@@2V0locale@2@A
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Bid@locale@std@@QAEIXZ
  00071	3b f4		 cmp	 esi, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	89 45 d0	 mov	 DWORD PTR __Id$6[ebp], eax

; 511  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  0007b	8b 45 d0	 mov	 eax, DWORD PTR __Id$6[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00082	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ; std::locale::_Getfacet
  00087	89 45 c4	 mov	 DWORD PTR __Pf$5[ebp], eax

; 512  : 
; 513  : 		if (_Pf != 0)

  0008a	83 7d c4 00	 cmp	 DWORD PTR __Pf$5[ebp], 0
  0008e	74 05		 je	 SHORT $LN2@use_facet
  00090	e9 81 00 00 00	 jmp	 $LN3@use_facet
$LN2@use_facet:

; 514  : 			;	// got facet from locale
; 515  : 		else if (_Psave != 0)

  00095	83 7d dc 00	 cmp	 DWORD PTR __Psave$7[ebp], 0
  00099	74 08		 je	 SHORT $LN4@use_facet

; 516  : 			_Pf = _Psave;	// lazy facet already allocated

  0009b	8b 45 dc	 mov	 eax, DWORD PTR __Psave$7[ebp]
  0009e	89 45 c4	 mov	 DWORD PTR __Pf$5[ebp], eax
  000a1	eb 73		 jmp	 SHORT $LN3@use_facet
$LN4@use_facet:

; 517  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000a3	8b f4		 mov	 esi, esp
  000a5	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  000a8	50		 push	 eax
  000a9	8d 4d dc	 lea	 ecx, DWORD PTR __Psave$7[ebp]
  000ac	51		 push	 ecx
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  000b3	83 c4 08	 add	 esp, 8
  000b6	3b f4		 cmp	 esi, esp
  000b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bd	83 f8 ff	 cmp	 eax, -1
  000c0	75 1e		 jne	 SHORT $LN6@use_facet

; 518  : 
; 519  :  #if _HAS_EXCEPTIONS
; 520  : 
; 521  : 			_THROW(bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  000c2	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  000c8	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@XZ	; std::bad_cast::bad_cast
  000cd	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  000d2	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 __CxxThrowException@8

; 522  : 
; 523  :  #else /* _HAS_EXCEPTIONS */
; 524  : 			abort();	// lazy disallowed
; 525  :  #endif /* _HAS_EXCEPTIONS */
; 526  : 
; 527  : 		else

  000de	eb 36		 jmp	 SHORT $LN3@use_facet
$LN6@use_facet:

; 528  : 			{	// queue up lazy facet for destruction
; 529  : 			_Pf = _Psave;

  000e0	8b 45 dc	 mov	 eax, DWORD PTR __Psave$7[ebp]
  000e3	89 45 c4	 mov	 DWORD PTR __Pf$5[ebp], eax

; 530  : 			_Facetptr<_Facet>::_Psave = _Psave;

  000e6	8b 45 dc	 mov	 eax, DWORD PTR __Psave$7[ebp]
  000e9	a3 00 00 00 00	 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B, eax ; std::_Facetptr<std::ctype<char> >::_Psave

; 531  : 
; 532  : 			locale::facet *_Pfmod = (_Facet *)_Psave;

  000ee	8b 45 dc	 mov	 eax, DWORD PTR __Psave$7[ebp]
  000f1	89 45 b8	 mov	 DWORD PTR __Pfmod$4[ebp], eax

; 533  : 			_Pfmod->_Incref();

  000f4	8b 45 b8	 mov	 eax, DWORD PTR __Pfmod$4[ebp]
  000f7	8b 10		 mov	 edx, DWORD PTR [eax]
  000f9	8b f4		 mov	 esi, esp
  000fb	8b 4d b8	 mov	 ecx, DWORD PTR __Pfmod$4[ebp]
  000fe	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00101	ff d0		 call	 eax
  00103	3b f4		 cmp	 esi, esp
  00105	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 534  : 
; 535  :  #if defined(_M_CEE)
; 536  : 			_Facet_Register_m(_Pfmod);
; 537  : 
; 538  :  #else /* defined(_M_CEE) */
; 539  : 			_Facet_Register(_Pfmod);

  0010a	8b 45 b8	 mov	 eax, DWORD PTR __Pfmod$4[ebp]
  0010d	50		 push	 eax
  0010e	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register
  00113	83 c4 04	 add	 esp, 4
$LN3@use_facet:

; 540  :  #endif /* defined(_M_CEE) */
; 541  : 			}
; 542  : 
; 543  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  00116	8b 45 c4	 mov	 eax, DWORD PTR __Pf$5[ebp]
  00119	89 85 d8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0011f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00126	8b f4		 mov	 esi, esp
  00128	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  0012b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00131	3b f4		 cmp	 esi, esp
  00133	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00138	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
$LN8@use_facet:

; 544  : 	_END_LOCK()
; 545  : 	}	// end of use_facet body

  0013e	52		 push	 edx
  0013f	8b cd		 mov	 ecx, ebp
  00141	50		 push	 eax
  00142	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN14@use_facet
  00148	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0014d	58		 pop	 eax
  0014e	5a		 pop	 edx
  0014f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00152	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00159	59		 pop	 ecx
  0015a	5f		 pop	 edi
  0015b	5e		 pop	 esi
  0015c	5b		 pop	 ebx
  0015d	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	81 c4 2c 01 00
	00		 add	 esp, 300		; 0000012cH
  0016d	3b ec		 cmp	 ebp, esp
  0016f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00174	8b e5		 mov	 esp, ebp
  00176	5d		 pop	 ebp
  00177	c3		 ret	 0
$LN14@use_facet:
  00178	02 00 00 00	 DD	 2
  0017c	00 00 00 00	 DD	 $LN13@use_facet
$LN13@use_facet:
  00180	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00184	04 00 00 00	 DD	 4
  00188	00 00 00 00	 DD	 $LN10@use_facet
  0018c	dc ff ff ff	 DD	 -36			; ffffffdcH
  00190	04 00 00 00	 DD	 4
  00194	00 00 00 00	 DD	 $LN11@use_facet
$LN11@use_facet:
  00198	5f		 DB	 95			; 0000005fH
  00199	50		 DB	 80			; 00000050H
  0019a	73		 DB	 115			; 00000073H
  0019b	61		 DB	 97			; 00000061H
  0019c	76		 DB	 118			; 00000076H
  0019d	65		 DB	 101			; 00000065H
  0019e	00		 DB	 0
$LN10@use_facet:
  0019f	5f		 DB	 95			; 0000005fH
  001a0	4c		 DB	 76			; 0000004cH
  001a1	6f		 DB	 111			; 0000006fH
  001a2	63		 DB	 99			; 00000063H
  001a3	6b		 DB	 107			; 0000006bH
  001a4	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a d0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-304]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xlocale
;	COMDAT ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
_TEXT	SEGMENT
tv83 = -232						; size = 4
tv71 = -232						; size = 4
__Ptr0$1 = -32						; size = 4
__Facptr$ = -20						; size = 4
_this$ = -8						; size = 4
__Id$ = 8						; size = 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z PROC		; std::locale::_Getfacet, COMDAT
; _this$ = ecx

; 430  : 		{	// look up a facet in locale object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00013	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 431  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00029	8b 55 08	 mov	 edx, DWORD PTR __Id$[ebp]
  0002c	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  0002f	73 17		 jae	 SHORT $LN6@Getfacet
  00031	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00037	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0003a	8b 45 08	 mov	 eax, DWORD PTR __Id$[ebp]
  0003d	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  00040	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv71[ebp], ecx
  00046	eb 0a		 jmp	 SHORT $LN7@Getfacet
$LN6@Getfacet:
  00048	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv71[ebp], 0
$LN7@Getfacet:
  00052	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv71[ebp]
  00058	89 55 ec	 mov	 DWORD PTR __Facptr$[ebp], edx

; 432  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end
; 433  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

  0005b	83 7d ec 00	 cmp	 DWORD PTR __Facptr$[ebp], 0
  0005f	75 0e		 jne	 SHORT $LN4@Getfacet
  00061	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00064	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00067	0f b6 51 14	 movzx	 edx, BYTE PTR [ecx+20]
  0006b	85 d2		 test	 edx, edx
  0006d	75 07		 jne	 SHORT $LN2@Getfacet
$LN4@Getfacet:

; 434  : 			return (_Facptr);	// found facet or not transparent

  0006f	8b 45 ec	 mov	 eax, DWORD PTR __Facptr$[ebp]
  00072	eb 39		 jmp	 SHORT $LN1@Getfacet

; 435  : 		else

  00074	eb 37		 jmp	 SHORT $LN1@Getfacet
$LN2@Getfacet:

; 436  : 			{	// look in current locale
; 437  : 			locale::_Locimp *_Ptr0 = _Getgloballocale();

  00076	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  0007b	89 45 e0	 mov	 DWORD PTR __Ptr0$1[ebp], eax

; 438  : 			return (_Id < _Ptr0->_Facetcount

  0007e	8b 45 e0	 mov	 eax, DWORD PTR __Ptr0$1[ebp]
  00081	8b 4d 08	 mov	 ecx, DWORD PTR __Id$[ebp]
  00084	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  00087	73 14		 jae	 SHORT $LN8@Getfacet
  00089	8b 55 e0	 mov	 edx, DWORD PTR __Ptr0$1[ebp]
  0008c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0008f	8b 4d 08	 mov	 ecx, DWORD PTR __Id$[ebp]
  00092	8b 14 88	 mov	 edx, DWORD PTR [eax+ecx*4]
  00095	89 95 18 ff ff
	ff		 mov	 DWORD PTR tv83[ebp], edx
  0009b	eb 0a		 jmp	 SHORT $LN9@Getfacet
$LN8@Getfacet:
  0009d	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv83[ebp], 0
$LN9@Getfacet:
  000a7	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR tv83[ebp]
$LN1@Getfacet:

; 439  : 				? _Ptr0->_Facetvec[_Id]	// get from current locale
; 440  : 				: 0);	// no entry in current locale
; 441  : 			}
; 442  : 		}

  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx
  000b0	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000b6	3b ec		 cmp	 ebp, esp
  000b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 04 00	 ret	 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ENDP		; std::locale::_Getfacet
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xlocale
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
tv84 = -244						; size = 4
$T2 = -236						; size = 4
$T3 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 403  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1locale@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 0c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-244]
  00021	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 404  : 		if (_Ptr != 0)

  00042	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00045	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00049	74 66		 je	 SHORT $LN3@locale

; 405  : 			delete _Ptr->_Decref();

  0004b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00051	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00054	8b 01		 mov	 eax, DWORD PTR [ecx]
  00056	8b f4		 mov	 esi, esp
  00058	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0005b	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0005e	ff d2		 call	 edx
  00060	3b f4		 cmp	 esi, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	89 85 14 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0006d	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00073	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00079	83 bd 20 ff ff
	ff 00		 cmp	 DWORD PTR $T3[ebp], 0
  00080	74 25		 je	 SHORT $LN4@locale
  00082	8b f4		 mov	 esi, esp
  00084	6a 01		 push	 1
  00086	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  0008c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008e	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  00094	8b 02		 mov	 eax, DWORD PTR [edx]
  00096	ff d0		 call	 eax
  00098	3b f4		 cmp	 esi, esp
  0009a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009f	89 85 0c ff ff
	ff		 mov	 DWORD PTR tv84[ebp], eax
  000a5	eb 0a		 jmp	 SHORT $LN3@locale
$LN4@locale:
  000a7	c7 85 0c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv84[ebp], 0
$LN3@locale:

; 406  : 		}

  000b1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bb	59		 pop	 ecx
  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi
  000be	5b		 pop	 ebx
  000bf	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  000c5	3b ec		 cmp	 ebp, esp
  000c7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1locale@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 08 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-248]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1locale@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gbad_cast@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gbad_cast@std@@UAEPAXI@Z PROC			; std::bad_cast::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1bad_cast@std@@UAE@XZ
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 01	 and	 eax, 1
  00031	74 0e		 je	 SHORT $LN2@scalar
  00033	6a 0c		 push	 12			; 0000000cH
  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003e	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00041	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004d	3b ec		 cmp	 ebp, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
??_Gbad_cast@std@@UAEPAXI@Z ENDP			; std::bad_cast::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_cast@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0bad_cast@std@@QAE@ABV01@@Z PROC			; std::bad_cast::bad_cast, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  0002f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00032	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_cast@std@@6B@
  00038	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
??0bad_cast@std@@QAE@ABV01@@Z ENDP			; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_cast@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1bad_cast@std@@UAE@XZ PROC				; std::bad_cast::~bad_cast, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1bad_cast@std@@UAE@XZ ENDP				; std::bad_cast::~bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\vcruntime_typeinfo.h
;	COMDAT ??0bad_cast@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0bad_cast@std@@QAE@XZ PROC				; std::bad_cast::bad_cast, COMDAT
; _this$ = ecx

; 127  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 126  :         : exception("bad cast", 1)

  00023	6a 01		 push	 1
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@QBDH@Z ; std::exception::exception

; 127  :     {

  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_cast@std@@6B@

; 128  :     }

  0003b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
??0bad_cast@std@@QAE@XZ ENDP				; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT

; 3725 : 		{	// report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 3726 : 		_Xlength_error("string too long");

  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00023	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen:

; 3727 : 		}

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -245						; size = 1
__Al$2 = -44						; size = 4
__Ptr$3 = -32						; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 3706 : 		{	// initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00013	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3707 : 		this->_Orphan_all();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all

; 3708 : 		auto& _My_data = this->_Get_data();

  0002b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00033	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 3709 : 		if (_My_data._Large_string_engaged())

  00036	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00039	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  0003e	0f b6 c0	 movzx	 eax, al
  00041	85 c0		 test	 eax, eax
  00043	74 46		 je	 SHORT $LN2@Tidy_deall

; 3710 : 			{
; 3711 : 			const pointer _Ptr = _My_data._Bx._Ptr;

  00045	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00048	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004b	89 4d e0	 mov	 DWORD PTR __Ptr$3[ebp], ecx

; 3712 : 			auto& _Al = this->_Getal();

  0004e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00056	89 45 d4	 mov	 DWORD PTR __Al$2[ebp], eax

; 3713 : 			_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));

  00059	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  0005c	83 c0 04	 add	 eax, 4
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 ??$addressof@PAD@std@@YAPAPADAAPAD@Z ; std::addressof<char *>
  00065	83 c4 04	 add	 esp, 4
  00068	50		 push	 eax
  00069	8b 4d d4	 mov	 ecx, DWORD PTR __Al$2[ebp]
  0006c	51		 push	 ecx
  0006d	e8 00 00 00 00	 call	 ??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>
  00072	83 c4 08	 add	 esp, 8

; 3714 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00075	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00078	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0007b	83 c1 01	 add	 ecx, 1
  0007e	51		 push	 ecx
  0007f	8b 55 e0	 mov	 edx, DWORD PTR __Ptr$3[ebp]
  00082	52		 push	 edx
  00083	8b 4d d4	 mov	 ecx, DWORD PTR __Al$2[ebp]
  00086	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate
$LN2@Tidy_deall:

; 3715 : 			}
; 3716 : 
; 3717 : 		_My_data._Mysize = 0;

  0008b	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  0008e	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 3718 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00095	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00098	c7 40 18 0f 00
	00 00		 mov	 DWORD PTR [eax+24], 15	; 0000000fH

; 3719 : 		// the _Traits::assign is last so the codegen doesn't think the char
; 3720 : 		// write can alias this
; 3721 : 		_Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0009f	c6 85 0b ff ff
	ff 00		 mov	 BYTE PTR $T1[ebp], 0
  000a6	8d 85 0b ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  000ac	50		 push	 eax
  000ad	b9 01 00 00 00	 mov	 ecx, 1
  000b2	6b d1 00	 imul	 edx, ecx, 0
  000b5	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  000b8	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  000bc	51		 push	 ecx
  000bd	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  000c2	83 c4 08	 add	 esp, 8

; 3722 : 		}

  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi
  000c7	5b		 pop	 ebx
  000c8	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  000ce	3b ec		 cmp	 ebp, esp
  000d0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c3		 ret	 0
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -221						; size = 1
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init, COMDAT
; _this$ = ecx

; 3696 : 		{	// initialize basic_string data members

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00013	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3697 : 		auto& _My_data = this->_Get_data();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 3698 : 		_My_data._Mysize = 0;

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00031	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 3699 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00038	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003b	c7 40 18 0f 00
	00 00		 mov	 DWORD PTR [eax+24], 15	; 0000000fH

; 3700 : 		// the _Traits::assign is last so the codegen doesn't think the char
; 3701 : 		// write can alias this
; 3702 : 		_Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00042	c6 85 23 ff ff
	ff 00		 mov	 BYTE PTR $T1[ebp], 0
  00049	8d 85 23 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0004f	50		 push	 eax
  00050	b9 01 00 00 00	 mov	 ecx, 1
  00055	6b d1 00	 imul	 edx, ecx, 0
  00058	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  0005b	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  0005f	51		 push	 ecx
  00060	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  00065	83 c4 08	 add	 esp, 8

; 3703 : 		}

  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
  0006b	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
$T1 = -221						; size = 1
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 3690 : 		{	// set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00013	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3691 : 		auto& _My_data = this->_Get_data();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 3692 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

  0002e	c6 85 23 ff ff
	ff 00		 mov	 BYTE PTR $T1[ebp], 0
  00035	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Newsize$[ebp]
  0003b	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  0003e	8d 95 23 ff ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  00044	52		 push	 edx
  00045	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00048	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0004d	03 45 08	 add	 eax, DWORD PTR __Newsize$[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  00056	83 c4 08	 add	 esp, 8

; 3693 : 		}

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00062	3b ec		 cmp	 ebp, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Become_small@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
__Al$ = -44						; size = 4
__Ptr$ = -32						; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
?_Become_small@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Become_small, COMDAT
; _this$ = ecx

; 3676 : 		{	// release any held storage and return to small string mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00013	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3677 : 			// pre: *this is in large string mode
; 3678 : 			// pre: this is small enough to return to small string mode
; 3679 : 		auto& _My_data = this->_Get_data();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 3680 : 		_My_data._Orphan_all();

  0002e	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00031	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3681 : 		const pointer _Ptr = _My_data._Bx._Ptr;

  00036	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00039	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003c	89 4d e0	 mov	 DWORD PTR __Ptr$[ebp], ecx

; 3682 : 		auto& _Al = this->_Getal();

  0003f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00047	89 45 d4	 mov	 DWORD PTR __Al$[ebp], eax

; 3683 : 		_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));

  0004a	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  0004d	83 c0 04	 add	 eax, 4
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$addressof@PAD@std@@YAPAPADAAPAD@Z ; std::addressof<char *>
  00056	83 c4 04	 add	 esp, 4
  00059	50		 push	 eax
  0005a	8b 4d d4	 mov	 ecx, DWORD PTR __Al$[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>
  00063	83 c4 08	 add	 esp, 8

; 3684 : 		_Traits::copy(_My_data._Bx._Buf, _Unfancy(_Ptr), _My_data._Mysize + 1);

  00066	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00069	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0006c	83 c1 01	 add	 ecx, 1
  0006f	51		 push	 ecx
  00070	8b 55 e0	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00073	52		 push	 edx
  00074	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  00079	83 c4 04	 add	 esp, 4
  0007c	50		 push	 eax
  0007d	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00080	83 c0 04	 add	 eax, 4
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  00089	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3685 : 		_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0008c	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  0008f	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00092	83 c1 01	 add	 ecx, 1
  00095	51		 push	 ecx
  00096	8b 55 e0	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00099	52		 push	 edx
  0009a	8b 4d d4	 mov	 ecx, DWORD PTR __Al$[ebp]
  0009d	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 3686 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  000a2	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  000a5	c7 40 18 0f 00
	00 00		 mov	 DWORD PTR [eax+24], 15	; 0000000fH

; 3687 : 		}

  000ac	5f		 pop	 edi
  000ad	5e		 pop	 esi
  000ae	5b		 pop	 ebx
  000af	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  000b5	3b ec		 cmp	 ebp, esp
  000b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
?_Become_small@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Become_small
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z
_TEXT	SEGMENT
$T1 = -264						; size = 4
__Old$ = -60						; size = 4
__Masked$ = -48						; size = 4
__My_data$ = -36					; size = 4
__Max$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__Requested$ = 8					; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 3588 : 		{	// determines the next array size to allocate

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-268]
  00013	b9 43 00 00 00	 mov	 ecx, 67			; 00000043H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 3589 : 		const size_type _Max = max_size();

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00035	89 45 e8	 mov	 DWORD PTR __Max$[ebp], eax

; 3590 : 		auto& _My_data = this->_Get_data();

  00038	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00040	89 45 dc	 mov	 DWORD PTR __My_data$[ebp], eax

; 3591 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00043	8b 45 08	 mov	 eax, DWORD PTR __Requested$[ebp]
  00046	83 c8 0f	 or	 eax, 15			; 0000000fH
  00049	89 45 d0	 mov	 DWORD PTR __Masked$[ebp], eax

; 3592 : 		if (_Masked > _Max)

  0004c	8b 45 d0	 mov	 eax, DWORD PTR __Masked$[ebp]
  0004f	3b 45 e8	 cmp	 eax, DWORD PTR __Max$[ebp]
  00052	76 05		 jbe	 SHORT $LN2@Calculate_

; 3593 : 			{	// the mask overflows, settle for max_size()
; 3594 : 			return (_Max);

  00054	8b 45 e8	 mov	 eax, DWORD PTR __Max$[ebp]
  00057	eb 40		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 3595 : 			}
; 3596 : 
; 3597 : 		const size_type _Old = _My_data._Myres;

  00059	8b 45 dc	 mov	 eax, DWORD PTR __My_data$[ebp]
  0005c	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0005f	89 4d c4	 mov	 DWORD PTR __Old$[ebp], ecx

; 3598 : 		if (_Old > _Max - _Old / 2)

  00062	8b 45 c4	 mov	 eax, DWORD PTR __Old$[ebp]
  00065	d1 e8		 shr	 eax, 1
  00067	8b 4d e8	 mov	 ecx, DWORD PTR __Max$[ebp]
  0006a	2b c8		 sub	 ecx, eax
  0006c	39 4d c4	 cmp	 DWORD PTR __Old$[ebp], ecx
  0006f	76 05		 jbe	 SHORT $LN3@Calculate_

; 3599 : 			{	// similarly, geometric overflows
; 3600 : 			return (_Max);

  00071	8b 45 e8	 mov	 eax, DWORD PTR __Max$[ebp]
  00074	eb 23		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 3601 : 			}
; 3602 : 
; 3603 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  00076	8b 45 c4	 mov	 eax, DWORD PTR __Old$[ebp]
  00079	d1 e8		 shr	 eax, 1
  0007b	03 45 c4	 add	 eax, DWORD PTR __Old$[ebp]
  0007e	89 85 f8 fe ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00084	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0008a	51		 push	 ecx
  0008b	8d 55 d0	 lea	 edx, DWORD PTR __Masked$[ebp]
  0008e	52		 push	 edx
  0008f	e8 00 00 00 00	 call	 ??$_Max_value@I@std@@YAABIABI0@Z ; std::_Max_value<unsigned int>
  00094	83 c4 08	 add	 esp, 8
  00097	8b 00		 mov	 eax, DWORD PTR [eax]
$LN1@Calculate_:

; 3604 : 		}

  00099	52		 push	 edx
  0009a	8b cd		 mov	 ecx, ebp
  0009c	50		 push	 eax
  0009d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@Calculate_
  000a3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000a8	58		 pop	 eax
  000a9	5a		 pop	 edx
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b0	33 cd		 xor	 ecx, ebp
  000b2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b7	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  000bd	3b ec		 cmp	 ebp, esp
  000bf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c2 04 00	 ret	 4
  000ca	66 90		 npad	 2
$LN7@Calculate_:
  000cc	01 00 00 00	 DD	 1
  000d0	00 00 00 00	 DD	 $LN6@Calculate_
$LN6@Calculate_:
  000d4	d0 ff ff ff	 DD	 -48			; ffffffd0H
  000d8	04 00 00 00	 DD	 4
  000dc	00 00 00 00	 DD	 $LN5@Calculate_
$LN5@Calculate_:
  000e0	5f		 DB	 95			; 0000005fH
  000e1	4d		 DB	 77			; 0000004dH
  000e2	61		 DB	 97			; 00000061H
  000e3	73		 DB	 115			; 00000073H
  000e4	6b		 DB	 107			; 0000006bH
  000e5	65		 DB	 101			; 00000065H
  000e6	64		 DB	 100			; 00000064H
  000e7	00		 DB	 0
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z
_TEXT	SEGMENT
__My_data$ = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal, COMDAT
; _this$ = ecx

; 3494 : 		{	// compare [0, size()) with _Ptr for equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 3495 : 		auto& _My_data = this->_Get_data();

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0004a	89 45 e0	 mov	 DWORD PTR __My_data$[ebp], eax

; 3496 : 		return (_Traits_equal<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Ptr, _Traits::length(_Ptr)));

  0004d	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?length@?$char_traits@D@std@@SAIQBD@Z ; std::char_traits<char>::length
  00056	83 c4 04	 add	 esp, 4
  00059	50		 push	 eax
  0005a	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0005d	51		 push	 ecx
  0005e	8b 55 e0	 mov	 edx, DWORD PTR __My_data$[ebp]
  00061	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00064	50		 push	 eax
  00065	8b 4d e0	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00068	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ; std::_Traits_equal<std::char_traits<char> >
  00073	83 c4 10	 add	 esp, 16			; 00000010H

; 3497 : 		}

  00076	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00079	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00080	59		 pop	 ecx
  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0008a	3b ec		 cmp	 ebp, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z
_TEXT	SEGMENT
__My_data$ = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find, COMDAT
; _this$ = ecx

; 3271 : 		{	// look for [_Ptr, <null>) beginning at or after _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 3272 : 		auto& _My_data = this->_Get_data();

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0004a	89 45 e0	 mov	 DWORD PTR __My_data$[ebp], eax

; 3273 : 		return (static_cast<size_type>(

  0004d	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?length@?$char_traits@D@std@@SAIQBD@Z ; std::char_traits<char>::length
  00056	83 c4 04	 add	 esp, 4
  00059	50		 push	 eax
  0005a	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0005d	51		 push	 ecx
  0005e	8b 55 0c	 mov	 edx, DWORD PTR __Off$[ebp]
  00061	52		 push	 edx
  00062	8b 45 e0	 mov	 eax, DWORD PTR __My_data$[ebp]
  00065	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00068	51		 push	 ecx
  00069	8b 4d e0	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0006c	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ??$_Traits_find@U?$char_traits@D@std@@@std@@YAIQBDII0I@Z ; std::_Traits_find<std::char_traits<char> >
  00077	83 c4 14	 add	 esp, 20			; 00000014H

; 3274 : 			_Traits_find<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Traits::length(_Ptr))));
; 3275 : 		}

  0007a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00084	59		 pop	 ecx
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	5b		 pop	 ebx
  00088	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0008e	3b ec		 cmp	 ebp, esp
  00090	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
$T1 = -233						; size = 1
__Old_size$2 = -32					; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Newcap$ = 8						; size = 4
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve, COMDAT
; _this$ = ecx

; 3096 : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00013	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3097 : 		auto& _My_data = this->_Get_data();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 3098 : 		if (_My_data._Mysize > _Newcap)

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00031	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00034	3b 4d 08	 cmp	 ecx, DWORD PTR __Newcap$[ebp]
  00037	76 02		 jbe	 SHORT $LN2@reserve

; 3099 : 			{	// requested capacity is not large enough for current size, ignore
; 3100 : 			return;	// nothing to do

  00039	eb 68		 jmp	 SHORT $LN1@reserve
$LN2@reserve:

; 3101 : 			}
; 3102 : 
; 3103 : 		if (_My_data._Myres == _Newcap)

  0003b	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003e	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00041	3b 4d 08	 cmp	 ecx, DWORD PTR __Newcap$[ebp]
  00044	75 02		 jne	 SHORT $LN3@reserve

; 3104 : 			{	// we're already at the requested capacity
; 3105 : 			return;	// nothing to do

  00046	eb 5b		 jmp	 SHORT $LN1@reserve
$LN3@reserve:

; 3106 : 			}
; 3107 : 
; 3108 : 		if (_My_data._Myres < _Newcap)

  00048	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  0004b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0004e	3b 4d 08	 cmp	 ecx, DWORD PTR __Newcap$[ebp]
  00051	73 33		 jae	 SHORT $LN4@reserve

; 3109 : 			{	// reallocate to grow
; 3110 : 			const size_type _Old_size = _My_data._Mysize;

  00053	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00056	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00059	89 4d e0	 mov	 DWORD PTR __Old_size$2[ebp], ecx

; 3111 : 			_Reallocate_grow_by(_Newcap - _Old_size,

  0005c	33 c0		 xor	 eax, eax
  0005e	88 85 17 ff ff
	ff		 mov	 BYTE PTR $T1[ebp], al
  00064	0f b6 8d 17 ff
	ff ff		 movzx	 ecx, BYTE PTR $T1[ebp]
  0006b	51		 push	 ecx
  0006c	8b 55 08	 mov	 edx, DWORD PTR __Newcap$[ebp]
  0006f	2b 55 e0	 sub	 edx, DWORD PTR __Old_size$2[ebp]
  00072	52		 push	 edx
  00073	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_67d87d4aa1269033985980465fd1d824>@@$$V@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_67d87d4aa1269033985980465fd1d824>@@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_67d87d4aa1269033985980465fd1d824> >

; 3112 : 				[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size) {
; 3113 : 				_Traits::copy(_New_ptr, _Old_ptr, _Old_size + 1);
; 3114 : 				});
; 3115 : 
; 3116 : 			_My_data._Mysize = _Old_size;

  0007b	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  0007e	8b 4d e0	 mov	 ecx, DWORD PTR __Old_size$2[ebp]
  00081	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 3117 : 			return;

  00084	eb 1d		 jmp	 SHORT $LN1@reserve
$LN4@reserve:

; 3118 : 			}
; 3119 : 
; 3120 : 		if (this->_BUF_SIZE > _Newcap && _My_data._Large_string_engaged())

  00086	83 7d 08 10	 cmp	 DWORD PTR __Newcap$[ebp], 16 ; 00000010H
  0008a	73 17		 jae	 SHORT $LN1@reserve
  0008c	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0008f	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00094	0f b6 c0	 movzx	 eax, al
  00097	85 c0		 test	 eax, eax
  00099	74 08		 je	 SHORT $LN1@reserve

; 3121 : 			{	// deallocate everything; switch back to "small" mode
; 3122 : 			_Become_small();

  0009b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	e8 00 00 00 00	 call	 ?_Become_small@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Become_small
$LN1@reserve:

; 3123 : 			return;
; 3124 : 			}
; 3125 : 
; 3126 : 		// ignore requests to reserve to [_BUF_SIZE, _Myres)
; 3127 : 		}

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  000ac	3b ec		 cmp	 ebp, esp
  000ae	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 04 00	 ret	 4
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -264						; size = 4
$T2 = -252						; size = 4
$T3 = -240						; size = 4
__Storage_max$ = -36					; size = 4
__Alloc_max$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 3066 : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-268]
  00013	b9 43 00 00 00	 mov	 ecx, 67			; 00000043H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 3067 : 		const size_type _Alloc_max = _Alty_traits::max_size(this->_Getal());

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
  0003b	83 c4 04	 add	 esp, 4
  0003e	89 45 e8	 mov	 DWORD PTR __Alloc_max$[ebp], eax

; 3068 : 		const size_type _Storage_max = // can always store small string
; 3069 : 			_Max_value(_Alloc_max, static_cast<size_type>(this->_BUF_SIZE));

  00041	c7 85 10 ff ff
	ff 10 00 00 00	 mov	 DWORD PTR $T3[ebp], 16	; 00000010H
  0004b	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00051	50		 push	 eax
  00052	8d 4d e8	 lea	 ecx, DWORD PTR __Alloc_max$[ebp]
  00055	51		 push	 ecx
  00056	e8 00 00 00 00	 call	 ??$_Max_value@I@std@@YAABIABI0@Z ; std::_Max_value<unsigned int>
  0005b	83 c4 08	 add	 esp, 8
  0005e	8b 10		 mov	 edx, DWORD PTR [eax]
  00060	89 55 dc	 mov	 DWORD PTR __Storage_max$[ebp], edx

; 3070 : 		return (_Min_value(

  00063	8b 45 dc	 mov	 eax, DWORD PTR __Storage_max$[ebp]
  00066	83 e8 01	 sub	 eax, 1
  00069	89 85 04 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0006f	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  00074	89 85 f8 fe ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  0007a	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00080	51		 push	 ecx
  00081	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  00087	52		 push	 edx
  00088	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  0008d	83 c4 08	 add	 esp, 8
  00090	8b 00		 mov	 eax, DWORD PTR [eax]

; 3071 : 			static_cast<size_type>((numeric_limits<difference_type>::max)()),
; 3072 : 			_Storage_max - 1 // -1 is for null terminator and/or npos
; 3073 : 			));
; 3074 : 
; 3075 : 		}

  00092	52		 push	 edx
  00093	8b cd		 mov	 ecx, ebp
  00095	50		 push	 eax
  00096	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@max_size
  0009c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000a1	58		 pop	 eax
  000a2	5a		 pop	 edx
  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a9	33 cd		 xor	 ecx, ebp
  000ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b0	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  000b6	3b ec		 cmp	 ebp, esp
  000b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c3		 ret	 0
  000c1	0f 1f 00	 npad	 3
$LN5@max_size:
  000c4	01 00 00 00	 DD	 1
  000c8	00 00 00 00	 DD	 $LN4@max_size
$LN4@max_size:
  000cc	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000d0	04 00 00 00	 DD	 4
  000d4	00 00 00 00	 DD	 $LN3@max_size
$LN3@max_size:
  000d8	5f		 DB	 95			; 0000005fH
  000d9	41		 DB	 65			; 00000041H
  000da	6c		 DB	 108			; 0000006cH
  000db	6c		 DB	 108			; 0000006cH
  000dc	6f		 DB	 111			; 0000006fH
  000dd	63		 DB	 99			; 00000063H
  000de	5f		 DB	 95			; 0000005fH
  000df	6d		 DB	 109			; 0000006dH
  000e0	61		 DB	 97			; 00000061H
  000e1	78		 DB	 120			; 00000078H
  000e2	00		 DB	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 3061 : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3062 : 		return (this->_Get_data()._Mysize);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	8b 40 14	 mov	 eax, DWORD PTR [eax+20]

; 3063 : 		}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data, COMDAT
; _this$ = ecx

; 3044 : 		{	// return pointer to immutable array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 3045 : 		return (this->_Get_data()._Myptr());

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0004a	8b c8		 mov	 ecx, eax
  0004c	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 3046 : 		}

  00051	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00054	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005b	59		 pop	 ecx
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00065	3b ec		 cmp	 ebp, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 3039 : 		{	// return pointer to null-terminated immutable array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 3040 : 		return (this->_Get_data()._Myptr());

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0004a	8b c8		 mov	 ecx, eax
  0004c	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 3041 : 		}

  00051	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00054	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005b	59		 pop	 ecx
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00065	3b ec		 cmp	 ebp, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z
_TEXT	SEGMENT
$T1 = -257						; size = 1
$T2 = -245						; size = 1
__Ptr$3 = -44						; size = 4
__Old_size$ = -32					; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Ch$ = 8						; size = 1
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back, COMDAT
; _this$ = ecx

; 2989 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00013	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2990 : 		auto& _My_data = this->_Get_data();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 2991 : 		const size_type _Old_size = _My_data._Mysize;

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00031	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00034	89 4d e0	 mov	 DWORD PTR __Old_size$[ebp], ecx

; 2992 : 		if (_Old_size < _My_data._Myres)

  00037	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003a	8b 4d e0	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  0003d	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  00040	73 4d		 jae	 SHORT $LN2@push_back

; 2993 : 			{
; 2994 : 			_My_data._Mysize = _Old_size + 1;

  00042	8b 45 e0	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00045	83 c0 01	 add	 eax, 1
  00048	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0004b	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 2995 : 			_Elem * const _Ptr = _My_data._Myptr();

  0004e	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00051	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00056	89 45 d4	 mov	 DWORD PTR __Ptr$3[ebp], eax

; 2996 : 			_Traits::assign(_Ptr[_Old_size], _Ch);

  00059	8d 45 08	 lea	 eax, DWORD PTR __Ch$[ebp]
  0005c	50		 push	 eax
  0005d	8b 4d d4	 mov	 ecx, DWORD PTR __Ptr$3[ebp]
  00060	03 4d e0	 add	 ecx, DWORD PTR __Old_size$[ebp]
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  00069	83 c4 08	 add	 esp, 8

; 2997 : 			_Traits::assign(_Ptr[_Old_size + 1], _Elem());

  0006c	c6 85 0b ff ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
  00073	8d 85 0b ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00079	50		 push	 eax
  0007a	8b 4d e0	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  0007d	8b 55 d4	 mov	 edx, DWORD PTR __Ptr$3[ebp]
  00080	8d 44 0a 01	 lea	 eax, DWORD PTR [edx+ecx+1]
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  0008a	83 c4 08	 add	 esp, 8

; 2998 : 			return;

  0008d	eb 1f		 jmp	 SHORT $LN1@push_back
$LN2@push_back:

; 2999 : 			}
; 3000 : 
; 3001 : 		_Reallocate_grow_by(1,

  0008f	33 c0		 xor	 eax, eax
  00091	88 85 ff fe ff
	ff		 mov	 BYTE PTR $T1[ebp], al
  00097	0f b6 4d 08	 movzx	 ecx, BYTE PTR __Ch$[ebp]
  0009b	51		 push	 ecx
  0009c	0f b6 95 ff fe
	ff ff		 movzx	 edx, BYTE PTR $T1[ebp]
  000a3	52		 push	 edx
  000a4	6a 01		 push	 1
  000a6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a9	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_15711c68e099a15a58f4d77303cb286d>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_15711c68e099a15a58f4d77303cb286d>@@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_15711c68e099a15a58f4d77303cb286d>,char>
$LN1@push_back:

; 3002 : 			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
; 3003 : 				const _Elem _Ch) {
; 3004 : 			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);
; 3005 : 			_Traits::assign(_New_ptr[_Old_size], _Ch);
; 3006 : 			_Traits::assign(_New_ptr[_Old_size + 1], _Elem());
; 3007 : 			}, _Ch);
; 3008 : 		}

  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	5b		 pop	 ebx
  000b1	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  000b7	3b ec		 cmp	 ebp, esp
  000b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c2 04 00	 ret	 4
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z
_TEXT	SEGMENT
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 2974 : 		{	// subscript immutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2975 : 		auto& _My_data = this->_Get_data();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 2976 : 		_IDL_VERIFY(_Off <= _My_data._Mysize, "string subscript out of range");

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00031	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00034	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00037	76 3f		 jbe	 SHORT $LN2@operator
  00039	68 a0 0b 00 00	 push	 2976			; 00000ba0H
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@MMDHPGIM@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
  00048	e8 00 00 00 00	 call	 ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message
  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00050	8b f4		 mov	 esi, esp
  00052	6a 00		 push	 0
  00054	68 a0 0b 00 00	 push	 2976			; 00000ba0H
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@MMDHPGIM@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?$DM?$AAc?$AAh?$AAa?$AAr?$AA?0?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAs?$AAt@
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006e	83 c4 14	 add	 esp, 20			; 00000014H
  00071	3b f4		 cmp	 esi, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@operator:

; 2977 : 		return (_My_data._Myptr()[_Off]);

  00078	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0007b	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00080	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]

; 2978 : 		}

  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0008c	3b ec		 cmp	 ebp, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 04 00	 ret	 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
_TEXT	SEGMENT
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 2967 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2968 : 		auto& _My_data = this->_Get_data();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 2969 : 		_IDL_VERIFY(_Off <= _My_data._Mysize, "string subscript out of range");

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00031	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00034	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00037	76 3f		 jbe	 SHORT $LN2@operator
  00039	68 99 0b 00 00	 push	 2969			; 00000b99H
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@MMDHPGIM@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
  00048	e8 00 00 00 00	 call	 ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message
  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00050	8b f4		 mov	 esi, esp
  00052	6a 00		 push	 0
  00054	68 99 0b 00 00	 push	 2969			; 00000b99H
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@MMDHPGIM@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?$DM?$AAc?$AAh?$AAa?$AAr?$AA?0?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAs?$AAt@
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006e	83 c4 14	 add	 esp, 20			; 00000014H
  00071	3b f4		 cmp	 esi, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@operator:

; 2970 : 		return (_My_data._Myptr()[_Off]);

  00078	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0007b	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00080	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]

; 2971 : 		}

  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0008c	3b ec		 cmp	 ebp, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 04 00	 ret	 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Unchecked_end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
__My_data$ = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?_Unchecked_end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Unchecked_end, COMDAT
; _this$ = ecx

; 2874 : 		{	// return pointer for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Unchecked_end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 2875 : 		auto& _My_data = this->_Get_data();

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0004a	89 45 e0	 mov	 DWORD PTR __My_data$[ebp], eax

; 2876 : 		return (_My_data._Myptr() + _My_data._Mysize);

  0004d	8b 4d e0	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00050	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00055	8b 4d e0	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00058	03 41 14	 add	 eax, DWORD PTR [ecx+20]

; 2877 : 		}

  0005b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00065	59		 pop	 ecx
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx
  00069	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0006f	3b ec		 cmp	 ebp, esp
  00071	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Unchecked_end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Unchecked_end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Unchecked_end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Unchecked_end
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Unchecked_begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?_Unchecked_begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Unchecked_begin, COMDAT
; _this$ = ecx

; 2864 : 		{	// return pointer for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Unchecked_begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 2865 : 		return (this->_Get_data()._Myptr());

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0004a	8b c8		 mov	 ecx, eax
  0004c	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 2866 : 		}

  00051	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00054	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005b	59		 pop	 ecx
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00065	3b ec		 cmp	 ebp, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Unchecked_begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Unchecked_begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Unchecked_begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Unchecked_begin
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
_TEXT	SEGMENT
__My_data$ = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin, COMDAT
; _this$ = ecx

; 2840 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 2841 : 		auto _My_data = _STD addressof(this->_Get_data());

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
  00050	83 c4 04	 add	 esp, 4
  00053	89 45 e0	 mov	 DWORD PTR __My_data$[ebp], eax

; 2842 : 		return (iterator(_Refancy<pointer>(_My_data->_Myptr()), _My_data));

  00056	8b 45 e0	 mov	 eax, DWORD PTR __My_data$[ebp]
  00059	50		 push	 eax
  0005a	8b 4d e0	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0005d	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ??$_Refancy@PAD$0A@@std@@YAPADPAD@Z ; std::_Refancy<char *,0>
  00068	83 c4 04	 add	 esp, 4
  0006b	50		 push	 eax
  0006c	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0006f	e8 00 00 00 00	 call	 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
  00074	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2843 : 		}

  00077	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00081	59		 pop	 ecx
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
  00085	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear, COMDAT
; _this$ = ecx

; 2643 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 2644 : 		_Eos(0);

  00042	6a 00		 push	 0
  00044	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2645 : 		}

  0004c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00056	59		 pop	 ecx
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00060	3b ec		 cmp	 ebp, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__New_size$ = -68					; size = 4
__Erase_at$ = -56					; size = 4
__My_ptr$ = -44						; size = 4
__Old_size$ = -32					; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 2614 : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00013	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2615 : 		auto& _My_data = this->_Get_data();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 2616 : 		_My_data._Check_offset(_Off);

  0002e	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00031	50		 push	 eax
  00032	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset

; 2617 : 		_Count = _My_data._Clamp_suffix_size(_Off, _Count);

  0003a	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0003d	50		 push	 eax
  0003e	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00041	51		 push	 ecx
  00042	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEIII@Z ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
  0004a	89 45 0c	 mov	 DWORD PTR __Count$[ebp], eax

; 2618 : 		const size_type _Old_size = _My_data._Mysize;

  0004d	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00050	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00053	89 4d e0	 mov	 DWORD PTR __Old_size$[ebp], ecx

; 2619 : 		_Elem * const _My_ptr = _My_data._Myptr();

  00056	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00059	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0005e	89 45 d4	 mov	 DWORD PTR __My_ptr$[ebp], eax

; 2620 : 		_Elem * const _Erase_at = _My_ptr + _Off;

  00061	8b 45 d4	 mov	 eax, DWORD PTR __My_ptr$[ebp]
  00064	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]
  00067	89 45 c8	 mov	 DWORD PTR __Erase_at$[ebp], eax

; 2621 : 		const size_type _New_size = _Old_size - _Count;

  0006a	8b 45 e0	 mov	 eax, DWORD PTR __Old_size$[ebp]
  0006d	2b 45 0c	 sub	 eax, DWORD PTR __Count$[ebp]
  00070	89 45 bc	 mov	 DWORD PTR __New_size$[ebp], eax

; 2622 : 		_My_data._Mysize = _New_size;

  00073	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00076	8b 4d bc	 mov	 ecx, DWORD PTR __New_size$[ebp]
  00079	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2623 : 		_Traits::move(_Erase_at, _Erase_at + _Count, _New_size - _Off + 1); // move suffix + null up

  0007c	8b 45 bc	 mov	 eax, DWORD PTR __New_size$[ebp]
  0007f	2b 45 08	 sub	 eax, DWORD PTR __Off$[ebp]
  00082	83 c0 01	 add	 eax, 1
  00085	50		 push	 eax
  00086	8b 4d c8	 mov	 ecx, DWORD PTR __Erase_at$[ebp]
  00089	03 4d 0c	 add	 ecx, DWORD PTR __Count$[ebp]
  0008c	51		 push	 ecx
  0008d	8b 55 c8	 mov	 edx, DWORD PTR __Erase_at$[ebp]
  00090	52		 push	 edx
  00091	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::move
  00096	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2624 : 		return (*this);

  00099	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 2625 : 		}

  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  000a5	3b ec		 cmp	 ebp, esp
  000a7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 2606 : 		{	// erase elements [_Off, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2607 : 		auto& _My_data = this->_Get_data();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 2608 : 		_My_data._Check_offset(_Off);

  0002e	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00031	50		 push	 eax
  00032	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset

; 2609 : 		_Eos(_Off);

  0003a	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  0003d	50		 push	 eax
  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2610 : 		return (*this);

  00046	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 2611 : 		}

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IQBDI@Z
_TEXT	SEGMENT
$T1 = -269						; size = 1
__Ptr_shifted_after$2 = -68				; size = 4
__Insert_at$3 = -56					; size = 4
__Old_ptr$4 = -44					; size = 4
__Old_size$ = -32					; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 2512 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd ec fe ff
	ff		 lea	 edi, DWORD PTR [ebp-276]
  00013	b9 45 00 00 00	 mov	 ecx, 69			; 00000045H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2513 : 		auto& _My_data = this->_Get_data();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 2514 : 		_My_data._Check_offset(_Off);

  0002e	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00031	50		 push	 eax
  00032	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset

; 2515 : 		const size_type _Old_size = _My_data._Mysize;

  0003a	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00040	89 4d e0	 mov	 DWORD PTR __Old_size$[ebp], ecx

; 2516 : 		if (_Count <= _My_data._Myres - _Old_size)

  00043	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00046	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00049	2b 4d e0	 sub	 ecx, DWORD PTR __Old_size$[ebp]
  0004c	39 4d 10	 cmp	 DWORD PTR __Count$[ebp], ecx
  0004f	0f 87 ae 00 00
	00		 ja	 $LN2@insert

; 2517 : 			{
; 2518 : 			_My_data._Mysize = _Old_size + _Count;

  00055	8b 45 e0	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00058	03 45 10	 add	 eax, DWORD PTR __Count$[ebp]
  0005b	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0005e	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 2519 : 			_Elem * const _Old_ptr = _My_data._Myptr();

  00061	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00064	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00069	89 45 d4	 mov	 DWORD PTR __Old_ptr$4[ebp], eax

; 2520 : 			_Elem * const _Insert_at = _Old_ptr + _Off;

  0006c	8b 45 d4	 mov	 eax, DWORD PTR __Old_ptr$4[ebp]
  0006f	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]
  00072	89 45 c8	 mov	 DWORD PTR __Insert_at$3[ebp], eax

; 2521 : 			// the range [_Ptr, _Ptr + _Ptr_shifted_after) is left alone by moving the suffix out,
; 2522 : 			// while the range [_Ptr + _Ptr_shifted_after, _Ptr + _Count) shifts down by _Count
; 2523 : 			size_type _Ptr_shifted_after;
; 2524 : 			if (_Ptr + _Count <= _Insert_at || _Ptr > _Old_ptr + _Old_size)

  00075	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00078	03 45 10	 add	 eax, DWORD PTR __Count$[ebp]
  0007b	3b 45 c8	 cmp	 eax, DWORD PTR __Insert_at$3[ebp]
  0007e	76 0b		 jbe	 SHORT $LN5@insert
  00080	8b 45 d4	 mov	 eax, DWORD PTR __Old_ptr$4[ebp]
  00083	03 45 e0	 add	 eax, DWORD PTR __Old_size$[ebp]
  00086	39 45 0c	 cmp	 DWORD PTR __Ptr$[ebp], eax
  00089	76 08		 jbe	 SHORT $LN3@insert
$LN5@insert:

; 2525 : 				{	// inserted content is before the shifted region, or does not alias
; 2526 : 				_Ptr_shifted_after = _Count; // none of _Ptr's data shifts

  0008b	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  0008e	89 45 bc	 mov	 DWORD PTR __Ptr_shifted_after$2[ebp], eax
  00091	eb 1a		 jmp	 SHORT $LN4@insert
$LN3@insert:

; 2527 : 				}
; 2528 : 			else if (_Insert_at <= _Ptr)

  00093	8b 45 c8	 mov	 eax, DWORD PTR __Insert_at$3[ebp]
  00096	3b 45 0c	 cmp	 eax, DWORD PTR __Ptr$[ebp]
  00099	77 09		 ja	 SHORT $LN6@insert

; 2529 : 				{	// all of [_Ptr, _Ptr + _Count) shifts
; 2530 : 				_Ptr_shifted_after = 0;

  0009b	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR __Ptr_shifted_after$2[ebp], 0

; 2531 : 				}
; 2532 : 			else

  000a2	eb 09		 jmp	 SHORT $LN4@insert
$LN6@insert:

; 2533 : 				{	// [_Ptr, _Ptr + _Count) contains _Insert_at, so only the part after _Insert_at shifts
; 2534 : 				_Ptr_shifted_after = static_cast<size_type>(_Insert_at - _Ptr);

  000a4	8b 45 c8	 mov	 eax, DWORD PTR __Insert_at$3[ebp]
  000a7	2b 45 0c	 sub	 eax, DWORD PTR __Ptr$[ebp]
  000aa	89 45 bc	 mov	 DWORD PTR __Ptr_shifted_after$2[ebp], eax
$LN4@insert:

; 2535 : 				}
; 2536 : 
; 2537 : 			_Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1); // move suffix + null down

  000ad	8b 45 e0	 mov	 eax, DWORD PTR __Old_size$[ebp]
  000b0	2b 45 08	 sub	 eax, DWORD PTR __Off$[ebp]
  000b3	83 c0 01	 add	 eax, 1
  000b6	50		 push	 eax
  000b7	8b 4d c8	 mov	 ecx, DWORD PTR __Insert_at$3[ebp]
  000ba	51		 push	 ecx
  000bb	8b 55 c8	 mov	 edx, DWORD PTR __Insert_at$3[ebp]
  000be	03 55 10	 add	 edx, DWORD PTR __Count$[ebp]
  000c1	52		 push	 edx
  000c2	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::move
  000c7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2538 : 			_Traits::copy(_Insert_at, _Ptr, _Ptr_shifted_after);

  000ca	8b 45 bc	 mov	 eax, DWORD PTR __Ptr_shifted_after$2[ebp]
  000cd	50		 push	 eax
  000ce	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000d1	51		 push	 ecx
  000d2	8b 55 c8	 mov	 edx, DWORD PTR __Insert_at$3[ebp]
  000d5	52		 push	 edx
  000d6	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  000db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2539 : 			_Traits::copy(_Insert_at + _Ptr_shifted_after, _Ptr + _Count + _Ptr_shifted_after,

  000de	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  000e1	2b 45 bc	 sub	 eax, DWORD PTR __Ptr_shifted_after$2[ebp]
  000e4	50		 push	 eax
  000e5	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000e8	03 4d 10	 add	 ecx, DWORD PTR __Count$[ebp]
  000eb	03 4d bc	 add	 ecx, DWORD PTR __Ptr_shifted_after$2[ebp]
  000ee	51		 push	 ecx
  000ef	8b 55 c8	 mov	 edx, DWORD PTR __Insert_at$3[ebp]
  000f2	03 55 bc	 add	 edx, DWORD PTR __Ptr_shifted_after$2[ebp]
  000f5	52		 push	 edx
  000f6	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  000fb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2540 : 				_Count - _Ptr_shifted_after);
; 2541 : 			return (*this);

  000fe	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00101	eb 28		 jmp	 SHORT $LN1@insert
$LN2@insert:

; 2542 : 			}
; 2543 : 
; 2544 : 		return (_Reallocate_grow_by(_Count,

  00103	33 c0		 xor	 eax, eax
  00105	88 85 f3 fe ff
	ff		 mov	 BYTE PTR $T1[ebp], al
  0010b	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp]
  0010e	51		 push	 ecx
  0010f	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00112	52		 push	 edx
  00113	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00116	50		 push	 eax
  00117	0f b6 8d f3 fe
	ff ff		 movzx	 ecx, BYTE PTR $T1[ebp]
  0011e	51		 push	 ecx
  0011f	8b 55 10	 mov	 edx, DWORD PTR __Count$[ebp]
  00122	52		 push	 edx
  00123	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00126	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_4d79bb85f269e6e8002a4599002d832c>,unsigned int,char const *,unsigned int>
$LN1@insert:

; 2545 : 			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
; 2546 : 				const size_type _Off, const _Elem * const _Ptr, const size_type _Count) {
; 2547 : 			_Traits::copy(_New_ptr, _Old_ptr, _Off);
; 2548 : 			_Traits::copy(_New_ptr + _Off, _Ptr, _Count);
; 2549 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);
; 2550 : 			}, _Off, _Ptr, _Count));
; 2551 : 		}

  0012b	5f		 pop	 edi
  0012c	5e		 pop	 esi
  0012d	5b		 pop	 ebx
  0012e	81 c4 14 01 00
	00		 add	 esp, 276		; 00000114H
  00134	3b ec		 cmp	 ebp, esp
  00136	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013b	8b e5		 mov	 esp, ebp
  0013d	5d		 pop	 ebp
  0013e	c2 0c 00	 ret	 12			; 0000000cH
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@@Z
_TEXT	SEGMENT
__Right_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
__Right$ = 12						; size = 4
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 2481 : 		{	// insert _Right at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2482 : 		auto& _Right_data = _Right._Get_data();

  00023	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	89 45 ec	 mov	 DWORD PTR __Right_data$[ebp], eax

; 2483 : 		return (insert(_Off, _Right_data._Myptr(), _Right_data._Mysize));

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __Right_data$[ebp]
  00031	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00034	51		 push	 ecx
  00035	8b 4d ec	 mov	 ecx, DWORD PTR __Right_data$[ebp]
  00038	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0003d	50		 push	 eax
  0003e	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  00041	52		 push	 edx
  00042	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 2484 : 		}

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00053	3b ec		 cmp	 ebp, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 08 00	 ret	 8
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
$T1 = -245						; size = 1
$T2 = -233						; size = 1
__Old_ptr$3 = -32					; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2456 : 		{	// assign _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00013	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2457 : 		auto& _My_data = this->_Get_data();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 2458 : 		if (_Count <= _My_data._Myres)

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00031	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00034	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  00037	77 4b		 ja	 SHORT $LN2@assign

; 2459 : 			{
; 2460 : 			_Elem * const _Old_ptr = _My_data._Myptr();

  00039	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0003c	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00041	89 45 e0	 mov	 DWORD PTR __Old_ptr$3[ebp], eax

; 2461 : 			_My_data._Mysize = _Count;

  00044	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00047	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  0004a	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2462 : 			_Traits::assign(_Old_ptr, _Count, _Ch);

  0004d	0f b6 45 0c	 movzx	 eax, BYTE PTR __Ch$[ebp]
  00051	50		 push	 eax
  00052	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00055	51		 push	 ecx
  00056	8b 55 e0	 mov	 edx, DWORD PTR __Old_ptr$3[ebp]
  00059	52		 push	 edx
  0005a	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAPADQADID@Z ; std::char_traits<char>::assign
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2463 : 			_Traits::assign(_Old_ptr[_Count], _Elem());

  00062	c6 85 17 ff ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
  00069	8d 85 17 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  0006f	50		 push	 eax
  00070	8b 4d e0	 mov	 ecx, DWORD PTR __Old_ptr$3[ebp]
  00073	03 4d 08	 add	 ecx, DWORD PTR __Count$[ebp]
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  0007c	83 c4 08	 add	 esp, 8

; 2464 : 			return (*this);

  0007f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00082	eb 21		 jmp	 SHORT $LN1@assign
$LN2@assign:

; 2465 : 			}
; 2466 : 
; 2467 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem _Ch) {

  00084	33 c0		 xor	 eax, eax
  00086	88 85 0b ff ff
	ff		 mov	 BYTE PTR $T1[ebp], al
  0008c	0f b6 4d 0c	 movzx	 ecx, BYTE PTR __Ch$[ebp]
  00090	51		 push	 ecx
  00091	0f b6 95 0b ff
	ff ff		 movzx	 edx, BYTE PTR $T1[ebp]
  00098	52		 push	 edx
  00099	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0009c	50		 push	 eax
  0009d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a0	e8 00 00 00 00	 call	 ??$_Reallocate_for@V<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_c6753c90be971fc9cc00b4f35f237a75>,char>
$LN1@assign:

; 2468 : 			_Traits::assign(_New_ptr, _Count, _Ch);
; 2469 : 			_Traits::assign(_New_ptr[_Count], _Elem());
; 2470 : 			}, _Ch));
; 2471 : 		}

  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx
  000a8	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  000ae	3b ec		 cmp	 ebp, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2451 : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2452 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00023	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?length@?$char_traits@D@std@@SAIQBD@Z ; std::char_traits<char>::length
  0002c	83 c4 04	 add	 esp, 4
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??$_Convert_size@I@std@@YAII@Z ; std::_Convert_size<unsigned int>
  00035	83 c4 04	 add	 esp, 4
  00038	50		 push	 eax
  00039	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0003c	51		 push	 ecx
  0003d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2453 : 		}

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -245						; size = 1
$T2 = -233						; size = 1
__Old_ptr$3 = -32					; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2433 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00013	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2434 : 		auto& _My_data = this->_Get_data();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 2435 : 		if (_Count <= _My_data._Myres)

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00031	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00034	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  00037	77 4a		 ja	 SHORT $LN2@assign

; 2436 : 			{
; 2437 : 			_Elem * const _Old_ptr = _My_data._Myptr();

  00039	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0003c	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00041	89 45 e0	 mov	 DWORD PTR __Old_ptr$3[ebp], eax

; 2438 : 			_My_data._Mysize = _Count;

  00044	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00047	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0004a	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2439 : 			_Traits::move(_Old_ptr, _Ptr, _Count);

  0004d	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00050	50		 push	 eax
  00051	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00054	51		 push	 ecx
  00055	8b 55 e0	 mov	 edx, DWORD PTR __Old_ptr$3[ebp]
  00058	52		 push	 edx
  00059	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::move
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2440 : 			_Traits::assign(_Old_ptr[_Count], _Elem());

  00061	c6 85 17 ff ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
  00068	8d 85 17 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  0006e	50		 push	 eax
  0006f	8b 4d e0	 mov	 ecx, DWORD PTR __Old_ptr$3[ebp]
  00072	03 4d 0c	 add	 ecx, DWORD PTR __Count$[ebp]
  00075	51		 push	 ecx
  00076	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  0007b	83 c4 08	 add	 esp, 8

; 2441 : 			return (*this);

  0007e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00081	eb 20		 jmp	 SHORT $LN1@assign
$LN2@assign:

; 2442 : 			}
; 2443 : 
; 2444 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr) {

  00083	33 c0		 xor	 eax, eax
  00085	88 85 0b ff ff
	ff		 mov	 BYTE PTR $T1[ebp], al
  0008b	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0008e	51		 push	 ecx
  0008f	0f b6 95 0b ff
	ff ff		 movzx	 edx, BYTE PTR $T1[ebp]
  00096	52		 push	 edx
  00097	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0009a	50		 push	 eax
  0009b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	e8 00 00 00 00	 call	 ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
$LN1@assign:

; 2445 : 			_Traits::copy(_New_ptr, _Ptr, _Count);
; 2446 : 			_Traits::assign(_New_ptr[_Count], _Elem());
; 2447 : 			}, _Ptr));
; 2448 : 		}

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  000ac	3b ec		 cmp	 ebp, esp
  000ae	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
$T1 = -257						; size = 1
$T2 = -245						; size = 1
__Old_ptr$3 = -44					; size = 4
__Old_size$ = -32					; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2375 : 		{	// append _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00013	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2376 : 		auto& _My_data = this->_Get_data();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 2377 : 		const size_type _Old_size = _My_data._Mysize;

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00031	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00034	89 4d e0	 mov	 DWORD PTR __Old_size$[ebp], ecx

; 2378 : 		if (_Count <= _My_data._Myres - _Old_size)

  00037	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0003d	2b 4d e0	 sub	 ecx, DWORD PTR __Old_size$[ebp]
  00040	39 4d 08	 cmp	 DWORD PTR __Count$[ebp], ecx
  00043	77 54		 ja	 SHORT $LN2@append

; 2379 : 			{
; 2380 : 			_My_data._Mysize = _Old_size + _Count;

  00045	8b 45 e0	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00048	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  0004b	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0004e	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 2381 : 			_Elem * const _Old_ptr = _My_data._Myptr();

  00051	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00054	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00059	89 45 d4	 mov	 DWORD PTR __Old_ptr$3[ebp], eax

; 2382 : 			_Traits::assign(_Old_ptr + _Old_size, _Count, _Ch);

  0005c	0f b6 45 0c	 movzx	 eax, BYTE PTR __Ch$[ebp]
  00060	50		 push	 eax
  00061	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00064	51		 push	 ecx
  00065	8b 55 d4	 mov	 edx, DWORD PTR __Old_ptr$3[ebp]
  00068	03 55 e0	 add	 edx, DWORD PTR __Old_size$[ebp]
  0006b	52		 push	 edx
  0006c	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAPADQADID@Z ; std::char_traits<char>::assign
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2383 : 			_Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00074	c6 85 0b ff ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
  0007b	8d 85 0b ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00081	50		 push	 eax
  00082	8b 4d e0	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  00085	03 4d 08	 add	 ecx, DWORD PTR __Count$[ebp]
  00088	03 4d d4	 add	 ecx, DWORD PTR __Old_ptr$3[ebp]
  0008b	51		 push	 ecx
  0008c	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  00091	83 c4 08	 add	 esp, 8

; 2384 : 			return (*this);

  00094	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00097	eb 25		 jmp	 SHORT $LN1@append
$LN2@append:

; 2385 : 			}
; 2386 : 
; 2387 : 		return (_Reallocate_grow_by(_Count,

  00099	33 c0		 xor	 eax, eax
  0009b	88 85 ff fe ff
	ff		 mov	 BYTE PTR $T1[ebp], al
  000a1	0f b6 4d 0c	 movzx	 ecx, BYTE PTR __Ch$[ebp]
  000a5	51		 push	 ecx
  000a6	8b 55 08	 mov	 edx, DWORD PTR __Count$[ebp]
  000a9	52		 push	 edx
  000aa	0f b6 85 ff fe
	ff ff		 movzx	 eax, BYTE PTR $T1[ebp]
  000b1	50		 push	 eax
  000b2	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  000b5	51		 push	 ecx
  000b6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b9	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_c1b8c41cb4019640539cfd828748c4d4>,unsigned int,char>
$LN1@append:

; 2388 : 			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
; 2389 : 				const size_type _Count, const _Elem _Ch) {
; 2390 : 			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);
; 2391 : 			_Traits::assign(_New_ptr + _Old_size, _Count, _Ch);
; 2392 : 			_Traits::assign(_New_ptr[_Old_size + _Count], _Elem());
; 2393 : 			}, _Count, _Ch));
; 2394 : 		}

  000be	5f		 pop	 edi
  000bf	5e		 pop	 esi
  000c0	5b		 pop	 ebx
  000c1	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  000c7	3b ec		 cmp	 ebp, esp
  000c9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 08 00	 ret	 8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2370 : 		{	// append [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2371 : 		return (append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00023	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?length@?$char_traits@D@std@@SAIQBD@Z ; std::char_traits<char>::length
  0002c	83 c4 04	 add	 esp, 4
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??$_Convert_size@I@std@@YAII@Z ; std::_Convert_size<unsigned int>
  00035	83 c4 04	 add	 esp, 4
  00038	50		 push	 eax
  00039	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0003c	51		 push	 ecx
  0003d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2372 : 		}

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -257						; size = 1
$T2 = -245						; size = 1
__Old_ptr$3 = -44					; size = 4
__Old_size$ = -32					; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2348 : 		{	// append [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00013	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2349 : 		auto& _My_data = this->_Get_data();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 2350 : 		const size_type _Old_size = _My_data._Mysize;

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00031	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00034	89 4d e0	 mov	 DWORD PTR __Old_size$[ebp], ecx

; 2351 : 		if (_Count <= _My_data._Myres - _Old_size)

  00037	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0003d	2b 4d e0	 sub	 ecx, DWORD PTR __Old_size$[ebp]
  00040	39 4d 0c	 cmp	 DWORD PTR __Count$[ebp], ecx
  00043	77 53		 ja	 SHORT $LN2@append

; 2352 : 			{
; 2353 : 			_My_data._Mysize = _Old_size + _Count;

  00045	8b 45 e0	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00048	03 45 0c	 add	 eax, DWORD PTR __Count$[ebp]
  0004b	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0004e	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 2354 : 			_Elem * const _Old_ptr = _My_data._Myptr();

  00051	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00054	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00059	89 45 d4	 mov	 DWORD PTR __Old_ptr$3[ebp], eax

; 2355 : 			_Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  0005c	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0005f	50		 push	 eax
  00060	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00063	51		 push	 ecx
  00064	8b 55 d4	 mov	 edx, DWORD PTR __Old_ptr$3[ebp]
  00067	03 55 e0	 add	 edx, DWORD PTR __Old_size$[ebp]
  0006a	52		 push	 edx
  0006b	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::move
  00070	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2356 : 			_Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00073	c6 85 0b ff ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
  0007a	8d 85 0b ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00080	50		 push	 eax
  00081	8b 4d e0	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  00084	03 4d 0c	 add	 ecx, DWORD PTR __Count$[ebp]
  00087	03 4d d4	 add	 ecx, DWORD PTR __Old_ptr$3[ebp]
  0008a	51		 push	 ecx
  0008b	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  00090	83 c4 08	 add	 esp, 8

; 2357 : 			return (*this);

  00093	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00096	eb 24		 jmp	 SHORT $LN1@append
$LN2@append:

; 2358 : 			}
; 2359 : 
; 2360 : 		return (_Reallocate_grow_by(_Count,

  00098	33 c0		 xor	 eax, eax
  0009a	88 85 ff fe ff
	ff		 mov	 BYTE PTR $T1[ebp], al
  000a0	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  000a3	51		 push	 ecx
  000a4	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000a7	52		 push	 edx
  000a8	0f b6 85 ff fe
	ff ff		 movzx	 eax, BYTE PTR $T1[ebp]
  000af	50		 push	 eax
  000b0	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  000b3	51		 push	 ecx
  000b4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b7	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
$LN1@append:

; 2361 : 			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
; 2362 : 				const _Elem * const _Ptr, const size_type _Count) {
; 2363 : 			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);
; 2364 : 			_Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);
; 2365 : 			_Traits::assign(_New_ptr[_Old_size + _Count], _Elem());
; 2366 : 			}, _Ptr, _Count));
; 2367 : 		}

  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi
  000be	5b		 pop	 ebx
  000bf	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  000c5	3b ec		 cmp	 ebp, esp
  000c7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c2 08 00	 ret	 8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2319 : 		{	// append _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2320 : 		auto& _Right_data = _Right._Get_data();

  00023	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	89 45 ec	 mov	 DWORD PTR __Right_data$[ebp], eax

; 2321 : 		return (append(_Right_data._Myptr(), _Right_data._Mysize));

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __Right_data$[ebp]
  00031	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00034	51		 push	 ecx
  00035	8b 4d ec	 mov	 ecx, DWORD PTR __Right_data$[ebp]
  00038	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0003d	50		 push	 eax
  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2322 : 		}

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0004f	3b ec		 cmp	 ebp, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ch$ = 8						; size = 1
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 2313 : 		{	// append 1 * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2314 : 		push_back(_Ch);

  00023	0f b6 45 08	 movzx	 eax, BYTE PTR __Ch$[ebp]
  00027	50		 push	 eax
  00028	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back

; 2315 : 		return (*this);

  00030	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 2316 : 		}

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 2308 : 		{	// append [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2309 : 		return (append(_Ptr));

  00023	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2310 : 		}

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 2296 : 		{	// append _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2297 : 		return (append(_Right));

  00023	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2298 : 		}

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 2281 : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2282 : 		return (assign(_Ptr));

  00023	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2283 : 		}

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right_data$1 = -20					; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 2252 : 		{	// assign _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2253 : 		if (this != _STD addressof(_Right))

  00023	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??$addressof@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const >
  0002c	83 c4 04	 add	 esp, 4
  0002f	39 45 f8	 cmp	 DWORD PTR _this$[ebp], eax
  00032	74 40		 je	 SHORT $LN2@operator

; 2254 : 			{	// different, assign it
; 2255 : #pragma warning(push)
; 2256 : #pragma warning(disable: 4127)	// conditional expression is constant
; 2257 : 			if (_Alty_traits::propagate_on_container_copy_assignment::value
; 2258 : 				&& this->_Getal() != _Right._Getal())

  00034	33 c0		 xor	 eax, eax
  00036	74 08		 je	 SHORT $LN3@operator

; 2259 : 				{	// change allocator before copying
; 2260 : 				_Tidy_deallocate();

  00038	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
$LN3@operator:

; 2261 : 				}
; 2262 : #pragma warning(pop)
; 2263 : 
; 2264 : 			this->_Copy_alloc(_Right._Getal());

  00040	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00043	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00048	50		 push	 eax
  00049	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?_Copy_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXABV?$allocator@D@2@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Copy_alloc

; 2265 : 
; 2266 : 			auto& _Right_data = _Right._Get_data();

  00051	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00054	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00059	89 45 ec	 mov	 DWORD PTR __Right_data$1[ebp], eax

; 2267 : 			assign(_Right_data._Myptr(), _Right_data._Mysize);

  0005c	8b 45 ec	 mov	 eax, DWORD PTR __Right_data$1[ebp]
  0005f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00062	51		 push	 ecx
  00063	8b 4d ec	 mov	 ecx, DWORD PTR __Right_data$1[ebp]
  00066	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0006b	50		 push	 eax
  0006c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN2@operator:

; 2268 : 			}
; 2269 : 
; 2270 : 		return (*this);

  00074	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 2271 : 		}

  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00080	3b ec		 cmp	 ebp, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2245 : 		{	// destroy the string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 2246 : 		_Tidy_deallocate();

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 2247 : 		}

  0004a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV12@@Z
_TEXT	SEGMENT
$T1 = -312						; size = 4
$T2 = -300						; size = 4
__New_array$ = -96					; size = 4
__New_capacity$ = -84					; size = 4
__Al$ = -72						; size = 4
__Right_ptr$ = -60					; size = 4
__Right_size$ = -48					; size = 4
__Right_data$ = -36					; size = 4
__My_data$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
__Right$ = 8						; size = 4
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents, COMDAT
; _this$ = ecx

; 2181 : 		{	// assign by copying data stored in _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd c4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-316]
  00013	b9 4f 00 00 00	 mov	 ecx, 79			; 0000004fH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 2182 : 			// pre: this != &_Right
; 2183 : 			// pre: *this owns no memory, iterators orphaned (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2184 : 		auto& _My_data = this->_Get_data();

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00035	89 45 e8	 mov	 DWORD PTR __My_data$[ebp], eax

; 2185 : 		auto& _Right_data = _Right._Get_data();

  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0003b	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00040	89 45 dc	 mov	 DWORD PTR __Right_data$[ebp], eax

; 2186 : 		const size_type _Right_size = _Right_data._Mysize;

  00043	8b 45 dc	 mov	 eax, DWORD PTR __Right_data$[ebp]
  00046	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00049	89 4d d0	 mov	 DWORD PTR __Right_size$[ebp], ecx

; 2187 : 		const _Elem * const _Right_ptr = _Right_data._Myptr();

  0004c	8b 4d dc	 mov	 ecx, DWORD PTR __Right_data$[ebp]
  0004f	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00054	89 45 c4	 mov	 DWORD PTR __Right_ptr$[ebp], eax

; 2188 : 		if (_Right_size < this->_BUF_SIZE)

  00057	83 7d d0 10	 cmp	 DWORD PTR __Right_size$[ebp], 16 ; 00000010H
  0005b	73 2d		 jae	 SHORT $LN2@Construct_

; 2189 : 			{   // stay small, don't allocate
; 2190 : 			_Traits::copy(_My_data._Bx._Buf, _Right_ptr, this->_BUF_SIZE);

  0005d	6a 10		 push	 16			; 00000010H
  0005f	8b 45 c4	 mov	 eax, DWORD PTR __Right_ptr$[ebp]
  00062	50		 push	 eax
  00063	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00066	83 c1 04	 add	 ecx, 4
  00069	51		 push	 ecx
  0006a	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2191 : 			_My_data._Mysize = _Right_size;

  00072	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00075	8b 4d d0	 mov	 ecx, DWORD PTR __Right_size$[ebp]
  00078	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2192 : 			_My_data._Myres = this->_BUF_SIZE - 1;

  0007b	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0007e	c7 40 18 0f 00
	00 00		 mov	 DWORD PTR [eax+24], 15	; 0000000fH

; 2193 : 			return;

  00085	e9 a4 00 00 00	 jmp	 $LN1@Construct_
$LN2@Construct_:

; 2194 : 			}
; 2195 : 
; 2196 : 		auto& _Al = this->_Getal();

  0008a	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00092	89 45 b8	 mov	 DWORD PTR __Al$[ebp], eax

; 2197 : 		const size_type _New_capacity = _Min_value(_Right_size | this->_ALLOC_MASK, max_size());

  00095	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00098	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  0009d	89 85 d4 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  000a3	8b 45 d0	 mov	 eax, DWORD PTR __Right_size$[ebp]
  000a6	83 c8 0f	 or	 eax, 15			; 0000000fH
  000a9	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  000af	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  000b5	51		 push	 ecx
  000b6	8d 95 c8 fe ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  000bc	52		 push	 edx
  000bd	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  000c2	83 c4 08	 add	 esp, 8
  000c5	8b 00		 mov	 eax, DWORD PTR [eax]
  000c7	89 45 ac	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 2198 : 		const pointer _New_array = _Al.allocate(_New_capacity + 1); // throws

  000ca	8b 45 ac	 mov	 eax, DWORD PTR __New_capacity$[ebp]
  000cd	83 c0 01	 add	 eax, 1
  000d0	50		 push	 eax
  000d1	8b 4d b8	 mov	 ecx, DWORD PTR __Al$[ebp]
  000d4	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  000d9	89 45 a0	 mov	 DWORD PTR __New_array$[ebp], eax

; 2199 : 		_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_array);

  000dc	8d 45 a0	 lea	 eax, DWORD PTR __New_array$[ebp]
  000df	50		 push	 eax
  000e0	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000e3	83 c1 04	 add	 ecx, 4
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 ??$addressof@PAD@std@@YAPAPADAAPAD@Z ; std::addressof<char *>
  000ec	83 c4 04	 add	 esp, 4
  000ef	50		 push	 eax
  000f0	8b 55 b8	 mov	 edx, DWORD PTR __Al$[ebp]
  000f3	52		 push	 edx
  000f4	e8 00 00 00 00	 call	 ??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
  000f9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2200 : 		_Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  000fc	8b 45 d0	 mov	 eax, DWORD PTR __Right_size$[ebp]
  000ff	83 c0 01	 add	 eax, 1
  00102	50		 push	 eax
  00103	8b 4d c4	 mov	 ecx, DWORD PTR __Right_ptr$[ebp]
  00106	51		 push	 ecx
  00107	8b 55 a0	 mov	 edx, DWORD PTR __New_array$[ebp]
  0010a	52		 push	 edx
  0010b	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  00110	83 c4 04	 add	 esp, 4
  00113	50		 push	 eax
  00114	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  00119	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2201 : 		_My_data._Mysize = _Right_size;

  0011c	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0011f	8b 4d d0	 mov	 ecx, DWORD PTR __Right_size$[ebp]
  00122	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2202 : 		_My_data._Myres = _New_capacity;

  00125	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00128	8b 4d ac	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  0012b	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN1@Construct_:

; 2203 : 		}

  0012e	52		 push	 edx
  0012f	8b cd		 mov	 ecx, ebp
  00131	50		 push	 eax
  00132	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@Construct_
  00138	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0013d	58		 pop	 eax
  0013e	5a		 pop	 edx
  0013f	5f		 pop	 edi
  00140	5e		 pop	 esi
  00141	5b		 pop	 ebx
  00142	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00145	33 cd		 xor	 ecx, ebp
  00147	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014c	81 c4 3c 01 00
	00		 add	 esp, 316		; 0000013cH
  00152	3b ec		 cmp	 ebp, esp
  00154	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00159	8b e5		 mov	 esp, ebp
  0015b	5d		 pop	 ebp
  0015c	c2 04 00	 ret	 4
  0015f	90		 npad	 1
$LN6@Construct_:
  00160	01 00 00 00	 DD	 1
  00164	00 00 00 00	 DD	 $LN5@Construct_
$LN5@Construct_:
  00168	a0 ff ff ff	 DD	 -96			; ffffffa0H
  0016c	04 00 00 00	 DD	 4
  00170	00 00 00 00	 DD	 $LN4@Construct_
$LN4@Construct_:
  00174	5f		 DB	 95			; 0000005fH
  00175	4e		 DB	 78			; 0000004eH
  00176	65		 DB	 101			; 00000065H
  00177	77		 DB	 119			; 00000077H
  00178	5f		 DB	 95			; 0000005fH
  00179	61		 DB	 97			; 00000061H
  0017a	72		 DB	 114			; 00000072H
  0017b	72		 DB	 114			; 00000072H
  0017c	61		 DB	 97			; 00000061H
  0017d	79		 DB	 121			; 00000079H
  0017e	00		 DB	 0
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__Right_data_mem$ = -44					; size = 4
__My_data_mem$ = -32					; size = 4
__Right_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal, COMDAT
; _this$ = ecx

; 2131 : 		{	// assign by stealing _Right's buffer, memcpy optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00013	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2132 : 			// pre: this != &_Right
; 2133 : 			// pre: allocator propagation (POCMA) from _Right, if necessary, is complete
; 2134 : 			// pre: *this owns no memory, iterators orphaned (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2135 : 		auto& _Right_data = _Right._Get_data();

  00023	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	89 45 ec	 mov	 DWORD PTR __Right_data$[ebp], eax

; 2136 : 
; 2137 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2138 : 		if (_Right_data._Large_string_engaged())

  0002e	8b 4d ec	 mov	 ecx, DWORD PTR __Right_data$[ebp]
  00031	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00036	0f b6 c0	 movzx	 eax, al
  00039	85 c0		 test	 eax, eax
  0003b	74 0e		 je	 SHORT $LN2@Assign_rv_

; 2139 : 			{	// take ownership of _Right's iterators along with its buffer
; 2140 : 			this->_Swap_all(_Right);

  0003d	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00040	50		 push	 eax
  00041	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Swap_all

; 2141 : 			}
; 2142 : 		else

  00049	eb 08		 jmp	 SHORT $LN3@Assign_rv_
$LN2@Assign_rv_:

; 2143 : 			{
; 2144 : 			_Right._Orphan_all();

  0004b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0004e	e8 00 00 00 00	 call	 ?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all
$LN3@Assign_rv_:

; 2145 : 			}
; 2146 : #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 2147 : 
; 2148 : 		const auto _My_data_mem = reinterpret_cast<unsigned char *>(_STD addressof(this->_Get_data()))
; 2149 : 			+ _Memcpy_move_offset;

  00053	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
  00061	83 c4 04	 add	 esp, 4
  00064	83 c0 04	 add	 eax, 4
  00067	89 45 e0	 mov	 DWORD PTR __My_data_mem$[ebp], eax

; 2150 : 		const auto _Right_data_mem = reinterpret_cast<unsigned char *>(_STD addressof(_Right_data))
; 2151 : 			+ _Memcpy_move_offset;

  0006a	8b 45 ec	 mov	 eax, DWORD PTR __Right_data$[ebp]
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
  00073	83 c4 04	 add	 esp, 4
  00076	83 c0 04	 add	 eax, 4
  00079	89 45 d4	 mov	 DWORD PTR __Right_data_mem$[ebp], eax

; 2152 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  0007c	6a 18		 push	 24			; 00000018H
  0007e	8b 45 d4	 mov	 eax, DWORD PTR __Right_data_mem$[ebp]
  00081	50		 push	 eax
  00082	8b 4d e0	 mov	 ecx, DWORD PTR __My_data_mem$[ebp]
  00085	51		 push	 ecx
  00086	e8 00 00 00 00	 call	 _memcpy
  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2153 : 		_Right._Tidy_init();

  0008e	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00091	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2154 : 		}

  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  0009f	3b ec		 cmp	 ebp, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 08 00	 ret	 8
?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Assign_rv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Assign_rv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents, COMDAT
; _this$ = ecx

; 2108 : 		{	// assign either as an rvalue or as an lvalue copy, allocators always equal optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2109 : 			// pre: this != &_Right
; 2110 : 			// pre: allocator propagation (POCMA) from _Right, if necessary, is complete
; 2111 : 			// pre: *this owns no memory, iterators orphaned (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2112 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  00023	33 c0		 xor	 eax, eax
  00025	88 85 2f ff ff
	ff		 mov	 BYTE PTR $T1[ebp], al
  0002b	0f b6 8d 2f ff
	ff ff		 movzx	 ecx, BYTE PTR $T1[ebp]
  00032	51		 push	 ecx
  00033	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00036	52		 push	 edx
  00037	e8 00 00 00 00	 call	 ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
  0003c	83 c4 04	 add	 esp, 4
  0003f	50		 push	 eax
  00040	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	e8 00 00 00 00	 call	 ?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal

; 2113 : 		}

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 08 00	 ret	 8
?_Assign_rv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
$T2 = -221						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 2085 : 		{	// assign by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 2086 : 		if (this != _STD addressof(_Right))

  00042	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0004b	83 c4 04	 add	 esp, 4
  0004e	39 45 ec	 cmp	 DWORD PTR _this$[ebp], eax
  00051	74 3e		 je	 SHORT $LN2@operator

; 2087 : 			{	// different, assign it
; 2088 : 			_Tidy_deallocate();

  00053	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 2089 : 			this->_Move_alloc(_Right._Getal());

  0005b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0005e	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00063	50		 push	 eax
  00064	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV?$allocator@D@2@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Move_alloc

; 2090 : 			// tag dispatch to remove unnecessary exception handling codegen in the
; 2091 : 			// equal allocators case
; 2092 : 			_Assign_rv_contents(_STD move(_Right),

  0006c	33 c0		 xor	 eax, eax
  0006e	88 85 23 ff ff
	ff		 mov	 BYTE PTR $T2[ebp], al
  00074	0f b6 8d 23 ff
	ff ff		 movzx	 ecx, BYTE PTR $T2[ebp]
  0007b	51		 push	 ecx
  0007c	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  0007f	52		 push	 edx
  00080	e8 00 00 00 00	 call	 ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
  00085	83 c4 04	 add	 esp, 4
  00088	50		 push	 eax
  00089	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	e8 00 00 00 00	 call	 ?_Assign_rv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents
$LN2@operator:

; 2093 : 				bool_constant<_Alty_traits::propagate_on_container_move_assignment::value
; 2094 : 				|| _Alty_traits::is_always_equal::value>{});
; 2095 : 			}
; 2096 : 
; 2097 : 		return (*this);

  00091	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]

; 2098 : 		}

  00094	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00097	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009e	59		 pop	 ecx
  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx
  000a2	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000a8	3b ec		 cmp	 ebp, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
$T2 = -221						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2054 : 		{	// construct by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 2053 : 		: _Mybase(_STD move(_Right._Getal()))

  00042	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::move<std::allocator<char> &>
  00050	83 c4 04	 add	 esp, 4
  00053	50		 push	 eax
  00054	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>

; 2055 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  0005c	33 c0		 xor	 eax, eax
  0005e	88 85 23 ff ff
	ff		 mov	 BYTE PTR $T2[ebp], al
  00064	0f b6 8d 23 ff
	ff ff		 movzx	 ecx, BYTE PTR $T2[ebp]
  0006b	51		 push	 ecx
  0006c	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  0006f	52		 push	 edx
  00070	e8 00 00 00 00	 call	 ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
  00075	83 c4 04	 add	 esp, 4
  00078	50		 push	 eax
  00079	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal

; 2056 : 		}

  00081	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00084	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00087	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008e	59		 pop	 ecx
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
  00092	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00098	3b ec		 cmp	 ebp, esp
  0009a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1991 : 		{	// construct from _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1990 : 		: _Mybase()

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1992 : 		_Tidy_init();

  00051	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 1993 : 		assign(_Count, _Ch);

  00059	0f b6 45 0c	 movzx	 eax, BYTE PTR __Ch$[ebp]
  0005d	50		 push	 eax
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00061	51		 push	 ecx
  00062	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1994 : 		}

  0006a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00071	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00088	3b ec		 cmp	 ebp, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1977 : 		{	// construct from [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1976 : 		: _Mybase()

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1978 : 		_Tidy_init();

  00051	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 1979 : 		assign(_Ptr);

  00059	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0005c	50		 push	 eax
  0005d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1980 : 		}

  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00072	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00079	59		 pop	 ecx
  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00083	3b ec		 cmp	 ebp, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1962 : 		{	// construct from [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1961 : 		: _Mybase()

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1963 : 		_Tidy_init();

  00051	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 1964 : 		assign(_Ptr, _Count);

  00059	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0005c	50		 push	 eax
  0005d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00060	51		 push	 ecx
  00061	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1965 : 		}

  00069	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00070	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00073	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00076	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007d	59		 pop	 ecx
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00087	3b ec		 cmp	 ebp, esp
  00089	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1936 : 		{	// construct empty string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1935 : 		: _Mybase()

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >

; 1937 : 		_Tidy_init();

  0004a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 1938 : 		}

  00052	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00069	3b ec		 cmp	 ebp, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T2 = -221						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1924 : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1923 : 		: _Mybase(_Alty_traits::select_on_container_copy_construction(_Right._Getal()))

  00042	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  0004a	50		 push	 eax
  0004b	8d 85 23 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
  00057	83 c4 08	 add	 esp, 8
  0005a	50		 push	 eax
  0005b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	e8 00 00 00 00	 call	 ??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>
  00063	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1925 : 		_Construct_lv_contents(_Right);

  0006a	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0006d	50		 push	 eax
  0006e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	e8 00 00 00 00	 call	 ?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents

; 1926 : 		}

  00076	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0007d	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00080	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00083	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008a	59		 pop	 ecx
  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00094	3b ec		 cmp	 ebp, esp
  00096	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 342  : 		{	// return const reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 343  : 		return (_Myval2);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 344  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 337  : 		{	// return reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 338  : 		return (_Myval2);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 339  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 322  : 		{	// return const reference to first

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 323  : 		return (*this);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 324  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 317  : 		{	// return reference to first

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 318  : 		return (*this);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 319  : 		}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx

; 1839 : 		{	// return const reference to _String_val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1840 : 		return (_Mypair._Get_second());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second

; 1841 : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx

; 1834 : 		{	// return reference to _String_val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1835 : 		return (_Mypair._Get_second());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second

; 1836 : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 1829 : 		{	// return const reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1830 : 		return (_Mypair._Get_first());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 1831 : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 1824 : 		{	// return reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1825 : 		return (_Mypair._Get_first());

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 1826 : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Swap_all, COMDAT
; _this$ = ecx

; 1819 : 		{	// swap all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1820 : 		_Get_data()._Swap_all(_Right._Get_data());

  00023	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	50		 push	 eax
  0002c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00034	8b c8		 mov	 ecx, eax
  00036	e8 00 00 00 00	 call	 ?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z ; std::_Container_base12::_Swap_all

; 1821 : 		}

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Swap_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 1814 : 		{	// orphan all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1815 : 		_Get_data()._Orphan_all();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002b	8b c8		 mov	 ecx, eax
  0002d	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1816 : 		}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy, COMDAT
; _this$ = ecx

; 1803 : 		{	// return reference to _Myproxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1804 : 		return (_Get_data()._Myproxy);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data

; 1805 : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Proxy_allocator$ = -21				; size = 1
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy, COMDAT
; _this$ = ecx

; 1789 : 		{	// destroy proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00013	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1790 : 		_Alproxy _Proxy_allocator(_Getal());

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00035	50		 push	 eax
  00036	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00039	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>

; 1791 : 		_Orphan_all();

  0003e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	e8 00 00 00 00	 call	 ?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all

; 1792 : 		_Alproxy_traits::destroy(_Proxy_allocator, _Myproxy());

  00046	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
  0004e	8b 00		 mov	 eax, DWORD PTR [eax]
  00050	50		 push	 eax
  00051	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00054	51		 push	 ecx
  00055	e8 00 00 00 00	 call	 ??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
  0005a	83 c4 08	 add	 esp, 8

; 1793 : 		_Deallocate_plain(_Proxy_allocator, _Myproxy());

  0005d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
  00065	8b 00		 mov	 eax, DWORD PTR [eax]
  00067	50		 push	 eax
  00068	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  0006b	51		 push	 ecx
  0006c	e8 00 00 00 00	 call	 ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
  00071	83 c4 08	 add	 esp, 8

; 1794 : 		_Myproxy() = 0;

  00074	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
  0007c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1795 : 		}

  00082	52		 push	 edx
  00083	8b cd		 mov	 ecx, ebp
  00085	50		 push	 eax
  00086	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Free_proxy
  0008c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00091	58		 pop	 eax
  00092	5a		 pop	 edx
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00099	33 cd		 xor	 ecx, ebp
  0009b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a0	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  000a6	3b ec		 cmp	 ebp, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
  000b1	0f 1f 00	 npad	 3
$LN5@Free_proxy:
  000b4	01 00 00 00	 DD	 1
  000b8	00 00 00 00	 DD	 $LN4@Free_proxy
$LN4@Free_proxy:
  000bc	eb ff ff ff	 DD	 -21			; ffffffebH
  000c0	01 00 00 00	 DD	 1
  000c4	00 00 00 00	 DD	 $LN3@Free_proxy
$LN3@Free_proxy:
  000c8	5f		 DB	 95			; 0000005fH
  000c9	50		 DB	 80			; 00000050H
  000ca	72		 DB	 114			; 00000072H
  000cb	6f		 DB	 111			; 0000006fH
  000cc	78		 DB	 120			; 00000078H
  000cd	79		 DB	 121			; 00000079H
  000ce	5f		 DB	 95			; 0000005fH
  000cf	61		 DB	 97			; 00000061H
  000d0	6c		 DB	 108			; 0000006cH
  000d1	6c		 DB	 108			; 0000006cH
  000d2	6f		 DB	 111			; 0000006fH
  000d3	63		 DB	 99			; 00000063H
  000d4	61		 DB	 97			; 00000061H
  000d5	74		 DB	 116			; 00000074H
  000d6	6f		 DB	 111			; 0000006fH
  000d7	72		 DB	 114			; 00000072H
  000d8	00		 DB	 0
?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -232						; size = 8
__Proxy_allocator$ = -21				; size = 1
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 1781 : 		{	// construct proxy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00013	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1782 : 		_Alproxy _Proxy_allocator(_Getal());

  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00035	50		 push	 eax
  00036	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00039	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>

; 1783 : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

  0003e	6a 01		 push	 1
  00040	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00043	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  0004e	83 c4 04	 add	 esp, 4
  00051	8b f0		 mov	 esi, eax
  00053	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
  0005b	89 30		 mov	 DWORD PTR [eax], esi

; 1784 : 		_Alproxy_traits::construct(_Proxy_allocator, _Myproxy(), _Container_proxy());

  0005d	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  00063	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy
  00068	50		 push	 eax
  00069	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
  00071	8b 00		 mov	 eax, DWORD PTR [eax]
  00073	50		 push	 eax
  00074	8d 4d eb	 lea	 ecx, DWORD PTR __Proxy_allocator$[ebp]
  00077	51		 push	 ecx
  00078	e8 00 00 00 00	 call	 ??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1785 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

  00080	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
  0008e	83 c4 04	 add	 esp, 4
  00091	8b f0		 mov	 esi, eax
  00093	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	e8 00 00 00 00	 call	 ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
  0009b	8b 00		 mov	 eax, DWORD PTR [eax]
  0009d	89 30		 mov	 DWORD PTR [eax], esi

; 1786 : 		}

  0009f	52		 push	 edx
  000a0	8b cd		 mov	 ecx, ebp
  000a2	50		 push	 eax
  000a3	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Alloc_prox
  000a9	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ae	58		 pop	 eax
  000af	5a		 pop	 edx
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
  000b3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b6	33 cd		 xor	 ecx, ebp
  000b8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bd	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  000c3	3b ec		 cmp	 ebp, esp
  000c5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c3		 ret	 0
  000ce	66 90		 npad	 2
$LN5@Alloc_prox:
  000d0	01 00 00 00	 DD	 1
  000d4	00 00 00 00	 DD	 $LN4@Alloc_prox
$LN4@Alloc_prox:
  000d8	eb ff ff ff	 DD	 -21			; ffffffebH
  000dc	01 00 00 00	 DD	 1
  000e0	00 00 00 00	 DD	 $LN3@Alloc_prox
$LN3@Alloc_prox:
  000e4	5f		 DB	 95			; 0000005fH
  000e5	50		 DB	 80			; 00000050H
  000e6	72		 DB	 114			; 00000072H
  000e7	6f		 DB	 111			; 0000006fH
  000e8	78		 DB	 120			; 00000078H
  000e9	79		 DB	 121			; 00000079H
  000ea	5f		 DB	 95			; 0000005fH
  000eb	61		 DB	 97			; 00000061H
  000ec	6c		 DB	 108			; 0000006cH
  000ed	6c		 DB	 108			; 0000006cH
  000ee	6f		 DB	 111			; 0000006fH
  000ef	63		 DB	 99			; 00000063H
  000f0	61		 DB	 97			; 00000061H
  000f1	74		 DB	 116			; 00000074H
  000f2	6f		 DB	 111			; 0000006fH
  000f3	72		 DB	 114			; 00000072H
  000f4	00		 DB	 0
?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV?$allocator@D@2@@Z
_TEXT	SEGMENT
tv72 = -217						; size = 1
__Reload$ = -17						; size = 1
_this$ = -8						; size = 4
__Al$ = 8						; size = 4
?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV?$allocator@D@2@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Move_alloc, COMDAT
; _this$ = ecx

; 1763 : 		{	// replace old allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00013	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1764 : 		const bool _Reload = _Alty_traits::propagate_on_container_move_assignment::value
; 1765 : 			&& _Getal() != _Al;

  00023	b8 01 00 00 00	 mov	 eax, 1
  00028	85 c0		 test	 eax, eax
  0002a	74 25		 je	 SHORT $LN5@Move_alloc
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  0002f	51		 push	 ecx
  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z ; std::operator!=<char,char>
  0003e	83 c4 08	 add	 esp, 8
  00041	0f b6 d0	 movzx	 edx, al
  00044	85 d2		 test	 edx, edx
  00046	74 09		 je	 SHORT $LN5@Move_alloc
  00048	c6 85 27 ff ff
	ff 01		 mov	 BYTE PTR tv72[ebp], 1
  0004f	eb 07		 jmp	 SHORT $LN6@Move_alloc
$LN5@Move_alloc:
  00051	c6 85 27 ff ff
	ff 00		 mov	 BYTE PTR tv72[ebp], 0
$LN6@Move_alloc:
  00058	8a 85 27 ff ff
	ff		 mov	 al, BYTE PTR tv72[ebp]
  0005e	88 45 ef	 mov	 BYTE PTR __Reload$[ebp], al

; 1766 : 
; 1767 : 		if (_Reload)

  00061	0f b6 45 ef	 movzx	 eax, BYTE PTR __Reload$[ebp]
  00065	85 c0		 test	 eax, eax
  00067	74 08		 je	 SHORT $LN2@Move_alloc

; 1768 : 			{
; 1769 : 			_Free_proxy();

  00069	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	e8 00 00 00 00	 call	 ?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
$LN2@Move_alloc:

; 1770 : 			}
; 1771 : 
; 1772 : 		_Pocma(_Getal(), _Al);

  00071	8b 45 08	 mov	 eax, DWORD PTR __Al$[ebp]
  00074	50		 push	 eax
  00075	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z ; std::_Pocma<std::allocator<char> >
  00083	83 c4 08	 add	 esp, 8

; 1773 : 
; 1774 : 		if (_Reload)

  00086	0f b6 45 ef	 movzx	 eax, BYTE PTR __Reload$[ebp]
  0008a	85 c0		 test	 eax, eax
  0008c	74 08		 je	 SHORT $LN1@Move_alloc

; 1775 : 			{
; 1776 : 			_Alloc_proxy();

  0008e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00091	e8 00 00 00 00	 call	 ?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
$LN1@Move_alloc:

; 1777 : 			}
; 1778 : 		}

  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  0009f	3b ec		 cmp	 ebp, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 04 00	 ret	 4
?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV?$allocator@D@2@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Move_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Copy_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Reload$ = -17						; size = 1
_this$ = -8						; size = 4
__Al$ = 8						; size = 4
?_Copy_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXABV?$allocator@D@2@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Copy_alloc, COMDAT
; _this$ = ecx

; 1745 : 		{	// replace old allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1746 : 		const bool _Reload = _Alty_traits::propagate_on_container_copy_assignment::value
; 1747 : 			&& _Getal() != _Al;

  00023	c6 45 ef 00	 mov	 BYTE PTR __Reload$[ebp], 0

; 1748 : 
; 1749 : 		if (_Reload)

  00027	33 c0		 xor	 eax, eax
  00029	74 08		 je	 SHORT $LN2@Copy_alloc

; 1750 : 			{
; 1751 : 			_Free_proxy();

  0002b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
$LN2@Copy_alloc:

; 1752 : 			}
; 1753 : 
; 1754 : 		_Pocca(_Getal(), _Al);

  00033	8b 45 08	 mov	 eax, DWORD PTR __Al$[ebp]
  00036	50		 push	 eax
  00037	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z ; std::_Pocca<std::allocator<char> >
  00045	83 c4 08	 add	 esp, 8

; 1755 : 
; 1756 : 		if (_Reload)

  00048	33 c0		 xor	 eax, eax
  0004a	74 08		 je	 SHORT $LN1@Copy_alloc

; 1757 : 			{
; 1758 : 			_Alloc_proxy();

  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
$LN1@Copy_alloc:

; 1759 : 			}
; 1760 : 		}

  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0005d	3b ec		 cmp	 ebp, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
?_Copy_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXABV?$allocator@D@2@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Copy_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1740 : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1741 : 		_Free_proxy();

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy

; 1742 : 		}

  0004a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -221						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1726 : 		{	// default construct allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1725 : 		: _Mypair(_Zero_then_variadic_args_t())

  00042	0f b6 85 23 ff
	ff ff		 movzx	 eax, BYTE PTR $T2[ebp]
  00049	50		 push	 eax
  0004a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1727 : 		_Alloc_proxy();

  00059	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy

; 1728 : 		}

  00061	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00068	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0007f	3b ec		 cmp	 ebp, esp
  00081	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
__ehhandler$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 c1 04	 add	 ecx, 4
  00029	e8 00 00 00 00	 call	 ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT
; _this$ = ecx

; 1653 : 			{	// user-provided, for fancy pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1654 : 			}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT
; _this$ = ecx

; 1648 : 		_Bxty()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1649 : 			{	// user-provided, for fancy pointers
; 1650 : 			}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEIII@Z
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
__Size$ = 12						; size = 4
?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEIII@Z PROC ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size, COMDAT
; _this$ = ecx

; 1642 : 		{	// trims _Size to the longest it can be assuming a string at/after _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1643 : 		return (_Min_value(_Size, _Mysize - _Off));

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00029	2b 4d 08	 sub	 ecx, DWORD PTR __Off$[ebp]
  0002c	89 8d 2c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
  00032	8d 95 2c ff ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  00038	52		 push	 edx
  00039	8d 45 0c	 lea	 eax, DWORD PTR __Size$[ebp]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  00042	83 c4 08	 add	 esp, 8
  00045	8b 00		 mov	 eax, DWORD PTR [eax]

; 1644 : 		}

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 08 00	 ret	 8
?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEIII@Z ENDP ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Xran, COMDAT

; 1637 : 		{	// report an out_of_range error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1638 : 		_Xout_of_range("invalid string position");

  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00023	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN2@Xran:

; 1639 : 		}

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z PROC ; std::_String_val<std::_Simple_types<char> >::_Check_offset, COMDAT
; _this$ = ecx

; 1621 : 		{	// checks whether _Off is in the bounds of [0, this->size()]

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1622 : 		if (_Mysize < _Off)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00029	3b 4d 08	 cmp	 ecx, DWORD PTR __Off$[ebp]
  0002c	73 05		 jae	 SHORT $LN3@Check_offs

; 1623 : 			{
; 1624 : 			_Xran();

  0002e	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN3@Check_offs:

; 1625 : 			}
; 1626 : 		}

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ENDP ; std::_String_val<std::_Simple_types<char> >::_Check_offset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -208						; size = 4
_this$ = -8						; size = 4
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged, COMDAT
; _this$ = ecx

; 1616 : 		{	// returns whether the large string mode (allocated memory) is engaged

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1617 : 		return (_BUF_SIZE <= _Myres);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  0002a	72 0c		 jb	 SHORT $LN3@Large_stri
  0002c	c7 85 30 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv66[ebp], 1
  00036	eb 0a		 jmp	 SHORT $LN4@Large_stri
$LN3@Large_stri:
  00038	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv66[ebp], 0
$LN4@Large_stri:
  00042	8a 85 30 ff ff
	ff		 mov	 al, BYTE PTR tv66[ebp]

; 1618 : 		}

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
__Result$ = -20						; size = 4
_this$ = -8						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1605 : 		{	// determine current pointer to buffer for immutable string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1606 : 		const value_type * _Result = _Bx._Buf;

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 c0 04	 add	 eax, 4
  00029	89 45 ec	 mov	 DWORD PTR __Result$[ebp], eax

; 1607 : 		if (_Large_string_engaged())

  0002c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00034	0f b6 c0	 movzx	 eax, al
  00037	85 c0		 test	 eax, eax
  00039	74 12		 je	 SHORT $LN2@Myptr

; 1608 : 			{
; 1609 : 			_Result = _Unfancy(_Bx._Ptr);

  0003b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  00047	83 c4 04	 add	 esp, 4
  0004a	89 45 ec	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 1610 : 			}
; 1611 : 
; 1612 : 		return (_Result);

  0004d	8b 45 ec	 mov	 eax, DWORD PTR __Result$[ebp]

; 1613 : 		}

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00059	3b ec		 cmp	 ebp, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
__Result$ = -20						; size = 4
_this$ = -8						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1594 : 		{	// determine current pointer to buffer for mutable string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1595 : 		value_type * _Result = _Bx._Buf;

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 c0 04	 add	 eax, 4
  00029	89 45 ec	 mov	 DWORD PTR __Result$[ebp], eax

; 1596 : 		if (_Large_string_engaged())

  0002c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00034	0f b6 c0	 movzx	 eax, al
  00037	85 c0		 test	 eax, eax
  00039	74 12		 je	 SHORT $LN2@Myptr

; 1597 : 			{
; 1598 : 			_Result = _Unfancy(_Bx._Ptr);

  0003b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  00047	83 c4 04	 add	 esp, 4
  0004a	89 45 ec	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 1599 : 			}
; 1600 : 
; 1601 : 		return (_Result);

  0004d	8b 45 ec	 mov	 eax, DWORD PTR __Result$[ebp]

; 1602 : 		}

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00059	3b ec		 cmp	 ebp, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 1578 : 		{	// initialize values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1575 : 		: _Bx(),

  00051	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	83 c1 04	 add	 ecx, 4
  00057	e8 00 00 00 00	 call	 ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty

; 1576 : 		_Mysize(0),

  0005c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 1577 : 		_Myres(0)

  00066	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00069	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 1579 : 		}

  00070	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00077	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00084	59		 pop	 ecx
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	5b		 pop	 ebx
  00088	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0008e	3b ec		 cmp	 ebp, esp
  00090	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12
__ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction, COMDAT

; 871  : 		{	// get allocator to use

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 872  : 		return (_Al);

  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 873  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::max_size, COMDAT

; 866  : 		{	// get maximum size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 867  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

  0001e	83 c8 ff	 or	 eax, -1

; 868  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 945  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 946  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof(_Ty))));

  00023	6a 01		 push	 1
  00025	6a 01		 push	 1
  00027	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?_Allocate@std@@YAPAXII_N@Z ; std::_Allocate
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 947  : 		}

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXQADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXQADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 940  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 941  : 		_Deallocate(_Ptr, _Count, sizeof(_Ty));

  00023	6a 01		 push	 1
  00025	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00028	50		 push	 eax
  00029	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 ?_Deallocate@std@@YAXPAXII@Z ; std::_Deallocate
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH

; 942  : 		}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXQADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 929  : 	allocator() _NOEXCEPT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 930  : 		{	// construct default allocator (do nothing)
; 931  : 		}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ??$_Convert_size@I@std@@YAII@Z
_TEXT	SEGMENT
__Len$ = 8						; size = 4
??$_Convert_size@I@std@@YAII@Z PROC			; std::_Convert_size<unsigned int>, COMDAT

; 1161 : 	{	// convert size_t to size_t, unchanged

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 1162 : 	return (_Len);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Len$[ebp]

; 1163 : 	}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Convert_size@I@std@@YAII@Z ENDP			; std::_Convert_size<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXII@Z
_TEXT	SEGMENT
__Ptr_container$1 = -32					; size = 4
__Ptr_ptr$2 = -20					; size = 4
__Ptr_user$3 = -8					; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
?_Deallocate@std@@YAXPAXII@Z PROC			; std::_Deallocate, COMDAT

; 101  : 	{	// deallocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 102  : 	if (_Count > static_cast<size_t>(-1) / _Sz)

  0001e	83 c8 ff	 or	 eax, -1
  00021	33 d2		 xor	 edx, edx
  00023	f7 75 10	 div	 DWORD PTR __Sz$[ebp]
  00026	39 45 0c	 cmp	 DWORD PTR __Count$[ebp], eax
  00029	76 0a		 jbe	 SHORT $LN2@Deallocate

; 103  : 		{
; 104  : 		goto _Invalid_parameter; // TRANSITION, VSO#359498

  0002b	e9 8c 00 00 00	 jmp	 $_Invalid_parameter$16
  00030	e9 87 00 00 00	 jmp	 $_Invalid_parameter$16
$LN2@Deallocate:

; 105  : 		}
; 106  : 
; 107  : 	if (_BIG_ALLOCATION_THRESHOLD <= _Count * _Sz)

  00035	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00038	0f af 45 10	 imul	 eax, DWORD PTR __Sz$[ebp]
  0003c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00041	72 6b		 jb	 SHORT $LN4@Deallocate

; 108  : 		{	// deallocate large block
; 109  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);

  00043	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00046	89 45 f8	 mov	 DWORD PTR __Ptr_user$3[ebp], eax

; 110  : 		if ((_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) != 0)

  00049	8b 45 f8	 mov	 eax, DWORD PTR __Ptr_user$3[ebp]
  0004c	83 e0 1f	 and	 eax, 31			; 0000001fH
  0004f	74 04		 je	 SHORT $LN5@Deallocate

; 111  : 			{
; 112  : 			goto _Invalid_parameter;

  00051	eb 69		 jmp	 SHORT $_Invalid_parameter$16
  00053	eb 67		 jmp	 SHORT $_Invalid_parameter$16
$LN5@Deallocate:

; 113  : 			}
; 114  : 
; 115  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);

  00055	8b 45 f8	 mov	 eax, DWORD PTR __Ptr_user$3[ebp]
  00058	83 e8 04	 sub	 eax, 4
  0005b	89 45 ec	 mov	 DWORD PTR __Ptr_ptr$2[ebp], eax

; 116  : 		const uintptr_t _Ptr_container =
; 117  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0005e	8b 45 ec	 mov	 eax, DWORD PTR __Ptr_ptr$2[ebp]
  00061	8b 08		 mov	 ecx, DWORD PTR [eax]
  00063	89 4d e0	 mov	 DWORD PTR __Ptr_container$1[ebp], ecx

; 118  : 
; 119  :  #ifdef _DEBUG
; 120  : 		// If the following asserts, it likely means that we are performing
; 121  : 		// an aligned delete on memory coming from an unaligned allocation.
; 122  : 		if (reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] != _BIG_ALLOCATION_SENTINEL)

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	6b c8 ff	 imul	 ecx, eax, -1
  0006e	8b 55 ec	 mov	 edx, DWORD PTR __Ptr_ptr$2[ebp]
  00071	81 3c 0a fa fa
	fa fa		 cmp	 DWORD PTR [edx+ecx], -84215046 ; fafafafaH
  00078	74 04		 je	 SHORT $LN7@Deallocate

; 123  : 			{
; 124  : 			goto _Invalid_parameter;

  0007a	eb 40		 jmp	 SHORT $_Invalid_parameter$16
  0007c	eb 3e		 jmp	 SHORT $_Invalid_parameter$16
$LN7@Deallocate:

; 125  : 			}
; 126  :  #endif /* _DEBUG */
; 127  : 
; 128  : 		// Extra paranoia on aligned allocation/deallocation
; 129  : 		if (_Ptr_container >= _Ptr_user)

  0007e	8b 45 e0	 mov	 eax, DWORD PTR __Ptr_container$1[ebp]
  00081	3b 45 f8	 cmp	 eax, DWORD PTR __Ptr_user$3[ebp]
  00084	72 04		 jb	 SHORT $LN9@Deallocate

; 130  : 			{
; 131  : 			goto _Invalid_parameter;

  00086	eb 34		 jmp	 SHORT $_Invalid_parameter$16
  00088	eb 32		 jmp	 SHORT $_Invalid_parameter$16
$LN9@Deallocate:

; 132  : 			}
; 133  : 
; 134  :  #ifdef _DEBUG
; 135  : 		if (2 * sizeof(void *) > _Ptr_user - _Ptr_container)

  0008a	8b 45 f8	 mov	 eax, DWORD PTR __Ptr_user$3[ebp]
  0008d	2b 45 e0	 sub	 eax, DWORD PTR __Ptr_container$1[ebp]
  00090	83 f8 08	 cmp	 eax, 8
  00093	73 04		 jae	 SHORT $LN11@Deallocate

; 136  :  #else /* _DEBUG */
; 137  : 		if (sizeof(void *) > _Ptr_user - _Ptr_container)
; 138  :  #endif /* _DEBUG */
; 139  : 			{
; 140  : 			goto _Invalid_parameter;

  00095	eb 25		 jmp	 SHORT $_Invalid_parameter$16
  00097	eb 23		 jmp	 SHORT $_Invalid_parameter$16
$LN11@Deallocate:

; 141  : 			}
; 142  : 
; 143  : 		if (_Ptr_user - _Ptr_container > _NON_USER_SIZE)

  00099	8b 45 f8	 mov	 eax, DWORD PTR __Ptr_user$3[ebp]
  0009c	2b 45 e0	 sub	 eax, DWORD PTR __Ptr_container$1[ebp]
  0009f	83 f8 27	 cmp	 eax, 39			; 00000027H
  000a2	76 04		 jbe	 SHORT $LN13@Deallocate

; 144  : 			{
; 145  : 			goto _Invalid_parameter;

  000a4	eb 16		 jmp	 SHORT $_Invalid_parameter$16
  000a6	eb 14		 jmp	 SHORT $_Invalid_parameter$16
$LN13@Deallocate:

; 146  : 			}
; 147  : 
; 148  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  000a8	8b 45 e0	 mov	 eax, DWORD PTR __Ptr_container$1[ebp]
  000ab	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
$LN4@Deallocate:

; 149  : 		}
; 150  : 
; 151  : 	::operator delete(_Ptr);

  000ae	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000b7	83 c4 04	 add	 esp, 4

; 152  : 	return;

  000ba	eb 2c		 jmp	 SHORT $LN1@Deallocate
$_Invalid_parameter$16:

; 153  : 
; 154  : _Invalid_parameter:
; 155  : 	_SCL_SECURE_INVALID_ARGUMENT_NO_ASSERT;

  000bc	8b f4		 mov	 esi, esp
  000be	6a 00		 push	 0
  000c0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Deallocate@std@@YAXPAXII@Z@4JA
  000c5	83 c0 36	 add	 eax, 54			; 00000036H
  000c8	50		 push	 eax
  000c9	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@GPIBOEJC@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  000ce	68 00 00 00 00	 push	 OFFSET ??_C@_1CC@LOFJFFDB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
  000d3	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
  000d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000de	83 c4 14	 add	 esp, 20			; 00000014H
  000e1	3b f4		 cmp	 esi, esp
  000e3	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Deallocate:

; 156  : 	}

  000e8	5f		 pop	 edi
  000e9	5e		 pop	 esi
  000ea	5b		 pop	 ebx
  000eb	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000f1	3b ec		 cmp	 ebp, esp
  000f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c3		 ret	 0
?_Deallocate@std@@YAXPAXII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPAXII_N@Z
_TEXT	SEGMENT
__Ptr_container$1 = -44					; size = 4
__Block_size$2 = -32					; size = 4
__User_size$ = -20					; size = 4
__Ptr$ = -8						; size = 4
__Count$ = 8						; size = 4
__Sz$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
?_Allocate@std@@YAPAXII_N@Z PROC			; std::_Allocate, COMDAT

; 49   : 	{	// allocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00012	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 50   : 	void *_Ptr = 0;

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __Ptr$[ebp], 0

; 51   : 
; 52   : 	if (_Count == 0)

  00025	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00029	75 08		 jne	 SHORT $LN2@Allocate

; 53   : 		{
; 54   : 		return (_Ptr);

  0002b	8b 45 f8	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002e	e9 8b 01 00 00	 jmp	 $LN8@Allocate
$LN2@Allocate:

; 55   : 		}
; 56   : 
; 57   : 	// check overflow of multiply
; 58   : 	if (static_cast<size_t>(-1) / _Sz < _Count)

  00033	83 c8 ff	 or	 eax, -1
  00036	33 d2		 xor	 edx, edx
  00038	f7 75 0c	 div	 DWORD PTR __Sz$[ebp]
  0003b	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0003e	73 05		 jae	 SHORT $LN3@Allocate

; 59   : 		{
; 60   : 		_Xbad_alloc();	// report no memory

  00040	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN3@Allocate:

; 61   : 		}
; 62   : 
; 63   : 	const size_t _User_size = _Count * _Sz;

  00045	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00048	0f af 45 0c	 imul	 eax, DWORD PTR __Sz$[ebp]
  0004c	89 45 ec	 mov	 DWORD PTR __User_size$[ebp], eax

; 64   : 
; 65   : #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  0004f	0f b6 45 10	 movzx	 eax, BYTE PTR __Try_aligned_allocation$[ebp]
  00053	85 c0		 test	 eax, eax
  00055	0f 84 dd 00 00
	00		 je	 $LN4@Allocate
  0005b	81 7d ec 00 10
	00 00		 cmp	 DWORD PTR __User_size$[ebp], 4096 ; 00001000H
  00062	0f 82 d0 00 00
	00		 jb	 $LN4@Allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof(void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00068	8b 45 ec	 mov	 eax, DWORD PTR __User_size$[ebp]
  0006b	83 c0 27	 add	 eax, 39			; 00000027H
  0006e	89 45 e0	 mov	 DWORD PTR __Block_size$2[ebp], eax

; 72   : 		if (_Block_size <= _User_size)

  00071	8b 45 e0	 mov	 eax, DWORD PTR __Block_size$2[ebp]
  00074	3b 45 ec	 cmp	 eax, DWORD PTR __User_size$[ebp]
  00077	77 05		 ja	 SHORT $LN5@Allocate

; 73   : 			{
; 74   : 			_Xbad_alloc();	// report no memory

  00079	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN5@Allocate:

; 75   : 			}
; 76   : 
; 77   : 		const uintptr_t _Ptr_container =
; 78   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  0007e	8b 45 e0	 mov	 eax, DWORD PTR __Block_size$2[ebp]
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00087	83 c4 04	 add	 esp, 4
  0008a	89 45 d4	 mov	 DWORD PTR __Ptr_container$1[ebp], eax

; 79   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0008d	83 7d d4 00	 cmp	 DWORD PTR __Ptr_container$1[ebp], 0
  00091	75 6e		 jne	 SHORT $LN6@Allocate
  00093	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BE@LMNLACIC@_Ptr_container?5?$CB?$DN?50?$AA@
  00098	85 c0		 test	 eax, eax
  0009a	74 04		 je	 SHORT $LN9@Allocate
  0009c	33 c9		 xor	 ecx, ecx
  0009e	75 35		 jne	 SHORT $LN10@Allocate
$LN9@Allocate:
  000a0	8b f4		 mov	 esi, esp
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_1DG@HGDKEBPG@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA_?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
  000ac	6a 00		 push	 0
  000ae	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??_Allocate@std@@YAPAXII_N@Z@4JA
  000b4	83 c2 1e	 add	 edx, 30			; 0000001eH
  000b7	52		 push	 edx
  000b8	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@GPIBOEJC@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  000bd	6a 02		 push	 2
  000bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  000c5	83 c4 18	 add	 esp, 24			; 00000018H
  000c8	3b f4		 cmp	 esi, esp
  000ca	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cf	83 f8 01	 cmp	 eax, 1
  000d2	75 01		 jne	 SHORT $LN10@Allocate
  000d4	cc		 int	 3
$LN10@Allocate:
  000d5	8b f4		 mov	 esi, esp
  000d7	6a 00		 push	 0
  000d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Allocate@std@@YAPAXII_N@Z@4JA
  000de	83 c0 1e	 add	 eax, 30			; 0000001eH
  000e1	50		 push	 eax
  000e2	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@GPIBOEJC@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  000e7	68 00 00 00 00	 push	 OFFSET ??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
  000f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000f7	83 c4 14	 add	 esp, 20			; 00000014H
  000fa	3b f4		 cmp	 esi, esp
  000fc	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN6@Allocate:

; 80   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00101	8b 45 d4	 mov	 eax, DWORD PTR __Ptr_container$1[ebp]
  00104	83 c0 27	 add	 eax, 39			; 00000027H
  00107	83 e0 e0	 and	 eax, -32		; ffffffe0H
  0010a	89 45 f8	 mov	 DWORD PTR __Ptr$[ebp], eax

; 81   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0010d	b8 04 00 00 00	 mov	 eax, 4
  00112	6b c8 ff	 imul	 ecx, eax, -1
  00115	8b 55 f8	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00118	8b 45 d4	 mov	 eax, DWORD PTR __Ptr_container$1[ebp]
  0011b	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 83   : 
; 84   :  #ifdef _DEBUG
; 85   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;

  0011e	b8 04 00 00 00	 mov	 eax, 4
  00123	6b c8 fe	 imul	 ecx, eax, -2
  00126	8b 55 f8	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00129	c7 04 0a fa fa
	fa fa		 mov	 DWORD PTR [edx+ecx], -84215046 ; fafafafaH

; 86   :  #endif /* _DEBUG */
; 87   :  		return (_Ptr);

  00130	8b 45 f8	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00133	e9 86 00 00 00	 jmp	 $LN8@Allocate
$LN4@Allocate:

; 88   : 		}
; 89   : #else /* ^^^ x86/x64 hardware ^^^ // vvv ARM hardware vvv */
; 90   : 	(void)_Try_aligned_allocation;
; 91   : #endif /* defined(_M_IX86) || defined(_M_X64) */
; 92   : 
; 93   : 	_Ptr = ::operator new(_User_size);

  00138	8b 45 ec	 mov	 eax, DWORD PTR __User_size$[ebp]
  0013b	50		 push	 eax
  0013c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00141	83 c4 04	 add	 esp, 4
  00144	89 45 f8	 mov	 DWORD PTR __Ptr$[ebp], eax

; 94   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00147	83 7d f8 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  0014b	75 6e		 jne	 SHORT $LN7@Allocate
  0014d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09GLJCAGLP@_Ptr?5?$CB?$DN?50?$AA@
  00152	85 c0		 test	 eax, eax
  00154	74 04		 je	 SHORT $LN11@Allocate
  00156	33 c9		 xor	 ecx, ecx
  00158	75 35		 jne	 SHORT $LN12@Allocate
$LN11@Allocate:
  0015a	8b f4		 mov	 esi, esp
  0015c	68 00 00 00 00	 push	 OFFSET ??_C@_1CC@GKJLLHIM@?$AA?$CC?$AA_?$AAP?$AAt?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CC?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA0?$AA?$AA@
  00161	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs?$AA?$AA@
  00166	6a 00		 push	 0
  00168	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?0??_Allocate@std@@YAPAXII_N@Z@4JA
  0016e	83 c2 2d	 add	 edx, 45			; 0000002dH
  00171	52		 push	 edx
  00172	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@GPIBOEJC@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  00177	6a 02		 push	 2
  00179	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  0017f	83 c4 18	 add	 esp, 24			; 00000018H
  00182	3b f4		 cmp	 esi, esp
  00184	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00189	83 f8 01	 cmp	 eax, 1
  0018c	75 01		 jne	 SHORT $LN12@Allocate
  0018e	cc		 int	 3
$LN12@Allocate:
  0018f	8b f4		 mov	 esi, esp
  00191	6a 00		 push	 0
  00193	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Allocate@std@@YAPAXII_N@Z@4JA
  00198	83 c0 2d	 add	 eax, 45			; 0000002dH
  0019b	50		 push	 eax
  0019c	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@GPIBOEJC@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  001a1	68 00 00 00 00	 push	 OFFSET ??_C@_1BO@NKFMJPA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?$AA@
  001a6	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
  001ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  001b1	83 c4 14	 add	 esp, 20			; 00000014H
  001b4	3b f4		 cmp	 esi, esp
  001b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN7@Allocate:

; 95   : 	return (_Ptr);

  001bb	8b 45 f8	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN8@Allocate:

; 96   : 	}

  001be	5f		 pop	 edi
  001bf	5e		 pop	 esi
  001c0	5b		 pop	 ebx
  001c1	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  001c7	3b ec		 cmp	 ebp, esp
  001c9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001ce	8b e5		 mov	 esp, ebp
  001d0	5d		 pop	 ebp
  001d1	c3		 ret	 0
?_Allocate@std@@YAPAXII_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Orphan_me@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$2 = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?_Orphan_me@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Orphan_me, COMDAT
; _this$ = ecx

; 214  : 		{	// cut ties with parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Orphan_me@_Iterator_base12@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 215  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 216  : 		if (_Myproxy != 0)

  00042	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00045	83 38 00	 cmp	 DWORD PTR [eax], 0
  00048	0f 84 85 00 00
	00		 je	 $LN6@Orphan_me

; 217  : 			{	// adopted, remove self from list
; 218  : 			_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

  0004e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00051	8b 08		 mov	 ecx, DWORD PTR [eax]
  00053	83 c1 04	 add	 ecx, 4
  00056	89 4d e0	 mov	 DWORD PTR __Pnext$2[ebp], ecx
$LN2@Orphan_me:

; 219  : 			while (*_Pnext != 0 && *_Pnext != this)

  00059	8b 45 e0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  0005c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0005f	74 17		 je	 SHORT $LN3@Orphan_me
  00061	8b 45 e0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  00064	8b 08		 mov	 ecx, DWORD PTR [eax]
  00066	3b 4d ec	 cmp	 ecx, DWORD PTR _this$[ebp]
  00069	74 0d		 je	 SHORT $LN3@Orphan_me

; 220  : 				_Pnext = &(*_Pnext)->_Mynextiter;

  0006b	8b 45 e0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  0006e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00070	83 c1 04	 add	 ecx, 4
  00073	89 4d e0	 mov	 DWORD PTR __Pnext$2[ebp], ecx
  00076	eb e1		 jmp	 SHORT $LN2@Orphan_me
$LN3@Orphan_me:

; 221  : 
; 222  : 			if (*_Pnext == 0)

  00078	8b 45 e0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  0007b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0007e	75 3f		 jne	 SHORT $LN5@Orphan_me

; 223  : 				{
; 224  : 				_DEBUG_ERROR("ITERATOR LIST CORRUPTED!");

  00080	68 e0 00 00 00	 push	 224			; 000000e0H
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@JCGKDBDB@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
  0008f	e8 00 00 00 00	 call	 ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message
  00094	83 c4 0c	 add	 esp, 12			; 0000000cH
  00097	8b f4		 mov	 esi, esp
  00099	6a 00		 push	 0
  0009b	68 e0 00 00 00	 push	 224			; 000000e0H
  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@JCGKDBDB@?$AAf?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  000a5	68 00 00 00 00	 push	 OFFSET ??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_?$AAb?$AAa?$AAs?$AAe?$AA1?$AA2?$AA?3?$AA?3?$AA_?$AAO?$AAr?$AAp?$AAh?$AAa?$AAn?$AA_?$AAm@
  000aa	68 00 00 00 00	 push	 OFFSET ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$CC?$AA?$AA@
  000af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000b5	83 c4 14	 add	 esp, 20			; 00000014H
  000b8	3b f4		 cmp	 esi, esp
  000ba	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN5@Orphan_me:

; 225  : 				}
; 226  : 
; 227  : 			*_Pnext = _Mynextiter;

  000bf	8b 45 e0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  000c2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c5	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000c8	89 10		 mov	 DWORD PTR [eax], edx

; 228  : 			_Myproxy = 0;

  000ca	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000cd	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN6@Orphan_me:

; 229  : 			}
; 230  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 231  : 		}

  000d3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000dd	59		 pop	 ecx
  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx
  000e1	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000e7	3b ec		 cmp	 ebp, esp
  000e9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Orphan_me@_Iterator_base12@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Orphan_me@_Iterator_base12@std@@QAEXXZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Orphan_me@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Orphan_me
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
tv68 = -208						; size = 4
_this$ = -8						; size = 4
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx

; 204  : 		{	// get owning container

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 205  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 38 00	 cmp	 DWORD PTR [eax], 0
  00029	75 0c		 jne	 SHORT $LN3@Getcont
  0002b	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv68[ebp], 0
  00035	eb 0d		 jmp	 SHORT $LN4@Getcont
$LN3@Getcont:
  00037	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003c	8b 02		 mov	 eax, DWORD PTR [edx]
  0003e	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv68[ebp], eax
$LN4@Getcont:
  00044	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv68[ebp]

; 206  : 		}

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Lock$2 = -60						; size = 4
__Parent_proxy$3 = -48					; size = 4
__Lock$4 = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx

; 170  : 		{	// adopt this iterator by parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec f4 00 00
	00		 sub	 esp, 244		; 000000f4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 00 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-256]
  00021	b9 3d 00 00 00	 mov	 ecx, 61			; 0000003dH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 171  : 		if (_Parent == 0)

  00045	83 7d 08 00	 cmp	 DWORD PTR __Parent$[ebp], 0
  00049	75 30		 jne	 SHORT $LN2@Adopt

; 172  : 			{	// no future parent, just disown current parent
; 173  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 174  : 			_Lockit _Lock(_LOCK_DEBUG);

  0004b	8b f4		 mov	 esi, esp
  0004d	6a 03		 push	 3
  0004f	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00058	3b f4		 cmp	 esi, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 175  : 			_Orphan_me();

  0005f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 176  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 177  : 			}

  00067	8b f4		 mov	 esi, esp
  00069	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00072	3b f4		 cmp	 esi, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 178  : 		else

  00079	eb 5d		 jmp	 SHORT $LN5@Adopt
$LN2@Adopt:

; 179  : 			{	// have a parent, do adoption
; 180  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;

  0007b	8b 45 08	 mov	 eax, DWORD PTR __Parent$[ebp]
  0007e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00080	89 4d d0	 mov	 DWORD PTR __Parent_proxy$3[ebp], ecx

; 181  : 
; 182  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 183  : 			if (_Myproxy != _Parent_proxy)

  00083	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00086	8b 08		 mov	 ecx, DWORD PTR [eax]
  00088	3b 4d d0	 cmp	 ecx, DWORD PTR __Parent_proxy$3[ebp]
  0008b	74 4b		 je	 SHORT $LN5@Adopt

; 184  : 				{	// change parentage
; 185  : 				_Lockit _Lock(_LOCK_DEBUG);

  0008d	8b f4		 mov	 esi, esp
  0008f	6a 03		 push	 3
  00091	8d 4d c4	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 186  : 				_Orphan_me();

  000a1	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a4	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 187  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;

  000a9	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000ac	8b 4d d0	 mov	 ecx, DWORD PTR __Parent_proxy$3[ebp]
  000af	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000b2	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 188  : 				_Parent_proxy->_Myfirstiter = this;

  000b5	8b 45 d0	 mov	 eax, DWORD PTR __Parent_proxy$3[ebp]
  000b8	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 189  : 				_Myproxy = _Parent_proxy;

  000be	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000c1	8b 4d d0	 mov	 ecx, DWORD PTR __Parent_proxy$3[ebp]
  000c4	89 08		 mov	 DWORD PTR [eax], ecx

; 190  : 				}

  000c6	8b f4		 mov	 esi, esp
  000c8	8d 4d c4	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000d1	3b f4		 cmp	 esi, esp
  000d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN5@Adopt:

; 191  : 
; 192  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 193  : 			_Myproxy = _Parent_proxy;
; 194  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 195  : 			}
; 196  : 		}

  000d8	52		 push	 edx
  000d9	8b cd		 mov	 ecx, ebp
  000db	50		 push	 eax
  000dc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@Adopt
  000e2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e7	58		 pop	 eax
  000e8	5a		 pop	 edx
  000e9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ec	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f3	59		 pop	 ecx
  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	5b		 pop	 ebx
  000f7	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fa	33 cd		 xor	 ecx, ebp
  000fc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00101	81 c4 00 01 00
	00		 add	 esp, 256		; 00000100H
  00107	3b ec		 cmp	 ebp, esp
  00109	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c2 04 00	 ret	 4
$LN10@Adopt:
  00114	02 00 00 00	 DD	 2
  00118	00 00 00 00	 DD	 $LN9@Adopt
$LN9@Adopt:
  0011c	dc ff ff ff	 DD	 -36			; ffffffdcH
  00120	04 00 00 00	 DD	 4
  00124	00 00 00 00	 DD	 $LN6@Adopt
  00128	c4 ff ff ff	 DD	 -60			; ffffffc4H
  0012c	04 00 00 00	 DD	 4
  00130	00 00 00 00	 DD	 $LN7@Adopt
$LN7@Adopt:
  00134	5f		 DB	 95			; 0000005fH
  00135	4c		 DB	 76			; 0000004cH
  00136	6f		 DB	 111			; 0000006fH
  00137	63		 DB	 99			; 00000063H
  00138	6b		 DB	 107			; 0000006bH
  00139	00		 DB	 0
$LN6@Adopt:
  0013a	5f		 DB	 95			; 0000005fH
  0013b	4c		 DB	 76			; 0000004cH
  0013c	6f		 DB	 111			; 0000006fH
  0013d	63		 DB	 99			; 00000063H
  0013e	6b		 DB	 107			; 0000006bH
  0013f	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a fc fe ff
	ff		 mov	 ecx, DWORD PTR [edx-260]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$ = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx

; 162  : 		{	// destroy the iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Iterator_base12@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00021	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 163  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 164  : 		_Lockit _Lock(_LOCK_DEBUG);

  00045	8b f4		 mov	 esi, esp
  00047	6a 03		 push	 3
  00049	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$[ebp]
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 165  : 		_Orphan_me();

  00059	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 166  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 167  : 		}

  00061	8b f4		 mov	 esi, esp
  00063	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0006c	3b f4		 cmp	 esi, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	52		 push	 edx
  00074	8b cd		 mov	 ecx, ebp
  00076	50		 push	 eax
  00077	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@Iterator_b
  0007d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00082	58		 pop	 eax
  00083	5a		 pop	 edx
  00084	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00087	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008e	59		 pop	 ecx
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
  00092	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00095	33 cd		 xor	 ecx, ebp
  00097	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009c	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000a2	3b ec		 cmp	 ebp, esp
  000a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
  000ad	0f 1f 00	 npad	 3
$LN6@Iterator_b:
  000b0	01 00 00 00	 DD	 1
  000b4	00 00 00 00	 DD	 $LN5@Iterator_b
$LN5@Iterator_b:
  000b8	dc ff ff ff	 DD	 -36			; ffffffdcH
  000bc	04 00 00 00	 DD	 4
  000c0	00 00 00 00	 DD	 $LN3@Iterator_b
$LN3@Iterator_b:
  000c4	5f		 DB	 95			; 0000005fH
  000c5	4c		 DB	 76			; 0000004cH
  000c6	6f		 DB	 111			; 0000006fH
  000c7	63		 DB	 99			; 00000063H
  000c8	6b		 DB	 107			; 0000006bH
  000c9	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Iterator_base12@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 135  : 		{	// construct orphaned iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 134  : 		: _Myproxy(0), _Mynextiter(0)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 136  : 		}

  00036	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
__Temp$ = -48						; size = 4
__Lock$ = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z PROC	; std::_Container_base12::_Swap_all, COMDAT
; _this$ = ecx

; 254  : 	{	// swap all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 0c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-244]
  00021	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 255  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 256  : 	_Lockit _Lock(_LOCK_DEBUG);

  00045	8b f4		 mov	 esi, esp
  00047	6a 03		 push	 3
  00049	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$[ebp]
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 257  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 258  : 
; 259  : 	_Container_proxy *_Temp = _Myproxy;

  00059	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005e	89 4d d0	 mov	 DWORD PTR __Temp$[ebp], ecx

; 260  : 	_Myproxy = _Right._Myproxy;

  00061	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00064	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00067	8b 11		 mov	 edx, DWORD PTR [ecx]
  00069	89 10		 mov	 DWORD PTR [eax], edx

; 261  : 	_Right._Myproxy = _Temp;

  0006b	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0006e	8b 4d d0	 mov	 ecx, DWORD PTR __Temp$[ebp]
  00071	89 08		 mov	 DWORD PTR [eax], ecx

; 262  : 
; 263  : 	if (_Myproxy != 0)

  00073	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00076	83 38 00	 cmp	 DWORD PTR [eax], 0
  00079	74 0a		 je	 SHORT $LN2@Swap_all

; 264  : 		_Myproxy->_Mycont = (_Container_base12 *)this;

  0007b	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00080	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00083	89 11		 mov	 DWORD PTR [ecx], edx
$LN2@Swap_all:

; 265  : 	if (_Right._Myproxy != 0)

  00085	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00088	83 38 00	 cmp	 DWORD PTR [eax], 0
  0008b	74 0a		 je	 SHORT $LN3@Swap_all

; 266  : 		_Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;

  0008d	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00090	8b 08		 mov	 ecx, DWORD PTR [eax]
  00092	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00095	89 11		 mov	 DWORD PTR [ecx], edx
$LN3@Swap_all:

; 267  : 	}

  00097	8b f4		 mov	 esi, esp
  00099	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$[ebp]
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000a2	3b f4		 cmp	 esi, esp
  000a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a9	52		 push	 edx
  000aa	8b cd		 mov	 ecx, ebp
  000ac	50		 push	 eax
  000ad	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Swap_all
  000b3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000b8	58		 pop	 eax
  000b9	5a		 pop	 edx
  000ba	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c4	59		 pop	 ecx
  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi
  000c7	5b		 pop	 ebx
  000c8	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000cb	33 cd		 xor	 ecx, ebp
  000cd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d2	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  000d8	3b ec		 cmp	 ebp, esp
  000da	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000df	8b e5		 mov	 esp, ebp
  000e1	5d		 pop	 ebp
  000e2	c2 04 00	 ret	 4
  000e5	0f 1f 00	 npad	 3
$LN8@Swap_all:
  000e8	01 00 00 00	 DD	 1
  000ec	00 00 00 00	 DD	 $LN7@Swap_all
$LN7@Swap_all:
  000f0	dc ff ff ff	 DD	 -36			; ffffffdcH
  000f4	04 00 00 00	 DD	 4
  000f8	00 00 00 00	 DD	 $LN5@Swap_all
$LN5@Swap_all:
  000fc	5f		 DB	 95			; 0000005fH
  000fd	4c		 DB	 76			; 0000004cH
  000fe	6f		 DB	 111			; 0000006fH
  000ff	63		 DB	 99			; 00000063H
  00100	6b		 DB	 107			; 0000006bH
  00101	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 08 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-248]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z ENDP	; std::_Container_base12::_Swap_all
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$2 = -48						; size = 4
__Lock$3 = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 239  : 	{	// orphan all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 0c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-244]
  00021	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 240  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 241  : 	if (_Myproxy != 0)

  00045	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00048	83 38 00	 cmp	 DWORD PTR [eax], 0
  0004b	74 61		 je	 SHORT $LN6@Orphan_all

; 242  : 		{	// proxy allocated, drain it
; 243  : 		_Lockit _Lock(_LOCK_DEBUG);

  0004d	8b f4		 mov	 esi, esp
  0004f	6a 03		 push	 3
  00051	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  0005a	3b f4		 cmp	 esi, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 244  : 
; 245  : 		for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

  00061	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00064	8b 08		 mov	 ecx, DWORD PTR [eax]
  00066	83 c1 04	 add	 ecx, 4
  00069	89 4d d0	 mov	 DWORD PTR __Pnext$2[ebp], ecx
  0006c	eb 0d		 jmp	 SHORT $LN4@Orphan_all
$LN2@Orphan_all:

; 246  : 			*_Pnext != 0; *_Pnext = (*_Pnext)->_Mynextiter)

  0006e	8b 45 d0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  00071	8b 08		 mov	 ecx, DWORD PTR [eax]
  00073	8b 55 d0	 mov	 edx, DWORD PTR __Pnext$2[ebp]
  00076	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00079	89 02		 mov	 DWORD PTR [edx], eax
$LN4@Orphan_all:
  0007b	8b 45 d0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  0007e	83 38 00	 cmp	 DWORD PTR [eax], 0
  00081	74 0d		 je	 SHORT $LN3@Orphan_all

; 247  : 			(*_Pnext)->_Myproxy = 0;

  00083	8b 45 d0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  00086	8b 08		 mov	 ecx, DWORD PTR [eax]
  00088	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0008e	eb de		 jmp	 SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 248  : 		_Myproxy->_Myfirstiter = 0;

  00090	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00093	8b 08		 mov	 ecx, DWORD PTR [eax]
  00095	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 249  : 		}

  0009c	8b f4		 mov	 esi, esp
  0009e	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000a7	3b f4		 cmp	 esi, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN6@Orphan_all:

; 250  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 251  : 	}

  000ae	52		 push	 edx
  000af	8b cd		 mov	 ecx, ebp
  000b1	50		 push	 eax
  000b2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@Orphan_all
  000b8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000bd	58		 pop	 eax
  000be	5a		 pop	 edx
  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx
  000cd	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d0	33 cd		 xor	 ecx, ebp
  000d2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d7	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  000dd	3b ec		 cmp	 ebp, esp
  000df	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c3		 ret	 0
$LN10@Orphan_all:
  000e8	01 00 00 00	 DD	 1
  000ec	00 00 00 00	 DD	 $LN9@Orphan_all
$LN9@Orphan_all:
  000f0	dc ff ff ff	 DD	 -36			; ffffffdcH
  000f4	04 00 00 00	 DD	 4
  000f8	00 00 00 00	 DD	 $LN7@Orphan_all
$LN7@Orphan_all:
  000fc	5f		 DB	 95			; 0000005fH
  000fd	4c		 DB	 76			; 0000004cH
  000fe	6f		 DB	 111			; 0000006fH
  000ff	63		 DB	 99			; 00000063H
  00100	6b		 DB	 107			; 0000006bH
  00101	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 08 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-248]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??1_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::~_Container_base12, COMDAT
; _this$ = ecx

; 115  : 		{	// destroy the container

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 116  : 		_Orphan_all();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 117  : 		}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::~_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 101  : 		{	// construct childless container

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 100  : 		: _Myproxy(0)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 102  : 		}

  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\xutility
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 89   : 		{	// construct from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 88   : 		: _Mycont(0), _Myfirstiter(0)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 90   : 		}

  00036	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 551  : 		{	// return end-of-file metacharacter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 552  : 		return (EOF);

  0001e	83 c8 ff	 or	 eax, -1

; 553  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ?not_eof@?$char_traits@D@std@@SAHABH@Z
_TEXT	SEGMENT
tv68 = -200						; size = 4
tv69 = -196						; size = 4
__Meta$ = 8						; size = 4
?not_eof@?$char_traits@D@std@@SAHABH@Z PROC		; std::char_traits<char>::not_eof, COMDAT

; 546  : 		{	// return anything but EOF

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 38 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-200]
  00012	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 547  : 		return (_Meta != eof() ? _Meta : !eof());

  0001e	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00023	8b 4d 08	 mov	 ecx, DWORD PTR __Meta$[ebp]
  00026	39 01		 cmp	 DWORD PTR [ecx], eax
  00028	74 0d		 je	 SHORT $LN5@not_eof
  0002a	8b 55 08	 mov	 edx, DWORD PTR __Meta$[ebp]
  0002d	8b 02		 mov	 eax, DWORD PTR [edx]
  0002f	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv69[ebp], eax
  00035	eb 2b		 jmp	 SHORT $LN6@not_eof
$LN5@not_eof:
  00037	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0003c	85 c0		 test	 eax, eax
  0003e	75 0c		 jne	 SHORT $LN3@not_eof
  00040	c7 85 38 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv68[ebp], 1
  0004a	eb 0a		 jmp	 SHORT $LN4@not_eof
$LN3@not_eof:
  0004c	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv68[ebp], 0
$LN4@not_eof:
  00056	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR tv68[ebp]
  0005c	89 8d 3c ff ff
	ff		 mov	 DWORD PTR tv69[ebp], ecx
$LN6@not_eof:
  00062	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR tv69[ebp]

; 548  : 		}

  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
  0006b	81 c4 c8 00 00
	00		 add	 esp, 200		; 000000c8H
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
?not_eof@?$char_traits@D@std@@SAHABH@Z ENDP		; std::char_traits<char>::not_eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
tv65 = -196						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 541  : 		{	// test for metacharacter equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 542  : 		return (_Left == _Right);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00024	8b 10		 mov	 edx, DWORD PTR [eax]
  00026	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00028	75 0c		 jne	 SHORT $LN3@eq_int_typ
  0002a	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv65[ebp], 1
  00034	eb 0a		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  00036	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv65[ebp], 0
$LN4@eq_int_typ:
  00040	8a 85 3c ff ff
	ff		 mov	 al, BYTE PTR tv65[ebp]

; 543  : 		}

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ?to_int_type@?$char_traits@D@std@@SAHABD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
?to_int_type@?$char_traits@D@std@@SAHABD@Z PROC		; std::char_traits<char>::to_int_type, COMDAT

; 536  : 		{	// convert character to metacharacter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 537  : 		return ((unsigned char)_Ch);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Ch$[ebp]
  00021	0f b6 00	 movzx	 eax, BYTE PTR [eax]

; 538  : 		}

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
?to_int_type@?$char_traits@D@std@@SAHABD@Z ENDP		; std::char_traits<char>::to_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ?to_char_type@?$char_traits@D@std@@SADABH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?to_char_type@?$char_traits@D@std@@SADABH@Z PROC	; std::char_traits<char>::to_char_type, COMDAT

; 531  : 		{	// convert metacharacter to character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 532  : 		return ((_Elem)_Meta);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  00021	8a 00		 mov	 al, BYTE PTR [eax]

; 533  : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?to_char_type@?$char_traits@D@std@@SADABH@Z ENDP	; std::char_traits<char>::to_char_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ?eq@?$char_traits@D@std@@SA_NABD0@Z
_TEXT	SEGMENT
tv67 = -196						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq@?$char_traits@D@std@@SA_NABD0@Z PROC		; std::char_traits<char>::eq, COMDAT

; 521  : 		{	// test for element equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 522  : 		return (_Left == _Right);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00021	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00024	8b 55 0c	 mov	 edx, DWORD PTR __Right$[ebp]
  00027	0f be 02	 movsx	 eax, BYTE PTR [edx]
  0002a	3b c8		 cmp	 ecx, eax
  0002c	75 0c		 jne	 SHORT $LN3@eq
  0002e	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv67[ebp], 1
  00038	eb 0a		 jmp	 SHORT $LN4@eq
$LN3@eq:
  0003a	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv67[ebp], 0
$LN4@eq:
  00044	8a 85 3c ff ff
	ff		 mov	 al, BYTE PTR tv67[ebp]

; 523  : 		}

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?eq@?$char_traits@D@std@@SA_NABD0@Z ENDP		; std::char_traits<char>::eq
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 516  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 517  : 		_Left = _Right;

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00024	8a 11		 mov	 dl, BYTE PTR [ecx]
  00026	88 10		 mov	 BYTE PTR [eax], dl

; 518  : 		}

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAPADQADID@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?assign@?$char_traits@D@std@@SAPADQADID@Z PROC		; std::char_traits<char>::assign, COMDAT

; 511  : 		{	// assign _Count * _Ch to [_First, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 512  : 		return ((_Elem *)_CSTD memset(_First, _Ch, _Count));

  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00021	50		 push	 eax
  00022	0f be 4d 10	 movsx	 ecx, BYTE PTR __Ch$[ebp]
  00026	51		 push	 ecx
  00027	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002a	52		 push	 edx
  0002b	e8 00 00 00 00	 call	 _memset
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 513  : 		}

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?assign@?$char_traits@D@std@@SAPADQADID@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADQADQBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 505  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 506  : 		return ((_Elem *)_CSTD memmove(_First1, _First2, _Count));

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  00025	51		 push	 ecx
  00026	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  00029	52		 push	 edx
  0002a	e8 00 00 00 00	 call	 _memmove
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 507  : 		}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?move@?$char_traits@D@std@@SAPADQADQBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ?find@?$char_traits@D@std@@SAPBDQBDIABD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 4
?find@?$char_traits@D@std@@SAPBDQBDIABD@Z PROC		; std::char_traits<char>::find, COMDAT

; 499  : 		{	// look for _Ch in [_First, _First + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 500  : 		return ((const _Elem *)_CSTD memchr(_First, _Ch, _Count));

  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 10	 mov	 ecx, DWORD PTR __Ch$[ebp]
  00025	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00028	52		 push	 edx
  00029	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 _memchr
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH

; 501  : 		}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?find@?$char_traits@D@std@@SAPBDQBDIABD@Z ENDP		; std::char_traits<char>::find
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADQADQBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 485  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 486  : 		return ((_Elem *)_CSTD memcpy(_First1, _First2, _Count));

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  00025	51		 push	 ecx
  00026	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  00029	52		 push	 edx
  0002a	e8 00 00 00 00	 call	 _memcpy
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 487  : 		}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIQBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIQBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 479  : 		{	// find length of null-terminated string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 480  : 		return (_CSTD strlen(_First));

  0001e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 _strlen
  00027	83 c4 04	 add	 esp, 4

; 481  : 		}

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?length@?$char_traits@D@std@@SAIQBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\iosfwd
;	COMDAT ?compare@?$char_traits@D@std@@SAHQBD0I@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?compare@?$char_traits@D@std@@SAHQBD0I@Z PROC		; std::char_traits<char>::compare, COMDAT

; 474  : 		{	// compare [_First1, _First1 + _Count) with [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 475  : 		return (_CSTD memcmp(_First1, _First2, _Count));

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  00025	51		 push	 ecx
  00026	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  00029	52		 push	 edx
  0002a	e8 00 00 00 00	 call	 _memcmp
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 476  : 		}

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?compare@?$char_traits@D@std@@SAHQBD0I@Z ENDP		; std::char_traits<char>::compare
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 91   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 92   :         (void)_Size;
; 93   :         return _Where;

  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 94   :     }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 682  : 		{	// return maximum value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 683  : 		return (INT_MAX);

  0001e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 684  : 		}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 01	 and	 eax, 1
  00031	74 0e		 je	 SHORT $LN2@scalar
  00033	6a 0c		 push	 12			; 0000000cH
  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003e	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00041	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004d	3b ec		 cmp	 ebp, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -208						; size = 4
_this$ = -8						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 88   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :         return _Data._What ? _Data._What : "Unknown exception";

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0002a	74 0e		 je	 SHORT $LN3@what
  0002c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00032	89 95 30 ff ff
	ff		 mov	 DWORD PTR tv69[ebp], edx
  00038	eb 0a		 jmp	 SHORT $LN4@what
$LN3@what:
  0003a	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception?$AA@
$LN4@what:
  00044	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv69[ebp]

; 90   :     }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 83   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 84   :         __std_exception_destroy(&_Data);

  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c0 04	 add	 eax, 4
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ___std_exception_destroy
  00038	83 c4 04	 add	 esp, 4

; 85   :     }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 66   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 65   :         : _Data()

  0002c	33 c0		 xor	 eax, eax
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	83 c1 04	 add	 ecx, 4
  00034	89 01		 mov	 DWORD PTR [ecx], eax
  00036	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 67   :         __std_exception_copy(&_Other._Data, &_Data);

  00039	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	83 c0 04	 add	 eax, 4
  0003f	50		 push	 eax
  00040	8b 4d 08	 mov	 ecx, DWORD PTR __Other$[ebp]
  00043	83 c1 04	 add	 ecx, 4
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ___std_exception_copy
  0004c	83 c4 08	 add	 esp, 8

; 68   :     }

  0004f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0005b	3b ec		 cmp	 ebp, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\program files (x86)\microsoft visual studio\2017\enterprise\vc\tools\msvc\14.11.25503\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBDH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Message$ = 8						; size = 4
___formal$ = 12						; size = 4
??0exception@std@@QAE@QBDH@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 60   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 59   :         : _Data()

  0002c	33 c0		 xor	 eax, eax
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	83 c1 04	 add	 ecx, 4
  00034	89 01		 mov	 DWORD PTR [ecx], eax
  00036	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 61   :         _Data._What = _Message;

  00039	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR __Message$[ebp]
  0003f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 62   :     }

  00042	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
??0exception@std@@QAE@QBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\corecrt_memcpy_s.h
;	COMDAT _memcpy_s
_TEXT	SEGMENT
tv79 = -232						; size = 4
tv75 = -232						; size = 4
tv66 = -232						; size = 4
__Expr_val$1 = -32					; size = 4
__Expr_val$2 = -20					; size = 4
__Expr_val$3 = -8					; size = 4
__Destination$ = 8					; size = 4
__DestinationSize$ = 12					; size = 4
__Source$ = 16						; size = 4
__SourceSize$ = 20					; size = 4
_memcpy_s PROC						; COMDAT

; 41   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 42   :         if (_SourceSize == 0)

  0001e	83 7d 14 00	 cmp	 DWORD PTR __SourceSize$[ebp], 0
  00022	75 07		 jne	 SHORT $LN2@memcpy_s

; 43   :         {
; 44   :             return 0;

  00024	33 c0		 xor	 eax, eax
  00026	e9 48 01 00 00	 jmp	 $LN1@memcpy_s
$LN2@memcpy_s:

; 45   :         }
; 46   : 
; 47   :         _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Destination != NULL, EINVAL);

  0002b	83 7d 08 00	 cmp	 DWORD PTR __Destination$[ebp], 0
  0002f	74 0c		 je	 SHORT $LN9@memcpy_s
  00031	c7 85 18 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv66[ebp], 1
  0003b	eb 0a		 jmp	 SHORT $LN10@memcpy_s
$LN9@memcpy_s:
  0003d	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv66[ebp], 0
$LN10@memcpy_s:
  00047	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR tv66[ebp]
  0004d	89 45 f8	 mov	 DWORD PTR __Expr_val$3[ebp], eax
  00050	83 7d f8 00	 cmp	 DWORD PTR __Expr_val$3[ebp], 0
  00054	75 2e		 jne	 SHORT $LN3@memcpy_s
  00056	8b f4		 mov	 esi, esp
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___errno
  0005e	3b f4		 cmp	 esi, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	c7 00 16 00 00
	00		 mov	 DWORD PTR [eax], 22	; 00000016H
  0006b	8b f4		 mov	 esi, esp
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo
  00073	3b f4		 cmp	 esi, esp
  00075	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007a	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  0007f	e9 ef 00 00 00	 jmp	 $LN1@memcpy_s
$LN3@memcpy_s:

; 48   :         if (_Source == NULL || _DestinationSize < _SourceSize)

  00084	83 7d 10 00	 cmp	 DWORD PTR __Source$[ebp], 0
  00088	74 0c		 je	 SHORT $LN5@memcpy_s
  0008a	8b 45 0c	 mov	 eax, DWORD PTR __DestinationSize$[ebp]
  0008d	3b 45 14	 cmp	 eax, DWORD PTR __SourceSize$[ebp]
  00090	0f 83 c7 00 00
	00		 jae	 $LN4@memcpy_s
$LN5@memcpy_s:

; 49   :         {
; 50   :             memset(_Destination, 0, _DestinationSize);

  00096	8b 45 0c	 mov	 eax, DWORD PTR __DestinationSize$[ebp]
  00099	50		 push	 eax
  0009a	6a 00		 push	 0
  0009c	8b 4d 08	 mov	 ecx, DWORD PTR __Destination$[ebp]
  0009f	51		 push	 ecx
  000a0	e8 00 00 00 00	 call	 _memset
  000a5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 51   : 
; 52   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Source != NULL,                 EINVAL);

  000a8	83 7d 10 00	 cmp	 DWORD PTR __Source$[ebp], 0
  000ac	74 0c		 je	 SHORT $LN11@memcpy_s
  000ae	c7 85 18 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv75[ebp], 1
  000b8	eb 0a		 jmp	 SHORT $LN12@memcpy_s
$LN11@memcpy_s:
  000ba	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv75[ebp], 0
$LN12@memcpy_s:
  000c4	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR tv75[ebp]
  000ca	89 45 ec	 mov	 DWORD PTR __Expr_val$2[ebp], eax
  000cd	83 7d ec 00	 cmp	 DWORD PTR __Expr_val$2[ebp], 0
  000d1	75 2b		 jne	 SHORT $LN6@memcpy_s
  000d3	8b f4		 mov	 esi, esp
  000d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___errno
  000db	3b f4		 cmp	 esi, esp
  000dd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e2	c7 00 16 00 00
	00		 mov	 DWORD PTR [eax], 22	; 00000016H
  000e8	8b f4		 mov	 esi, esp
  000ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo
  000f0	3b f4		 cmp	 esi, esp
  000f2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f7	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  000fc	eb 75		 jmp	 SHORT $LN1@memcpy_s
$LN6@memcpy_s:

; 53   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_DestinationSize >= _SourceSize, ERANGE);

  000fe	8b 45 0c	 mov	 eax, DWORD PTR __DestinationSize$[ebp]
  00101	3b 45 14	 cmp	 eax, DWORD PTR __SourceSize$[ebp]
  00104	72 0c		 jb	 SHORT $LN13@memcpy_s
  00106	c7 85 18 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv79[ebp], 1
  00110	eb 0a		 jmp	 SHORT $LN14@memcpy_s
$LN13@memcpy_s:
  00112	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv79[ebp], 0
$LN14@memcpy_s:
  0011c	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR tv79[ebp]
  00122	89 4d e0	 mov	 DWORD PTR __Expr_val$1[ebp], ecx
  00125	83 7d e0 00	 cmp	 DWORD PTR __Expr_val$1[ebp], 0
  00129	75 2b		 jne	 SHORT $LN7@memcpy_s
  0012b	8b f4		 mov	 esi, esp
  0012d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___errno
  00133	3b f4		 cmp	 esi, esp
  00135	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013a	c7 00 22 00 00
	00		 mov	 DWORD PTR [eax], 34	; 00000022H
  00140	8b f4		 mov	 esi, esp
  00142	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo
  00148	3b f4		 cmp	 esi, esp
  0014a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0014f	b8 22 00 00 00	 mov	 eax, 34			; 00000022H
  00154	eb 1d		 jmp	 SHORT $LN1@memcpy_s
$LN7@memcpy_s:

; 54   : 
; 55   :             // Unreachable, but required to suppress /analyze warnings:
; 56   :             return EINVAL;

  00156	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  0015b	eb 16		 jmp	 SHORT $LN1@memcpy_s
$LN4@memcpy_s:

; 57   :         }
; 58   : 
; 59   :         memcpy(_Destination, _Source, _SourceSize);

  0015d	8b 45 14	 mov	 eax, DWORD PTR __SourceSize$[ebp]
  00160	50		 push	 eax
  00161	8b 4d 10	 mov	 ecx, DWORD PTR __Source$[ebp]
  00164	51		 push	 ecx
  00165	8b 55 08	 mov	 edx, DWORD PTR __Destination$[ebp]
  00168	52		 push	 edx
  00169	e8 00 00 00 00	 call	 _memcpy
  0016e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 60   :         return 0;

  00171	33 c0		 xor	 eax, eax
$LN1@memcpy_s:

; 61   :     }

  00173	5f		 pop	 edi
  00174	5e		 pop	 esi
  00175	5b		 pop	 ebx
  00176	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  0017c	3b ec		 cmp	 ebp, esp
  0017e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00183	8b e5		 mov	 esp, ebp
  00185	5d		 pop	 ebp
  00186	c3		 ret	 0
_memcpy_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\time.h
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 534  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 535  :             return _time64(_Time);

  0001e	8b f4		 mov	 esi, esp
  00020	8b 45 08	 mov	 eax, DWORD PTR __Time$[ebp]
  00023	50		 push	 eax
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___time64
  0002a	83 c4 04	 add	 esp, 4
  0002d	3b f4		 cmp	 esi, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 536  :         }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\users\krzysztof\documents\szko³a\2017-2018\informatyka\labolatorium\ruletka\ruletka\main.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 1124 : */

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
